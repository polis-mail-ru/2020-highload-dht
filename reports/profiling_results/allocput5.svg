<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (45,587 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (36,173 samples, 79.35%)</title><rect x="10.0" y="307.0" width="936.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (36,173 samples, 79.35%)</title><rect x="10.0" y="291.0" width="936.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (36,173 samples, 79.35%)</title><rect x="10.0" y="275.0" width="936.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (447 samples, 0.98%)</title><rect x="10.0" y="259.0" width="11.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (447 samples, 0.98%)</title><rect x="10.0" y="243.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (430 samples, 0.94%)</title><rect x="10.0" y="227.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (430 samples, 0.94%)</title><rect x="10.0" y="211.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (430 samples, 0.94%)</title><rect x="10.0" y="195.0" width="11.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (17 samples, 0.04%)</title><rect x="21.1" y="227.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (17 samples, 0.04%)</title><rect x="21.1" y="211.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (17 samples, 0.04%)</title><rect x="21.1" y="195.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (17 samples, 0.04%)</title><rect x="21.1" y="179.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.1" y="190.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (17 samples, 0.04%)</title><rect x="21.1" y="163.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="24.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.run (35,726 samples, 78.37%)</title><rect x="21.6" y="259.0" width="924.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.6" y="270.0">ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.run</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (35,726 samples, 78.37%)</title><rect x="21.6" y="243.0" width="924.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.6" y="254.0">ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (585 samples, 1.28%)</title><rect x="21.6" y="227.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.6" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (585 samples, 1.28%)</title><rect x="21.6" y="211.0" width="15.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.6" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (585 samples, 1.28%)</title><rect x="21.6" y="195.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.6" y="206.0"></text>
</g>
<g>
<title>java.lang.String (404 samples, 0.89%)</title><rect x="21.6" y="179.0" width="10.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="24.6" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (181 samples, 0.40%)</title><rect x="32.0" y="179.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="35.0" y="190.0"></text>
</g>
<g>
<title>byte[] (181 samples, 0.40%)</title><rect x="32.0" y="163.0" width="4.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="35.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendProxyResponse (6,816 samples, 14.95%)</title><rect x="36.7" y="227.0" width="176.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.7" y="238.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,148 samples, 4.71%)</title><rect x="36.7" y="211.0" width="55.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.7" y="222.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,148 samples, 4.71%)</title><rect x="36.7" y="195.0" width="55.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.7" y="206.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,084 samples, 2.38%)</title><rect x="36.7" y="179.0" width="28.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="39.7" y="190.0">on..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,084 samples, 2.38%)</title><rect x="36.7" y="163.0" width="28.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.7" y="174.0">on..</text>
</g>
<g>
<title>byte[] (1,084 samples, 2.38%)</title><rect x="36.7" y="147.0" width="28.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="39.7" y="158.0">by..</text>
</g>
<g>
<title>one/nio/net/Session.write (1,064 samples, 2.33%)</title><rect x="64.8" y="179.0" width="27.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.8" y="190.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (486 samples, 1.07%)</title><rect x="64.8" y="163.0" width="12.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="67.8" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (578 samples, 1.27%)</title><rect x="77.4" y="163.0" width="14.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.4" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (578 samples, 1.27%)</title><rect x="77.4" y="147.0" width="14.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.4" y="158.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (578 samples, 1.27%)</title><rect x="77.4" y="131.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (578 samples, 1.27%)</title><rect x="77.4" y="115.0" width="14.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.4" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (578 samples, 1.27%)</title><rect x="77.4" y="99.0" width="14.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="80.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.put (4,668 samples, 10.24%)</title><rect x="92.3" y="211.0" width="120.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="95.3" y="222.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (603 samples, 1.32%)</title><rect x="92.3" y="195.0" width="15.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (603 samples, 1.32%)</title><rect x="92.3" y="179.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="95.3" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (603 samples, 1.32%)</title><rect x="92.3" y="163.0" width="15.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="95.3" y="174.0"></text>
</g>
<g>
<title>one.nio.http.Response (283 samples, 0.62%)</title><rect x="107.9" y="195.0" width="7.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="110.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,210 samples, 2.65%)</title><rect x="115.2" y="195.0" width="31.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="118.2" y="206.0">on..</text>
</g>
<g>
<title>byte[] (503 samples, 1.10%)</title><rect x="115.2" y="179.0" width="13.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="118.2" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (418 samples, 0.92%)</title><rect x="128.3" y="179.0" width="10.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="131.3" y="190.0"></text>
</g>
<g>
<title>java.lang.String (289 samples, 0.63%)</title><rect x="139.1" y="179.0" width="7.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="142.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (1,611 samples, 3.53%)</title><rect x="146.6" y="195.0" width="41.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.6" y="206.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (57 samples, 0.13%)</title><rect x="146.6" y="179.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (57 samples, 0.13%)</title><rect x="146.6" y="163.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (57 samples, 0.13%)</title><rect x="146.6" y="147.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="149.6" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (51 samples, 0.11%)</title><rect x="146.6" y="131.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.6" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (51 samples, 0.11%)</title><rect x="146.6" y="115.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="149.6" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (29 samples, 0.06%)</title><rect x="146.6" y="99.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.6" y="110.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (29 samples, 0.06%)</title><rect x="146.6" y="83.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="149.6" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (22 samples, 0.05%)</title><rect x="147.3" y="99.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="150.3" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (22 samples, 0.05%)</title><rect x="147.3" y="83.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="150.3" y="94.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (22 samples, 0.05%)</title><rect x="147.3" y="67.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="150.3" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.upsert (1,554 samples, 3.41%)</title><rect x="148.0" y="179.0" width="40.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.0" y="190.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (625 samples, 1.37%)</title><rect x="148.0" y="163.0" width="16.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="151.0" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (625 samples, 1.37%)</title><rect x="148.0" y="147.0" width="16.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="151.0" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Value (311 samples, 0.68%)</title><rect x="164.3" y="163.0" width="8.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="167.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.&lt;init&gt; (613 samples, 1.34%)</title><rect x="172.4" y="163.0" width="15.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.4" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (613 samples, 1.34%)</title><rect x="172.4" y="147.0" width="15.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.4" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (613 samples, 1.34%)</title><rect x="172.4" y="131.0" width="15.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="175.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.toByteBuffer (961 samples, 2.11%)</title><rect x="188.3" y="195.0" width="24.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="191.3" y="206.0">r..</text>
</g>
<g>
<title>java/lang/String.getBytes (326 samples, 0.72%)</title><rect x="188.3" y="179.0" width="8.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="191.3" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (326 samples, 0.72%)</title><rect x="188.3" y="163.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.3" y="174.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (326 samples, 0.72%)</title><rect x="188.3" y="147.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="191.3" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (326 samples, 0.72%)</title><rect x="188.3" y="131.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.3" y="142.0"></text>
</g>
<g>
<title>byte[] (326 samples, 0.72%)</title><rect x="188.3" y="115.0" width="8.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="191.3" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (635 samples, 1.39%)</title><rect x="196.7" y="179.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (635 samples, 1.39%)</title><rect x="196.7" y="163.0" width="16.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="199.7" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (635 samples, 1.39%)</title><rect x="196.7" y="147.0" width="16.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="199.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendReplicationResponse (28,325 samples, 62.13%)</title><rect x="213.1" y="227.0" width="733.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.1" y="238.0">ru/mail/polis/service/suhova/MoribundService.sendReplicationResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (50 samples, 0.11%)</title><rect x="213.1" y="211.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.1" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (50 samples, 0.11%)</title><rect x="213.1" y="195.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.1" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (39 samples, 0.09%)</title><rect x="213.1" y="179.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.1" y="190.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (39 samples, 0.09%)</title><rect x="213.1" y="163.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="216.1" y="174.0"></text>
</g>
<g>
<title>byte[] (39 samples, 0.09%)</title><rect x="213.1" y="147.0" width="1.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="216.1" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.02%)</title><rect x="214.2" y="179.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodesByKey (60 samples, 0.13%)</title><rect x="214.4" y="211.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodesByKey (60 samples, 0.13%)</title><rect x="214.4" y="195.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.4" y="206.0"></text>
</g>
<g>
<title>java.lang.String[] (60 samples, 0.13%)</title><rect x="214.4" y="179.0" width="1.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="217.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/Consensus.put (18 samples, 0.04%)</title><rect x="216.0" y="211.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/Consensus.simpleResponse (18 samples, 0.04%)</title><rect x="216.0" y="195.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.0" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (14 samples, 0.03%)</title><rect x="216.1" y="179.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.put (144 samples, 0.32%)</title><rect x="216.5" y="211.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.5" y="222.0"></text>
</g>
<g>
<title>one.nio.http.Response (11 samples, 0.02%)</title><rect x="216.6" y="195.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="219.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (59 samples, 0.13%)</title><rect x="216.9" y="195.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="219.9" y="206.0"></text>
</g>
<g>
<title>byte[] (20 samples, 0.04%)</title><rect x="216.9" y="179.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="219.9" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (12 samples, 0.03%)</title><rect x="217.4" y="179.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="220.4" y="190.0"></text>
</g>
<g>
<title>java.lang.String (27 samples, 0.06%)</title><rect x="217.7" y="179.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="220.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (55 samples, 0.12%)</title><rect x="218.4" y="195.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.upsert (54 samples, 0.12%)</title><rect x="218.4" y="179.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.4" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (13 samples, 0.03%)</title><rect x="218.4" y="163.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.4" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (13 samples, 0.03%)</title><rect x="218.4" y="147.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="221.4" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Value (15 samples, 0.03%)</title><rect x="218.8" y="163.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="221.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.&lt;init&gt; (26 samples, 0.06%)</title><rect x="219.2" y="163.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.2" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (26 samples, 0.06%)</title><rect x="219.2" y="147.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.2" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (26 samples, 0.06%)</title><rect x="219.2" y="131.0" width="0.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="222.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.toByteBuffer (13 samples, 0.03%)</title><rect x="219.8" y="195.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="222.8" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.03%)</title><rect x="219.9" y="179.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.03%)</title><rect x="219.9" y="163.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.9" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (12 samples, 0.03%)</title><rect x="219.9" y="147.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="222.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.getAllResponses (28,053 samples, 61.54%)</title><rect x="220.2" y="211.0" width="726.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.2" y="222.0">ru/mail/polis/service/suhova/MoribundService.getAllResponses</text>
</g>
<g>
<title>java.util.ArrayList (22 samples, 0.05%)</title><rect x="220.2" y="195.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="223.2" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (48 samples, 0.11%)</title><rect x="220.8" y="195.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.8" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (48 samples, 0.11%)</title><rect x="220.8" y="179.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.8" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (48 samples, 0.11%)</title><rect x="220.8" y="163.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.8" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (48 samples, 0.11%)</title><rect x="220.8" y="147.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.8" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (48 samples, 0.11%)</title><rect x="220.8" y="131.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.8" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (48 samples, 0.11%)</title><rect x="220.8" y="115.0" width="1.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="223.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.proxy (27,983 samples, 61.38%)</title><rect x="222.0" y="195.0" width="724.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.0" y="206.0">ru/mail/polis/service/suhova/MoribundService.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (27,983 samples, 61.38%)</title><rect x="222.0" y="179.0" width="724.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.0" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (27,983 samples, 61.38%)</title><rect x="222.0" y="163.0" width="724.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.0" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (196 samples, 0.43%)</title><rect x="222.0" y="147.0" width="5.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="225.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (26,690 samples, 58.55%)</title><rect x="227.1" y="147.0" width="690.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.1" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (6,319 samples, 13.86%)</title><rect x="227.1" y="131.0" width="163.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="230.1" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (20,126 samples, 44.15%)</title><rect x="390.6" y="131.0" width="521.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="393.6" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (245 samples, 0.54%)</title><rect x="911.6" y="131.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="914.6" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (245 samples, 0.54%)</title><rect x="911.6" y="115.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="914.6" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (245 samples, 0.54%)</title><rect x="911.6" y="99.0" width="6.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="914.6" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (225 samples, 0.49%)</title><rect x="917.9" y="147.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="920.9" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.02%)</title><rect x="918.0" y="131.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="921.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10 samples, 0.02%)</title><rect x="918.0" y="115.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="921.0" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (177 samples, 0.39%)</title><rect x="918.5" y="131.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="921.5" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (177 samples, 0.39%)</title><rect x="918.5" y="115.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="921.5" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (177 samples, 0.39%)</title><rect x="918.5" y="99.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="921.5" y="110.0"></text>
</g>
<g>
<title>char[] (92 samples, 0.20%)</title><rect x="918.5" y="83.0" width="2.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="921.5" y="94.0"></text>
</g>
<g>
<title>java.lang.String (33 samples, 0.07%)</title><rect x="920.9" y="83.0" width="0.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="923.9" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (52 samples, 0.11%)</title><rect x="921.8" y="83.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="924.8" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (52 samples, 0.11%)</title><rect x="921.8" y="67.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="924.8" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (52 samples, 0.11%)</title><rect x="921.8" y="51.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="924.8" y="62.0"></text>
</g>
<g>
<title>byte[] (52 samples, 0.11%)</title><rect x="921.8" y="35.0" width="1.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="924.8" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (10 samples, 0.02%)</title><rect x="923.1" y="131.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="926.1" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (10 samples, 0.02%)</title><rect x="923.1" y="115.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="926.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (15 samples, 0.03%)</title><rect x="923.4" y="131.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="926.4" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (15 samples, 0.03%)</title><rect x="923.4" y="115.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="926.4" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (15 samples, 0.03%)</title><rect x="923.4" y="99.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="926.4" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (10 samples, 0.02%)</title><rect x="923.5" y="83.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.5" y="94.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.02%)</title><rect x="923.5" y="67.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="926.5" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (229 samples, 0.50%)</title><rect x="923.8" y="147.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.8" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (229 samples, 0.50%)</title><rect x="923.8" y="131.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="926.8" y="142.0"></text>
</g>
<g>
<title>byte[] (229 samples, 0.50%)</title><rect x="923.8" y="115.0" width="5.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="926.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (12 samples, 0.03%)</title><rect x="929.7" y="147.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="932.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (12 samples, 0.03%)</title><rect x="929.7" y="131.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="932.7" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (12 samples, 0.03%)</title><rect x="929.7" y="115.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="932.7" y="126.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (619 samples, 1.36%)</title><rect x="930.0" y="147.0" width="16.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="933.0" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (416 samples, 0.91%)</title><rect x="930.0" y="131.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="933.0" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (416 samples, 0.91%)</title><rect x="930.0" y="115.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="933.0" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (416 samples, 0.91%)</title><rect x="930.0" y="99.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="933.0" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (416 samples, 0.91%)</title><rect x="930.0" y="83.0" width="10.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="933.0" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (203 samples, 0.45%)</title><rect x="940.8" y="131.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="943.8" y="142.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (172 samples, 0.38%)</title><rect x="940.8" y="115.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="943.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (172 samples, 0.38%)</title><rect x="940.8" y="99.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="943.8" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (172 samples, 0.38%)</title><rect x="940.8" y="83.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="943.8" y="94.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (172 samples, 0.38%)</title><rect x="940.8" y="67.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="943.8" y="78.0"></text>
</g>
<g>
<title>java.nio.channels.Channels$1 (172 samples, 0.38%)</title><rect x="940.8" y="51.0" width="4.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="943.8" y="62.0"></text>
</g>
<g>
<title>sun.nio.ch.SocketAdaptor$2 (31 samples, 0.07%)</title><rect x="945.2" y="115.0" width="0.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="948.2" y="126.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (12 samples, 0.03%)</title><rect x="946.0" y="147.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="949.0" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (12 samples, 0.03%)</title><rect x="946.0" y="131.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="949.0" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (12 samples, 0.03%)</title><rect x="946.0" y="115.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="949.0" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (12 samples, 0.03%)</title><rect x="946.0" y="99.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="949.0" y="110.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (9,414 samples, 20.65%)</title><rect x="946.3" y="307.0" width="243.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="949.3" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,096 samples, 2.40%)</title><rect x="946.3" y="291.0" width="28.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="949.3" y="302.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (450 samples, 0.99%)</title><rect x="946.3" y="275.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="949.3" y="286.0"></text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (229 samples, 0.50%)</title><rect x="946.3" y="259.0" width="6.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="949.3" y="270.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (221 samples, 0.48%)</title><rect x="952.3" y="259.0" width="5.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="955.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (646 samples, 1.42%)</title><rect x="958.0" y="275.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="961.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (646 samples, 1.42%)</title><rect x="958.0" y="259.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="961.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (646 samples, 1.42%)</title><rect x="958.0" y="243.0" width="16.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="961.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (646 samples, 1.42%)</title><rect x="958.0" y="227.0" width="16.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="961.0" y="238.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (299 samples, 0.66%)</title><rect x="958.0" y="211.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="961.0" y="222.0"></text>
</g>
<g>
<title>java.lang.Integer (299 samples, 0.66%)</title><rect x="958.0" y="195.0" width="7.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="961.0" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (347 samples, 0.76%)</title><rect x="965.7" y="211.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="968.7" y="222.0"></text>
</g>
<g>
<title>java/util/HashSet.add (347 samples, 0.76%)</title><rect x="965.7" y="195.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="968.7" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.put (347 samples, 0.76%)</title><rect x="965.7" y="179.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="968.7" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (347 samples, 0.76%)</title><rect x="965.7" y="163.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="968.7" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (347 samples, 0.76%)</title><rect x="965.7" y="147.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="968.7" y="158.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (347 samples, 0.76%)</title><rect x="965.7" y="131.0" width="9.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="968.7" y="142.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (8,318 samples, 18.25%)</title><rect x="974.7" y="291.0" width="215.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="977.7" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (8,318 samples, 18.25%)</title><rect x="974.7" y="275.0" width="215.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="977.7" y="286.0">one/nio/http/HttpSession.pro..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (7,814 samples, 17.14%)</title><rect x="974.7" y="259.0" width="202.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="977.7" y="270.0">one/nio/http/HttpSession.p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,439 samples, 3.16%)</title><rect x="974.7" y="243.0" width="37.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="977.7" y="254.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,439 samples, 3.16%)</title><rect x="974.7" y="227.0" width="37.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="977.7" y="238.0">one..</text>
</g>
<g>
<title>RequestHandler0_sendResponse.handleRequest (882 samples, 1.93%)</title><rect x="974.7" y="211.0" width="22.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="977.7" y="222.0">R..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (522 samples, 1.15%)</title><rect x="974.7" y="195.0" width="13.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="977.7" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (522 samples, 1.15%)</title><rect x="974.7" y="179.0" width="13.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="977.7" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (522 samples, 1.15%)</title><rect x="974.7" y="163.0" width="13.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="977.7" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (522 samples, 1.15%)</title><rect x="974.7" y="147.0" width="13.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="977.7" y="158.0"></text>
</g>
<g>
<title>java.lang.String (246 samples, 0.54%)</title><rect x="974.7" y="131.0" width="6.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="977.7" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (276 samples, 0.61%)</title><rect x="981.1" y="131.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="984.1" y="142.0"></text>
</g>
<g>
<title>byte[] (276 samples, 0.61%)</title><rect x="981.1" y="115.0" width="7.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="984.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendResponse (360 samples, 0.79%)</title><rect x="988.2" y="195.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="991.2" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/968868247.linkToTargetMethod (345 samples, 0.76%)</title><rect x="988.2" y="179.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="991.2" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (345 samples, 0.76%)</title><rect x="988.2" y="163.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="991.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.get$Lambda (345 samples, 0.76%)</title><rect x="988.2" y="147.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="991.2" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.suhova.MoribundService$$Lambda$72 (345 samples, 0.76%)</title><rect x="988.2" y="131.0" width="8.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="991.2" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (15 samples, 0.03%)</title><rect x="997.1" y="179.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1000.1" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (557 samples, 1.22%)</title><rect x="997.5" y="211.0" width="14.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1000.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (557 samples, 1.22%)</title><rect x="997.5" y="195.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1000.5" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (557 samples, 1.22%)</title><rect x="997.5" y="179.0" width="14.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1000.5" y="190.0"></text>
</g>
<g>
<title>java.lang.String (247 samples, 0.54%)</title><rect x="997.5" y="163.0" width="6.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1000.5" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (310 samples, 0.68%)</title><rect x="1003.9" y="163.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1006.9" y="174.0"></text>
</g>
<g>
<title>byte[] (310 samples, 0.68%)</title><rect x="1003.9" y="147.0" width="8.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1006.9" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2,636 samples, 5.78%)</title><rect x="1011.9" y="243.0" width="68.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1014.9" y="254.0">one/nio..</text>
</g>
<g>
<title>one.nio.http.Request (398 samples, 0.87%)</title><rect x="1011.9" y="227.0" width="10.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1014.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (895 samples, 1.96%)</title><rect x="1022.2" y="227.0" width="23.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1025.2" y="238.0">o..</text>
</g>
<g>
<title>java.lang.String[] (895 samples, 1.96%)</title><rect x="1022.2" y="211.0" width="23.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1025.2" y="222.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,343 samples, 2.95%)</title><rect x="1045.4" y="227.0" width="34.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1048.4" y="238.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,343 samples, 2.95%)</title><rect x="1045.4" y="211.0" width="34.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1048.4" y="222.0">on..</text>
</g>
<g>
<title>char[] (668 samples, 1.47%)</title><rect x="1045.4" y="195.0" width="17.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1048.4" y="206.0"></text>
</g>
<g>
<title>java.lang.String (246 samples, 0.54%)</title><rect x="1062.7" y="195.0" width="6.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1065.7" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (429 samples, 0.94%)</title><rect x="1069.1" y="195.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1072.1" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (429 samples, 0.94%)</title><rect x="1069.1" y="179.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1072.1" y="190.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (429 samples, 0.94%)</title><rect x="1069.1" y="163.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1072.1" y="174.0"></text>
</g>
<g>
<title>byte[] (429 samples, 0.94%)</title><rect x="1069.1" y="147.0" width="11.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1072.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (326 samples, 0.72%)</title><rect x="1080.2" y="243.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1083.2" y="254.0"></text>
</g>
<g>
<title>byte[] (326 samples, 0.72%)</title><rect x="1080.2" y="227.0" width="8.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1083.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (526 samples, 1.15%)</title><rect x="1088.6" y="243.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1091.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (526 samples, 1.15%)</title><rect x="1088.6" y="227.0" width="13.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1091.6" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (526 samples, 1.15%)</title><rect x="1088.6" y="211.0" width="13.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1091.6" y="222.0"></text>
</g>
<g>
<title>java.lang.String (255 samples, 0.56%)</title><rect x="1088.6" y="195.0" width="6.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1091.6" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (271 samples, 0.59%)</title><rect x="1095.2" y="195.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1098.2" y="206.0"></text>
</g>
<g>
<title>byte[] (271 samples, 0.59%)</title><rect x="1095.2" y="179.0" width="7.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1098.2" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,887 samples, 6.33%)</title><rect x="1102.2" y="243.0" width="74.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1105.2" y="254.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,887 samples, 6.33%)</title><rect x="1102.2" y="227.0" width="74.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1105.2" y="238.0">one/nio/..</text>
</g>
<g>
<title>char[] (1,371 samples, 3.01%)</title><rect x="1102.2" y="211.0" width="35.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1105.2" y="222.0">cha..</text>
</g>
<g>
<title>java.lang.String (627 samples, 1.38%)</title><rect x="1137.7" y="211.0" width="16.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1140.7" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (889 samples, 1.95%)</title><rect x="1153.9" y="211.0" width="23.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1156.9" y="222.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (889 samples, 1.95%)</title><rect x="1153.9" y="195.0" width="23.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1156.9" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (889 samples, 1.95%)</title><rect x="1153.9" y="179.0" width="23.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1156.9" y="190.0">j..</text>
</g>
<g>
<title>byte[] (889 samples, 1.95%)</title><rect x="1153.9" y="163.0" width="23.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1156.9" y="174.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.read (504 samples, 1.11%)</title><rect x="1177.0" y="259.0" width="13.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1180.0" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (504 samples, 1.11%)</title><rect x="1177.0" y="243.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1180.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (504 samples, 1.11%)</title><rect x="1177.0" y="227.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1180.0" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (504 samples, 1.11%)</title><rect x="1177.0" y="211.0" width="13.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1180.0" y="222.0"></text>
</g>
</g>
</svg>
