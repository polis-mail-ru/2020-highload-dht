<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="325"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="325"> </text>
<g id="frames">
<g>
<title>all (15,814 samples, 100.00%)</title><rect x="10.0" y="291.0" width="1180.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.0" y="302.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (11,082 samples, 70.08%)</title><rect x="10.0" y="275.0" width="826.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (11,082 samples, 70.08%)</title><rect x="10.0" y="259.0" width="826.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (11,082 samples, 70.08%)</title><rect x="10.0" y="243.0" width="826.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="254.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (153 samples, 0.97%)</title><rect x="10.0" y="227.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (153 samples, 0.97%)</title><rect x="10.0" y="211.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (149 samples, 0.94%)</title><rect x="10.0" y="195.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (149 samples, 0.94%)</title><rect x="10.0" y="179.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (149 samples, 0.94%)</title><rect x="10.0" y="163.0" width="11.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.03%)</title><rect x="21.1" y="195.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.03%)</title><rect x="21.1" y="179.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (4 samples, 0.03%)</title><rect x="21.1" y="163.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.03%)</title><rect x="21.1" y="147.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.1" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (4 samples, 0.03%)</title><rect x="21.1" y="131.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="24.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$73/1096742976.run (10,929 samples, 69.11%)</title><rect x="21.4" y="227.0" width="815.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.4" y="238.0">ru/mail/polis/service/suhova/MoribundService$$Lambda$73/1096742976.run</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (10,929 samples, 69.11%)</title><rect x="21.4" y="211.0" width="815.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.4" y="222.0">ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (544 samples, 3.44%)</title><rect x="21.4" y="195.0" width="40.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.4" y="206.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (544 samples, 3.44%)</title><rect x="21.4" y="179.0" width="40.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.4" y="190.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (372 samples, 2.35%)</title><rect x="21.4" y="163.0" width="27.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.4" y="174.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (372 samples, 2.35%)</title><rect x="21.4" y="147.0" width="27.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.4" y="158.0">o..</text>
</g>
<g>
<title>byte[] (372 samples, 2.35%)</title><rect x="21.4" y="131.0" width="27.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="24.4" y="142.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.write (172 samples, 1.09%)</title><rect x="49.2" y="163.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.2" y="174.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (172 samples, 1.09%)</title><rect x="49.2" y="147.0" width="12.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="52.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (2,978 samples, 18.83%)</title><rect x="62.0" y="195.0" width="222.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.0" y="206.0">ru/mail/polis/dao/suhova/Rend..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (2,978 samples, 18.83%)</title><rect x="62.0" y="179.0" width="222.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.0" y="190.0">ru/mail/polis/dao/suhova/Rend..</text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (463 samples, 2.93%)</title><rect x="62.0" y="163.0" width="34.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.0" y="174.0">co..</text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.makeHash (463 samples, 2.93%)</title><rect x="62.0" y="147.0" width="34.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.0" y="158.0">co..</text>
</g>
<g>
<title>byte[] (463 samples, 2.93%)</title><rect x="62.0" y="131.0" width="34.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="65.0" y="142.0">by..</text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (1,872 samples, 11.84%)</title><rect x="96.6" y="163.0" width="139.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="99.6" y="174.0">com/google/common..</text>
</g>
<g>
<title>com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher (675 samples, 4.27%)</title><rect x="96.6" y="147.0" width="50.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="99.6" y="158.0">com.g..</text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (1,197 samples, 7.57%)</title><rect x="146.9" y="147.0" width="89.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="149.9" y="158.0">com/google..</text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (1,197 samples, 7.57%)</title><rect x="146.9" y="131.0" width="89.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.9" y="142.0">com/google..</text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (1,197 samples, 7.57%)</title><rect x="146.9" y="115.0" width="89.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.9" y="126.0">com/google..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,197 samples, 7.57%)</title><rect x="146.9" y="99.0" width="89.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="149.9" y="110.0">java/nio/B..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (648 samples, 4.10%)</title><rect x="146.9" y="83.0" width="48.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="149.9" y="94.0">java..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (549 samples, 3.47%)</title><rect x="195.3" y="83.0" width="40.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="198.3" y="94.0">jav..</text>
</g>
<g>
<title>byte[] (549 samples, 3.47%)</title><rect x="195.3" y="67.0" width="40.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="198.3" y="78.0">byt..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (643 samples, 4.07%)</title><rect x="236.2" y="163.0" width="48.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.2" y="174.0">java..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1254344205.invoke (643 samples, 4.07%)</title><rect x="236.2" y="147.0" width="48.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.2" y="158.0">java..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (643 samples, 4.07%)</title><rect x="236.2" y="131.0" width="48.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.2" y="142.0">java..</text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (643 samples, 4.07%)</title><rect x="236.2" y="115.0" width="48.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.2" y="126.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (643 samples, 4.07%)</title><rect x="236.2" y="99.0" width="48.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.2" y="110.0">jdk/..</text>
</g>
<g>
<title>byte[] (643 samples, 4.07%)</title><rect x="236.2" y="83.0" width="48.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="239.2" y="94.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.proxy (5,991 samples, 37.88%)</title><rect x="284.2" y="195.0" width="447.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.2" y="206.0">ru/mail/polis/service/suhova/MoribundService.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (5,991 samples, 37.88%)</title><rect x="284.2" y="179.0" width="447.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.2" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (5,991 samples, 37.88%)</title><rect x="284.2" y="163.0" width="447.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.2" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (15 samples, 0.09%)</title><rect x="284.2" y="147.0" width="1.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="287.2" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (5,655 samples, 35.76%)</title><rect x="285.3" y="147.0" width="422.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="288.3" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (1,887 samples, 11.93%)</title><rect x="285.3" y="131.0" width="140.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="288.3" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (3,641 samples, 23.02%)</title><rect x="426.1" y="131.0" width="271.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="429.1" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (127 samples, 0.80%)</title><rect x="697.8" y="131.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="700.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (127 samples, 0.80%)</title><rect x="697.8" y="115.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="700.8" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (127 samples, 0.80%)</title><rect x="697.8" y="99.0" width="9.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="700.8" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (171 samples, 1.08%)</title><rect x="707.3" y="147.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="710.3" y="158.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.06%)</title><rect x="707.3" y="131.0" width="0.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="710.3" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.06%)</title><rect x="708.0" y="131.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="711.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10 samples, 0.06%)</title><rect x="708.0" y="115.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="711.0" y="126.0"></text>
</g>
<g>
<title>java.lang.String (4 samples, 0.03%)</title><rect x="708.0" y="99.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="711.0" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.04%)</title><rect x="708.3" y="99.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="711.3" y="110.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.04%)</title><rect x="708.3" y="83.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="711.3" y="94.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (131 samples, 0.83%)</title><rect x="709.0" y="131.0" width="9.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="712.0" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (131 samples, 0.83%)</title><rect x="709.0" y="115.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="712.0" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (131 samples, 0.83%)</title><rect x="709.0" y="99.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.0" y="110.0"></text>
</g>
<g>
<title>char[] (72 samples, 0.46%)</title><rect x="709.0" y="83.0" width="5.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="712.0" y="94.0"></text>
</g>
<g>
<title>java.lang.String (30 samples, 0.19%)</title><rect x="714.4" y="83.0" width="2.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="717.4" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (29 samples, 0.18%)</title><rect x="716.6" y="83.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.6" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (29 samples, 0.18%)</title><rect x="716.6" y="67.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="719.6" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (29 samples, 0.18%)</title><rect x="716.6" y="51.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="719.6" y="62.0"></text>
</g>
<g>
<title>byte[] (29 samples, 0.18%)</title><rect x="716.6" y="35.0" width="2.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="719.6" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.03%)</title><rect x="718.8" y="131.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="721.8" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (5 samples, 0.03%)</title><rect x="718.8" y="115.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="721.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (12 samples, 0.08%)</title><rect x="719.2" y="131.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="722.2" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (12 samples, 0.08%)</title><rect x="719.2" y="115.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="722.2" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (12 samples, 0.08%)</title><rect x="719.2" y="99.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="722.2" y="110.0"></text>
</g>
<g>
<title>java.lang.String (7 samples, 0.04%)</title><rect x="719.2" y="83.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="722.2" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.03%)</title><rect x="719.7" y="83.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="722.7" y="94.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.03%)</title><rect x="719.7" y="67.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="722.7" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (90 samples, 0.57%)</title><rect x="720.1" y="147.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="723.1" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (90 samples, 0.57%)</title><rect x="720.1" y="131.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="723.1" y="142.0"></text>
</g>
<g>
<title>byte[] (90 samples, 0.57%)</title><rect x="720.1" y="115.0" width="6.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="723.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (8 samples, 0.05%)</title><rect x="726.8" y="147.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="729.8" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.05%)</title><rect x="726.8" y="131.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="729.8" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.05%)</title><rect x="726.8" y="115.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="729.8" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.04%)</title><rect x="726.9" y="99.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="729.9" y="110.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.04%)</title><rect x="726.9" y="83.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="729.9" y="94.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (48 samples, 0.30%)</title><rect x="727.4" y="147.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.4" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (23 samples, 0.15%)</title><rect x="727.4" y="131.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (23 samples, 0.15%)</title><rect x="727.4" y="115.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="730.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (23 samples, 0.15%)</title><rect x="727.4" y="99.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="730.4" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (23 samples, 0.15%)</title><rect x="727.4" y="83.0" width="1.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="730.4" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (25 samples, 0.16%)</title><rect x="729.1" y="131.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="732.1" y="142.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (13 samples, 0.08%)</title><rect x="729.1" y="115.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="732.1" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (13 samples, 0.08%)</title><rect x="729.1" y="99.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="732.1" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (13 samples, 0.08%)</title><rect x="729.1" y="83.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="732.1" y="94.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (13 samples, 0.08%)</title><rect x="729.1" y="67.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.1" y="78.0"></text>
</g>
<g>
<title>java.nio.channels.Channels$1 (13 samples, 0.08%)</title><rect x="729.1" y="51.0" width="1.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="732.1" y="62.0"></text>
</g>
<g>
<title>sun.nio.ch.SocketAdaptor$2 (12 samples, 0.08%)</title><rect x="730.1" y="115.0" width="0.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="733.1" y="126.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (4 samples, 0.03%)</title><rect x="731.0" y="147.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="734.0" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (4 samples, 0.03%)</title><rect x="731.0" y="131.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="734.0" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (4 samples, 0.03%)</title><rect x="731.0" y="115.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="734.0" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (4 samples, 0.03%)</title><rect x="731.0" y="99.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="734.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.put (1,416 samples, 8.95%)</title><rect x="731.3" y="195.0" width="105.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="734.3" y="206.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (170 samples, 1.07%)</title><rect x="731.3" y="179.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="734.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (170 samples, 1.07%)</title><rect x="731.3" y="163.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="734.3" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (170 samples, 1.07%)</title><rect x="731.3" y="147.0" width="12.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="734.3" y="158.0"></text>
</g>
<g>
<title>one.nio.http.Response (97 samples, 0.61%)</title><rect x="743.9" y="179.0" width="7.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="746.9" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (377 samples, 2.38%)</title><rect x="751.2" y="179.0" width="28.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="754.2" y="190.0">on..</text>
</g>
<g>
<title>byte[] (151 samples, 0.95%)</title><rect x="751.2" y="163.0" width="11.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="754.2" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (128 samples, 0.81%)</title><rect x="762.4" y="163.0" width="9.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="765.4" y="174.0"></text>
</g>
<g>
<title>java.lang.String (98 samples, 0.62%)</title><rect x="772.0" y="163.0" width="7.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="775.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (501 samples, 3.17%)</title><rect x="779.3" y="179.0" width="37.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="782.3" y="190.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (11 samples, 0.07%)</title><rect x="779.3" y="163.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="782.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (11 samples, 0.07%)</title><rect x="779.3" y="147.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="782.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (11 samples, 0.07%)</title><rect x="779.3" y="131.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="782.3" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.07%)</title><rect x="779.3" y="115.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="782.3" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (11 samples, 0.07%)</title><rect x="779.3" y="99.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="782.3" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.03%)</title><rect x="779.3" y="83.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="782.3" y="94.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (5 samples, 0.03%)</title><rect x="779.3" y="67.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="782.3" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (6 samples, 0.04%)</title><rect x="779.7" y="83.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="782.7" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (6 samples, 0.04%)</title><rect x="779.7" y="67.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="782.7" y="78.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (6 samples, 0.04%)</title><rect x="779.7" y="51.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="782.7" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.upsert (490 samples, 3.10%)</title><rect x="780.1" y="163.0" width="36.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="783.1" y="174.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (193 samples, 1.22%)</title><rect x="780.1" y="147.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="783.1" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (193 samples, 1.22%)</title><rect x="780.1" y="131.0" width="14.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="783.1" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Value (91 samples, 0.58%)</title><rect x="794.5" y="147.0" width="6.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="797.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.&lt;init&gt; (206 samples, 1.30%)</title><rect x="801.3" y="147.0" width="15.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="804.3" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (206 samples, 1.30%)</title><rect x="801.3" y="131.0" width="15.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="804.3" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (206 samples, 1.30%)</title><rect x="801.3" y="115.0" width="15.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="804.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteBuffer (271 samples, 1.71%)</title><rect x="816.7" y="179.0" width="20.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="819.7" y="190.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (80 samples, 0.51%)</title><rect x="816.7" y="163.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="819.7" y="174.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (80 samples, 0.51%)</title><rect x="816.7" y="147.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="819.7" y="158.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (80 samples, 0.51%)</title><rect x="816.7" y="131.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="819.7" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (80 samples, 0.51%)</title><rect x="816.7" y="115.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="819.7" y="126.0"></text>
</g>
<g>
<title>byte[] (80 samples, 0.51%)</title><rect x="816.7" y="99.0" width="6.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="819.7" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (191 samples, 1.21%)</title><rect x="822.7" y="163.0" width="14.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="825.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (191 samples, 1.21%)</title><rect x="822.7" y="147.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="825.7" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (191 samples, 1.21%)</title><rect x="822.7" y="131.0" width="14.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="825.7" y="142.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (4,732 samples, 29.92%)</title><rect x="836.9" y="275.0" width="353.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="839.9" y="286.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (533 samples, 3.37%)</title><rect x="836.9" y="259.0" width="39.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="839.9" y="270.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (227 samples, 1.44%)</title><rect x="836.9" y="243.0" width="16.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="839.9" y="254.0"></text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (110 samples, 0.70%)</title><rect x="836.9" y="227.0" width="8.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="839.9" y="238.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (117 samples, 0.74%)</title><rect x="845.1" y="227.0" width="8.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="848.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (306 samples, 1.93%)</title><rect x="853.8" y="243.0" width="22.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="856.8" y="254.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (306 samples, 1.93%)</title><rect x="853.8" y="227.0" width="22.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="856.8" y="238.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (306 samples, 1.93%)</title><rect x="853.8" y="211.0" width="22.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="856.8" y="222.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (306 samples, 1.93%)</title><rect x="853.8" y="195.0" width="22.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="856.8" y="206.0">s..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (103 samples, 0.65%)</title><rect x="853.8" y="179.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="856.8" y="190.0"></text>
</g>
<g>
<title>java.lang.Integer (103 samples, 0.65%)</title><rect x="853.8" y="163.0" width="7.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="856.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (203 samples, 1.28%)</title><rect x="861.5" y="179.0" width="15.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="864.5" y="190.0"></text>
</g>
<g>
<title>java/util/HashSet.add (203 samples, 1.28%)</title><rect x="861.5" y="163.0" width="15.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="864.5" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.put (203 samples, 1.28%)</title><rect x="861.5" y="147.0" width="15.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="864.5" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (203 samples, 1.28%)</title><rect x="861.5" y="131.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="864.5" y="142.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (203 samples, 1.28%)</title><rect x="861.5" y="115.0" width="15.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="864.5" y="126.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (203 samples, 1.28%)</title><rect x="861.5" y="99.0" width="15.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="864.5" y="110.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (4,199 samples, 26.55%)</title><rect x="876.7" y="259.0" width="313.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="879.7" y="270.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (4,199 samples, 26.55%)</title><rect x="876.7" y="243.0" width="313.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="879.7" y="254.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3,931 samples, 24.86%)</title><rect x="876.7" y="227.0" width="293.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="879.7" y="238.0">one/nio/http/HttpSession.processHttpBuf..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (786 samples, 4.97%)</title><rect x="876.7" y="211.0" width="58.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="879.7" y="222.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (786 samples, 4.97%)</title><rect x="876.7" y="195.0" width="58.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="879.7" y="206.0">one/ni..</text>
</g>
<g>
<title>RequestHandler0_sendResponse.handleRequest (462 samples, 2.92%)</title><rect x="876.7" y="179.0" width="34.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="879.7" y="190.0">Re..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (277 samples, 1.75%)</title><rect x="876.7" y="163.0" width="20.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="879.7" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (277 samples, 1.75%)</title><rect x="876.7" y="147.0" width="20.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="879.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (277 samples, 1.75%)</title><rect x="876.7" y="131.0" width="20.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="879.7" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (277 samples, 1.75%)</title><rect x="876.7" y="115.0" width="20.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="879.7" y="126.0"></text>
</g>
<g>
<title>java.lang.String (151 samples, 0.95%)</title><rect x="876.7" y="99.0" width="11.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="879.7" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (126 samples, 0.80%)</title><rect x="887.9" y="99.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="890.9" y="110.0"></text>
</g>
<g>
<title>byte[] (126 samples, 0.80%)</title><rect x="887.9" y="83.0" width="9.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="890.9" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendResponse (185 samples, 1.17%)</title><rect x="897.4" y="163.0" width="13.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="900.4" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (180 samples, 1.14%)</title><rect x="897.4" y="147.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="900.4" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (180 samples, 1.14%)</title><rect x="897.4" y="131.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="900.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$73/1096742976.get$Lambda (180 samples, 1.14%)</title><rect x="897.4" y="115.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.4" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.service.suhova.MoribundService$$Lambda$73 (180 samples, 1.14%)</title><rect x="897.4" y="99.0" width="13.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="900.4" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.03%)</title><rect x="910.8" y="147.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="913.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (5 samples, 0.03%)</title><rect x="910.8" y="131.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="913.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.03%)</title><rect x="910.8" y="115.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="913.8" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.03%)</title><rect x="910.8" y="99.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="913.8" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (5 samples, 0.03%)</title><rect x="910.8" y="83.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="913.8" y="94.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (5 samples, 0.03%)</title><rect x="910.8" y="67.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="913.8" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (324 samples, 2.05%)</title><rect x="911.2" y="179.0" width="24.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="914.2" y="190.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (324 samples, 2.05%)</title><rect x="911.2" y="163.0" width="24.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="914.2" y="174.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (324 samples, 2.05%)</title><rect x="911.2" y="147.0" width="24.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="914.2" y="158.0">j..</text>
</g>
<g>
<title>java.lang.String (142 samples, 0.90%)</title><rect x="911.2" y="131.0" width="10.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="914.2" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (182 samples, 1.15%)</title><rect x="921.8" y="131.0" width="13.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="924.8" y="142.0"></text>
</g>
<g>
<title>byte[] (182 samples, 1.15%)</title><rect x="921.8" y="115.0" width="13.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="924.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1,368 samples, 8.65%)</title><rect x="935.3" y="211.0" width="102.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="938.3" y="222.0">one/nio/http..</text>
</g>
<g>
<title>one.nio.http.Request (228 samples, 1.44%)</title><rect x="935.3" y="195.0" width="17.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="938.3" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (427 samples, 2.70%)</title><rect x="952.3" y="195.0" width="31.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="955.3" y="206.0">on..</text>
</g>
<g>
<title>java.lang.String[] (427 samples, 2.70%)</title><rect x="952.3" y="179.0" width="31.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="955.3" y="190.0">ja..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (713 samples, 4.51%)</title><rect x="984.2" y="195.0" width="53.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="987.2" y="206.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (713 samples, 4.51%)</title><rect x="984.2" y="179.0" width="53.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="987.2" y="190.0">one/n..</text>
</g>
<g>
<title>char[] (386 samples, 2.44%)</title><rect x="984.2" y="163.0" width="28.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="987.2" y="174.0">ch..</text>
</g>
<g>
<title>java.lang.String (139 samples, 0.88%)</title><rect x="1013.0" y="163.0" width="10.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1016.0" y="174.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (188 samples, 1.19%)</title><rect x="1023.4" y="163.0" width="14.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1026.4" y="174.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (188 samples, 1.19%)</title><rect x="1023.4" y="147.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1026.4" y="158.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (188 samples, 1.19%)</title><rect x="1023.4" y="131.0" width="14.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1026.4" y="142.0"></text>
</g>
<g>
<title>byte[] (188 samples, 1.19%)</title><rect x="1023.4" y="115.0" width="14.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1026.4" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (184 samples, 1.16%)</title><rect x="1037.4" y="211.0" width="13.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1040.4" y="222.0"></text>
</g>
<g>
<title>byte[] (184 samples, 1.16%)</title><rect x="1037.4" y="195.0" width="13.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1040.4" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (237 samples, 1.50%)</title><rect x="1051.1" y="211.0" width="17.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1054.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (237 samples, 1.50%)</title><rect x="1051.1" y="195.0" width="17.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1054.1" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (237 samples, 1.50%)</title><rect x="1051.1" y="179.0" width="17.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1054.1" y="190.0"></text>
</g>
<g>
<title>java.lang.String (138 samples, 0.87%)</title><rect x="1051.1" y="163.0" width="10.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1054.1" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (99 samples, 0.63%)</title><rect x="1061.4" y="163.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1064.4" y="174.0"></text>
</g>
<g>
<title>byte[] (99 samples, 0.63%)</title><rect x="1061.4" y="147.0" width="7.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1064.4" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,356 samples, 8.57%)</title><rect x="1068.8" y="211.0" width="101.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1071.8" y="222.0">one/nio/util..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,356 samples, 8.57%)</title><rect x="1068.8" y="195.0" width="101.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1071.8" y="206.0">one/nio/util..</text>
</g>
<g>
<title>char[] (645 samples, 4.08%)</title><rect x="1068.8" y="179.0" width="48.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1071.8" y="190.0">char[]</text>
</g>
<g>
<title>java.lang.String (270 samples, 1.71%)</title><rect x="1116.9" y="179.0" width="20.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1119.9" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (441 samples, 2.79%)</title><rect x="1137.1" y="179.0" width="32.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1140.1" y="190.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (441 samples, 2.79%)</title><rect x="1137.1" y="163.0" width="32.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1140.1" y="174.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (441 samples, 2.79%)</title><rect x="1137.1" y="147.0" width="32.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1140.1" y="158.0">ja..</text>
</g>
<g>
<title>byte[] (441 samples, 2.79%)</title><rect x="1137.1" y="131.0" width="32.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1140.1" y="142.0">by..</text>
</g>
<g>
<title>one/nio/net/Session.read (268 samples, 1.69%)</title><rect x="1170.0" y="227.0" width="20.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1173.0" y="238.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (268 samples, 1.69%)</title><rect x="1170.0" y="211.0" width="20.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1173.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (268 samples, 1.69%)</title><rect x="1170.0" y="195.0" width="20.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1173.0" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (268 samples, 1.69%)</title><rect x="1170.0" y="179.0" width="20.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1173.0" y="190.0"></text>
</g>
</g>
</svg>
