<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="405"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="405"> </text>
<g id="frames">
<g>
<title>all (580 samples, 100.00%)</title><rect x="10.0" y="371.0" width="1180.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="382.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (580 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="366.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (25 samples, 4.31%)</title><rect x="10.0" y="339.0" width="50.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="350.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (17 samples, 2.93%)</title><rect x="10.0" y="323.0" width="34.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="334.0">on..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (8 samples, 1.38%)</title><rect x="10.0" y="307.0" width="16.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (9 samples, 1.55%)</title><rect x="26.3" y="307.0" width="18.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="29.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (8 samples, 1.38%)</title><rect x="44.6" y="323.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (8 samples, 1.38%)</title><rect x="44.6" y="307.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (8 samples, 1.38%)</title><rect x="44.6" y="291.0" width="16.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (8 samples, 1.38%)</title><rect x="44.6" y="275.0" width="16.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (8 samples, 1.38%)</title><rect x="44.6" y="259.0" width="16.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.6" y="270.0"></text>
</g>
<g>
<title>java/util/HashSet.add (8 samples, 1.38%)</title><rect x="44.6" y="243.0" width="16.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.6" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 1.38%)</title><rect x="44.6" y="227.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.6" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 1.38%)</title><rect x="44.6" y="211.0" width="16.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.6" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 1.38%)</title><rect x="44.6" y="195.0" width="16.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.6" y="206.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (8 samples, 1.38%)</title><rect x="44.6" y="179.0" width="16.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="47.6" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (555 samples, 95.69%)</title><rect x="60.9" y="339.0" width="1129.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="63.9" y="350.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (555 samples, 95.69%)</title><rect x="60.9" y="323.0" width="1129.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="63.9" y="334.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (555 samples, 95.69%)</title><rect x="60.9" y="307.0" width="1129.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.9" y="318.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (438 samples, 75.52%)</title><rect x="60.9" y="291.0" width="891.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.9" y="302.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (438 samples, 75.52%)</title><rect x="60.9" y="275.0" width="891.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.9" y="286.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (427 samples, 73.62%)</title><rect x="60.9" y="259.0" width="868.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.9" y="270.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (44 samples, 7.59%)</title><rect x="60.9" y="243.0" width="89.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.9" y="254.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (44 samples, 7.59%)</title><rect x="60.9" y="227.0" width="89.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="63.9" y="238.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (26 samples, 4.48%)</title><rect x="60.9" y="211.0" width="52.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="63.9" y="222.0">one/n..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (26 samples, 4.48%)</title><rect x="60.9" y="195.0" width="52.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.9" y="206.0">one/n..</text>
</g>
<g>
<title>byte[] (26 samples, 4.48%)</title><rect x="60.9" y="179.0" width="52.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="63.9" y="190.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 3.10%)</title><rect x="113.8" y="211.0" width="36.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.8" y="222.0">one..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (18 samples, 3.10%)</title><rect x="113.8" y="195.0" width="36.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="116.8" y="206.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (15 samples, 2.59%)</title><rect x="150.4" y="243.0" width="30.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.4" y="254.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (15 samples, 2.59%)</title><rect x="150.4" y="227.0" width="30.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="153.4" y="238.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (15 samples, 2.59%)</title><rect x="150.4" y="211.0" width="30.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="153.4" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (15 samples, 2.59%)</title><rect x="150.4" y="195.0" width="30.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.4" y="206.0">ja..</text>
</g>
<g>
<title>java.lang.String (9 samples, 1.55%)</title><rect x="150.4" y="179.0" width="18.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="153.4" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 1.03%)</title><rect x="168.7" y="179.0" width="12.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.7" y="190.0"></text>
</g>
<g>
<title>byte[] (6 samples, 1.03%)</title><rect x="168.7" y="163.0" width="12.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="171.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.get (368 samples, 63.45%)</title><rect x="180.9" y="243.0" width="748.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.9" y="254.0">ru/mail/polis/service/suhova/MoribundService.get</text>
</g>
<g>
<title>one.nio.http.Response (12 samples, 2.07%)</title><rect x="180.9" y="227.0" width="24.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="183.9" y="238.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (29 samples, 5.00%)</title><rect x="205.3" y="227.0" width="59.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.3" y="238.0">one/ni..</text>
</g>
<g>
<title>byte[] (15 samples, 2.59%)</title><rect x="205.3" y="211.0" width="30.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="208.3" y="222.0">by..</text>
</g>
<g>
<title>java.lang.String[] (7 samples, 1.21%)</title><rect x="235.8" y="211.0" width="14.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="238.8" y="222.0"></text>
</g>
<g>
<title>java.lang.String (7 samples, 1.21%)</title><rect x="250.1" y="211.0" width="14.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="253.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (291 samples, 50.17%)</title><rect x="264.3" y="227.0" width="592.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.3" y="238.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (61 samples, 10.52%)</title><rect x="264.3" y="211.0" width="124.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.3" y="222.0">com/google/comm..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (61 samples, 10.52%)</title><rect x="264.3" y="195.0" width="124.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.3" y="206.0">com/google/comm..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (61 samples, 10.52%)</title><rect x="264.3" y="179.0" width="124.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.3" y="190.0">com/google/comm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (61 samples, 10.52%)</title><rect x="264.3" y="163.0" width="124.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.3" y="174.0">com/google/comm..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (61 samples, 10.52%)</title><rect x="264.3" y="147.0" width="124.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.3" y="158.0">ru/mail/polis/d..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (18 samples, 3.10%)</title><rect x="264.3" y="131.0" width="36.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.3" y="142.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (18 samples, 3.10%)</title><rect x="264.3" y="115.0" width="36.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.3" y="126.0">com..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (18 samples, 3.10%)</title><rect x="264.3" y="99.0" width="36.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.3" y="110.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (11 samples, 1.90%)</title><rect x="264.3" y="83.0" width="22.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.3" y="94.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$66/1213948177.apply (11 samples, 1.90%)</title><rect x="264.3" y="67.0" width="22.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.3" y="78.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (11 samples, 1.90%)</title><rect x="264.3" y="51.0" width="22.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.3" y="62.0">r..</text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Cell (11 samples, 1.90%)</title><rect x="264.3" y="35.0" width="22.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="267.3" y="46.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (7 samples, 1.21%)</title><rect x="286.7" y="83.0" width="14.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.7" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (7 samples, 1.21%)</title><rect x="286.7" y="67.0" width="14.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.7" y="78.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (7 samples, 1.21%)</title><rect x="286.7" y="51.0" width="14.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="289.7" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$69/47536927.apply (43 samples, 7.41%)</title><rect x="300.9" y="131.0" width="87.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.9" y="142.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (43 samples, 7.41%)</title><rect x="300.9" y="115.0" width="87.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.9" y="126.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (43 samples, 7.41%)</title><rect x="300.9" y="99.0" width="87.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="303.9" y="110.0">java/nio/H..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (43 samples, 7.41%)</title><rect x="300.9" y="83.0" width="87.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="303.9" y="94.0">java.nio.H..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (39 samples, 6.72%)</title><rect x="388.4" y="211.0" width="79.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.4" y="222.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (39 samples, 6.72%)</title><rect x="388.4" y="195.0" width="79.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="391.4" y="206.0">com/googl..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$71/661013840.apply (39 samples, 6.72%)</title><rect x="388.4" y="179.0" width="79.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="391.4" y="190.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.lambda$iterator$4 (39 samples, 6.72%)</title><rect x="388.4" y="163.0" width="79.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.4" y="174.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/Record.of (10 samples, 1.72%)</title><rect x="388.4" y="147.0" width="20.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="391.4" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (10 samples, 1.72%)</title><rect x="388.4" y="131.0" width="20.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="391.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (14 samples, 2.41%)</title><rect x="408.8" y="147.0" width="28.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="411.8" y="158.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (14 samples, 2.41%)</title><rect x="408.8" y="131.0" width="28.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.8" y="142.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (14 samples, 2.41%)</title><rect x="408.8" y="115.0" width="28.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="411.8" y="126.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.getData (15 samples, 2.59%)</title><rect x="437.2" y="147.0" width="30.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="440.2" y="158.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (15 samples, 2.59%)</title><rect x="437.2" y="131.0" width="30.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.2" y="142.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (15 samples, 2.59%)</title><rect x="437.2" y="115.0" width="30.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="440.2" y="126.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/Record.getKey (14 samples, 2.41%)</title><rect x="467.8" y="211.0" width="28.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.8" y="222.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (14 samples, 2.41%)</title><rect x="467.8" y="195.0" width="28.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="470.8" y="206.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (14 samples, 2.41%)</title><rect x="467.8" y="179.0" width="28.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="470.8" y="190.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (14 samples, 2.41%)</title><rect x="467.8" y="163.0" width="28.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="470.8" y="174.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/Record.getValue (7 samples, 1.21%)</title><rect x="496.2" y="211.0" width="14.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="499.2" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 1.21%)</title><rect x="496.2" y="195.0" width="14.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.2" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (7 samples, 1.21%)</title><rect x="496.2" y="179.0" width="14.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="499.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.iterator (170 samples, 29.31%)</title><rect x="510.5" y="211.0" width="345.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="513.5" y="222.0">ru/mail/polis/dao/suhova/TurboDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (9 samples, 1.55%)</title><rect x="510.5" y="195.0" width="18.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="513.5" y="206.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (9 samples, 1.55%)</title><rect x="510.5" y="179.0" width="18.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="513.5" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (7 samples, 1.21%)</title><rect x="528.8" y="195.0" width="14.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.8" y="206.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (7 samples, 1.21%)</title><rect x="528.8" y="179.0" width="14.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="531.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock (7 samples, 1.21%)</title><rect x="543.0" y="195.0" width="14.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="546.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 1.21%)</title><rect x="543.0" y="179.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="546.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (7 samples, 1.21%)</title><rect x="543.0" y="163.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="546.0" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (7 samples, 1.21%)</title><rect x="543.0" y="147.0" width="14.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="546.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (147 samples, 25.34%)</title><rect x="557.3" y="195.0" width="299.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="560.3" y="206.0">ru/mail/polis/dao/suhova/TurboDAO.cellIt..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (44 samples, 7.59%)</title><rect x="557.3" y="179.0" width="89.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="560.3" y="190.0">com/google..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (8 samples, 1.38%)</title><rect x="557.3" y="163.0" width="16.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="560.3" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (36 samples, 6.21%)</title><rect x="573.6" y="163.0" width="73.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="576.6" y="174.0">com/goog..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (13 samples, 2.24%)</title><rect x="573.6" y="147.0" width="26.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="576.6" y="158.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (8 samples, 1.38%)</title><rect x="600.0" y="147.0" width="16.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.0" y="158.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (8 samples, 1.38%)</title><rect x="600.0" y="131.0" width="16.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="603.0" y="142.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (7 samples, 1.21%)</title><rect x="616.3" y="147.0" width="14.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="619.3" y="158.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (8 samples, 1.38%)</title><rect x="630.5" y="147.0" width="16.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="633.5" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (8 samples, 1.38%)</title><rect x="630.5" y="131.0" width="16.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="633.5" y="142.0"></text>
</g>
<g>
<title>java.util.ArrayList (11 samples, 1.90%)</title><rect x="646.8" y="179.0" width="22.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="649.8" y="190.0">j..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (16 samples, 2.76%)</title><rect x="669.2" y="179.0" width="32.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="672.2" y="190.0">ja..</text>
</g>
<g>
<title>java/util/HashSet.iterator (8 samples, 1.38%)</title><rect x="669.2" y="163.0" width="16.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="672.2" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (8 samples, 1.38%)</title><rect x="669.2" y="147.0" width="16.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="672.2" y="158.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (8 samples, 1.38%)</title><rect x="669.2" y="131.0" width="16.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="672.2" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (8 samples, 1.38%)</title><rect x="685.4" y="163.0" width="16.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="688.4" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (8 samples, 1.38%)</title><rect x="685.4" y="147.0" width="16.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="688.4" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (13 samples, 2.24%)</title><rect x="701.7" y="179.0" width="26.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="704.7" y="190.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (13 samples, 2.24%)</title><rect x="701.7" y="163.0" width="26.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.7" y="174.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$67/1476533404.get$Lambda (7 samples, 1.21%)</title><rect x="701.7" y="147.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="704.7" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.TurboDAO$$Lambda$67 (7 samples, 1.21%)</title><rect x="701.7" y="131.0" width="14.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="704.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$68/2008258697.get$Lambda (6 samples, 1.03%)</title><rect x="716.0" y="147.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.0" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.TurboDAO$$Lambda$68 (6 samples, 1.03%)</title><rect x="716.0" y="131.0" width="12.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="719.0" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.69%)</title><rect x="728.2" y="179.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="731.2" y="190.0"></text>
</g>
<g>
<title>java.lang.Object[] (4 samples, 0.69%)</title><rect x="728.2" y="163.0" width="8.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="731.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (24 samples, 4.14%)</title><rect x="736.3" y="179.0" width="48.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.3" y="190.0">ru/m..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (7 samples, 1.21%)</title><rect x="736.3" y="163.0" width="14.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="739.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (17 samples, 2.93%)</title><rect x="750.6" y="163.0" width="34.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="753.6" y="174.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (17 samples, 2.93%)</title><rect x="750.6" y="147.0" width="34.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="753.6" y="158.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (17 samples, 2.93%)</title><rect x="750.6" y="131.0" width="34.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="753.6" y="142.0">co..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (17 samples, 2.93%)</title><rect x="750.6" y="115.0" width="34.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="753.6" y="126.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (6 samples, 1.03%)</title><rect x="750.6" y="99.0" width="12.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="753.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$66/1213948177.apply (6 samples, 1.03%)</title><rect x="750.6" y="83.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="753.6" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (6 samples, 1.03%)</title><rect x="750.6" y="67.0" width="12.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="753.6" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Cell (6 samples, 1.03%)</title><rect x="750.6" y="51.0" width="12.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="753.6" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (11 samples, 1.90%)</title><rect x="762.8" y="99.0" width="22.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="765.8" y="110.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (11 samples, 1.90%)</title><rect x="762.8" y="83.0" width="22.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.8" y="94.0">j..</text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (11 samples, 1.90%)</title><rect x="762.8" y="67.0" width="22.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="765.8" y="78.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.iterator (35 samples, 6.03%)</title><rect x="785.1" y="179.0" width="71.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="788.1" y="190.0">ru/mail/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (7 samples, 1.21%)</title><rect x="785.1" y="163.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.1" y="174.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (7 samples, 1.21%)</title><rect x="785.1" y="147.0" width="14.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="788.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (8 samples, 1.38%)</title><rect x="799.4" y="163.0" width="16.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="802.4" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (8 samples, 1.38%)</title><rect x="799.4" y="147.0" width="16.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="802.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (5 samples, 0.86%)</title><rect x="815.7" y="163.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="818.7" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (5 samples, 0.86%)</title><rect x="815.7" y="147.0" width="10.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="818.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (15 samples, 2.59%)</title><rect x="825.8" y="163.0" width="30.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="828.8" y="174.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (15 samples, 2.59%)</title><rect x="825.8" y="147.0" width="30.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="828.8" y="158.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (15 samples, 2.59%)</title><rect x="825.8" y="131.0" width="30.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="828.8" y="142.0">ja..</text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (15 samples, 2.59%)</title><rect x="825.8" y="115.0" width="30.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="828.8" y="126.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteArray (9 samples, 1.55%)</title><rect x="856.3" y="227.0" width="18.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="859.3" y="238.0"></text>
</g>
<g>
<title>byte[] (9 samples, 1.55%)</title><rect x="856.3" y="211.0" width="18.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="859.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteBuffer (27 samples, 4.66%)</title><rect x="874.7" y="227.0" width="54.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="877.7" y="238.0">ru/ma..</text>
</g>
<g>
<title>java/lang/String.getBytes (7 samples, 1.21%)</title><rect x="874.7" y="211.0" width="14.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="877.7" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (7 samples, 1.21%)</title><rect x="874.7" y="195.0" width="14.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="877.7" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (7 samples, 1.21%)</title><rect x="874.7" y="179.0" width="14.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="877.7" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 1.21%)</title><rect x="874.7" y="163.0" width="14.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="877.7" y="174.0"></text>
</g>
<g>
<title>byte[] (7 samples, 1.21%)</title><rect x="874.7" y="147.0" width="14.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="877.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (20 samples, 3.45%)</title><rect x="888.9" y="211.0" width="40.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="891.9" y="222.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (20 samples, 3.45%)</title><rect x="888.9" y="195.0" width="40.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="891.9" y="206.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (20 samples, 3.45%)</title><rect x="888.9" y="179.0" width="40.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="891.9" y="190.0">jav..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (11 samples, 1.90%)</title><rect x="929.6" y="259.0" width="22.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="932.6" y="270.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (11 samples, 1.90%)</title><rect x="929.6" y="243.0" width="22.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="932.6" y="254.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (11 samples, 1.90%)</title><rect x="929.6" y="227.0" width="22.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="932.6" y="238.0">j..</text>
</g>
<g>
<title>java.lang.String (4 samples, 0.69%)</title><rect x="929.6" y="211.0" width="8.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="932.6" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 1.21%)</title><rect x="937.7" y="211.0" width="14.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="940.7" y="222.0"></text>
</g>
<g>
<title>byte[] (7 samples, 1.21%)</title><rect x="937.7" y="195.0" width="14.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="940.7" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (76 samples, 13.10%)</title><rect x="952.0" y="291.0" width="154.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="955.0" y="302.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one.nio.http.Request (16 samples, 2.76%)</title><rect x="952.0" y="275.0" width="32.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="955.0" y="286.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (23 samples, 3.97%)</title><rect x="984.5" y="275.0" width="46.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="987.5" y="286.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (23 samples, 3.97%)</title><rect x="984.5" y="259.0" width="46.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="987.5" y="270.0">java..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (37 samples, 6.38%)</title><rect x="1031.3" y="275.0" width="75.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1034.3" y="286.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (37 samples, 6.38%)</title><rect x="1031.3" y="259.0" width="75.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1034.3" y="270.0">one/nio/..</text>
</g>
<g>
<title>char[] (16 samples, 2.76%)</title><rect x="1031.3" y="243.0" width="32.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1034.3" y="254.0">ch..</text>
</g>
<g>
<title>java.lang.String (10 samples, 1.72%)</title><rect x="1063.9" y="243.0" width="20.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1066.9" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 1.90%)</title><rect x="1084.2" y="243.0" width="22.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1087.2" y="254.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 1.90%)</title><rect x="1084.2" y="227.0" width="22.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1087.2" y="238.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (11 samples, 1.90%)</title><rect x="1084.2" y="211.0" width="22.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1087.2" y="222.0">j..</text>
</g>
<g>
<title>byte[] (11 samples, 1.90%)</title><rect x="1084.2" y="195.0" width="22.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1087.2" y="206.0">b..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (41 samples, 7.07%)</title><rect x="1106.6" y="291.0" width="83.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1109.6" y="302.0">one/nio/u..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (41 samples, 7.07%)</title><rect x="1106.6" y="275.0" width="83.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1109.6" y="286.0">one/nio/u..</text>
</g>
<g>
<title>char[] (22 samples, 3.79%)</title><rect x="1106.6" y="259.0" width="44.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1109.6" y="270.0">char[]</text>
</g>
<g>
<title>java.lang.String (6 samples, 1.03%)</title><rect x="1151.3" y="259.0" width="12.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1154.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13 samples, 2.24%)</title><rect x="1163.6" y="259.0" width="26.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1166.6" y="270.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13 samples, 2.24%)</title><rect x="1163.6" y="243.0" width="26.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1166.6" y="254.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (13 samples, 2.24%)</title><rect x="1163.6" y="227.0" width="26.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1166.6" y="238.0">j..</text>
</g>
<g>
<title>byte[] (13 samples, 2.24%)</title><rect x="1163.6" y="211.0" width="26.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1166.6" y="222.0">b..</text>
</g>
</g>
</svg>
