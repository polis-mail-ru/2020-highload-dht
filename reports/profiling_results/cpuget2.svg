<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="501"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="501"> </text>
<g id="frames">
<g>
<title>all (2,234 samples, 100.00%)</title><rect x="10.0" y="467.0" width="1180.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="478.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,224 samples, 99.55%)</title><rect x="10.0" y="451.0" width="1174.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="462.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.18%)</title><rect x="14.8" y="435.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (2 samples, 0.09%)</title><rect x="16.9" y="435.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.9" y="446.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (2 samples, 0.09%)</title><rect x="16.9" y="419.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.09%)</title><rect x="16.9" y="403.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (647 samples, 28.96%)</title><rect x="17.9" y="435.0" width="341.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.9" y="446.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (8 samples, 0.36%)</title><rect x="18.5" y="419.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.04%)</title><rect x="22.1" y="403.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.1" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.04%)</title><rect x="22.1" y="387.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.1" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.04%)</title><rect x="22.1" y="371.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.04%)</title><rect x="22.1" y="355.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.04%)</title><rect x="22.1" y="339.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.1" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (17 samples, 0.76%)</title><rect x="22.7" y="419.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.7" y="430.0"></text>
</g>
<g>
<title>__block_literal_global (3 samples, 0.13%)</title><rect x="22.7" y="403.0" width="1.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="25.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (9 samples, 0.40%)</title><rect x="24.3" y="403.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (7 samples, 0.31%)</title><rect x="25.3" y="387.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.3" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (4 samples, 0.18%)</title><rect x="25.3" y="371.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.3" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.04%)</title><rect x="26.9" y="355.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.9" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (3 samples, 0.13%)</title><rect x="27.4" y="371.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.4" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (1 samples, 0.04%)</title><rect x="28.5" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="31.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.04%)</title><rect x="29.0" y="403.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="32.0" y="414.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.18%)</title><rect x="29.5" y="403.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="32.5" y="414.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.04%)</title><rect x="31.1" y="387.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="34.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (621 samples, 27.80%)</title><rect x="31.7" y="419.0" width="328.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="34.7" y="430.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (621 samples, 27.80%)</title><rect x="31.7" y="403.0" width="328.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.7" y="414.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (621 samples, 27.80%)</title><rect x="31.7" y="387.0" width="328.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.7" y="398.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (565 samples, 25.29%)</title><rect x="31.7" y="371.0" width="298.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="34.7" y="382.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.22%)</title><rect x="42.2" y="355.0" width="2.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="45.2" y="366.0"></text>
</g>
<g>
<title>kevent (540 samples, 24.17%)</title><rect x="44.9" y="355.0" width="285.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="47.9" y="366.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (12 samples, 0.54%)</title><rect x="330.1" y="371.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (12 samples, 0.54%)</title><rect x="330.1" y="355.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="333.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.add (12 samples, 0.54%)</title><rect x="330.1" y="339.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 0.54%)</title><rect x="330.1" y="323.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="333.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.54%)</title><rect x="330.1" y="307.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="333.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.09%)</title><rect x="330.6" y="291.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="333.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.31%)</title><rect x="331.7" y="291.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.7" y="302.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.09%)</title><rect x="335.4" y="291.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="338.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (15 samples, 0.67%)</title><rect x="336.4" y="371.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="339.4" y="382.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (7 samples, 0.31%)</title><rect x="339.1" y="355.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="342.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.18%)</title><rect x="340.7" y="339.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="343.7" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (3 samples, 0.13%)</title><rect x="342.8" y="355.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="345.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (29 samples, 1.30%)</title><rect x="344.4" y="371.0" width="15.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (23 samples, 1.03%)</title><rect x="347.5" y="355.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (9 samples, 0.40%)</title><rect x="347.5" y="339.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (9 samples, 0.40%)</title><rect x="347.5" y="323.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (9 samples, 0.40%)</title><rect x="347.5" y="307.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.5" y="318.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.09%)</title><rect x="351.2" y="291.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.2" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (14 samples, 0.63%)</title><rect x="352.3" y="339.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.&lt;init&gt; (1 samples, 0.04%)</title><rect x="359.1" y="323.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.1" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (1 samples, 0.04%)</title><rect x="359.1" y="307.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.1" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,562 samples, 69.92%)</title><rect x="359.7" y="435.0" width="825.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="362.7" y="446.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,562 samples, 69.92%)</title><rect x="359.7" y="419.0" width="825.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="362.7" y="430.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,385 samples, 62.00%)</title><rect x="359.7" y="403.0" width="731.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="362.7" y="414.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,361 samples, 60.92%)</title><rect x="361.8" y="387.0" width="718.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.8" y="398.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,359 samples, 60.83%)</title><rect x="362.8" y="371.0" width="717.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.8" y="382.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (1,316 samples, 58.91%)</title><rect x="363.9" y="355.0" width="695.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.9" y="366.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (471 samples, 21.08%)</title><rect x="363.9" y="339.0" width="248.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="366.9" y="350.0">one/nio/http/HttpSession.sendResp..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.22%)</title><rect x="365.5" y="323.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.22%)</title><rect x="365.5" y="307.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.5" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.22%)</title><rect x="365.5" y="291.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="368.5" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.04%)</title><rect x="365.5" y="275.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.04%)</title><rect x="365.5" y="259.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="368.5" y="270.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.04%)</title><rect x="365.5" y="243.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.5" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.04%)</title><rect x="365.5" y="227.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.5" y="238.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.18%)</title><rect x="366.0" y="275.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="369.0" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.18%)</title><rect x="366.0" y="259.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.0" y="270.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (4 samples, 0.18%)</title><rect x="366.0" y="243.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="369.0" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (4 samples, 0.18%)</title><rect x="366.0" y="227.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.0" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (451 samples, 20.19%)</title><rect x="368.1" y="323.0" width="238.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.1" y="334.0">one/nio/http/HttpSession.writeRe..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (34 samples, 1.52%)</title><rect x="368.1" y="307.0" width="18.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.1" y="318.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.54%)</title><rect x="379.7" y="291.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.7" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.54%)</title><rect x="379.7" y="275.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="382.7" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.54%)</title><rect x="379.7" y="259.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="382.7" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.54%)</title><rect x="379.7" y="243.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (12 samples, 0.54%)</title><rect x="379.7" y="227.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="382.7" y="238.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.09%)</title><rect x="382.9" y="211.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="385.9" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.18%)</title><rect x="384.0" y="211.0" width="2.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="387.0" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (417 samples, 18.67%)</title><rect x="386.1" y="307.0" width="220.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="389.1" y="318.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (416 samples, 18.62%)</title><rect x="386.6" y="291.0" width="219.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.6" y="302.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (414 samples, 18.53%)</title><rect x="387.7" y="275.0" width="218.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.7" y="286.0">one/nio/net/Session$ArrayQueu..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (414 samples, 18.53%)</title><rect x="387.7" y="259.0" width="218.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.7" y="270.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.31%)</title><rect x="387.7" y="243.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.7" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.31%)</title><rect x="387.7" y="227.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="390.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.31%)</title><rect x="387.7" y="211.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.7" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.18%)</title><rect x="388.7" y="195.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="391.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.13%)</title><rect x="389.2" y="179.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="392.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.13%)</title><rect x="389.2" y="163.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="392.2" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.13%)</title><rect x="389.2" y="147.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="392.2" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="390.3" y="131.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="393.3" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.04%)</title><rect x="390.8" y="195.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.8" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (407 samples, 18.22%)</title><rect x="391.4" y="243.0" width="214.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="394.4" y="254.0">sun/nio/ch/SocketChannelImpl..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (24 samples, 1.07%)</title><rect x="392.9" y="227.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (23 samples, 1.03%)</title><rect x="393.5" y="211.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="396.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (20 samples, 0.90%)</title><rect x="395.1" y="195.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="398.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (20 samples, 0.90%)</title><rect x="395.1" y="179.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="398.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (20 samples, 0.90%)</title><rect x="395.1" y="163.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.1" y="174.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.04%)</title><rect x="395.1" y="147.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="398.1" y="158.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.09%)</title><rect x="395.6" y="147.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="398.6" y="158.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (17 samples, 0.76%)</title><rect x="396.6" y="147.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="399.6" y="158.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (4 samples, 0.18%)</title><rect x="398.2" y="131.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="401.2" y="142.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (5 samples, 0.22%)</title><rect x="400.3" y="131.0" width="2.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="403.3" y="142.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.22%)</title><rect x="403.0" y="131.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="406.0" y="142.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (5 samples, 0.22%)</title><rect x="403.0" y="115.0" width="2.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="406.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (380 samples, 17.01%)</title><rect x="405.6" y="227.0" width="200.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.6" y="238.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (380 samples, 17.01%)</title><rect x="405.6" y="211.0" width="200.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="408.6" y="222.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.22%)</title><rect x="405.6" y="195.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="408.6" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.22%)</title><rect x="405.6" y="179.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="408.6" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (5 samples, 0.22%)</title><rect x="405.6" y="163.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.6" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.18%)</title><rect x="406.2" y="147.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="409.2" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.13%)</title><rect x="406.7" y="131.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.7" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (2 samples, 0.09%)</title><rect x="406.7" y="115.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.7" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.04%)</title><rect x="407.7" y="115.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (373 samples, 16.70%)</title><rect x="408.3" y="195.0" width="197.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="411.3" y="206.0">sun/nio/ch/IOUtil.writeFro..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (373 samples, 16.70%)</title><rect x="408.3" y="179.0" width="197.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="411.3" y="190.0">sun/nio/ch/SocketDispatche..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (373 samples, 16.70%)</title><rect x="408.3" y="163.0" width="197.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="411.3" y="174.0">sun/nio/ch/FileDispatcherI..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (6 samples, 0.27%)</title><rect x="413.5" y="147.0" width="3.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="416.5" y="158.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.09%)</title><rect x="415.7" y="131.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="418.7" y="142.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.04%)</title><rect x="416.7" y="147.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="419.7" y="158.0"></text>
</g>
<g>
<title>write (356 samples, 15.94%)</title><rect x="417.2" y="147.0" width="188.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="420.2" y="158.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="605.3" y="195.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="608.3" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="605.3" y="179.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="608.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.04%)</title><rect x="605.8" y="179.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="608.8" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="605.8" y="163.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="608.8" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="605.8" y="147.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="608.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="605.8" y="131.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="608.8" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.rewind (1 samples, 0.04%)</title><rect x="605.8" y="115.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="608.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.49%)</title><rect x="606.3" y="323.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.40%)</title><rect x="606.9" y="307.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="609.9" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.40%)</title><rect x="606.9" y="291.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="609.9" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.13%)</title><rect x="606.9" y="275.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="609.9" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.13%)</title><rect x="606.9" y="259.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="609.9" y="270.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (3 samples, 0.13%)</title><rect x="606.9" y="243.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.9" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.04%)</title><rect x="607.9" y="227.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.9" y="238.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.27%)</title><rect x="608.5" y="275.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="611.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.18%)</title><rect x="609.5" y="259.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="612.5" y="270.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.13%)</title><rect x="610.0" y="243.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="613.0" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.09%)</title><rect x="610.6" y="227.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="613.6" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.04%)</title><rect x="611.1" y="211.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="614.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="611.6" y="307.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="614.6" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="611.6" y="291.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="614.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="611.6" y="275.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="614.6" y="286.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.04%)</title><rect x="612.1" y="323.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="615.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.04%)</title><rect x="612.1" y="307.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="615.1" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (14 samples, 0.63%)</title><rect x="612.7" y="339.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="615.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.09%)</title><rect x="612.7" y="323.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="615.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 0.54%)</title><rect x="613.7" y="323.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="616.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.22%)</title><rect x="614.8" y="307.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="617.8" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.22%)</title><rect x="614.8" y="291.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="617.8" y="302.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.04%)</title><rect x="616.4" y="275.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="619.4" y="286.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="616.9" y="275.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="619.9" y="286.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="617.4" y="307.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="620.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.09%)</title><rect x="618.0" y="307.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="621.0" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.09%)</title><rect x="618.0" y="291.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.0" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="618.5" y="275.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="621.5" y="286.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.09%)</title><rect x="619.0" y="307.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="622.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.09%)</title><rect x="619.0" y="291.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="622.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.09%)</title><rect x="619.0" y="275.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="622.0" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.09%)</title><rect x="619.0" y="259.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="622.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.get (831 samples, 37.20%)</title><rect x="620.1" y="339.0" width="438.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="623.1" y="350.0">ru/mail/polis/service/suhova/MoribundService.get</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (802 samples, 35.90%)</title><rect x="622.2" y="323.0" width="423.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="625.2" y="334.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (42 samples, 1.88%)</title><rect x="622.7" y="307.0" width="22.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="625.7" y="318.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (42 samples, 1.88%)</title><rect x="622.7" y="291.0" width="22.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="625.7" y="302.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (42 samples, 1.88%)</title><rect x="622.7" y="275.0" width="22.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="625.7" y="286.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (41 samples, 1.84%)</title><rect x="623.2" y="259.0" width="21.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="626.2" y="270.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (39 samples, 1.75%)</title><rect x="624.3" y="243.0" width="20.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="627.3" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (1 samples, 0.04%)</title><rect x="624.8" y="227.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="627.8" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (27 samples, 1.21%)</title><rect x="625.4" y="227.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="628.4" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.04%)</title><rect x="625.9" y="211.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="628.9" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.09%)</title><rect x="626.4" y="211.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="629.4" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (18 samples, 0.81%)</title><rect x="627.5" y="211.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="630.5" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (18 samples, 0.81%)</title><rect x="627.5" y="195.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="630.5" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (5 samples, 0.22%)</title><rect x="627.5" y="179.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="630.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$66/1213948177.apply (5 samples, 0.22%)</title><rect x="627.5" y="163.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="630.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (5 samples, 0.22%)</title><rect x="627.5" y="147.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="630.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (13 samples, 0.58%)</title><rect x="630.1" y="179.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (13 samples, 0.58%)</title><rect x="630.1" y="163.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.1" y="174.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.09%)</title><rect x="632.2" y="147.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="635.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.09%)</title><rect x="633.3" y="147.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.09%)</title><rect x="634.3" y="147.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="637.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (2 samples, 0.09%)</title><rect x="634.3" y="131.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.3" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (3 samples, 0.13%)</title><rect x="635.4" y="147.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.4" y="158.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.04%)</title><rect x="637.0" y="211.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="640.0" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.04%)</title><rect x="637.0" y="195.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.0" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (4 samples, 0.18%)</title><rect x="637.5" y="211.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="640.5" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (4 samples, 0.18%)</title><rect x="637.5" y="195.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="640.5" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (4 samples, 0.18%)</title><rect x="637.5" y="179.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="640.5" y="190.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (4 samples, 0.18%)</title><rect x="637.5" y="163.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="640.5" y="174.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.18%)</title><rect x="637.5" y="147.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="640.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.09%)</title><rect x="639.6" y="227.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="642.6" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.09%)</title><rect x="639.6" y="211.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="642.6" y="222.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.04%)</title><rect x="640.1" y="195.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="643.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$69/47536927.apply (8 samples, 0.36%)</title><rect x="640.7" y="227.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="643.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (8 samples, 0.36%)</title><rect x="640.7" y="211.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="643.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 0.31%)</title><rect x="641.2" y="195.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="644.2" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="641.2" y="179.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="644.2" y="190.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="641.2" y="163.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="644.2" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="641.2" y="147.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="644.2" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="641.2" y="131.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="644.2" y="142.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="641.2" y="115.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="644.2" y="126.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="641.2" y="99.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="644.2" y="110.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="641.2" y="83.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="644.2" y="94.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="641.2" y="67.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="644.2" y="78.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.04%)</title><rect x="641.2" y="51.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="644.2" y="62.0"></text>
</g>
<g>
<title>G1ContiguousSpace::used() const (1 samples, 0.04%)</title><rect x="641.2" y="35.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="644.2" y="46.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (6 samples, 0.27%)</title><rect x="641.7" y="179.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.7" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.27%)</title><rect x="641.7" y="163.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="644.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.27%)</title><rect x="641.7" y="147.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="644.7" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.27%)</title><rect x="641.7" y="131.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="644.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="642.8" y="115.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="645.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.09%)</title><rect x="643.3" y="115.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="646.3" y="126.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="644.4" y="115.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="647.4" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (20 samples, 0.90%)</title><rect x="644.9" y="307.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="647.9" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (1 samples, 0.04%)</title><rect x="647.5" y="291.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="650.5" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.04%)</title><rect x="647.5" y="275.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="650.5" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.04%)</title><rect x="647.5" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="650.5" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1 samples, 0.04%)</title><rect x="647.5" y="243.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.04%)</title><rect x="647.5" y="227.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="650.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (14 samples, 0.63%)</title><rect x="648.1" y="291.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="651.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$71/661013840.apply (13 samples, 0.58%)</title><rect x="648.6" y="275.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="651.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.lambda$iterator$4 (12 samples, 0.54%)</title><rect x="649.1" y="259.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="652.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (10 samples, 0.45%)</title><rect x="649.1" y="243.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="652.1" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (10 samples, 0.45%)</title><rect x="649.1" y="227.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="652.1" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (9 samples, 0.40%)</title><rect x="649.7" y="211.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="652.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.40%)</title><rect x="649.7" y="195.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="652.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.40%)</title><rect x="649.7" y="179.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="652.7" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.27%)</title><rect x="650.7" y="163.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="653.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="650.7" y="147.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="653.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="650.7" y="131.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="653.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.22%)</title><rect x="651.2" y="147.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.22%)</title><rect x="651.2" y="131.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="654.2" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.09%)</title><rect x="652.3" y="115.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="655.3" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="653.3" y="115.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="656.3" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="653.9" y="163.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="656.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.getData (2 samples, 0.09%)</title><rect x="654.4" y="243.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.4" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.09%)</title><rect x="654.4" y="227.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="657.4" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (1 samples, 0.04%)</title><rect x="654.9" y="211.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (8 samples, 0.36%)</title><rect x="655.5" y="307.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.5" y="318.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.36%)</title><rect x="655.5" y="291.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="658.5" y="302.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.09%)</title><rect x="658.6" y="275.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="661.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Record.getKey (1 samples, 0.04%)</title><rect x="659.7" y="307.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="662.7" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (1 samples, 0.04%)</title><rect x="659.7" y="291.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="662.7" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.04%)</title><rect x="659.7" y="275.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.7" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="659.7" y="259.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="662.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Record.getValue (5 samples, 0.22%)</title><rect x="660.2" y="307.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="663.2" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.22%)</title><rect x="660.2" y="291.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="663.2" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="662.3" y="275.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="665.3" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="662.3" y="259.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="665.3" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="662.3" y="243.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="665.3" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="662.3" y="227.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="665.3" y="238.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="662.3" y="211.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="665.3" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="662.3" y="195.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="665.3" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="662.3" y="179.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="665.3" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="662.3" y="163.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="665.3" y="174.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.04%)</title><rect x="662.3" y="147.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="665.3" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.04%)</title><rect x="662.3" y="131.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="665.3" y="142.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.04%)</title><rect x="662.3" y="115.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="665.3" y="126.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.04%)</title><rect x="662.3" y="99.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="665.3" y="110.0"></text>
</g>
<g>
<title>G1ConcurrentRefine::max_num_threads() (1 samples, 0.04%)</title><rect x="662.3" y="83.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="665.3" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.iterator (725 samples, 32.45%)</title><rect x="662.9" y="307.0" width="382.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="665.9" y="318.0">ru/mail/polis/dao/suhova/TurboDAO.iterator</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock (404 samples, 18.08%)</title><rect x="665.0" y="291.0" width="213.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="668.0" y="302.0">java/util/concurrent/locks/R..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (403 samples, 18.04%)</title><rect x="665.5" y="275.0" width="212.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="668.5" y="286.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (390 samples, 17.46%)</title><rect x="666.0" y="259.0" width="206.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="669.0" y="270.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (388 samples, 17.37%)</title><rect x="667.1" y="243.0" width="204.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.1" y="254.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (388 samples, 17.37%)</title><rect x="667.1" y="227.0" width="204.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="670.1" y="238.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.04%)</title><rect x="667.1" y="211.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.1" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (387 samples, 17.32%)</title><rect x="667.6" y="211.0" width="204.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="670.6" y="222.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::parker() (2 samples, 0.09%)</title><rect x="678.2" y="195.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="681.2" y="206.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (2 samples, 0.09%)</title><rect x="679.2" y="195.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="682.2" y="206.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (4 samples, 0.18%)</title><rect x="680.3" y="195.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="683.3" y="206.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.04%)</title><rect x="682.4" y="195.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="685.4" y="206.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (358 samples, 16.03%)</title><rect x="682.9" y="195.0" width="189.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="685.9" y="206.0">Unsafe_Park(JNIEnv_*, _jo..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="682.9" y="179.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="685.9" y="190.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.04%)</title><rect x="682.9" y="163.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="685.9" y="174.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="683.5" y="179.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="686.5" y="190.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.09%)</title><rect x="684.0" y="179.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="687.0" y="190.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.18%)</title><rect x="685.0" y="179.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="688.0" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.13%)</title><rect x="685.6" y="163.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="688.6" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.04%)</title><rect x="685.6" y="147.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="688.6" y="158.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.09%)</title><rect x="686.1" y="147.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="689.1" y="158.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.04%)</title><rect x="686.1" y="131.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="689.1" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.04%)</title><rect x="686.1" y="115.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="689.1" y="126.0"></text>
</g>
<g>
<title>int OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.04%)</title><rect x="686.6" y="131.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="689.6" y="142.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.18%)</title><rect x="687.2" y="179.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="690.2" y="190.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.04%)</title><rect x="687.2" y="163.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="690.2" y="174.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.04%)</title><rect x="687.2" y="147.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="690.2" y="158.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.04%)</title><rect x="687.2" y="131.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="690.2" y="142.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.04%)</title><rect x="687.7" y="163.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="690.7" y="174.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (2 samples, 0.09%)</title><rect x="688.2" y="163.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="691.2" y="174.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (2 samples, 0.09%)</title><rect x="688.2" y="147.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="691.2" y="158.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.09%)</title><rect x="689.3" y="179.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="692.3" y="190.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.04%)</title><rect x="689.8" y="163.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="692.8" y="174.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (325 samples, 14.55%)</title><rect x="690.3" y="179.0" width="171.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="693.3" y="190.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.13%)</title><rect x="693.5" y="163.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="696.5" y="174.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="693.5" y="147.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="696.5" y="158.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="693.5" y="131.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="696.5" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.09%)</title><rect x="694.0" y="147.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="697.0" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (305 samples, 13.65%)</title><rect x="695.1" y="163.0" width="161.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="698.1" y="174.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.31%)</title><rect x="856.2" y="163.0" width="3.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="859.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvclrprepost (1 samples, 0.04%)</title><rect x="858.3" y="147.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="861.3" y="158.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.09%)</title><rect x="858.8" y="147.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="861.8" y="158.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.04%)</title><rect x="859.9" y="163.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="862.9" y="174.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.09%)</title><rect x="860.4" y="163.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="863.4" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="861.5" y="163.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="864.5" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.09%)</title><rect x="862.0" y="179.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="865.0" y="190.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.09%)</title><rect x="862.0" y="163.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="865.0" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.09%)</title><rect x="862.0" y="147.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="865.0" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.09%)</title><rect x="862.0" y="131.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="865.0" y="142.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.09%)</title><rect x="862.0" y="115.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="865.0" y="126.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.09%)</title><rect x="862.0" y="99.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="865.0" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (7 samples, 0.31%)</title><rect x="863.0" y="179.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="866.0" y="190.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (4 samples, 0.18%)</title><rect x="863.0" y="163.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="866.0" y="174.0"></text>
</g>
<g>
<title>os::is_MP() (4 samples, 0.18%)</title><rect x="863.0" y="147.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="866.0" y="158.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="865.2" y="163.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="868.2" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="865.7" y="163.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="868.7" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="866.2" y="163.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="869.2" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="866.2" y="147.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="869.2" y="158.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="866.2" y="131.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="869.2" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="866.2" y="115.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="869.2" y="126.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.04%)</title><rect x="866.7" y="179.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="869.7" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="867.3" y="179.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="870.3" y="190.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.09%)</title><rect x="867.8" y="179.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="870.8" y="190.0"></text>
</g>
<g>
<title>pthread_cond_wait (5 samples, 0.22%)</title><rect x="868.9" y="179.0" width="2.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="871.9" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.04%)</title><rect x="871.5" y="179.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="874.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (5 samples, 0.22%)</title><rect x="872.0" y="259.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="875.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquire (7 samples, 0.31%)</title><rect x="874.7" y="259.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="877.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="877.8" y="243.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="880.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock (129 samples, 5.77%)</title><rect x="878.4" y="291.0" width="68.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="881.4" y="302.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (129 samples, 5.77%)</title><rect x="878.4" y="275.0" width="68.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="881.4" y="286.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (128 samples, 5.73%)</title><rect x="878.4" y="259.0" width="67.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="881.4" y="270.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (127 samples, 5.68%)</title><rect x="878.9" y="243.0" width="67.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="881.9" y="254.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (127 samples, 5.68%)</title><rect x="878.9" y="227.0" width="67.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="881.9" y="238.0">jdk/int..</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.04%)</title><rect x="879.9" y="211.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.9" y="222.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="880.5" y="211.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="883.5" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (122 samples, 5.46%)</title><rect x="881.0" y="211.0" width="64.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="884.0" y="222.0">Unsafe_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.09%)</title><rect x="882.6" y="195.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="885.6" y="206.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.04%)</title><rect x="883.6" y="195.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="886.6" y="206.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="884.2" y="195.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="887.2" y="206.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.04%)</title><rect x="884.2" y="179.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="887.2" y="190.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="884.7" y="195.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="887.7" y="206.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.09%)</title><rect x="885.2" y="195.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="888.2" y="206.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.09%)</title><rect x="885.2" y="179.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="888.2" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.04%)</title><rect x="885.2" y="163.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="888.2" y="174.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.04%)</title><rect x="885.8" y="163.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="888.8" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.04%)</title><rect x="885.8" y="147.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.8" y="158.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.04%)</title><rect x="885.8" y="131.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="888.8" y="142.0"></text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.18%)</title><rect x="886.3" y="195.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.3" y="206.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.13%)</title><rect x="886.8" y="179.0" width="1.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="889.8" y="190.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.13%)</title><rect x="886.8" y="163.0" width="1.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="889.8" y="174.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.04%)</title><rect x="888.4" y="195.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="891.4" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::poll(Thread*) (1 samples, 0.04%)</title><rect x="888.9" y="195.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="891.9" y="206.0"></text>
</g>
<g>
<title>Thread::current() (4 samples, 0.18%)</title><rect x="889.5" y="195.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="892.5" y="206.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.04%)</title><rect x="890.0" y="179.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="893.0" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.09%)</title><rect x="890.5" y="179.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="893.5" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.09%)</title><rect x="891.6" y="195.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="894.6" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.09%)</title><rect x="891.6" y="179.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.6" y="190.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.09%)</title><rect x="891.6" y="163.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.6" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.09%)</title><rect x="891.6" y="147.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.6" y="158.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.09%)</title><rect x="891.6" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="894.6" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.04%)</title><rect x="891.6" y="115.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.6" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="892.1" y="115.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.1" y="126.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="892.1" y="99.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="895.1" y="110.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="892.1" y="83.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="895.1" y="94.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.04%)</title><rect x="892.6" y="195.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="895.6" y="206.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="892.6" y="179.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="895.6" y="190.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (7 samples, 0.31%)</title><rect x="893.2" y="195.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="896.2" y="206.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.04%)</title><rect x="894.7" y="179.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="897.7" y="190.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="895.3" y="179.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="898.3" y="190.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (1 samples, 0.04%)</title><rect x="895.3" y="163.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="898.3" y="174.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.09%)</title><rect x="895.8" y="179.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="898.8" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (77 samples, 3.45%)</title><rect x="896.8" y="195.0" width="40.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="899.8" y="206.0">__p..</text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.09%)</title><rect x="937.5" y="195.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="940.5" y="206.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.04%)</title><rect x="938.6" y="195.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="941.6" y="206.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.04%)</title><rect x="939.1" y="195.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="942.1" y="206.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.04%)</title><rect x="939.6" y="195.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="942.6" y="206.0"></text>
</g>
<g>
<title>pthread_cond_signal (6 samples, 0.27%)</title><rect x="940.2" y="195.0" width="3.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="943.2" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.09%)</title><rect x="942.3" y="179.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="945.3" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.18%)</title><rect x="943.3" y="195.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="946.3" y="206.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.04%)</title><rect x="945.4" y="211.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="948.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryRelease (1 samples, 0.04%)</title><rect x="946.0" y="259.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="949.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (188 samples, 8.42%)</title><rect x="946.5" y="291.0" width="99.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="949.5" y="302.0">ru/mail/poli..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (10 samples, 0.45%)</title><rect x="946.5" y="275.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="949.5" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (10 samples, 0.45%)</title><rect x="946.5" y="259.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="949.5" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (6 samples, 0.27%)</title><rect x="946.5" y="243.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="949.5" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (6 samples, 0.27%)</title><rect x="946.5" y="227.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="949.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/UnmodifiableIterator.&lt;init&gt; (1 samples, 0.04%)</title><rect x="949.7" y="243.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="952.7" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.13%)</title><rect x="950.2" y="243.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="953.2" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.&lt;init&gt; (1 samples, 0.04%)</title><rect x="951.3" y="227.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="954.3" y="238.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.04%)</title><rect x="951.8" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="954.8" y="286.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.04%)</title><rect x="951.8" y="259.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="954.8" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.04%)</title><rect x="951.8" y="243.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="954.8" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.09%)</title><rect x="952.3" y="275.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="955.3" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.04%)</title><rect x="952.8" y="259.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$68/2008258697.get$Lambda (1 samples, 0.04%)</title><rect x="952.8" y="243.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="955.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$68/2008258697.&lt;init&gt; (1 samples, 0.04%)</title><rect x="952.8" y="227.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="955.8" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (9 samples, 0.40%)</title><rect x="953.4" y="275.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="956.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (3 samples, 0.13%)</title><rect x="956.0" y="259.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="959.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.04%)</title><rect x="957.6" y="259.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="960.6" y="270.0"></text>
</g>
<g>
<title>java/util/HashSet.size (1 samples, 0.04%)</title><rect x="958.1" y="275.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="961.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (8 samples, 0.36%)</title><rect x="958.6" y="275.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="961.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (8 samples, 0.36%)</title><rect x="958.6" y="259.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="961.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (8 samples, 0.36%)</title><rect x="958.6" y="243.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="961.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (6 samples, 0.27%)</title><rect x="959.2" y="227.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="962.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (6 samples, 0.27%)</title><rect x="959.2" y="211.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="962.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.isShared (1 samples, 0.04%)</title><rect x="961.8" y="195.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="964.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (1 samples, 0.04%)</title><rect x="962.3" y="227.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="965.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.04%)</title><rect x="962.9" y="275.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="965.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.04%)</title><rect x="962.9" y="259.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="965.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.04%)</title><rect x="962.9" y="243.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="965.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.04%)</title><rect x="962.9" y="227.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="965.9" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.04%)</title><rect x="962.9" y="211.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="965.9" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.04%)</title><rect x="962.9" y="195.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="965.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (10 samples, 0.45%)</title><rect x="963.4" y="275.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="966.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (10 samples, 0.45%)</title><rect x="963.4" y="259.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="966.4" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (10 samples, 0.45%)</title><rect x="963.4" y="243.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="966.4" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.04%)</title><rect x="964.5" y="227.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="967.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.18%)</title><rect x="965.0" y="227.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="968.0" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (4 samples, 0.18%)</title><rect x="965.0" y="211.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="968.0" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (3 samples, 0.13%)</title><rect x="965.0" y="195.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="968.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$66/1213948177.apply (2 samples, 0.09%)</title><rect x="965.5" y="179.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="968.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (2 samples, 0.09%)</title><rect x="965.5" y="163.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="968.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="966.6" y="195.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="969.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="966.6" y="179.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="969.6" y="190.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (3 samples, 0.13%)</title><rect x="967.1" y="227.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="970.1" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (3 samples, 0.13%)</title><rect x="967.1" y="211.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="970.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.iterator (146 samples, 6.54%)</title><rect x="968.7" y="275.0" width="77.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="971.7" y="286.0">ru/mail/p..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (9 samples, 0.40%)</title><rect x="968.7" y="259.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="971.7" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="968.7" y="243.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="971.7" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="968.7" y="227.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="971.7" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="968.7" y="211.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="971.7" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="968.7" y="195.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="971.7" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="968.7" y="179.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.7" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="968.7" y="163.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.7" y="174.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.04%)</title><rect x="968.7" y="147.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.7" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.&lt;init&gt; (8 samples, 0.36%)</title><rect x="969.2" y="243.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="972.2" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.&lt;init&gt; (8 samples, 0.36%)</title><rect x="969.2" y="227.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="972.2" y="238.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (8 samples, 0.36%)</title><rect x="969.2" y="211.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="972.2" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.04%)</title><rect x="971.3" y="195.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="974.3" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.04%)</title><rect x="971.9" y="195.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="974.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (2 samples, 0.09%)</title><rect x="972.4" y="195.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="975.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (135 samples, 6.04%)</title><rect x="973.4" y="259.0" width="71.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="976.4" y="270.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (134 samples, 6.00%)</title><rect x="974.0" y="243.0" width="70.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="977.0" y="254.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (134 samples, 6.00%)</title><rect x="974.0" y="227.0" width="70.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="977.0" y="238.0">java/uti..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="977.1" y="211.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="980.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (127 samples, 5.68%)</title><rect x="977.7" y="211.0" width="67.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="980.7" y="222.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (127 samples, 5.68%)</title><rect x="977.7" y="195.0" width="67.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="980.7" y="206.0">java/ut..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="978.7" y="179.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="981.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (7 samples, 0.31%)</title><rect x="979.2" y="179.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="982.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.31%)</title><rect x="979.2" y="163.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="982.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.27%)</title><rect x="979.8" y="147.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="982.8" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.13%)</title><rect x="979.8" y="131.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="982.8" y="142.0"></text>
</g>
<g>
<title>vectorizedMismatch (3 samples, 0.13%)</title><rect x="979.8" y="115.0" width="1.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="982.8" y="126.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.13%)</title><rect x="981.4" y="131.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="984.4" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.09%)</title><rect x="981.9" y="115.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="984.9" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (117 samples, 5.24%)</title><rect x="982.9" y="179.0" width="61.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="985.9" y="190.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (28 samples, 1.25%)</title><rect x="1030.0" y="163.0" width="14.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1033.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (27 samples, 1.21%)</title><rect x="1030.5" y="147.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1033.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (25 samples, 1.12%)</title><rect x="1031.5" y="131.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1034.5" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.22%)</title><rect x="1033.1" y="115.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1036.1" y="126.0"></text>
</g>
<g>
<title>vectorizedMismatch (5 samples, 0.22%)</title><rect x="1033.1" y="99.0" width="2.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1036.1" y="110.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (15 samples, 0.67%)</title><rect x="1035.8" y="115.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1038.8" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.22%)</title><rect x="1041.0" y="99.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1044.0" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.18%)</title><rect x="1041.6" y="83.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1044.6" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.09%)</title><rect x="1043.7" y="115.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1046.7" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.04%)</title><rect x="1044.2" y="99.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1047.2" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (1 samples, 0.04%)</title><rect x="1044.7" y="259.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1047.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.04%)</title><rect x="1045.3" y="259.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1048.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.04%)</title><rect x="1045.3" y="243.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1048.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.04%)</title><rect x="1045.3" y="227.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1048.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1045.3" y="211.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1048.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (4 samples, 0.18%)</title><rect x="1045.8" y="323.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1048.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteArray (3 samples, 0.13%)</title><rect x="1047.9" y="323.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1050.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.09%)</title><rect x="1048.4" y="307.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1051.4" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.09%)</title><rect x="1048.4" y="291.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1051.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteBuffer (18 samples, 0.81%)</title><rect x="1049.5" y="323.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1052.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (6 samples, 0.27%)</title><rect x="1049.5" y="307.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1052.5" y="318.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (6 samples, 0.27%)</title><rect x="1049.5" y="291.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1052.5" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (6 samples, 0.27%)</title><rect x="1049.5" y="275.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1052.5" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.27%)</title><rect x="1049.5" y="259.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1052.5" y="270.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.13%)</title><rect x="1050.0" y="243.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1053.0" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.09%)</title><rect x="1051.6" y="243.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1054.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.54%)</title><rect x="1052.7" y="307.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1055.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.54%)</title><rect x="1052.7" y="291.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1055.7" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.49%)</title><rect x="1053.2" y="275.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1056.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.45%)</title><rect x="1053.7" y="259.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1056.7" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.40%)</title><rect x="1053.7" y="243.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1056.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.13%)</title><rect x="1056.9" y="227.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1059.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.13%)</title><rect x="1056.9" y="211.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1059.9" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.13%)</title><rect x="1056.9" y="195.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1059.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.04%)</title><rect x="1058.5" y="243.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1061.5" y="254.0"></text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (39 samples, 1.75%)</title><rect x="1059.0" y="355.0" width="20.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1062.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.04%)</title><rect x="1059.0" y="339.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1062.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.04%)</title><rect x="1059.0" y="323.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1062.0" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="1059.0" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1062.0" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="1059.0" y="291.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1062.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1059.0" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1062.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.put (38 samples, 1.70%)</title><rect x="1059.5" y="339.0" width="20.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1062.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (38 samples, 1.70%)</title><rect x="1059.5" y="323.0" width="20.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1062.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (38 samples, 1.70%)</title><rect x="1059.5" y="307.0" width="20.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1062.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (38 samples, 1.70%)</title><rect x="1059.5" y="291.0" width="20.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1062.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (38 samples, 1.70%)</title><rect x="1059.5" y="275.0" width="20.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1062.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (38 samples, 1.70%)</title><rect x="1059.5" y="259.0" width="20.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1062.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (36 samples, 1.61%)</title><rect x="1060.6" y="243.0" width="19.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1063.6" y="254.0"></text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (6 samples, 0.27%)</title><rect x="1073.3" y="227.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1076.3" y="238.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.18%)</title><rect x="1076.4" y="227.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1079.4" y="238.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1078.5" y="227.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1081.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.04%)</title><rect x="1079.1" y="227.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1082.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.09%)</title><rect x="1079.6" y="355.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1082.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (13 samples, 0.58%)</title><rect x="1080.7" y="387.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1083.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1083.3" y="371.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1086.3" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="1083.3" y="355.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.3" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.04%)</title><rect x="1083.3" y="339.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.3" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1083.3" y="323.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.3" y="334.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::check_out_of_memory() (1 samples, 0.04%)</title><rect x="1083.3" y="307.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1086.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.27%)</title><rect x="1083.8" y="371.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1086.8" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.27%)</title><rect x="1083.8" y="355.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1086.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.09%)</title><rect x="1085.9" y="339.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1088.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.09%)</title><rect x="1085.9" y="323.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1088.9" y="334.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.09%)</title><rect x="1085.9" y="307.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1088.9" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.04%)</title><rect x="1087.0" y="371.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1090.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.27%)</title><rect x="1087.5" y="387.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1090.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.22%)</title><rect x="1088.1" y="371.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1091.1" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.22%)</title><rect x="1088.1" y="355.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1091.1" y="366.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.13%)</title><rect x="1089.1" y="339.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1092.1" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.13%)</title><rect x="1089.1" y="323.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1092.1" y="334.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.13%)</title><rect x="1089.1" y="307.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1092.1" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="1090.7" y="387.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1093.7" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="1090.7" y="371.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1093.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1090.7" y="355.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1093.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1090.7" y="339.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1093.7" y="350.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1090.7" y="323.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1093.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (177 samples, 7.92%)</title><rect x="1091.2" y="403.0" width="93.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1094.2" y="414.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (177 samples, 7.92%)</title><rect x="1091.2" y="387.0" width="93.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1094.2" y="398.0">one/nio/net..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.49%)</title><rect x="1091.8" y="371.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1094.8" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.45%)</title><rect x="1092.3" y="355.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1095.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.36%)</title><rect x="1093.3" y="339.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1096.3" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.31%)</title><rect x="1093.9" y="323.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1096.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.27%)</title><rect x="1094.4" y="307.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1097.4" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.27%)</title><rect x="1094.4" y="291.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1097.4" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2 samples, 0.09%)</title><rect x="1096.5" y="275.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1099.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (165 samples, 7.39%)</title><rect x="1097.6" y="371.0" width="87.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1100.6" y="382.0">sun/nio/ch..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.49%)</title><rect x="1097.6" y="355.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1100.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.27%)</title><rect x="1100.2" y="339.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1103.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.27%)</title><rect x="1100.2" y="323.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1103.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.27%)</title><rect x="1100.2" y="307.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1103.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.18%)</title><rect x="1100.7" y="291.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1103.7" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.13%)</title><rect x="1101.3" y="275.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.3" y="286.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.13%)</title><rect x="1101.3" y="259.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1104.3" y="270.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (3 samples, 0.13%)</title><rect x="1101.3" y="243.0" width="1.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1104.3" y="254.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.09%)</title><rect x="1101.8" y="227.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1104.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.04%)</title><rect x="1102.8" y="291.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1105.8" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.04%)</title><rect x="1102.8" y="275.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1105.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.04%)</title><rect x="1102.8" y="259.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1105.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (154 samples, 6.89%)</title><rect x="1103.4" y="355.0" width="81.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1106.4" y="366.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (154 samples, 6.89%)</title><rect x="1103.4" y="339.0" width="81.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1106.4" y="350.0">sun/nio/c..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (14 samples, 0.63%)</title><rect x="1103.4" y="323.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1106.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (13 samples, 0.58%)</title><rect x="1103.9" y="307.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1106.9" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.09%)</title><rect x="1104.4" y="291.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1107.4" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.18%)</title><rect x="1105.5" y="291.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1108.5" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.18%)</title><rect x="1105.5" y="275.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1108.5" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1106.5" y="259.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1109.5" y="270.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.04%)</title><rect x="1107.1" y="259.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1110.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (6 samples, 0.27%)</title><rect x="1107.6" y="291.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1110.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (6 samples, 0.27%)</title><rect x="1107.6" y="275.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1110.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (6 samples, 0.27%)</title><rect x="1107.6" y="259.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1110.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (6 samples, 0.27%)</title><rect x="1107.6" y="243.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1110.6" y="254.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (4 samples, 0.18%)</title><rect x="1108.7" y="227.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1111.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (136 samples, 6.09%)</title><rect x="1110.8" y="323.0" width="71.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1113.8" y="334.0">sun/nio/..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="1110.8" y="307.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1113.8" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.04%)</title><rect x="1110.8" y="291.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1113.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="1110.8" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1113.8" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="1110.8" y="259.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1113.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (135 samples, 6.04%)</title><rect x="1111.3" y="307.0" width="71.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1114.3" y="318.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (135 samples, 6.04%)</title><rect x="1111.3" y="291.0" width="71.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1114.3" y="302.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.18%)</title><rect x="1118.2" y="275.0" width="2.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1121.2" y="286.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.18%)</title><rect x="1118.2" y="259.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1121.2" y="270.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.04%)</title><rect x="1120.3" y="275.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1123.3" y="286.0"></text>
</g>
<g>
<title>rpc_errlist (117 samples, 5.24%)</title><rect x="1120.8" y="275.0" width="61.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1123.8" y="286.0">rpc_er..</text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (4 samples, 0.18%)</title><rect x="1182.6" y="323.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1185.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.isBufferTooLarge (4 samples, 0.18%)</title><rect x="1182.6" y="307.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1185.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.04%)</title><rect x="1184.7" y="451.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1187.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.04%)</title><rect x="1184.7" y="435.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1187.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.04%)</title><rect x="1184.7" y="419.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1187.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.04%)</title><rect x="1184.7" y="403.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1187.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.04%)</title><rect x="1184.7" y="387.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1187.7" y="398.0"></text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (1 samples, 0.04%)</title><rect x="1184.7" y="371.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1187.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.04%)</title><rect x="1184.7" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1187.7" y="366.0"></text>
</g>
<g>
<title>thread_start (9 samples, 0.40%)</title><rect x="1185.2" y="451.0" width="4.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1188.2" y="462.0"></text>
</g>
<g>
<title>_pthread_start (9 samples, 0.40%)</title><rect x="1185.2" y="435.0" width="4.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1188.2" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.40%)</title><rect x="1185.2" y="419.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1188.2" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.40%)</title><rect x="1185.2" y="403.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.2" y="414.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.13%)</title><rect x="1185.2" y="387.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="398.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.09%)</title><rect x="1185.2" y="371.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.2" y="382.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.09%)</title><rect x="1185.2" y="355.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="366.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="1185.2" y="339.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="350.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="1185.2" y="323.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="334.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.04%)</title><rect x="1185.2" y="307.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="318.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.04%)</title><rect x="1185.8" y="339.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.8" y="350.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.04%)</title><rect x="1186.3" y="371.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.3" y="382.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.04%)</title><rect x="1186.3" y="355.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1189.3" y="366.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.04%)</title><rect x="1186.8" y="387.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.8" y="398.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.04%)</title><rect x="1186.8" y="371.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.8" y="382.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.04%)</title><rect x="1186.8" y="355.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1189.8" y="366.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.04%)</title><rect x="1186.8" y="339.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.8" y="350.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.04%)</title><rect x="1186.8" y="323.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.8" y="334.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.04%)</title><rect x="1186.8" y="307.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1189.8" y="318.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.04%)</title><rect x="1186.8" y="291.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.8" y="302.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.04%)</title><rect x="1186.8" y="275.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1189.8" y="286.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.04%)</title><rect x="1187.4" y="387.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="398.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.04%)</title><rect x="1187.4" y="371.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.4" y="382.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.04%)</title><rect x="1187.4" y="355.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="366.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.04%)</title><rect x="1187.4" y="339.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="350.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::ParallelSPCleanupTask(unsigned int, DeflateMonitorCounters*) (1 samples, 0.04%)</title><rect x="1187.4" y="323.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.4" y="334.0"></text>
</g>
<g>
<title>NamedThread::is_Named_thread() const (1 samples, 0.04%)</title><rect x="1187.4" y="307.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="318.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 0.18%)</title><rect x="1187.9" y="387.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="398.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.18%)</title><rect x="1187.9" y="371.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="382.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.18%)</title><rect x="1187.9" y="355.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="366.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.18%)</title><rect x="1187.9" y="339.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.9" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.18%)</title><rect x="1187.9" y="323.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.9" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.13%)</title><rect x="1187.9" y="307.0" width="1.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1190.9" y="318.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.04%)</title><rect x="1189.5" y="307.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1192.5" y="318.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="1189.5" y="291.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1192.5" y="302.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.04%)</title><rect x="1189.5" y="275.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1192.5" y="286.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.04%)</title><rect x="1189.5" y="259.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1192.5" y="270.0"></text>
</g>
</g>
</svg>
