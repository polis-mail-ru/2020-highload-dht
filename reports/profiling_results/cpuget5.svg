<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="677"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="677"> </text>
<g id="frames">
<g>
<title>all (2,457 samples, 100.00%)</title><rect x="10.0" y="643.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="654.0">all</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="10.0" y="627.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="611.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="595.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="10.0" y="579.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="10.0" y="563.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="10.0" y="547.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="10.0" y="531.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="10.0" y="515.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="499.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="483.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="10.0" y="467.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="10.0" y="451.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.04%)</title><rect x="10.5" y="627.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.5" y="638.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="10.5" y="611.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.5" y="622.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="10.5" y="595.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.5" y="606.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="10.5" y="579.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.5" y="590.0"></text>
</g>
<g>
<title>Method::is_accessor() const (1 samples, 0.04%)</title><rect x="10.5" y="563.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.5" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.28%)</title><rect x="11.0" y="627.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.0" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (7 samples, 0.28%)</title><rect x="11.0" y="611.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.0" y="622.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::~JavaThreadBlockedOnMonitorEnterState() (1 samples, 0.04%)</title><rect x="11.0" y="595.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.0" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (6 samples, 0.24%)</title><rect x="11.4" y="595.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.4" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.04%)</title><rect x="11.4" y="579.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.4" y="590.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.08%)</title><rect x="11.9" y="579.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.9" y="590.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.12%)</title><rect x="12.9" y="579.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.9" y="590.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.08%)</title><rect x="12.9" y="563.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="15.9" y="574.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.04%)</title><rect x="13.8" y="563.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="16.8" y="574.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.08%)</title><rect x="14.3" y="627.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="17.3" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.08%)</title><rect x="14.3" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.3" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.08%)</title><rect x="14.3" y="595.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.3" y="606.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.08%)</title><rect x="14.3" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.3" y="590.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.08%)</title><rect x="14.3" y="563.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="17.3" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.04%)</title><rect x="14.3" y="547.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.3" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="14.8" y="547.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="17.8" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.04%)</title><rect x="14.8" y="531.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,765 samples, 71.84%)</title><rect x="15.3" y="627.0" width="847.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.3" y="638.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,765 samples, 71.84%)</title><rect x="15.3" y="611.0" width="847.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.3" y="622.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,765 samples, 71.84%)</title><rect x="15.3" y="595.0" width="847.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="18.3" y="606.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (720 samples, 29.30%)</title><rect x="15.3" y="579.0" width="345.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.3" y="590.0">java/util/concurrent/ThreadPoolExecutor.getTask</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.poll (10 samples, 0.41%)</title><rect x="16.7" y="563.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.37%)</title><rect x="17.2" y="547.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.37%)</title><rect x="17.2" y="531.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (7 samples, 0.28%)</title><rect x="17.2" y="515.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (4 samples, 0.16%)</title><rect x="17.2" y="499.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.12%)</title><rect x="19.1" y="499.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.12%)</title><rect x="19.1" y="483.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.12%)</title><rect x="19.1" y="467.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.1" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.12%)</title><rect x="19.1" y="451.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.1" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (3 samples, 0.12%)</title><rect x="19.1" y="435.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.08%)</title><rect x="19.6" y="419.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.08%)</title><rect x="20.6" y="515.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.08%)</title><rect x="20.6" y="499.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.08%)</title><rect x="20.6" y="483.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.6" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.08%)</title><rect x="20.6" y="467.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.6" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.08%)</title><rect x="20.6" y="451.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (705 samples, 28.69%)</title><rect x="21.5" y="563.0" width="338.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.5" y="574.0">java/util/concurrent/ArrayBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (617 samples, 25.11%)</title><rect x="21.5" y="547.0" width="296.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.5" y="558.0">java/util/concurrent/locks/AbstractQueue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (10 samples, 0.41%)</title><rect x="21.5" y="531.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (6 samples, 0.24%)</title><rect x="23.4" y="515.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.4" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (2 samples, 0.08%)</title><rect x="23.4" y="499.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.4" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.set (1 samples, 0.04%)</title><rect x="23.4" y="483.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="26.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.04%)</title><rect x="23.9" y="483.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.9" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (4 samples, 0.16%)</title><rect x="24.4" y="499.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.4" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (3 samples, 0.12%)</title><rect x="24.9" y="483.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.08%)</title><rect x="26.3" y="531.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.08%)</title><rect x="26.3" y="515.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.08%)</title><rect x="26.3" y="499.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.08%)</title><rect x="26.3" y="483.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.3" y="494.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.08%)</title><rect x="26.3" y="467.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="29.3" y="478.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.08%)</title><rect x="26.3" y="451.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="29.3" y="462.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="26.3" y="435.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="29.3" y="446.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="26.8" y="435.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="29.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (31 samples, 1.26%)</title><rect x="27.3" y="531.0" width="14.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (31 samples, 1.26%)</title><rect x="27.3" y="515.0" width="14.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 1.22%)</title><rect x="27.3" y="499.0" width="14.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 1.10%)</title><rect x="28.7" y="483.0" width="13.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.7" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (27 samples, 1.10%)</title><rect x="28.7" y="467.0" width="13.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.7" y="478.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (25 samples, 1.02%)</title><rect x="29.7" y="451.0" width="12.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="32.7" y="462.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="29.7" y="435.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="32.7" y="446.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.04%)</title><rect x="29.7" y="419.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="32.7" y="430.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.04%)</title><rect x="30.2" y="435.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="33.2" y="446.0"></text>
</g>
<g>
<title>__psynch_cvsignal (19 samples, 0.77%)</title><rect x="30.7" y="435.0" width="9.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="33.7" y="446.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.04%)</title><rect x="39.8" y="435.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="42.8" y="446.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.08%)</title><rect x="40.3" y="435.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="43.3" y="446.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="41.2" y="435.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="44.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.04%)</title><rect x="41.7" y="499.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (574 samples, 23.36%)</title><rect x="42.2" y="531.0" width="275.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.2" y="542.0">java/util/concurrent/locks/LockSuppor..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (574 samples, 23.36%)</title><rect x="42.2" y="515.0" width="275.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.2" y="526.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>EventThreadPark::EventThreadPark(EventStartTime) (1 samples, 0.04%)</title><rect x="53.2" y="499.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="56.2" y="510.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.04%)</title><rect x="53.7" y="499.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="56.7" y="510.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.04%)</title><rect x="54.2" y="499.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="57.2" y="510.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (1 samples, 0.04%)</title><rect x="54.7" y="499.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="57.7" y="510.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.04%)</title><rect x="55.1" y="499.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="58.1" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.08%)</title><rect x="55.6" y="499.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="58.6" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="56.6" y="499.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="59.6" y="510.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (543 samples, 22.10%)</title><rect x="57.1" y="499.0" width="260.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="60.1" y="510.0">Unsafe_Park(JNIEnv_*, _jobject*, un..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="58.0" y="483.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="61.0" y="494.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.04%)</title><rect x="58.0" y="467.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="61.0" y="478.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (6 samples, 0.24%)</title><rect x="58.5" y="483.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="61.5" y="494.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.12%)</title><rect x="59.5" y="467.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="62.5" y="478.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.04%)</title><rect x="59.5" y="451.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="62.5" y="462.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.08%)</title><rect x="59.9" y="451.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="62.9" y="462.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.08%)</title><rect x="59.9" y="435.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="62.9" y="446.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.08%)</title><rect x="59.9" y="419.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="62.9" y="430.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.04%)</title><rect x="60.9" y="467.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="63.9" y="478.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.16%)</title><rect x="61.4" y="483.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="64.4" y="494.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (3 samples, 0.12%)</title><rect x="61.4" y="467.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="64.4" y="478.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive(JavaThread*) (1 samples, 0.04%)</title><rect x="61.4" y="451.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="64.4" y="462.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.08%)</title><rect x="61.9" y="451.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="64.9" y="462.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.04%)</title><rect x="62.8" y="467.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="65.8" y="478.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.04%)</title><rect x="63.3" y="483.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="66.3" y="494.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.04%)</title><rect x="63.3" y="467.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="66.3" y="478.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.08%)</title><rect x="63.8" y="483.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="66.8" y="494.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.08%)</title><rect x="63.8" y="467.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="66.8" y="478.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.04%)</title><rect x="64.3" y="451.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="67.3" y="462.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (509 samples, 20.72%)</title><rect x="64.7" y="483.0" width="244.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="67.7" y="494.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.04%)</title><rect x="66.2" y="467.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="69.2" y="478.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.12%)</title><rect x="66.7" y="467.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="69.7" y="478.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="67.2" y="451.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="70.2" y="462.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="67.6" y="451.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="70.6" y="462.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="68.1" y="467.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="71.1" y="478.0"></text>
</g>
<g>
<title>__psynch_cvwait (493 samples, 20.07%)</title><rect x="68.6" y="467.0" width="236.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="71.6" y="478.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (6 samples, 0.24%)</title><rect x="305.4" y="467.0" width="2.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="308.4" y="478.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.04%)</title><rect x="308.2" y="467.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="311.2" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="308.7" y="467.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="311.7" y="478.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (2 samples, 0.08%)</title><rect x="309.2" y="483.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="312.2" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.04%)</title><rect x="310.2" y="483.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="313.2" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.04%)</title><rect x="310.6" y="483.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="313.6" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.16%)</title><rect x="311.1" y="483.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="314.1" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.16%)</title><rect x="311.1" y="467.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="314.1" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.16%)</title><rect x="311.1" y="451.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="314.1" y="462.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.16%)</title><rect x="311.1" y="435.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="314.1" y="446.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.16%)</title><rect x="311.1" y="419.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="314.1" y="430.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.04%)</title><rect x="311.1" y="403.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="314.1" y="414.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="311.6" y="403.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="314.6" y="414.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.04%)</title><rect x="312.1" y="403.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="315.1" y="414.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="312.6" y="403.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="315.6" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.08%)</title><rect x="313.0" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="316.0" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="313.5" y="467.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="316.5" y="478.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="313.5" y="451.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="316.5" y="462.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="313.5" y="435.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="316.5" y="446.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="313.5" y="419.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="316.5" y="430.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="313.5" y="403.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="316.5" y="414.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.04%)</title><rect x="314.0" y="483.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="317.0" y="494.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="314.5" y="483.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="317.5" y="494.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.04%)</title><rect x="315.0" y="483.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="318.0" y="494.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.04%)</title><rect x="315.4" y="483.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="318.4" y="494.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (4 samples, 0.16%)</title><rect x="315.9" y="483.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="318.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (23 samples, 0.94%)</title><rect x="317.8" y="547.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (23 samples, 0.94%)</title><rect x="317.8" y="531.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="320.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (23 samples, 0.94%)</title><rect x="317.8" y="515.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="320.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.04%)</title><rect x="317.8" y="499.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.04%)</title><rect x="317.8" y="483.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="320.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (21 samples, 0.85%)</title><rect x="318.3" y="499.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (21 samples, 0.85%)</title><rect x="318.3" y="483.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (21 samples, 0.85%)</title><rect x="318.3" y="467.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="321.3" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.04%)</title><rect x="318.3" y="451.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="321.3" y="462.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (20 samples, 0.81%)</title><rect x="318.8" y="451.0" width="9.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="321.8" y="462.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 0.73%)</title><rect x="318.8" y="435.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="321.8" y="446.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.04%)</title><rect x="318.8" y="419.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="321.8" y="430.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 0.69%)</title><rect x="319.3" y="419.0" width="8.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="322.3" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.04%)</title><rect x="327.5" y="435.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="330.5" y="446.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.04%)</title><rect x="327.9" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="330.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.04%)</title><rect x="328.4" y="499.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (65 samples, 2.65%)</title><rect x="328.9" y="547.0" width="31.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.9" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (65 samples, 2.65%)</title><rect x="328.9" y="531.0" width="31.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.9" y="542.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (65 samples, 2.65%)</title><rect x="328.9" y="515.0" width="31.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.9" y="526.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (65 samples, 2.65%)</title><rect x="328.9" y="499.0" width="31.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="331.9" y="510.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (65 samples, 2.65%)</title><rect x="328.9" y="483.0" width="31.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.9" y="494.0">jd..</text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (62 samples, 2.52%)</title><rect x="330.3" y="467.0" width="29.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="333.3" y="478.0">Un..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="330.8" y="451.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="333.8" y="462.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.04%)</title><rect x="330.8" y="435.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="333.8" y="446.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.04%)</title><rect x="331.3" y="451.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="334.3" y="462.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.04%)</title><rect x="331.3" y="435.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="334.3" y="446.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.04%)</title><rect x="331.8" y="451.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="334.8" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.08%)</title><rect x="332.3" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="335.3" y="462.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="332.3" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="335.3" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="332.7" y="435.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="335.7" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="332.7" y="419.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="335.7" y="430.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="332.7" y="403.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="335.7" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="332.7" y="387.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="335.7" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="332.7" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="335.7" y="382.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="332.7" y="355.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="335.7" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="332.7" y="339.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="335.7" y="350.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="332.7" y="323.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="335.7" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.04%)</title><rect x="333.2" y="451.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="336.2" y="462.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.04%)</title><rect x="333.2" y="435.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="336.2" y="446.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.16%)</title><rect x="333.7" y="451.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="336.7" y="462.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (3 samples, 0.12%)</title><rect x="334.2" y="435.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="337.2" y="446.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="335.6" y="451.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="338.6" y="462.0"></text>
</g>
<g>
<title>__psynch_cvsignal (44 samples, 1.79%)</title><rect x="336.1" y="451.0" width="21.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="339.1" y="462.0">_..</text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.04%)</title><rect x="357.2" y="451.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="360.2" y="462.0"></text>
</g>
<g>
<title>in_ByteSize(int) (1 samples, 0.04%)</title><rect x="357.7" y="451.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="360.7" y="462.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.08%)</title><rect x="358.2" y="451.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="361.2" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.08%)</title><rect x="359.1" y="451.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="362.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (2 samples, 0.08%)</title><rect x="360.1" y="563.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="363.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.04%)</title><rect x="361.1" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.run (1,044 samples, 42.49%)</title><rect x="361.6" y="579.0" width="501.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.6" y="590.0">ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.run</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (1,044 samples, 42.49%)</title><rect x="361.6" y="563.0" width="501.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="364.6" y="574.0">ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.20%)</title><rect x="363.0" y="547.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="364.0" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="367.0" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="364.4" y="531.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.4" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="364.4" y="515.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="367.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="364.9" y="531.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="367.9" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="364.9" y="515.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="367.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendProxyResponse (424 samples, 17.26%)</title><rect x="365.4" y="547.0" width="203.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.4" y="558.0">ru/mail/polis/service/suhov..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (281 samples, 11.44%)</title><rect x="365.4" y="531.0" width="134.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.4" y="542.0">one/nio/http/Http..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.28%)</title><rect x="367.3" y="515.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="370.3" y="526.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.04%)</title><rect x="367.3" y="499.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="370.3" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.24%)</title><rect x="367.8" y="499.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="370.8" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.24%)</title><rect x="367.8" y="483.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="370.8" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.04%)</title><rect x="370.2" y="467.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="373.2" y="478.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.08%)</title><rect x="370.7" y="515.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="373.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.08%)</title><rect x="370.7" y="499.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="373.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.08%)</title><rect x="370.7" y="483.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.7" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (266 samples, 10.83%)</title><rect x="371.6" y="515.0" width="127.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="374.6" y="526.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (23 samples, 0.94%)</title><rect x="371.6" y="499.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="374.6" y="510.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.57%)</title><rect x="376.0" y="483.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="379.0" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (14 samples, 0.57%)</title><rect x="376.0" y="467.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="379.0" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (14 samples, 0.57%)</title><rect x="376.0" y="451.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.0" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.16%)</title><rect x="380.8" y="435.0" width="1.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="383.8" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (243 samples, 9.89%)</title><rect x="382.7" y="499.0" width="116.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="385.7" y="510.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/net/Session.write (243 samples, 9.89%)</title><rect x="382.7" y="483.0" width="116.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.7" y="494.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (241 samples, 9.81%)</title><rect x="382.7" y="467.0" width="115.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="385.7" y="478.0">one/nio/net/Se..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.08%)</title><rect x="382.7" y="451.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="385.7" y="462.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.04%)</title><rect x="383.6" y="451.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="386.6" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.16%)</title><rect x="384.1" y="451.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="387.1" y="462.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.08%)</title><rect x="384.1" y="435.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="387.1" y="446.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (2 samples, 0.08%)</title><rect x="384.1" y="419.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="387.1" y="430.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.08%)</title><rect x="385.1" y="435.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="388.1" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (234 samples, 9.52%)</title><rect x="386.0" y="451.0" width="112.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.0" y="462.0">one/nio/net/Ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.28%)</title><rect x="386.0" y="435.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.0" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.28%)</title><rect x="386.0" y="419.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="389.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.24%)</title><rect x="386.5" y="403.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="389.5" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.08%)</title><rect x="388.0" y="387.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="391.0" y="398.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (1 samples, 0.04%)</title><rect x="388.9" y="387.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="391.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (227 samples, 9.24%)</title><rect x="389.4" y="435.0" width="109.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="392.4" y="446.0">sun/nio/ch/So..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.28%)</title><rect x="389.4" y="419.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="392.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.28%)</title><rect x="389.4" y="403.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.04%)</title><rect x="389.4" y="387.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="392.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.04%)</title><rect x="389.4" y="371.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="392.4" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.04%)</title><rect x="389.4" y="355.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.4" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.04%)</title><rect x="389.4" y="339.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="392.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.04%)</title><rect x="389.4" y="323.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="392.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.24%)</title><rect x="389.9" y="387.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.24%)</title><rect x="389.9" y="371.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (4 samples, 0.16%)</title><rect x="390.4" y="355.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="393.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.04%)</title><rect x="392.3" y="355.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="395.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (220 samples, 8.95%)</title><rect x="392.8" y="419.0" width="105.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.8" y="430.0">sun/nio/ch/IO..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (220 samples, 8.95%)</title><rect x="392.8" y="403.0" width="105.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="395.8" y="414.0">sun/nio/ch/IO..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.04%)</title><rect x="392.8" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.8" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.04%)</title><rect x="392.8" y="371.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.8" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.04%)</title><rect x="392.8" y="355.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="395.8" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.04%)</title><rect x="392.8" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.8" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (1 samples, 0.04%)</title><rect x="392.8" y="323.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="395.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (210 samples, 8.55%)</title><rect x="393.2" y="387.0" width="100.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="396.2" y="398.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (210 samples, 8.55%)</title><rect x="393.2" y="371.0" width="100.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="396.2" y="382.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (210 samples, 8.55%)</title><rect x="393.2" y="355.0" width="100.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="396.2" y="366.0">sun/nio/ch/F..</text>
</g>
<g>
<title>JNI_OnLoad (2 samples, 0.08%)</title><rect x="399.5" y="339.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="402.5" y="350.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.04%)</title><rect x="400.5" y="339.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="403.5" y="350.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.04%)</title><rect x="400.5" y="323.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="403.5" y="334.0"></text>
</g>
<g>
<title>write (194 samples, 7.90%)</title><rect x="400.9" y="339.0" width="93.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="403.9" y="350.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.37%)</title><rect x="494.1" y="387.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="497.1" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.20%)</title><rect x="494.1" y="371.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="497.1" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.08%)</title><rect x="495.5" y="355.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.5" y="366.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.04%)</title><rect x="496.0" y="339.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="499.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.16%)</title><rect x="496.5" y="371.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="499.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.04%)</title><rect x="497.9" y="355.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.9" y="366.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.08%)</title><rect x="498.4" y="467.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="501.4" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.04%)</title><rect x="498.4" y="451.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="501.4" y="462.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.04%)</title><rect x="498.9" y="451.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="501.9" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.08%)</title><rect x="499.4" y="515.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="499.9" y="499.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="502.9" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="499.9" y="483.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.9" y="494.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="499.9" y="467.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.9" y="478.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="499.9" y="451.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="502.9" y="462.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.04%)</title><rect x="499.9" y="435.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.get (143 samples, 5.82%)</title><rect x="500.3" y="531.0" width="68.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="503.3" y="542.0">ru/mail..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.04%)</title><rect x="501.3" y="515.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.3" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1191747167.invoke (1 samples, 0.04%)</title><rect x="501.3" y="499.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="504.3" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.04%)</title><rect x="501.3" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="504.3" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.04%)</title><rect x="501.3" y="467.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="504.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.04%)</title><rect x="501.3" y="451.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="504.3" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="501.3" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="504.3" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="501.3" y="419.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="504.3" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="501.3" y="403.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="504.3" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="501.3" y="387.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="504.3" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="501.3" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="504.3" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="501.3" y="355.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="504.3" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="501.3" y="339.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="504.3" y="350.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.04%)</title><rect x="501.3" y="323.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="504.3" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.16%)</title><rect x="501.8" y="515.0" width="1.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="504.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.getCell (128 samples, 5.21%)</title><rect x="503.7" y="515.0" width="61.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="506.7" y="526.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 0.12%)</title><rect x="504.7" y="499.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="507.7" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.08%)</title><rect x="505.1" y="483.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="508.1" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.08%)</title><rect x="505.1" y="467.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="508.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (19 samples, 0.77%)</title><rect x="506.1" y="499.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="509.1" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 0.12%)</title><rect x="507.1" y="483.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="510.1" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.04%)</title><rect x="508.0" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="511.0" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.04%)</title><rect x="508.0" y="451.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="511.0" y="462.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.16%)</title><rect x="508.5" y="483.0" width="1.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="511.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (7 samples, 0.28%)</title><rect x="510.4" y="483.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="513.4" y="494.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.24%)</title><rect x="510.9" y="467.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="513.9" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.16%)</title><rect x="511.9" y="451.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.9" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.04%)</title><rect x="513.3" y="435.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="516.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$86/1234371573.apply (3 samples, 0.12%)</title><rect x="513.8" y="483.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="516.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (1 samples, 0.04%)</title><rect x="514.8" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="517.8" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.04%)</title><rect x="514.8" y="451.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="517.8" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="514.8" y="435.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="517.8" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="514.8" y="419.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="517.8" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="514.8" y="403.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="517.8" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="514.8" y="387.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="517.8" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="514.8" y="371.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="517.8" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="514.8" y="355.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="517.8" y="366.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.04%)</title><rect x="514.8" y="339.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="517.8" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.04%)</title><rect x="514.8" y="323.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="517.8" y="334.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.04%)</title><rect x="514.8" y="307.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="517.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (4 samples, 0.16%)</title><rect x="515.2" y="499.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="518.2" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.12%)</title><rect x="515.7" y="483.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="518.7" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.12%)</title><rect x="515.7" y="467.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="518.7" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="515.7" y="451.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="518.7" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="515.7" y="435.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.7" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="516.2" y="419.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.2" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="516.7" y="403.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="519.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="516.7" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.7" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="516.7" y="371.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (100 samples, 4.07%)</title><rect x="517.2" y="499.0" width="48.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.2" y="510.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.04%)</title><rect x="518.6" y="483.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="521.6" y="494.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 0.33%)</title><rect x="519.1" y="483.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="522.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.16%)</title><rect x="519.1" y="467.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="522.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.16%)</title><rect x="519.1" y="451.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="522.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (4 samples, 0.16%)</title><rect x="521.0" y="467.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="524.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (4 samples, 0.16%)</title><rect x="521.0" y="451.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="524.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (4 samples, 0.16%)</title><rect x="521.0" y="435.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="524.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (2 samples, 0.08%)</title><rect x="521.0" y="419.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="524.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (2 samples, 0.08%)</title><rect x="522.0" y="419.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="525.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findLast (1 samples, 0.04%)</title><rect x="522.4" y="403.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="525.4" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.04%)</title><rect x="522.9" y="483.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="525.9" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.04%)</title><rect x="522.9" y="467.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$84/1926923257.get$Lambda (1 samples, 0.04%)</title><rect x="522.9" y="451.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="525.9" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="522.9" y="435.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="525.9" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="522.9" y="419.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="525.9" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="522.9" y="403.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="525.9" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="522.9" y="387.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="525.9" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="522.9" y="371.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="525.9" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="522.9" y="355.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="525.9" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="522.9" y="339.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="525.9" y="350.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="522.9" y="323.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="525.9" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.08%)</title><rect x="523.4" y="483.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="526.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (14 samples, 0.57%)</title><rect x="524.4" y="483.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="527.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (14 samples, 0.57%)</title><rect x="524.4" y="467.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (1 samples, 0.04%)</title><rect x="525.8" y="451.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="528.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (7 samples, 0.28%)</title><rect x="526.3" y="451.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="529.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="527.2" y="435.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="530.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.16%)</title><rect x="527.7" y="435.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="530.7" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.16%)</title><rect x="527.7" y="419.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="530.7" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (4 samples, 0.16%)</title><rect x="527.7" y="403.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="530.7" y="414.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.08%)</title><rect x="529.6" y="451.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="532.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.04%)</title><rect x="530.6" y="451.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="533.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.08%)</title><rect x="531.1" y="483.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="534.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (2 samples, 0.08%)</title><rect x="531.1" y="467.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="534.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (2 samples, 0.08%)</title><rect x="531.1" y="451.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="534.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (7 samples, 0.28%)</title><rect x="532.0" y="483.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="535.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (7 samples, 0.28%)</title><rect x="532.0" y="467.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.0" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (7 samples, 0.28%)</title><rect x="532.0" y="451.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="535.0" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.08%)</title><rect x="532.0" y="435.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.0" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.04%)</title><rect x="532.5" y="419.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.5" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.04%)</title><rect x="533.0" y="435.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="536.0" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.04%)</title><rect x="533.0" y="419.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="536.0" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.04%)</title><rect x="533.0" y="403.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="536.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$77/985518634.apply (1 samples, 0.04%)</title><rect x="533.0" y="387.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="536.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (1 samples, 0.04%)</title><rect x="533.0" y="371.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="536.0" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="533.0" y="355.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="536.0" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="533.0" y="339.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="536.0" y="350.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (4 samples, 0.16%)</title><rect x="533.5" y="435.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="536.5" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (4 samples, 0.16%)</title><rect x="533.5" y="419.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="536.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.iterator (62 samples, 2.52%)</title><rect x="535.4" y="483.0" width="29.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="538.4" y="494.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (60 samples, 2.44%)</title><rect x="535.9" y="467.0" width="28.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="538.9" y="478.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (60 samples, 2.44%)</title><rect x="535.9" y="451.0" width="28.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="538.9" y="462.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (60 samples, 2.44%)</title><rect x="535.9" y="435.0" width="28.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="538.9" y="446.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.04%)</title><rect x="536.8" y="419.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="539.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (2 samples, 0.08%)</title><rect x="537.3" y="419.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="540.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (2 samples, 0.08%)</title><rect x="537.3" y="403.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="540.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.08%)</title><rect x="537.3" y="387.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.08%)</title><rect x="537.3" y="371.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="540.3" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.08%)</title><rect x="537.3" y="355.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="540.3" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.08%)</title><rect x="537.3" y="339.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="540.3" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.04%)</title><rect x="537.8" y="323.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="540.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (55 samples, 2.24%)</title><rect x="538.3" y="419.0" width="26.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="541.3" y="430.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (55 samples, 2.24%)</title><rect x="538.3" y="403.0" width="26.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="541.3" y="414.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.16%)</title><rect x="538.8" y="387.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="541.8" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.16%)</title><rect x="538.8" y="371.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="541.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.16%)</title><rect x="538.8" y="355.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="541.8" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.16%)</title><rect x="538.8" y="339.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="541.8" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.08%)</title><rect x="539.7" y="323.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="542.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (50 samples, 2.04%)</title><rect x="540.7" y="387.0" width="24.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="543.7" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (32 samples, 1.30%)</title><rect x="549.3" y="371.0" width="15.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="552.3" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (32 samples, 1.30%)</title><rect x="549.3" y="355.0" width="15.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (31 samples, 1.26%)</title><rect x="549.8" y="339.0" width="14.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="552.8" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (27 samples, 1.10%)</title><rect x="550.3" y="323.0" width="13.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="553.3" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.28%)</title><rect x="559.9" y="307.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="562.9" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.08%)</title><rect x="562.3" y="291.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="565.3" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.12%)</title><rect x="563.3" y="323.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="566.3" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.08%)</title><rect x="563.7" y="307.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="566.7" y="318.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.08%)</title><rect x="563.7" y="291.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="566.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (1 samples, 0.04%)</title><rect x="564.7" y="467.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="567.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.toByteBuffer (8 samples, 0.33%)</title><rect x="565.2" y="515.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="568.2" y="526.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.08%)</title><rect x="565.2" y="499.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="568.2" y="510.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.08%)</title><rect x="565.2" y="483.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="568.2" y="494.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.08%)</title><rect x="565.2" y="467.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="568.2" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.08%)</title><rect x="565.2" y="451.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="568.2" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.08%)</title><rect x="565.2" y="435.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="568.2" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.08%)</title><rect x="565.2" y="419.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="568.2" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="565.7" y="403.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="568.7" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="565.7" y="387.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="568.7" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="565.7" y="371.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="568.7" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="565.7" y="355.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="568.7" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="565.7" y="339.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="568.7" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.24%)</title><rect x="566.1" y="499.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="569.1" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.24%)</title><rect x="566.1" y="483.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="569.1" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="567.1" y="467.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="570.1" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="567.1" y="451.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="570.1" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="567.1" y="435.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="570.1" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="567.1" y="419.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="570.1" y="430.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="567.1" y="403.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="570.1" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="567.1" y="387.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="570.1" y="398.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.04%)</title><rect x="567.1" y="371.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="570.1" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="567.6" y="467.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.6" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="568.1" y="451.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="571.1" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="568.1" y="435.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="571.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendReplicationResponse (612 samples, 24.91%)</title><rect x="569.0" y="547.0" width="293.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="572.0" y="558.0">ru/mail/polis/service/suhova/MoribundSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (118 samples, 4.80%)</title><rect x="569.0" y="531.0" width="56.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="572.0" y="542.0">one/ni..</text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (1 samples, 0.04%)</title><rect x="569.5" y="515.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="572.5" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (115 samples, 4.68%)</title><rect x="570.0" y="515.0" width="55.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="573.0" y="526.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.41%)</title><rect x="570.0" y="499.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="573.0" y="510.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.33%)</title><rect x="570.9" y="483.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.9" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (8 samples, 0.33%)</title><rect x="570.9" y="467.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.33%)</title><rect x="570.9" y="451.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="573.9" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.08%)</title><rect x="573.8" y="435.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="576.8" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (105 samples, 4.27%)</title><rect x="574.8" y="499.0" width="50.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="577.8" y="510.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (104 samples, 4.23%)</title><rect x="575.3" y="483.0" width="49.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="578.3" y="494.0">one/n..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="575.3" y="467.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="578.3" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (101 samples, 4.11%)</title><rect x="575.7" y="467.0" width="48.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="578.7" y="478.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (101 samples, 4.11%)</title><rect x="575.7" y="451.0" width="48.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.7" y="462.0">one/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (100 samples, 4.07%)</title><rect x="576.2" y="435.0" width="48.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="579.2" y="446.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.20%)</title><rect x="576.2" y="419.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="579.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.20%)</title><rect x="576.2" y="403.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="579.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.08%)</title><rect x="576.2" y="387.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="579.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.08%)</title><rect x="576.2" y="371.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="579.2" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.08%)</title><rect x="576.2" y="355.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="579.2" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.04%)</title><rect x="576.7" y="339.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="579.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.04%)</title><rect x="576.7" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="579.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.12%)</title><rect x="577.2" y="387.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="580.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.12%)</title><rect x="577.2" y="371.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="580.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (1 samples, 0.04%)</title><rect x="577.7" y="355.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="580.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.04%)</title><rect x="578.1" y="355.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="581.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.04%)</title><rect x="578.1" y="339.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="581.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (95 samples, 3.87%)</title><rect x="578.6" y="419.0" width="45.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="581.6" y="430.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (95 samples, 3.87%)</title><rect x="578.6" y="403.0" width="45.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.6" y="414.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (92 samples, 3.74%)</title><rect x="578.6" y="387.0" width="44.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="581.6" y="398.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (92 samples, 3.74%)</title><rect x="578.6" y="371.0" width="44.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="581.6" y="382.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (92 samples, 3.74%)</title><rect x="578.6" y="355.0" width="44.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="581.6" y="366.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.08%)</title><rect x="583.0" y="339.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="586.0" y="350.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.04%)</title><rect x="583.4" y="323.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="586.4" y="334.0"></text>
</g>
<g>
<title>write (81 samples, 3.30%)</title><rect x="583.9" y="339.0" width="38.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="586.9" y="350.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.12%)</title><rect x="622.8" y="387.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="625.8" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="622.8" y="371.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="625.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.08%)</title><rect x="623.3" y="371.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="626.3" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.08%)</title><rect x="624.3" y="467.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="627.3" y="478.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.08%)</title><rect x="624.3" y="451.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="627.3" y="462.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.04%)</title><rect x="624.3" y="435.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="627.3" y="446.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.04%)</title><rect x="624.7" y="435.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="627.7" y="446.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.04%)</title><rect x="624.7" y="419.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="627.7" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.04%)</title><rect x="625.2" y="515.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="628.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getMethod (2 samples, 0.08%)</title><rect x="625.7" y="531.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="628.7" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/Consensus.get (11 samples, 0.45%)</title><rect x="626.7" y="531.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="629.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (5 samples, 0.20%)</title><rect x="627.6" y="515.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="630.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.20%)</title><rect x="627.6" y="499.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="630.6" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.20%)</title><rect x="627.6" y="483.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="630.6" y="494.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="629.1" y="467.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="632.1" y="478.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="629.1" y="451.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="632.1" y="462.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.04%)</title><rect x="629.1" y="435.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="632.1" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="629.5" y="467.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="632.5" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (3 samples, 0.12%)</title><rect x="630.0" y="515.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="633.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.12%)</title><rect x="630.0" y="499.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="633.0" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (1 samples, 0.04%)</title><rect x="631.5" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.5" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.04%)</title><rect x="631.5" y="499.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="634.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.get (38 samples, 1.55%)</title><rect x="631.9" y="531.0" width="18.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="634.9" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.04%)</title><rect x="631.9" y="515.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.9" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1191747167.invoke (1 samples, 0.04%)</title><rect x="631.9" y="499.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.9" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.04%)</title><rect x="631.9" y="483.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="634.9" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.04%)</title><rect x="631.9" y="467.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="634.9" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.04%)</title><rect x="631.9" y="451.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.9" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="631.9" y="435.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="634.9" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="631.9" y="419.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="634.9" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="631.9" y="403.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="634.9" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="631.9" y="387.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="634.9" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="631.9" y="371.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="634.9" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="631.9" y="355.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="634.9" y="366.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="631.9" y="339.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="634.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.04%)</title><rect x="632.4" y="515.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="635.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.getCell (32 samples, 1.30%)</title><rect x="632.9" y="515.0" width="15.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="635.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.04%)</title><rect x="632.9" y="499.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (1 samples, 0.04%)</title><rect x="633.4" y="499.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="636.4" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.04%)</title><rect x="633.4" y="483.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="636.4" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.04%)</title><rect x="633.4" y="467.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.4" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="633.4" y="451.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="636.4" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="633.4" y="435.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.4" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="633.4" y="419.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="636.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="633.4" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="636.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="633.4" y="387.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="636.4" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="633.4" y="371.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (30 samples, 1.22%)</title><rect x="633.9" y="499.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="636.9" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.08%)</title><rect x="633.9" y="483.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="636.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.04%)</title><rect x="634.3" y="467.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.3" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="634.8" y="483.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.8" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="634.8" y="467.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.8" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="634.8" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.8" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="634.8" y="435.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="637.8" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="634.8" y="419.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.8" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.04%)</title><rect x="634.8" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="637.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (5 samples, 0.20%)</title><rect x="635.3" y="483.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (5 samples, 0.20%)</title><rect x="635.3" y="467.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="638.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (5 samples, 0.20%)</title><rect x="635.3" y="451.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="638.3" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.04%)</title><rect x="635.3" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="638.3" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="635.8" y="435.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.8" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.04%)</title><rect x="635.8" y="419.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.04%)</title><rect x="635.8" y="403.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.12%)</title><rect x="636.3" y="435.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="639.3" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.12%)</title><rect x="636.3" y="419.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="639.3" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.12%)</title><rect x="636.3" y="403.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="639.3" y="414.0"></text>
</g>
<g>
<title>java/lang/Boolean.parseBoolean (1 samples, 0.04%)</title><rect x="636.7" y="387.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.7" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="637.2" y="387.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="640.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.iterator (22 samples, 0.90%)</title><rect x="637.7" y="483.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="640.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (20 samples, 0.81%)</title><rect x="637.7" y="467.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (20 samples, 0.81%)</title><rect x="637.7" y="451.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (20 samples, 0.81%)</title><rect x="637.7" y="435.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (2 samples, 0.08%)</title><rect x="637.7" y="419.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="640.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (2 samples, 0.08%)</title><rect x="638.7" y="419.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="641.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (2 samples, 0.08%)</title><rect x="638.7" y="403.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="641.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.08%)</title><rect x="638.7" y="387.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.7" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.08%)</title><rect x="638.7" y="371.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="641.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.08%)</title><rect x="638.7" y="355.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="641.7" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.08%)</title><rect x="638.7" y="339.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="641.7" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.04%)</title><rect x="639.1" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="642.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (15 samples, 0.61%)</title><rect x="639.6" y="419.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="642.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (15 samples, 0.61%)</title><rect x="639.6" y="403.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.04%)</title><rect x="639.6" y="387.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="642.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="639.6" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="642.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="639.6" y="355.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="642.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (14 samples, 0.57%)</title><rect x="640.1" y="387.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="643.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (10 samples, 0.41%)</title><rect x="642.0" y="371.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.41%)</title><rect x="642.0" y="355.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="645.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.41%)</title><rect x="642.0" y="339.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="645.0" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.24%)</title><rect x="643.0" y="323.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="646.0" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.08%)</title><rect x="644.9" y="307.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.9" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.08%)</title><rect x="645.9" y="323.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="648.9" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.08%)</title><rect x="645.9" y="307.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="648.9" y="318.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.04%)</title><rect x="646.3" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="649.3" y="302.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="646.8" y="419.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="649.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (2 samples, 0.08%)</title><rect x="647.3" y="467.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="650.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.&lt;init&gt; (2 samples, 0.08%)</title><rect x="647.3" y="451.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.3" y="462.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (1 samples, 0.04%)</title><rect x="647.3" y="435.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.3" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.04%)</title><rect x="647.3" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="650.3" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.04%)</title><rect x="647.8" y="435.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="650.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.toByteBuffer (4 samples, 0.16%)</title><rect x="648.3" y="515.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="651.3" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.16%)</title><rect x="648.3" y="499.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="651.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.16%)</title><rect x="648.3" y="483.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="651.3" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="648.3" y="467.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="651.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="648.3" y="451.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="651.3" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="648.7" y="435.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="651.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="648.7" y="419.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="651.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="648.7" y="403.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="651.7" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (2 samples, 0.08%)</title><rect x="649.2" y="435.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="652.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.getAllResponses (443 samples, 18.03%)</title><rect x="650.2" y="531.0" width="212.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="653.2" y="542.0">ru/mail/polis/service/suhova..</text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.08%)</title><rect x="650.2" y="515.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="653.2" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="650.7" y="499.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="653.7" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="650.7" y="483.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="653.7" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="650.7" y="467.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.7" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.04%)</title><rect x="650.7" y="451.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="653.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.isMe (1 samples, 0.04%)</title><rect x="651.1" y="515.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="654.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.isMe (1 samples, 0.04%)</title><rect x="651.1" y="499.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="654.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.04%)</title><rect x="651.1" y="483.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="654.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.proxy (440 samples, 17.91%)</title><rect x="651.6" y="515.0" width="211.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="654.6" y="526.0">ru/mail/polis/service/suhova..</text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.16%)</title><rect x="651.6" y="499.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="654.6" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.16%)</title><rect x="651.6" y="483.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="654.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.16%)</title><rect x="651.6" y="467.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="654.6" y="478.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (2 samples, 0.08%)</title><rect x="652.6" y="451.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="655.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (436 samples, 17.75%)</title><rect x="653.5" y="499.0" width="209.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.5" y="510.0">one/nio/http/HttpClient.inv..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (436 samples, 17.75%)</title><rect x="653.5" y="483.0" width="209.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.5" y="494.0">one/nio/http/HttpClient.inv..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.04%)</title><rect x="653.5" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="656.5" y="478.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="653.5" y="451.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="656.5" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (247 samples, 10.05%)</title><rect x="654.0" y="467.0" width="118.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="657.0" y="478.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (247 samples, 10.05%)</title><rect x="654.0" y="451.0" width="118.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="657.0" y="462.0">one/nio/net/Ja..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (247 samples, 10.05%)</title><rect x="654.0" y="435.0" width="118.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="657.0" y="446.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.04%)</title><rect x="654.0" y="419.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.04%)</title><rect x="654.0" y="403.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="657.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (245 samples, 9.97%)</title><rect x="654.5" y="419.0" width="117.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="657.5" y="430.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (245 samples, 9.97%)</title><rect x="654.5" y="403.0" width="117.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.5" y="414.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (240 samples, 9.77%)</title><rect x="655.0" y="387.0" width="115.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.0" y="398.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (240 samples, 9.77%)</title><rect x="655.0" y="371.0" width="115.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.0" y="382.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (240 samples, 9.77%)</title><rect x="655.0" y="355.0" width="115.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.0" y="366.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.04%)</title><rect x="662.7" y="339.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="665.7" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (223 samples, 9.08%)</title><rect x="663.2" y="339.0" width="107.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="666.2" y="350.0">rpc_errlist</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.16%)</title><rect x="770.3" y="387.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="773.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocateDirect (1 samples, 0.04%)</title><rect x="770.3" y="371.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="773.3" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="770.3" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.3" y="366.0"></text>
</g>
<g>
<title>java/nio/Bits.reserveMemory (1 samples, 0.04%)</title><rect x="770.3" y="339.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="773.3" y="350.0"></text>
</g>
<g>
<title>java/nio/Bits.tryReserveMemory (1 samples, 0.04%)</title><rect x="770.3" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="773.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.compareAndSet (1 samples, 0.04%)</title><rect x="770.3" y="307.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="773.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.12%)</title><rect x="770.7" y="371.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="773.7" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="771.7" y="355.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="774.7" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="771.7" y="339.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="774.7" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="771.7" y="323.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.7" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="771.7" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="774.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (1 samples, 0.04%)</title><rect x="772.2" y="419.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="775.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="772.2" y="403.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="775.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (29 samples, 1.18%)</title><rect x="772.7" y="467.0" width="13.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="775.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.04%)</title><rect x="773.1" y="451.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.1" y="462.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="773.1" y="435.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="776.1" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="773.1" y="419.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="776.1" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (10 samples, 0.41%)</title><rect x="773.6" y="451.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="776.6" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.41%)</title><rect x="773.6" y="435.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="776.6" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.41%)</title><rect x="773.6" y="419.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="776.6" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="777.5" y="403.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="777.5" y="387.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="780.5" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.04%)</title><rect x="777.5" y="371.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.5" y="382.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.04%)</title><rect x="777.9" y="403.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="780.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.24%)</title><rect x="778.4" y="451.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="781.4" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.04%)</title><rect x="781.3" y="451.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="784.3" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (9 samples, 0.37%)</title><rect x="781.8" y="451.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="784.8" y="462.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="781.8" y="435.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="784.8" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.24%)</title><rect x="782.3" y="435.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="785.3" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.24%)</title><rect x="782.3" y="419.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.04%)</title><rect x="784.2" y="403.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="787.2" y="414.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.04%)</title><rect x="784.2" y="387.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="787.2" y="398.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.04%)</title><rect x="784.2" y="371.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="787.2" y="382.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.04%)</title><rect x="784.2" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="787.2" y="366.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="784.7" y="403.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.7" y="414.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="784.7" y="387.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="787.7" y="398.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.04%)</title><rect x="784.7" y="371.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="787.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.08%)</title><rect x="785.1" y="435.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.1" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.08%)</title><rect x="785.1" y="419.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.1" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="785.6" y="403.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="788.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (1 samples, 0.04%)</title><rect x="786.1" y="451.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="789.1" y="462.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="786.1" y="435.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="789.1" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (7 samples, 0.28%)</title><rect x="786.6" y="467.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="789.6" y="478.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.20%)</title><rect x="787.5" y="451.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="790.5" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.08%)</title><rect x="788.0" y="435.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="791.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.08%)</title><rect x="788.0" y="419.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="791.0" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.08%)</title><rect x="789.0" y="435.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="792.0" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.08%)</title><rect x="789.0" y="419.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="792.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="789.0" y="403.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="792.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.04%)</title><rect x="789.5" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="792.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="789.5" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="792.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="789.5" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="792.5" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.16%)</title><rect x="789.9" y="467.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="792.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.12%)</title><rect x="789.9" y="451.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="792.9" y="462.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="789.9" y="435.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="792.9" y="446.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.04%)</title><rect x="789.9" y="419.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="792.9" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.08%)</title><rect x="790.4" y="435.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="793.4" y="446.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.04%)</title><rect x="790.9" y="419.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="793.9" y="430.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.04%)</title><rect x="790.9" y="403.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="793.9" y="414.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.04%)</title><rect x="790.9" y="387.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="793.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="791.4" y="451.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="794.4" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="791.4" y="435.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="794.4" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="791.4" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="794.4" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setTimeout (2 samples, 0.08%)</title><rect x="791.9" y="467.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="794.9" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (144 samples, 5.86%)</title><rect x="792.8" y="467.0" width="69.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="795.8" y="478.0">one/nio..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (109 samples, 4.44%)</title><rect x="792.8" y="451.0" width="52.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.8" y="462.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="792.8" y="435.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="795.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="792.8" y="419.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.8" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (108 samples, 4.40%)</title><rect x="793.3" y="435.0" width="51.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="796.3" y="446.0">java/..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (107 samples, 4.35%)</title><rect x="793.8" y="419.0" width="51.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="796.8" y="430.0">java/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (107 samples, 4.35%)</title><rect x="793.8" y="403.0" width="51.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="796.8" y="414.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (102 samples, 4.15%)</title><rect x="793.8" y="387.0" width="49.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="796.8" y="398.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (102 samples, 4.15%)</title><rect x="793.8" y="371.0" width="49.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="796.8" y="382.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (101 samples, 4.11%)</title><rect x="793.8" y="355.0" width="48.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="796.8" y="366.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (101 samples, 4.11%)</title><rect x="793.8" y="339.0" width="48.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.8" y="350.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (101 samples, 4.11%)</title><rect x="793.8" y="323.0" width="48.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="796.8" y="334.0">sun/..</text>
</g>
<g>
<title>write (97 samples, 3.95%)</title><rect x="795.7" y="307.0" width="46.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="798.7" y="318.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="842.3" y="355.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="845.3" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="842.3" y="339.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="845.3" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.04%)</title><rect x="842.3" y="323.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (5 samples, 0.20%)</title><rect x="842.8" y="387.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="845.8" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.08%)</title><rect x="842.8" y="371.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.12%)</title><rect x="843.7" y="371.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="846.7" y="382.0"></text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.04%)</title><rect x="843.7" y="355.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="846.7" y="366.0"></text>
</g>
<g>
<title>pthread_self (2 samples, 0.08%)</title><rect x="844.2" y="355.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="847.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (35 samples, 1.42%)</title><rect x="845.2" y="451.0" width="16.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="848.2" y="462.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (34 samples, 1.38%)</title><rect x="845.7" y="435.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="848.7" y="446.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.04%)</title><rect x="845.7" y="419.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="848.7" y="430.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (26 samples, 1.06%)</title><rect x="846.1" y="419.0" width="12.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="849.1" y="430.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.04%)</title><rect x="848.5" y="403.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="851.5" y="414.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="849.0" y="403.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.0" y="414.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.04%)</title><rect x="849.0" y="387.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="852.0" y="398.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.04%)</title><rect x="849.5" y="403.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="852.5" y="414.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.04%)</title><rect x="850.0" y="403.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="853.0" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.08%)</title><rect x="850.5" y="403.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="853.5" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (2 samples, 0.08%)</title><rect x="850.5" y="387.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="853.5" y="398.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.04%)</title><rect x="850.9" y="371.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="853.9" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.20%)</title><rect x="851.4" y="403.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="854.4" y="414.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.04%)</title><rect x="852.4" y="387.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="855.4" y="398.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.04%)</title><rect x="852.9" y="387.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="855.9" y="398.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.04%)</title><rect x="853.3" y="387.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="856.3" y="398.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.08%)</title><rect x="853.8" y="403.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="856.8" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="853.8" y="387.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="856.8" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.04%)</title><rect x="853.8" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="856.8" y="382.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.04%)</title><rect x="854.3" y="387.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="857.3" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="854.8" y="403.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="857.8" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="854.8" y="387.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="857.8" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="854.8" y="371.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="857.8" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="854.8" y="355.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="857.8" y="366.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="854.8" y="339.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="857.8" y="350.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.04%)</title><rect x="855.3" y="403.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="858.3" y="414.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (6 samples, 0.24%)</title><rect x="855.7" y="403.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="858.7" y="414.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.04%)</title><rect x="855.7" y="387.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="858.7" y="398.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (2 samples, 0.08%)</title><rect x="856.2" y="387.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="859.2" y="398.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.04%)</title><rect x="856.7" y="371.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="859.7" y="382.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (3 samples, 0.12%)</title><rect x="857.2" y="387.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="860.2" y="398.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (3 samples, 0.12%)</title><rect x="857.2" y="371.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="860.2" y="382.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.04%)</title><rect x="857.2" y="355.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="860.2" y="366.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.04%)</title><rect x="857.7" y="355.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="860.7" y="366.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (1 samples, 0.04%)</title><rect x="858.1" y="355.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="861.1" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="858.6" y="419.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="861.6" y="430.0"></text>
</g>
<g>
<title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2 (1 samples, 0.04%)</title><rect x="859.1" y="419.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="862.1" y="430.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="859.6" y="419.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="862.6" y="430.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.08%)</title><rect x="860.1" y="419.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="863.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (2 samples, 0.08%)</title><rect x="861.0" y="419.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="864.0" y="430.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.04%)</title><rect x="862.0" y="467.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="865.0" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (1 samples, 0.04%)</title><rect x="862.0" y="451.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="865.0" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (1 samples, 0.04%)</title><rect x="862.0" y="435.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="865.0" y="446.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.04%)</title><rect x="862.5" y="467.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="865.5" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (1 samples, 0.04%)</title><rect x="862.5" y="451.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="865.5" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (1 samples, 0.04%)</title><rect x="862.5" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="865.5" y="446.0"></text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.04%)</title><rect x="862.5" y="419.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="865.5" y="430.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (673 samples, 27.39%)</title><rect x="862.9" y="627.0" width="323.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="865.9" y="638.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.04%)</title><rect x="863.4" y="611.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="866.4" y="622.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.04%)</title><rect x="863.4" y="595.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="866.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.04%)</title><rect x="863.4" y="579.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.4" y="590.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (419 samples, 17.05%)</title><rect x="863.9" y="611.0" width="201.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="866.9" y="622.0">one/nio/net/JavaSelector.s..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="863.9" y="595.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="866.9" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.04%)</title><rect x="863.9" y="579.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="866.9" y="590.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.12%)</title><rect x="864.4" y="595.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="867.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.08%)</title><rect x="864.9" y="579.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="867.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.08%)</title><rect x="864.9" y="563.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="867.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.08%)</title><rect x="864.9" y="547.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="867.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.08%)</title><rect x="864.9" y="531.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="867.9" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.08%)</title><rect x="864.9" y="515.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="867.9" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.04%)</title><rect x="865.8" y="595.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="868.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.04%)</title><rect x="865.8" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="868.8" y="590.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.12%)</title><rect x="866.3" y="595.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="869.3" y="606.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.04%)</title><rect x="866.8" y="579.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="869.8" y="590.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.04%)</title><rect x="867.3" y="579.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="870.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (410 samples, 16.69%)</title><rect x="867.7" y="595.0" width="197.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="870.7" y="606.0">sun/nio/ch/SelectorImpl.se..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (410 samples, 16.69%)</title><rect x="867.7" y="579.0" width="197.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="870.7" y="590.0">sun/nio/ch/SelectorImpl.lo..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (410 samples, 16.69%)</title><rect x="867.7" y="563.0" width="197.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.7" y="574.0">sun/nio/ch/KQueueSelectorI..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (390 samples, 15.87%)</title><rect x="868.7" y="547.0" width="187.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="871.7" y="558.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.04%)</title><rect x="875.4" y="531.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="878.4" y="542.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.20%)</title><rect x="875.9" y="531.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="878.9" y="542.0"></text>
</g>
<g>
<title>kevent (370 samples, 15.06%)</title><rect x="878.3" y="531.0" width="177.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="881.3" y="542.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.20%)</title><rect x="1056.0" y="547.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1059.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.04%)</title><rect x="1056.0" y="531.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1059.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="1056.0" y="515.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1059.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.16%)</title><rect x="1056.5" y="531.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1059.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.08%)</title><rect x="1056.5" y="515.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1059.5" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.08%)</title><rect x="1056.5" y="499.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1059.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.08%)</title><rect x="1056.5" y="483.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1059.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.04%)</title><rect x="1056.5" y="467.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1059.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.04%)</title><rect x="1057.0" y="467.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1060.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (1 samples, 0.04%)</title><rect x="1057.4" y="515.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1060.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.04%)</title><rect x="1057.9" y="515.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1060.9" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.12%)</title><rect x="1058.4" y="547.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1061.4" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.04%)</title><rect x="1059.4" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1062.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (7 samples, 0.28%)</title><rect x="1059.8" y="547.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1062.8" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (7 samples, 0.28%)</title><rect x="1059.8" y="531.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1062.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="1059.8" y="515.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1062.8" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.20%)</title><rect x="1060.3" y="515.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1063.3" y="526.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.20%)</title><rect x="1060.3" y="499.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1063.3" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.20%)</title><rect x="1060.3" y="483.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1063.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.04%)</title><rect x="1062.7" y="515.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1065.7" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.04%)</title><rect x="1063.2" y="547.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1066.2" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.04%)</title><rect x="1063.2" y="531.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1066.2" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="1063.2" y="515.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1066.2" y="526.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="1063.2" y="499.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1066.2" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="1063.2" y="483.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1066.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.08%)</title><rect x="1063.7" y="547.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1066.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.04%)</title><rect x="1064.2" y="531.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1067.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.04%)</title><rect x="1064.2" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1067.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (1 samples, 0.04%)</title><rect x="1064.7" y="595.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1067.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.04%)</title><rect x="1064.7" y="579.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1067.7" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.04%)</title><rect x="1064.7" y="563.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1067.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.04%)</title><rect x="1064.7" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1067.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (252 samples, 10.26%)</title><rect x="1065.1" y="611.0" width="121.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1068.1" y="622.0">one/nio/net/Ses..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.12%)</title><rect x="1065.6" y="595.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1068.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (238 samples, 9.69%)</title><rect x="1067.1" y="595.0" width="114.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1070.1" y="606.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (145 samples, 5.90%)</title><rect x="1067.1" y="579.0" width="69.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1070.1" y="590.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (117 samples, 4.76%)</title><rect x="1069.9" y="563.0" width="56.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1072.9" y="574.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (115 samples, 4.68%)</title><rect x="1070.9" y="547.0" width="55.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1073.9" y="558.0">one/n..</text>
</g>
<g>
<title>RequestHandler0_sendResponse.handleRequest (106 samples, 4.31%)</title><rect x="1070.9" y="531.0" width="50.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1073.9" y="542.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.04%)</title><rect x="1071.9" y="515.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1074.9" y="526.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="1071.9" y="499.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1074.9" y="510.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="1071.9" y="483.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1074.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (9 samples, 0.37%)</title><rect x="1072.3" y="515.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1075.3" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.37%)</title><rect x="1072.3" y="499.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1075.3" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.12%)</title><rect x="1073.3" y="483.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1076.3" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.12%)</title><rect x="1073.3" y="467.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1076.3" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1073.3" y="451.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1076.3" y="462.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.08%)</title><rect x="1073.8" y="451.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1076.8" y="462.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (4 samples, 0.16%)</title><rect x="1074.7" y="483.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1077.7" y="494.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.12%)</title><rect x="1075.2" y="467.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1078.2" y="478.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.04%)</title><rect x="1076.2" y="451.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1079.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendResponse (94 samples, 3.83%)</title><rect x="1076.7" y="515.0" width="45.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1079.7" y="526.0">ru/m..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/968868247.linkToTargetMethod (4 samples, 0.16%)</title><rect x="1076.7" y="499.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1079.7" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.16%)</title><rect x="1076.7" y="483.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1079.7" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.get$Lambda (4 samples, 0.16%)</title><rect x="1076.7" y="467.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1079.7" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="1076.7" y="451.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.7" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="1076.7" y="435.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.7" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="1076.7" y="419.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.7" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1076.7" y="403.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.7" y="414.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1076.7" y="387.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.7" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1076.7" y="371.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.7" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="1076.7" y="355.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.7" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="1076.7" y="339.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.7" y="350.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.04%)</title><rect x="1076.7" y="323.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.7" y="334.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.04%)</title><rect x="1076.7" y="307.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.7" y="318.0"></text>
</g>
<g>
<title>HSpaceCounters::update_used(unsigned long) (1 samples, 0.04%)</title><rect x="1076.7" y="291.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.&lt;init&gt; (3 samples, 0.12%)</title><rect x="1077.1" y="451.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1080.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.08%)</title><rect x="1077.6" y="435.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1080.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (90 samples, 3.66%)</title><rect x="1078.6" y="499.0" width="43.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1081.6" y="510.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (88 samples, 3.58%)</title><rect x="1079.1" y="483.0" width="42.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1082.1" y="494.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (3 samples, 0.12%)</title><rect x="1079.1" y="467.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1082.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.04%)</title><rect x="1080.0" y="451.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1083.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.04%)</title><rect x="1080.0" y="435.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1083.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (20 samples, 0.81%)</title><rect x="1080.5" y="467.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1083.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (20 samples, 0.81%)</title><rect x="1080.5" y="451.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1083.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (13 samples, 0.53%)</title><rect x="1080.5" y="435.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1083.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (13 samples, 0.53%)</title><rect x="1080.5" y="419.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1083.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 0.53%)</title><rect x="1080.5" y="403.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1083.5" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (13 samples, 0.53%)</title><rect x="1080.5" y="387.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1083.5" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (11 samples, 0.45%)</title><rect x="1081.5" y="371.0" width="5.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1084.5" y="382.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.04%)</title><rect x="1081.5" y="355.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.5" y="366.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.04%)</title><rect x="1081.5" y="339.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1084.5" y="350.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.04%)</title><rect x="1081.5" y="323.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.5" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 0.41%)</title><rect x="1081.9" y="355.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.9" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.37%)</title><rect x="1081.9" y="339.0" width="4.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1084.9" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.04%)</title><rect x="1086.3" y="339.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1089.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.16%)</title><rect x="1086.7" y="435.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1089.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1087.7" y="419.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1090.7" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.04%)</title><rect x="1087.7" y="403.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1090.7" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.04%)</title><rect x="1087.7" y="387.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1090.7" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.04%)</title><rect x="1087.7" y="371.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1090.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.04%)</title><rect x="1088.2" y="419.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1091.2" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.04%)</title><rect x="1088.2" y="403.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1091.2" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.04%)</title><rect x="1088.2" y="387.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1091.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.12%)</title><rect x="1088.7" y="435.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1091.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.12%)</title><rect x="1088.7" y="419.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1091.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.08%)</title><rect x="1089.1" y="403.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1092.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (65 samples, 2.65%)</title><rect x="1090.1" y="467.0" width="31.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1093.1" y="478.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (65 samples, 2.65%)</title><rect x="1090.1" y="451.0" width="31.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1093.1" y="462.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (65 samples, 2.65%)</title><rect x="1090.1" y="435.0" width="31.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1093.1" y="446.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (65 samples, 2.65%)</title><rect x="1090.1" y="419.0" width="31.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1093.1" y="430.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (65 samples, 2.65%)</title><rect x="1090.1" y="403.0" width="31.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1093.1" y="414.0">jd..</text>
</g>
<g>
<title>Thread::current() (2 samples, 0.08%)</title><rect x="1093.9" y="387.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.9" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.04%)</title><rect x="1094.9" y="387.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.9" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (54 samples, 2.20%)</title><rect x="1095.4" y="387.0" width="25.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1098.4" y="398.0">U..</text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.04%)</title><rect x="1095.9" y="371.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.9" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.12%)</title><rect x="1096.3" y="371.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.3" y="382.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.08%)</title><rect x="1096.8" y="355.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.8" y="366.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.08%)</title><rect x="1096.8" y="339.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.8" y="350.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.08%)</title><rect x="1096.8" y="323.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.8" y="334.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.04%)</title><rect x="1096.8" y="307.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1099.8" y="318.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.04%)</title><rect x="1097.3" y="307.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1100.3" y="318.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.04%)</title><rect x="1097.3" y="291.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.3" y="302.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.04%)</title><rect x="1097.3" y="275.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.3" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="1097.8" y="371.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.8" y="382.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="1098.3" y="371.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.3" y="382.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.04%)</title><rect x="1098.3" y="355.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.3" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="1098.8" y="371.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.8" y="382.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="1098.8" y="355.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.8" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="1098.8" y="339.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.8" y="350.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="1098.8" y="323.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.8" y="334.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="1098.8" y="307.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.8" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="1098.8" y="291.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.8" y="302.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="1098.8" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.8" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="1098.8" y="259.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.8" y="270.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="1098.8" y="243.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.8" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.08%)</title><rect x="1099.2" y="371.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.2" y="382.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.04%)</title><rect x="1099.2" y="355.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1102.2" y="366.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="1099.7" y="355.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.7" y="366.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.08%)</title><rect x="1100.2" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.2" y="382.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="1100.2" y="355.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.2" y="366.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.04%)</title><rect x="1100.7" y="355.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.7" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (39 samples, 1.59%)</title><rect x="1101.2" y="371.0" width="18.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1104.2" y="382.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.08%)</title><rect x="1119.9" y="371.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.9" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="1120.8" y="371.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1123.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (1 samples, 0.04%)</title><rect x="1121.3" y="483.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1124.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1121.3" y="467.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1124.3" y="478.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder$1.newThread (1 samples, 0.04%)</title><rect x="1121.3" y="451.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1124.3" y="462.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder.access$000 (1 samples, 0.04%)</title><rect x="1121.3" y="435.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1124.3" y="446.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder.format (1 samples, 0.04%)</title><rect x="1121.3" y="419.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1124.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.04%)</title><rect x="1121.3" y="403.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1124.3" y="414.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.04%)</title><rect x="1121.3" y="387.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1124.3" y="398.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.04%)</title><rect x="1121.3" y="371.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1124.3" y="382.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (1 samples, 0.04%)</title><rect x="1121.3" y="355.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1124.3" y="366.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.find (1 samples, 0.04%)</title><rect x="1121.3" y="339.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1124.3" y="350.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.search (1 samples, 0.04%)</title><rect x="1121.3" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1124.3" y="334.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Start.match (1 samples, 0.04%)</title><rect x="1121.3" y="307.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1124.3" y="318.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (1 samples, 0.04%)</title><rect x="1121.3" y="291.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1124.3" y="302.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.04%)</title><rect x="1121.3" y="275.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1124.3" y="286.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.04%)</title><rect x="1121.3" y="259.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1124.3" y="270.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (1 samples, 0.04%)</title><rect x="1121.3" y="243.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1124.3" y="254.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (1 samples, 0.04%)</title><rect x="1121.3" y="227.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1124.3" y="238.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (1 samples, 0.04%)</title><rect x="1121.3" y="211.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1124.3" y="222.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (1 samples, 0.04%)</title><rect x="1121.3" y="195.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1124.3" y="206.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.04%)</title><rect x="1121.3" y="179.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1124.3" y="190.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.04%)</title><rect x="1121.3" y="163.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1124.3" y="174.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.04%)</title><rect x="1121.3" y="147.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1124.3" y="158.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (1 samples, 0.04%)</title><rect x="1121.3" y="131.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1124.3" y="142.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (1 samples, 0.04%)</title><rect x="1121.3" y="115.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1124.3" y="126.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate$$Lambda$67/960733886.is (1 samples, 0.04%)</title><rect x="1121.3" y="99.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1124.3" y="110.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate.lambda$union$2 (1 samples, 0.04%)</title><rect x="1121.3" y="83.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1124.3" y="94.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate$$Lambda$67/960733886.is (1 samples, 0.04%)</title><rect x="1121.3" y="67.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1124.3" y="78.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate.lambda$union$2 (1 samples, 0.04%)</title><rect x="1121.3" y="51.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1124.3" y="62.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.04%)</title><rect x="1121.3" y="35.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1124.3" y="46.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.04%)</title><rect x="1121.8" y="531.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1124.8" y="542.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.08%)</title><rect x="1122.3" y="531.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1125.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.08%)</title><rect x="1122.3" y="515.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1125.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="1122.3" y="499.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1125.3" y="510.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.04%)</title><rect x="1122.3" y="483.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1125.3" y="494.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="1122.3" y="467.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1125.3" y="478.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1122.8" y="499.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1125.8" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.16%)</title><rect x="1123.2" y="531.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1126.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.16%)</title><rect x="1123.2" y="515.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1126.2" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.16%)</title><rect x="1123.2" y="499.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1126.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.16%)</title><rect x="1123.2" y="483.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.2" y="494.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1124.7" y="467.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1127.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.handleDefault (2 samples, 0.08%)</title><rect x="1125.2" y="531.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1128.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.08%)</title><rect x="1125.2" y="515.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1128.2" y="526.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.04%)</title><rect x="1125.6" y="499.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1128.6" y="510.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="1125.6" y="483.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1128.6" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="1125.6" y="467.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1128.6" y="478.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.04%)</title><rect x="1125.6" y="451.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1128.6" y="462.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.04%)</title><rect x="1125.6" y="435.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1128.6" y="446.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.04%)</title><rect x="1125.6" y="419.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1128.6" y="430.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.04%)</title><rect x="1125.6" y="403.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1128.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (11 samples, 0.45%)</title><rect x="1126.1" y="563.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1129.1" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1126.1" y="547.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1129.1" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="1126.1" y="531.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.1" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.04%)</title><rect x="1126.1" y="515.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.1" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1126.1" y="499.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.1" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1126.1" y="483.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.1" y="494.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1126.1" y="467.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.1" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1126.1" y="451.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.1" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="1126.1" y="435.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.1" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="1126.1" y="419.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.1" y="430.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.04%)</title><rect x="1126.1" y="403.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.1" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.04%)</title><rect x="1126.1" y="387.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.1" y="398.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (1 samples, 0.04%)</title><rect x="1126.1" y="371.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.1" y="382.0"></text>
</g>
<g>
<title>HeapRegion::report_region_type_change(G1HeapRegionTraceType::Type) (1 samples, 0.04%)</title><rect x="1126.1" y="355.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.1" y="366.0"></text>
</g>
<g>
<title>G1ContiguousSpace::used() const (1 samples, 0.04%)</title><rect x="1126.1" y="339.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.1" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.16%)</title><rect x="1126.6" y="547.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1129.6" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.16%)</title><rect x="1126.6" y="531.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1129.6" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.08%)</title><rect x="1127.1" y="515.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.1" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.08%)</title><rect x="1127.1" y="499.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.1" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1127.1" y="483.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.1" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1127.1" y="467.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.1" y="478.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_dtrace_sampler() (1 samples, 0.04%)</title><rect x="1127.1" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.1" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1127.6" y="483.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1128.0" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1131.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1128.0" y="499.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1131.0" y="510.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.04%)</title><rect x="1128.0" y="483.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1131.0" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (6 samples, 0.24%)</title><rect x="1128.5" y="547.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1131.5" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.08%)</title><rect x="1130.4" y="531.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1133.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.12%)</title><rect x="1131.4" y="563.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1134.4" y="574.0"></text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.04%)</title><rect x="1131.4" y="547.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.4" y="558.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="1131.4" y="531.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.4" y="542.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="1131.4" y="515.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.4" y="526.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="1131.4" y="499.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.4" y="510.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="1131.4" y="483.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.4" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1131.4" y="467.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1134.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.08%)</title><rect x="1131.9" y="547.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1134.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.08%)</title><rect x="1131.9" y="531.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1134.9" y="542.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.08%)</title><rect x="1131.9" y="515.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1134.9" y="526.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.08%)</title><rect x="1131.9" y="499.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1134.9" y="510.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.08%)</title><rect x="1131.9" y="483.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1134.9" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.33%)</title><rect x="1132.8" y="563.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1135.8" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.33%)</title><rect x="1132.8" y="547.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1135.8" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="1133.8" y="531.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.8" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1133.8" y="515.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.8" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1133.8" y="499.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.8" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1133.8" y="483.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.8" y="494.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1133.8" y="467.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.8" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1133.8" y="451.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.8" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="1133.8" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.8" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="1133.8" y="419.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.8" y="430.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.04%)</title><rect x="1133.8" y="403.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.8" y="414.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.04%)</title><rect x="1133.8" y="387.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.8" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.04%)</title><rect x="1133.8" y="371.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.8" y="382.0"></text>
</g>
<g>
<title>G1CollectionSet::add_young_region_common(HeapRegion*) (1 samples, 0.04%)</title><rect x="1133.8" y="355.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.8" y="366.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.04%)</title><rect x="1133.8" y="339.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.8" y="350.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (1 samples, 0.04%)</title><rect x="1133.8" y="323.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.8" y="334.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (1 samples, 0.04%)</title><rect x="1133.8" y="307.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.8" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="1134.3" y="531.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.3" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="1134.3" y="515.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.3" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="1134.3" y="499.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.3" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1134.3" y="483.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.3" y="494.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1134.3" y="467.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.3" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1134.3" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.3" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="1134.3" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.3" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="1134.3" y="419.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.3" y="430.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.04%)</title><rect x="1134.3" y="403.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.3" y="414.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.04%)</title><rect x="1134.3" y="387.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.3" y="398.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.04%)</title><rect x="1134.3" y="371.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.3" y="382.0"></text>
</g>
<g>
<title>G1MonitoringSupport::recalculate_eden_size() (1 samples, 0.04%)</title><rect x="1134.3" y="355.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.3" y="366.0"></text>
</g>
<g>
<title>G1SurvivorRegions::length() const (1 samples, 0.04%)</title><rect x="1134.3" y="339.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.16%)</title><rect x="1134.8" y="531.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1137.8" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.16%)</title><rect x="1134.8" y="515.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1137.8" y="526.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4 samples, 0.16%)</title><rect x="1134.8" y="499.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1137.8" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="1136.2" y="483.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.2" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1136.2" y="467.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.2" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1136.2" y="451.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.2" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1136.2" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.2" y="446.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1136.2" y="419.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.2" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1136.2" y="403.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.2" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="1136.2" y="387.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.2" y="398.0"></text>
</g>
<g>
<title>G1Allocator::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="1136.2" y="371.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (93 samples, 3.79%)</title><rect x="1136.7" y="579.0" width="44.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1139.7" y="590.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (93 samples, 3.79%)</title><rect x="1136.7" y="563.0" width="44.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1139.7" y="574.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.12%)</title><rect x="1136.7" y="547.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1139.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="1136.7" y="531.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1139.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="1137.2" y="515.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1140.2" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1137.7" y="499.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1140.7" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="1137.7" y="483.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1140.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="1137.7" y="467.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1140.7" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="1137.7" y="451.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1140.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (90 samples, 3.66%)</title><rect x="1138.1" y="547.0" width="43.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1141.1" y="558.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.12%)</title><rect x="1138.6" y="531.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1141.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.12%)</title><rect x="1138.6" y="515.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1141.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.08%)</title><rect x="1139.1" y="499.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1142.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.08%)</title><rect x="1139.1" y="483.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1142.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.04%)</title><rect x="1139.1" y="467.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1142.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.04%)</title><rect x="1139.6" y="467.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1142.6" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.04%)</title><rect x="1139.6" y="451.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1142.6" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.04%)</title><rect x="1139.6" y="435.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1142.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (86 samples, 3.50%)</title><rect x="1140.1" y="531.0" width="41.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1143.1" y="542.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (86 samples, 3.50%)</title><rect x="1140.1" y="515.0" width="41.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1143.1" y="526.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (73 samples, 2.97%)</title><rect x="1140.5" y="499.0" width="35.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1143.5" y="510.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (73 samples, 2.97%)</title><rect x="1140.5" y="483.0" width="35.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1143.5" y="494.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (73 samples, 2.97%)</title><rect x="1140.5" y="467.0" width="35.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1143.5" y="478.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.08%)</title><rect x="1142.9" y="451.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1145.9" y="462.0"></text>
</g>
<g>
<title>rpc_errlist (66 samples, 2.69%)</title><rect x="1143.9" y="451.0" width="31.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1146.9" y="462.0">rp..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (12 samples, 0.49%)</title><rect x="1175.6" y="499.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1178.6" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocateDirect (1 samples, 0.04%)</title><rect x="1175.6" y="483.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1178.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1175.6" y="467.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1178.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/ref/Cleaner.create (1 samples, 0.04%)</title><rect x="1175.6" y="451.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1178.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/ref/Cleaner.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1175.6" y="435.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1178.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (11 samples, 0.45%)</title><rect x="1176.1" y="483.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1179.1" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.04%)</title><rect x="1179.0" y="467.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1182.0" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1179.4" y="467.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1182.4" y="478.0"></text>
</g>
<g>
<title>jint_arraycopy (1 samples, 0.04%)</title><rect x="1179.9" y="467.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1182.9" y="478.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.08%)</title><rect x="1180.4" y="467.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1183.4" y="478.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.41%)</title><rect x="1181.4" y="595.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="606.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.04%)</title><rect x="1182.3" y="579.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1185.3" y="590.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (3 samples, 0.12%)</title><rect x="1182.8" y="579.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1185.8" y="590.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.16%)</title><rect x="1184.2" y="579.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1187.2" y="590.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (4 samples, 0.16%)</title><rect x="1184.2" y="563.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1187.2" y="574.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.04%)</title><rect x="1184.7" y="547.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1187.7" y="558.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.08%)</title><rect x="1185.2" y="547.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1188.2" y="558.0"></text>
</g>
<g>
<title>thread_start (8 samples, 0.33%)</title><rect x="1186.2" y="627.0" width="3.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1189.2" y="638.0"></text>
</g>
<g>
<title>_pthread_start (8 samples, 0.33%)</title><rect x="1186.2" y="611.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1189.2" y="622.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 0.33%)</title><rect x="1186.2" y="595.0" width="3.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1189.2" y="606.0"></text>
</g>
<g>
<title>Thread::call_run() (8 samples, 0.33%)</title><rect x="1186.2" y="579.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.2" y="590.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.04%)</title><rect x="1186.2" y="563.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.2" y="574.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.04%)</title><rect x="1186.2" y="547.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="558.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.04%)</title><rect x="1186.2" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="542.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="1186.2" y="515.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="526.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="1186.2" y="499.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="510.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.04%)</title><rect x="1186.2" y="483.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.2" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1186.2" y="467.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1189.2" y="478.0"></text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.16%)</title><rect x="1186.6" y="563.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.6" y="574.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1186.6" y="547.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.6" y="558.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.04%)</title><rect x="1186.6" y="531.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.6" y="542.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.04%)</title><rect x="1186.6" y="515.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="526.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.04%)</title><rect x="1186.6" y="499.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.6" y="510.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.04%)</title><rect x="1186.6" y="483.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.6" y="494.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 0.08%)</title><rect x="1187.1" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="558.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (2 samples, 0.08%)</title><rect x="1187.1" y="531.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1190.1" y="542.0"></text>
</g>
<g>
<title>SubTasksDone::is_task_claimed(unsigned int) (1 samples, 0.04%)</title><rect x="1188.1" y="547.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.1" y="558.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.04%)</title><rect x="1188.6" y="563.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="574.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.04%)</title><rect x="1188.6" y="547.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.6" y="558.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.04%)</title><rect x="1188.6" y="531.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1191.6" y="542.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.04%)</title><rect x="1188.6" y="515.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1191.6" y="526.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.08%)</title><rect x="1189.0" y="563.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="574.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.08%)</title><rect x="1189.0" y="547.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="558.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.04%)</title><rect x="1189.0" y="531.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="542.0"></text>
</g>
<g>
<title>ThreadSafepointState::examine_state_of_thread() (1 samples, 0.04%)</title><rect x="1189.0" y="515.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="526.0"></text>
</g>
<g>
<title>ThreadSafepointState::roll_forward(ThreadSafepointState::suspend_type) (1 samples, 0.04%)</title><rect x="1189.5" y="531.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.5" y="542.0"></text>
</g>
</g>
</svg>
