<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="437"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="437"> </text>
<g id="frames">
<g>
<title>all (1,964 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.0" y="414.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.10%)</title><rect x="10.0" y="387.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.10%)</title><rect x="10.0" y="371.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.10%)</title><rect x="10.0" y="355.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.05%)</title><rect x="10.0" y="339.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="10.6" y="339.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.6" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="10.6" y="323.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.6" y="334.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.05%)</title><rect x="11.2" y="387.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="14.2" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="11.2" y="371.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.2" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.run (993 samples, 50.56%)</title><rect x="11.8" y="387.0" width="596.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="14.8" y="398.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (993 samples, 50.56%)</title><rect x="11.8" y="371.0" width="596.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.8" y="382.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (993 samples, 50.56%)</title><rect x="11.8" y="355.0" width="596.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.8" y="366.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.05%)</title><rect x="11.8" y="339.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.10%)</title><rect x="12.4" y="339.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (485 samples, 24.69%)</title><rect x="13.6" y="339.0" width="291.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.6" y="350.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.poll (2 samples, 0.10%)</title><rect x="13.6" y="323.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1 samples, 0.05%)</title><rect x="14.2" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (483 samples, 24.59%)</title><rect x="14.8" y="323.0" width="290.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.8" y="334.0">java/util/concurrent/ArrayBlockingQueue..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (1 samples, 0.05%)</title><rect x="15.4" y="307.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.05%)</title><rect x="15.4" y="291.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.05%)</title><rect x="15.4" y="275.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="18.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.05%)</title><rect x="15.4" y="259.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.05%)</title><rect x="15.4" y="243.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (443 samples, 22.56%)</title><rect x="16.0" y="307.0" width="266.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.0" y="318.0">java/util/concurrent/locks/AbstractQ..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.15%)</title><rect x="17.2" y="291.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.15%)</title><rect x="17.2" y="275.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.15%)</title><rect x="17.2" y="259.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.2" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.10%)</title><rect x="17.8" y="243.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.8" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.10%)</title><rect x="17.8" y="227.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="20.8" y="238.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="17.8" y="211.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="20.8" y="222.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.05%)</title><rect x="17.8" y="195.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="20.8" y="206.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.05%)</title><rect x="17.8" y="179.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.8" y="190.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.05%)</title><rect x="18.4" y="211.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="21.4" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="18.4" y="195.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="21.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.61%)</title><rect x="19.0" y="291.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.61%)</title><rect x="19.0" y="275.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.61%)</title><rect x="19.0" y="259.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.61%)</title><rect x="19.0" y="243.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.41%)</title><rect x="21.4" y="227.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.4" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.36%)</title><rect x="22.0" y="211.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="25.0" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.05%)</title><rect x="22.0" y="195.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="25.0" y="206.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.05%)</title><rect x="22.0" y="179.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="25.0" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.20%)</title><rect x="22.6" y="195.0" width="2.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="25.6" y="206.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.05%)</title><rect x="25.0" y="195.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="28.0" y="206.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.05%)</title><rect x="25.6" y="195.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="28.6" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.05%)</title><rect x="25.6" y="179.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="28.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (426 samples, 21.69%)</title><rect x="26.2" y="291.0" width="256.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.2" y="302.0">java/util/concurrent/locks/LockSup..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (425 samples, 21.64%)</title><rect x="26.8" y="275.0" width="255.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.8" y="286.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::parker() (3 samples, 0.15%)</title><rect x="38.8" y="259.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="41.8" y="270.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.05%)</title><rect x="40.6" y="259.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="43.6" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.05%)</title><rect x="41.2" y="259.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="44.2" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (399 samples, 20.32%)</title><rect x="41.8" y="259.0" width="239.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="44.8" y="270.0">Unsafe_Park(JNIEnv_*, _jobject*,..</text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.05%)</title><rect x="41.8" y="243.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="44.8" y="254.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.10%)</title><rect x="42.4" y="243.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="45.4" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.10%)</title><rect x="42.4" y="227.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="45.4" y="238.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.10%)</title><rect x="42.4" y="211.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="45.4" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.10%)</title><rect x="42.4" y="195.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="45.4" y="206.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.05%)</title><rect x="42.4" y="179.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="45.4" y="190.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="43.0" y="179.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="46.0" y="190.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.20%)</title><rect x="43.6" y="243.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="46.6" y="254.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (4 samples, 0.20%)</title><rect x="43.6" y="227.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="46.6" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (4 samples, 0.20%)</title><rect x="43.6" y="211.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="46.6" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (376 samples, 19.14%)</title><rect x="46.0" y="243.0" width="226.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="49.0" y="254.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.10%)</title><rect x="47.3" y="227.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="50.3" y="238.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="47.9" y="211.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="50.9" y="222.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="47.9" y="195.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="50.9" y="206.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.05%)</title><rect x="48.5" y="227.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="51.5" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="48.5" y="211.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="51.5" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (366 samples, 18.64%)</title><rect x="49.1" y="227.0" width="219.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="52.1" y="238.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (5 samples, 0.25%)</title><rect x="269.0" y="227.0" width="3.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="272.0" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.10%)</title><rect x="270.8" y="211.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="273.8" y="222.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.05%)</title><rect x="272.0" y="243.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="275.0" y="254.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.05%)</title><rect x="272.6" y="243.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="275.6" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.10%)</title><rect x="273.2" y="243.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="276.2" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.10%)</title><rect x="273.2" y="227.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="276.2" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="273.2" y="211.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="276.2" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="273.2" y="195.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="276.2" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="273.2" y="179.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="276.2" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.05%)</title><rect x="273.2" y="163.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="276.2" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.05%)</title><rect x="273.8" y="211.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="276.8" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.15%)</title><rect x="274.4" y="243.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="277.4" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.15%)</title><rect x="274.4" y="227.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="277.4" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="275.0" y="211.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="278.0" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="275.6" y="211.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="278.6" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="275.6" y="195.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="278.6" y="206.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.05%)</title><rect x="275.6" y="179.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="278.6" y="190.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.10%)</title><rect x="276.2" y="243.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="279.2" y="254.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.05%)</title><rect x="277.4" y="243.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="280.4" y="254.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.05%)</title><rect x="278.0" y="243.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="281.0" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (4 samples, 0.20%)</title><rect x="278.6" y="243.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="281.6" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.05%)</title><rect x="281.0" y="243.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="284.0" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.05%)</title><rect x="281.6" y="259.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="284.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.31%)</title><rect x="282.2" y="307.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.31%)</title><rect x="282.2" y="291.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (6 samples, 0.31%)</title><rect x="282.2" y="275.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.25%)</title><rect x="282.8" y="259.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.25%)</title><rect x="282.8" y="243.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.25%)</title><rect x="282.8" y="227.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.8" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.25%)</title><rect x="282.8" y="211.0" width="3.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="285.8" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.25%)</title><rect x="282.8" y="195.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="285.8" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.20%)</title><rect x="282.8" y="179.0" width="2.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="285.8" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.05%)</title><rect x="285.2" y="179.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="288.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (32 samples, 1.63%)</title><rect x="285.8" y="307.0" width="19.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (32 samples, 1.63%)</title><rect x="285.8" y="291.0" width="19.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (32 samples, 1.63%)</title><rect x="285.8" y="275.0" width="19.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (32 samples, 1.63%)</title><rect x="285.8" y="259.0" width="19.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (1 samples, 0.05%)</title><rect x="286.4" y="243.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (30 samples, 1.53%)</title><rect x="287.0" y="243.0" width="18.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.0" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (29 samples, 1.48%)</title><rect x="287.6" y="227.0" width="17.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="290.6" y="238.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="287.6" y="211.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="290.6" y="222.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="287.6" y="195.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="290.6" y="206.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.05%)</title><rect x="288.2" y="211.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="291.2" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.15%)</title><rect x="288.8" y="211.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="291.8" y="222.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.05%)</title><rect x="290.0" y="195.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="293.0" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (21 samples, 1.07%)</title><rect x="290.6" y="211.0" width="12.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="293.6" y="222.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.05%)</title><rect x="303.2" y="211.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="306.2" y="222.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.05%)</title><rect x="303.2" y="195.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="306.2" y="206.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np.cold.3 (1 samples, 0.05%)</title><rect x="303.8" y="211.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="306.8" y="222.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.05%)</title><rect x="304.4" y="211.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="307.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$73/1096742976.run (505 samples, 25.71%)</title><rect x="305.0" y="339.0" width="303.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="350.0">ru/mail/polis/service/suhova/MoribundServ..</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (505 samples, 25.71%)</title><rect x="305.0" y="323.0" width="303.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.0" y="334.0">ru/mail/polis/service/suhova/MoribundServ..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="305.6" y="307.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="308.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (271 samples, 13.80%)</title><rect x="306.2" y="307.0" width="162.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="309.2" y="318.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="309.2" y="291.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="312.2" y="302.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.20%)</title><rect x="309.8" y="291.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="312.8" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.20%)</title><rect x="309.8" y="275.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="312.8" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.05%)</title><rect x="309.8" y="259.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="312.8" y="270.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.10%)</title><rect x="310.4" y="259.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="313.4" y="270.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.05%)</title><rect x="311.6" y="259.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="314.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.10%)</title><rect x="312.2" y="291.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.10%)</title><rect x="312.2" y="275.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.2" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.10%)</title><rect x="312.2" y="259.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.2" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.05%)</title><rect x="312.8" y="243.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="315.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (254 samples, 12.93%)</title><rect x="313.4" y="291.0" width="152.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.4" y="302.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.61%)</title><rect x="313.4" y="275.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="316.4" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.51%)</title><rect x="314.6" y="259.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.6" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (10 samples, 0.51%)</title><rect x="314.6" y="243.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="317.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (10 samples, 0.51%)</title><rect x="314.6" y="227.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.6" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (242 samples, 12.32%)</title><rect x="320.6" y="275.0" width="145.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.6" y="286.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.05%)</title><rect x="320.6" y="259.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.6" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (241 samples, 12.27%)</title><rect x="321.2" y="259.0" width="144.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.2" y="270.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (241 samples, 12.27%)</title><rect x="321.2" y="243.0" width="144.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="324.2" y="254.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (241 samples, 12.27%)</title><rect x="321.2" y="227.0" width="144.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="324.2" y="238.0">one/nio/net/JavaSo..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (241 samples, 12.27%)</title><rect x="321.2" y="211.0" width="144.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.2" y="222.0">sun/nio/ch/SocketC..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.41%)</title><rect x="321.2" y="195.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.2" y="206.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.05%)</title><rect x="322.4" y="179.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="325.4" y="190.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.10%)</title><rect x="323.0" y="179.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="326.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.10%)</title><rect x="324.2" y="179.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.2" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="325.4" y="179.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="328.4" y="190.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.05%)</title><rect x="325.4" y="163.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="328.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.05%)</title><rect x="326.0" y="195.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="329.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.05%)</title><rect x="326.0" y="179.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="329.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.05%)</title><rect x="326.0" y="163.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="329.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.05%)</title><rect x="326.0" y="147.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="329.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (232 samples, 11.81%)</title><rect x="326.6" y="195.0" width="139.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="329.6" y="206.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (232 samples, 11.81%)</title><rect x="326.6" y="179.0" width="139.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.6" y="190.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.05%)</title><rect x="326.6" y="163.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="329.6" y="174.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.05%)</title><rect x="327.2" y="163.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="330.2" y="174.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.05%)</title><rect x="327.8" y="163.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="330.8" y="174.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.10%)</title><rect x="328.4" y="163.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="331.4" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.10%)</title><rect x="328.4" y="147.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="331.4" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.05%)</title><rect x="329.6" y="163.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="332.6" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.05%)</title><rect x="329.6" y="147.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.6" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="329.6" y="131.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="332.6" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="329.6" y="115.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.6" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="329.6" y="99.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.6" y="110.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.05%)</title><rect x="329.6" y="83.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="332.6" y="94.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.05%)</title><rect x="329.6" y="67.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.6" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (219 samples, 11.15%)</title><rect x="330.2" y="163.0" width="131.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.2" y="174.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (219 samples, 11.15%)</title><rect x="330.2" y="147.0" width="131.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.2" y="158.0">sun/nio/ch/Socke..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="330.2" y="131.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="333.2" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.05%)</title><rect x="330.8" y="131.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.8" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (217 samples, 11.05%)</title><rect x="331.4" y="131.0" width="130.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.4" y="142.0">sun/nio/ch/FileD..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.25%)</title><rect x="335.6" y="115.0" width="3.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="338.6" y="126.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.15%)</title><rect x="336.8" y="99.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="339.8" y="110.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="338.6" y="115.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="341.6" y="126.0"></text>
</g>
<g>
<title>write (204 samples, 10.39%)</title><rect x="339.2" y="115.0" width="122.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="342.2" y="126.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.36%)</title><rect x="461.8" y="163.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="464.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (7 samples, 0.36%)</title><rect x="461.8" y="147.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.8" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="461.8" y="131.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.8" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="461.8" y="115.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="464.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="461.8" y="99.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.8" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="461.8" y="83.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.8" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (6 samples, 0.31%)</title><rect x="462.4" y="131.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.4" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (6 samples, 0.31%)</title><rect x="462.4" y="115.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (6 samples, 0.31%)</title><rect x="462.4" y="99.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="465.4" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.25%)</title><rect x="466.0" y="291.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="469.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="468.4" y="275.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="471.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="468.4" y="259.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="471.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (32 samples, 1.63%)</title><rect x="469.0" y="307.0" width="19.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="472.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (31 samples, 1.58%)</title><rect x="469.6" y="291.0" width="18.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="472.6" y="302.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHasher.putUnencodedChars (23 samples, 1.17%)</title><rect x="469.6" y="275.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="472.6" y="286.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.putChar (23 samples, 1.17%)</title><rect x="469.6" y="259.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="472.6" y="270.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.munchIfFull (23 samples, 1.17%)</title><rect x="469.6" y="243.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="472.6" y="254.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.munch (23 samples, 1.17%)</title><rect x="469.6" y="227.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="472.6" y="238.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (2 samples, 0.10%)</title><rect x="483.4" y="275.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="486.4" y="286.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.munch (1 samples, 0.05%)</title><rect x="483.4" y="259.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="486.4" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="484.0" y="259.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="487.0" y="270.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (5 samples, 0.25%)</title><rect x="484.6" y="275.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="487.6" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.10%)</title><rect x="484.6" y="259.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="487.6" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="484.6" y="243.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="487.6" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="484.6" y="227.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="487.6" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="484.6" y="211.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="487.6" y="222.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="484.6" y="195.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="487.6" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="484.6" y="179.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="487.6" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="484.6" y="163.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="487.6" y="174.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="484.6" y="147.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="487.6" y="158.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.05%)</title><rect x="485.2" y="243.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="488.2" y="254.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (3 samples, 0.15%)</title><rect x="485.8" y="259.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.8" y="270.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (3 samples, 0.15%)</title><rect x="485.8" y="243.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="488.8" y="254.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (3 samples, 0.15%)</title><rect x="485.8" y="227.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.15%)</title><rect x="485.8" y="211.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="488.8" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="485.8" y="195.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="488.8" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="485.8" y="179.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.8" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="485.8" y="163.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="488.8" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.10%)</title><rect x="485.8" y="147.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="488.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.10%)</title><rect x="485.8" y="131.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="488.8" y="142.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.processRemaining (1 samples, 0.05%)</title><rect x="486.4" y="115.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="489.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="487.0" y="147.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="487.0" y="131.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.0" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.05%)</title><rect x="487.6" y="275.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.6" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1254344205.invoke (1 samples, 0.05%)</title><rect x="487.6" y="259.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.6" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.05%)</title><rect x="487.6" y="243.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.6" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.05%)</title><rect x="487.6" y="227.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="490.6" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.05%)</title><rect x="487.6" y="211.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.6" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="487.6" y="195.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="490.6" y="206.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="487.6" y="179.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="490.6" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="487.6" y="163.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="490.6" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="487.6" y="147.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="490.6" y="158.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="487.6" y="131.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="490.6" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="487.6" y="115.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="490.6" y="126.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.05%)</title><rect x="487.6" y="99.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="490.6" y="110.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.05%)</title><rect x="487.6" y="83.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="490.6" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.proxy (165 samples, 8.40%)</title><rect x="488.2" y="307.0" width="99.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="491.2" y="318.0">ru/mail/poli..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (164 samples, 8.35%)</title><rect x="488.8" y="291.0" width="98.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="491.8" y="302.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (164 samples, 8.35%)</title><rect x="488.8" y="275.0" width="98.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="491.8" y="286.0">one/nio/http..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.05%)</title><rect x="488.8" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="488.8" y="243.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.8" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="488.8" y="227.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="491.8" y="238.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.05%)</title><rect x="488.8" y="211.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="491.8" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (96 samples, 4.89%)</title><rect x="489.5" y="259.0" width="57.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="492.5" y="270.0">one/ni..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="489.5" y="243.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="492.5" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="489.5" y="227.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="492.5" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="489.5" y="211.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="492.5" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="489.5" y="195.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="492.5" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="489.5" y="179.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="492.5" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.05%)</title><rect x="489.5" y="163.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="492.5" y="174.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (95 samples, 4.84%)</title><rect x="490.1" y="243.0" width="57.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="493.1" y="254.0">one/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (95 samples, 4.84%)</title><rect x="490.1" y="227.0" width="57.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.1" y="238.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (93 samples, 4.74%)</title><rect x="490.1" y="211.0" width="55.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="493.1" y="222.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (93 samples, 4.74%)</title><rect x="490.1" y="195.0" width="55.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.1" y="206.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (93 samples, 4.74%)</title><rect x="490.1" y="179.0" width="55.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="493.1" y="190.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (93 samples, 4.74%)</title><rect x="490.1" y="163.0" width="55.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="493.1" y="174.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (93 samples, 4.74%)</title><rect x="490.1" y="147.0" width="55.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="493.1" y="158.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.05%)</title><rect x="494.3" y="131.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="497.3" y="142.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.05%)</title><rect x="494.9" y="131.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="497.9" y="142.0"></text>
</g>
<g>
<title>rpc_errlist (84 samples, 4.28%)</title><rect x="495.5" y="131.0" width="50.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="498.5" y="142.0">rpc_e..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (2 samples, 0.10%)</title><rect x="545.9" y="211.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="548.9" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.10%)</title><rect x="545.9" y="195.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="548.9" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.05%)</title><rect x="546.5" y="179.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="549.5" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (7 samples, 0.36%)</title><rect x="547.1" y="259.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="550.1" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (5 samples, 0.25%)</title><rect x="547.1" y="243.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="550.1" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.15%)</title><rect x="548.3" y="227.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="551.3" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.15%)</title><rect x="548.3" y="211.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="551.3" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.10%)</title><rect x="550.1" y="243.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="553.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.10%)</title><rect x="550.1" y="227.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="553.1" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.10%)</title><rect x="550.1" y="211.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="553.1" y="222.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="550.7" y="195.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="553.7" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (3 samples, 0.15%)</title><rect x="551.3" y="259.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="554.3" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="552.5" y="243.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="555.5" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.05%)</title><rect x="552.5" y="227.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="555.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="552.5" y="211.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="555.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.05%)</title><rect x="553.1" y="259.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="556.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="553.1" y="243.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="556.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="553.1" y="227.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="556.1" y="238.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (54 samples, 2.75%)</title><rect x="553.7" y="259.0" width="32.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="556.7" y="270.0">on..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (35 samples, 1.78%)</title><rect x="553.7" y="243.0" width="21.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="556.7" y="254.0">j..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (35 samples, 1.78%)</title><rect x="553.7" y="227.0" width="21.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="556.7" y="238.0">j..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (35 samples, 1.78%)</title><rect x="553.7" y="211.0" width="21.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="556.7" y="222.0">j..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (35 samples, 1.78%)</title><rect x="553.7" y="195.0" width="21.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="556.7" y="206.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (33 samples, 1.68%)</title><rect x="554.3" y="179.0" width="19.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="557.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (32 samples, 1.63%)</title><rect x="554.9" y="163.0" width="19.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="557.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (32 samples, 1.63%)</title><rect x="554.9" y="147.0" width="19.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="557.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (32 samples, 1.63%)</title><rect x="554.9" y="131.0" width="19.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="557.9" y="142.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="555.5" y="115.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="558.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (30 samples, 1.53%)</title><rect x="556.1" y="115.0" width="18.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="559.1" y="126.0"></text>
</g>
<g>
<title>write (29 samples, 1.48%)</title><rect x="556.7" y="99.0" width="17.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="559.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.05%)</title><rect x="574.2" y="179.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="577.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (19 samples, 0.97%)</title><rect x="574.8" y="243.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="577.8" y="254.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (17 samples, 0.87%)</title><rect x="576.0" y="227.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="579.0" y="238.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.05%)</title><rect x="576.0" y="211.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="579.0" y="222.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (12 samples, 0.61%)</title><rect x="576.6" y="211.0" width="7.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="579.6" y="222.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.05%)</title><rect x="577.8" y="195.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="580.8" y="206.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.10%)</title><rect x="578.4" y="195.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="581.4" y="206.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="578.4" y="179.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="581.4" y="190.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.05%)</title><rect x="579.0" y="179.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="582.0" y="190.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.05%)</title><rect x="579.6" y="195.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="582.6" y="206.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.05%)</title><rect x="580.2" y="195.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="583.2" y="206.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.05%)</title><rect x="580.8" y="195.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="583.8" y="206.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (4 samples, 0.20%)</title><rect x="581.4" y="195.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="584.4" y="206.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.05%)</title><rect x="581.4" y="179.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="584.4" y="190.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.05%)</title><rect x="582.0" y="179.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="585.0" y="190.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (2 samples, 0.10%)</title><rect x="582.6" y="179.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="585.6" y="190.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.10%)</title><rect x="582.6" y="163.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="585.6" y="174.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="583.2" y="147.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="586.2" y="158.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.05%)</title><rect x="583.8" y="211.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="586.8" y="222.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="584.4" y="211.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="587.4" y="222.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.10%)</title><rect x="585.0" y="211.0" width="1.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="588.0" y="222.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.05%)</title><rect x="586.2" y="259.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="589.2" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1 samples, 0.05%)</title><rect x="586.2" y="243.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="589.2" y="254.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.05%)</title><rect x="586.8" y="259.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="589.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.put (35 samples, 1.78%)</title><rect x="587.4" y="307.0" width="21.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="590.4" y="318.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (32 samples, 1.63%)</title><rect x="587.4" y="291.0" width="19.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="590.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.05%)</title><rect x="589.2" y="275.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="592.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.05%)</title><rect x="589.2" y="259.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="592.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.05%)</title><rect x="589.2" y="243.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="592.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.upsert (28 samples, 1.43%)</title><rect x="589.8" y="275.0" width="16.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="592.8" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="589.8" y="259.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="592.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (27 samples, 1.37%)</title><rect x="590.4" y="259.0" width="16.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="593.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (25 samples, 1.27%)</title><rect x="591.0" y="243.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="594.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (23 samples, 1.17%)</title><rect x="592.2" y="227.0" width="13.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="595.2" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.46%)</title><rect x="600.6" y="211.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.46%)</title><rect x="600.6" y="195.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="603.6" y="206.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.46%)</title><rect x="600.6" y="179.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="603.6" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="606.0" y="243.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="609.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteBuffer (3 samples, 0.15%)</title><rect x="606.6" y="291.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="609.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.15%)</title><rect x="606.6" y="275.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="609.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.15%)</title><rect x="606.6" y="259.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="609.6" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="606.6" y="243.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="609.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="606.6" y="227.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="609.6" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="606.6" y="211.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.15%)</title><rect x="606.6" y="195.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="609.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.15%)</title><rect x="606.6" y="179.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="609.6" y="190.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="607.2" y="163.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="610.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (1 samples, 0.05%)</title><rect x="607.8" y="163.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.8" y="174.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (955 samples, 48.63%)</title><rect x="608.4" y="387.0" width="573.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="611.4" y="398.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.05%)</title><rect x="608.4" y="371.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="611.4" y="382.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="609.0" y="371.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="612.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.05%)</title><rect x="609.6" y="371.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="612.6" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (605 samples, 30.80%)</title><rect x="610.2" y="371.0" width="363.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="613.2" y="382.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.05%)</title><rect x="615.6" y="355.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="618.6" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.25%)</title><rect x="616.2" y="355.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="619.2" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="616.8" y="339.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="619.8" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="616.8" y="323.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="619.8" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="616.8" y="307.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="619.8" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="616.8" y="291.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="619.8" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="616.8" y="275.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="619.8" y="286.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="616.8" y="259.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="619.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (3 samples, 0.15%)</title><rect x="617.4" y="339.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="620.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.15%)</title><rect x="617.4" y="323.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="620.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.15%)</title><rect x="617.4" y="307.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="620.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.15%)</title><rect x="617.4" y="291.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="620.4" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.15%)</title><rect x="617.4" y="275.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="620.4" y="286.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.15%)</title><rect x="619.2" y="355.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="622.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (3 samples, 0.15%)</title><rect x="619.2" y="339.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="622.2" y="350.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.20%)</title><rect x="621.0" y="355.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="624.0" y="366.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.05%)</title><rect x="621.6" y="339.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="624.6" y="350.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.10%)</title><rect x="622.2" y="339.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="625.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (583 samples, 29.68%)</title><rect x="623.4" y="355.0" width="350.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="626.4" y="366.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (582 samples, 29.63%)</title><rect x="624.0" y="339.0" width="349.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="627.0" y="350.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (582 samples, 29.63%)</title><rect x="624.0" y="323.0" width="349.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="627.0" y="334.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (561 samples, 28.56%)</title><rect x="624.0" y="307.0" width="337.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="627.0" y="318.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.05%)</title><rect x="632.4" y="291.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="635.4" y="302.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.10%)</title><rect x="633.0" y="291.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="636.0" y="302.0"></text>
</g>
<g>
<title>kevent (544 samples, 27.70%)</title><rect x="634.2" y="291.0" width="326.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="637.2" y="302.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.25%)</title><rect x="961.1" y="307.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="964.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.05%)</title><rect x="961.1" y="291.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="964.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.20%)</title><rect x="961.7" y="291.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="964.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.15%)</title><rect x="962.3" y="275.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="965.3" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.15%)</title><rect x="962.3" y="259.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="965.3" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.10%)</title><rect x="962.9" y="243.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="965.9" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.10%)</title><rect x="962.9" y="227.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="965.9" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (7 samples, 0.36%)</title><rect x="964.1" y="307.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="967.1" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.10%)</title><rect x="967.1" y="291.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="970.1" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (2 samples, 0.10%)</title><rect x="967.1" y="275.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="970.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.05%)</title><rect x="968.3" y="307.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="971.3" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.05%)</title><rect x="968.3" y="291.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="971.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (5 samples, 0.25%)</title><rect x="968.9" y="307.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="971.9" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (5 samples, 0.25%)</title><rect x="968.9" y="291.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="971.9" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.25%)</title><rect x="968.9" y="275.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="971.9" y="286.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.25%)</title><rect x="968.9" y="259.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="971.9" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.25%)</title><rect x="968.9" y="243.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="971.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.15%)</title><rect x="971.9" y="307.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="974.9" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (345 samples, 17.57%)</title><rect x="973.7" y="371.0" width="207.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="976.7" y="382.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (343 samples, 17.46%)</title><rect x="974.9" y="355.0" width="206.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="977.9" y="366.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (241 samples, 12.27%)</title><rect x="974.9" y="339.0" width="144.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="977.9" y="350.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler0_sendResponse.handleRequest (2 samples, 0.10%)</title><rect x="977.9" y="323.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="980.9" y="334.0"></text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.05%)</title><rect x="979.1" y="323.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="982.1" y="334.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="979.1" y="307.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="982.1" y="318.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="979.1" y="291.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="982.1" y="302.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="979.1" y="275.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="982.1" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="979.1" y="259.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="982.1" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="979.1" y="243.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="982.1" y="254.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.10%)</title><rect x="979.7" y="323.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="982.7" y="334.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.10%)</title><rect x="980.9" y="323.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="983.9" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="982.1" y="323.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="985.1" y="334.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="982.7" y="323.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="985.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (177 samples, 9.01%)</title><rect x="983.3" y="323.0" width="106.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="986.3" y="334.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (177 samples, 9.01%)</title><rect x="983.3" y="307.0" width="106.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="986.3" y="318.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler0_sendResponse.handleRequest (162 samples, 8.25%)</title><rect x="983.9" y="291.0" width="97.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="986.9" y="302.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (8 samples, 0.41%)</title><rect x="983.9" y="275.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="986.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8 samples, 0.41%)</title><rect x="983.9" y="259.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="986.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="985.7" y="243.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="988.7" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="985.7" y="227.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="988.7" y="238.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.05%)</title><rect x="985.7" y="211.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="988.7" y="222.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.20%)</title><rect x="986.3" y="243.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="989.3" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="988.1" y="227.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="991.1" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="988.1" y="211.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="991.1" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.05%)</title><rect x="988.1" y="195.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="991.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendResponse (154 samples, 7.84%)</title><rect x="988.7" y="275.0" width="92.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="991.7" y="286.0">ru/mail/pol..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.05%)</title><rect x="989.9" y="259.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="992.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.05%)</title><rect x="989.9" y="243.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="992.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$73/1096742976.get$Lambda (1 samples, 0.05%)</title><rect x="989.9" y="227.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="992.9" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="989.9" y="211.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.9" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="989.9" y="195.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (151 samples, 7.69%)</title><rect x="990.5" y="259.0" width="90.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="993.5" y="270.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (151 samples, 7.69%)</title><rect x="990.5" y="243.0" width="90.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="993.5" y="254.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (6 samples, 0.31%)</title><rect x="991.1" y="227.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="994.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.31%)</title><rect x="991.1" y="211.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="994.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 0.31%)</title><rect x="991.1" y="195.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="994.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.31%)</title><rect x="991.1" y="179.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="994.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (6 samples, 0.31%)</title><rect x="991.1" y="163.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="994.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (26 samples, 1.32%)</title><rect x="994.7" y="227.0" width="15.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="997.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (24 samples, 1.22%)</title><rect x="995.9" y="211.0" width="14.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="998.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (22 samples, 1.12%)</title><rect x="997.1" y="195.0" width="13.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1000.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (22 samples, 1.12%)</title><rect x="997.1" y="179.0" width="13.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1000.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (22 samples, 1.12%)</title><rect x="997.1" y="163.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1000.1" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (22 samples, 1.12%)</title><rect x="997.1" y="147.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1000.1" y="158.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.05%)</title><rect x="997.1" y="131.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.1" y="142.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (21 samples, 1.07%)</title><rect x="997.7" y="131.0" width="12.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1000.7" y="142.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="997.7" y="115.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.7" y="126.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.05%)</title><rect x="997.7" y="99.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1000.7" y="110.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="997.7" y="83.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1000.7" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.05%)</title><rect x="997.7" y="67.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1000.7" y="78.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="997.7" y="51.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.7" y="62.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.05%)</title><rect x="997.7" y="35.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1000.7" y="46.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="998.3" y="115.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.3" y="126.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.05%)</title><rect x="998.3" y="99.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.3" y="110.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive() (1 samples, 0.05%)</title><rect x="998.3" y="83.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.3" y="94.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 0.97%)</title><rect x="998.9" y="115.0" width="11.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.9" y="126.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.97%)</title><rect x="998.9" y="99.0" width="11.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1001.9" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (118 samples, 6.01%)</title><rect x="1010.4" y="227.0" width="70.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1013.4" y="238.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (118 samples, 6.01%)</title><rect x="1010.4" y="211.0" width="70.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1013.4" y="222.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (118 samples, 6.01%)</title><rect x="1010.4" y="195.0" width="70.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1013.4" y="206.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (118 samples, 6.01%)</title><rect x="1010.4" y="179.0" width="70.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1013.4" y="190.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.05%)</title><rect x="1010.4" y="163.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1013.4" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (117 samples, 5.96%)</title><rect x="1011.0" y="163.0" width="70.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1014.0" y="174.0">jdk/inte..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="1014.0" y="147.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.0" y="158.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="1014.6" y="147.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1017.6" y="158.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.05%)</title><rect x="1015.2" y="147.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.2" y="158.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (107 samples, 5.45%)</title><rect x="1015.8" y="147.0" width="64.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1018.8" y="158.0">Unsafe_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="1016.4" y="131.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1019.4" y="142.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.10%)</title><rect x="1017.0" y="131.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1020.0" y="142.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.10%)</title><rect x="1017.0" y="115.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1020.0" y="126.0"></text>
</g>
<g>
<title>JavaThread::jni_environment_offset() (1 samples, 0.05%)</title><rect x="1018.2" y="131.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.2" y="142.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="1018.8" y="131.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.8" y="142.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.05%)</title><rect x="1018.8" y="115.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1021.8" y="126.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.05%)</title><rect x="1018.8" y="99.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1021.8" y="110.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.05%)</title><rect x="1019.4" y="131.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.4" y="142.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.05%)</title><rect x="1020.0" y="131.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1023.0" y="142.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.10%)</title><rect x="1020.6" y="131.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1023.6" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.10%)</title><rect x="1020.6" y="115.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1023.6" y="126.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (2 samples, 0.10%)</title><rect x="1021.8" y="131.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.8" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.15%)</title><rect x="1023.0" y="131.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1026.0" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.15%)</title><rect x="1023.0" y="115.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1026.0" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.10%)</title><rect x="1023.6" y="99.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1026.6" y="110.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.05%)</title><rect x="1024.2" y="83.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1027.2" y="94.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.10%)</title><rect x="1024.8" y="131.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1027.8" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="1024.8" y="115.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.8" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="1025.4" y="115.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1028.4" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="1025.4" y="99.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1028.4" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="1025.4" y="83.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.4" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="1025.4" y="67.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.4" y="78.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="1025.4" y="51.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1028.4" y="62.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="1025.4" y="35.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.4" y="46.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.10%)</title><rect x="1026.0" y="131.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.0" y="142.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="1026.6" y="115.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.6" y="126.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.05%)</title><rect x="1026.6" y="99.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.6" y="110.0"></text>
</g>
<g>
<title>__psynch_cvsignal (73 samples, 3.72%)</title><rect x="1027.2" y="131.0" width="43.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1030.2" y="142.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.10%)</title><rect x="1071.0" y="131.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1074.0" y="142.0"></text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.05%)</title><rect x="1072.2" y="131.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1075.2" y="142.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.05%)</title><rect x="1072.8" y="131.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.8" y="142.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.05%)</title><rect x="1073.4" y="131.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.4" y="142.0"></text>
</g>
<g>
<title>pthread_cond_signal (5 samples, 0.25%)</title><rect x="1074.0" y="131.0" width="3.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1077.0" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (3 samples, 0.15%)</title><rect x="1075.2" y="115.0" width="1.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1078.2" y="126.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.20%)</title><rect x="1077.0" y="131.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1080.0" y="142.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.05%)</title><rect x="1079.5" y="131.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1082.5" y="142.0"></text>
</g>
<g>
<title>addr_from_java(long) (2 samples, 0.10%)</title><rect x="1080.1" y="147.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1083.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (14 samples, 0.71%)</title><rect x="1081.3" y="291.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1084.3" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (14 samples, 0.71%)</title><rect x="1081.3" y="275.0" width="8.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1084.3" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="1081.3" y="259.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1084.3" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (13 samples, 0.66%)</title><rect x="1081.9" y="259.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1084.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (13 samples, 0.66%)</title><rect x="1081.9" y="243.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1084.9" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (13 samples, 0.66%)</title><rect x="1081.9" y="227.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1084.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (18 samples, 0.92%)</title><rect x="1089.7" y="323.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1092.7" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="1091.5" y="307.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.5" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="1091.5" y="291.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.5" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="1091.5" y="275.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1094.5" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1091.5" y="259.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.5" y="270.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1091.5" y="243.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.5" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1091.5" y="227.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.5" y="238.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.05%)</title><rect x="1091.5" y="211.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.5" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.05%)</title><rect x="1091.5" y="195.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.5" y="206.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.05%)</title><rect x="1091.5" y="179.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.5" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.15%)</title><rect x="1092.1" y="307.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1095.1" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.15%)</title><rect x="1092.1" y="291.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1095.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.15%)</title><rect x="1092.1" y="275.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1095.1" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.15%)</title><rect x="1092.1" y="259.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1095.1" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.15%)</title><rect x="1092.1" y="243.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1095.1" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.25%)</title><rect x="1093.9" y="307.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1096.9" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.20%)</title><rect x="1094.5" y="291.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1097.5" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1096.3" y="275.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1099.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1096.3" y="259.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1099.3" y="270.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.05%)</title><rect x="1096.3" y="243.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1099.3" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1096.3" y="227.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.3" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1096.3" y="211.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.3" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1096.3" y="195.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.3" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1096.3" y="179.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.3" y="190.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="1096.3" y="163.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1099.3" y="174.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="1096.3" y="147.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.3" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (6 samples, 0.31%)</title><rect x="1096.9" y="307.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1099.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.15%)</title><rect x="1100.5" y="323.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1103.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.15%)</title><rect x="1100.5" y="307.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1103.5" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.15%)</title><rect x="1100.5" y="291.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1103.5" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 1.48%)</title><rect x="1102.3" y="323.0" width="17.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1105.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.71%)</title><rect x="1111.3" y="307.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1114.3" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="1118.5" y="291.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.5" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="1118.5" y="275.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.5" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="1118.5" y="259.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.5" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1118.5" y="243.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.5" y="254.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="1118.5" y="227.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.5" y="238.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="1118.5" y="211.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1119.1" y="291.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1122.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1119.1" y="275.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1122.1" y="286.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.05%)</title><rect x="1119.1" y="259.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1122.1" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1119.1" y="243.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.1" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1119.1" y="227.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.1" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1119.1" y="211.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.1" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1119.1" y="195.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.1" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (100 samples, 5.09%)</title><rect x="1119.7" y="339.0" width="60.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1122.7" y="350.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (100 samples, 5.09%)</title><rect x="1119.7" y="323.0" width="60.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1122.7" y="334.0">one/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.15%)</title><rect x="1120.3" y="307.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1123.3" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="1120.3" y="291.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1123.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="1120.3" y="275.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1123.3" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.15%)</title><rect x="1120.3" y="259.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1123.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.15%)</title><rect x="1120.3" y="243.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1123.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.15%)</title><rect x="1120.3" y="227.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1123.3" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (96 samples, 4.89%)</title><rect x="1122.1" y="307.0" width="57.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1125.1" y="318.0">sun/ni..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="1122.1" y="291.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1125.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.05%)</title><rect x="1122.7" y="291.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1125.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.05%)</title><rect x="1122.7" y="275.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1125.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.05%)</title><rect x="1122.7" y="259.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1125.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.05%)</title><rect x="1122.7" y="243.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1125.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (92 samples, 4.68%)</title><rect x="1123.3" y="291.0" width="55.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1126.3" y="302.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (91 samples, 4.63%)</title><rect x="1123.9" y="275.0" width="54.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1126.9" y="286.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (87 samples, 4.43%)</title><rect x="1123.9" y="259.0" width="52.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1126.9" y="270.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (87 samples, 4.43%)</title><rect x="1123.9" y="243.0" width="52.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.9" y="254.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (83 samples, 4.23%)</title><rect x="1126.3" y="227.0" width="49.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1129.3" y="238.0">sun/n..</text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.05%)</title><rect x="1128.1" y="211.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1131.1" y="222.0"></text>
</g>
<g>
<title>rpc_errlist (79 samples, 4.02%)</title><rect x="1128.7" y="211.0" width="47.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1131.7" y="222.0">rpc_..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.20%)</title><rect x="1176.2" y="259.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1179.2" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.20%)</title><rect x="1176.2" y="243.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1179.2" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (4 samples, 0.20%)</title><rect x="1176.2" y="227.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1179.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (4 samples, 0.20%)</title><rect x="1176.2" y="211.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1179.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (2 samples, 0.10%)</title><rect x="1178.6" y="291.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1181.6" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.10%)</title><rect x="1178.6" y="275.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1181.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.10%)</title><rect x="1178.6" y="259.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1181.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.10%)</title><rect x="1179.8" y="339.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1182.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.05%)</title><rect x="1180.4" y="323.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1183.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1180.4" y="307.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1183.4" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.10%)</title><rect x="1181.0" y="371.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.10%)</title><rect x="1181.0" y="355.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.10%)</title><rect x="1181.0" y="339.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1184.0" y="350.0"></text>
</g>
<g>
<title>thread_start (13 samples, 0.66%)</title><rect x="1182.2" y="387.0" width="7.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1185.2" y="398.0"></text>
</g>
<g>
<title>_pthread_start (13 samples, 0.66%)</title><rect x="1182.2" y="371.0" width="7.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1185.2" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (13 samples, 0.66%)</title><rect x="1182.2" y="355.0" width="7.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1185.2" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (13 samples, 0.66%)</title><rect x="1182.2" y="339.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="350.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.10%)</title><rect x="1182.2" y="323.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="334.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.10%)</title><rect x="1182.2" y="307.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.05%)</title><rect x="1182.2" y="291.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="302.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.05%)</title><rect x="1182.2" y="275.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="286.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.05%)</title><rect x="1182.2" y="259.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="270.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.05%)</title><rect x="1182.2" y="243.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="254.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.05%)</title><rect x="1182.2" y="227.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="238.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 0.05%)</title><rect x="1182.2" y="211.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="222.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.05%)</title><rect x="1182.8" y="291.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="302.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="1182.8" y="275.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="286.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.05%)</title><rect x="1182.8" y="259.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="270.0"></text>
</g>
<g>
<title>pthread_cond_timedwait (1 samples, 0.05%)</title><rect x="1182.8" y="243.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1185.8" y="254.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.05%)</title><rect x="1183.4" y="323.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.4" y="334.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.05%)</title><rect x="1183.4" y="307.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="318.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.05%)</title><rect x="1183.4" y="291.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1186.4" y="302.0"></text>
</g>
<g>
<title>JavaThread::run() (8 samples, 0.41%)</title><rect x="1184.0" y="323.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (8 samples, 0.41%)</title><rect x="1184.0" y="307.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="318.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (7 samples, 0.36%)</title><rect x="1184.0" y="291.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="302.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (6 samples, 0.31%)</title><rect x="1184.0" y="275.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="286.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (6 samples, 0.31%)</title><rect x="1184.0" y="259.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="270.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (6 samples, 0.31%)</title><rect x="1184.0" y="243.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="254.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (4 samples, 0.20%)</title><rect x="1184.0" y="227.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.0" y="238.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.05%)</title><rect x="1184.0" y="211.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="222.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.05%)</title><rect x="1184.0" y="195.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="206.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.15%)</title><rect x="1184.6" y="211.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.6" y="222.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.05%)</title><rect x="1184.6" y="195.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.6" y="206.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (1 samples, 0.05%)</title><rect x="1184.6" y="179.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.6" y="190.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="1184.6" y="163.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.6" y="174.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.05%)</title><rect x="1185.2" y="195.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="206.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.05%)</title><rect x="1185.8" y="195.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="206.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1185.8" y="179.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="190.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.05%)</title><rect x="1185.8" y="163.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="174.0"></text>
</g>
<g>
<title>Compile::Optimize() (2 samples, 0.10%)</title><rect x="1186.4" y="227.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.4" y="238.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.05%)</title><rect x="1186.4" y="211.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.4" y="222.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.05%)</title><rect x="1186.4" y="195.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.4" y="206.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="1186.4" y="179.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.4" y="190.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.05%)</title><rect x="1187.0" y="211.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.0" y="222.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="1187.0" y="195.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.0" y="206.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.05%)</title><rect x="1187.0" y="179.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="190.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.05%)</title><rect x="1187.0" y="163.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.0" y="174.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="1187.0" y="147.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.0" y="158.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1187.0" y="131.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1190.0" y="142.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.05%)</title><rect x="1187.6" y="275.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.6" y="286.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="1187.6" y="259.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.6" y="270.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.05%)</title><rect x="1187.6" y="243.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.6" y="254.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="1187.6" y="227.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.6" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1187.6" y="211.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1190.6" y="222.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.05%)</title><rect x="1188.2" y="291.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1191.2" y="302.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.05%)</title><rect x="1188.2" y="275.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1191.2" y="286.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.05%)</title><rect x="1188.8" y="323.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="334.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.05%)</title><rect x="1188.8" y="307.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="318.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.05%)</title><rect x="1188.8" y="291.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.8" y="302.0"></text>
</g>
<g>
<title>ThreadSafepointState::examine_state_of_thread() (1 samples, 0.05%)</title><rect x="1188.8" y="275.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="286.0"></text>
</g>
<g>
<title>SafepointSynchronize::check_for_lazy_critical_native(JavaThread*, JavaThreadState) (1 samples, 0.05%)</title><rect x="1188.8" y="259.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.8" y="270.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.05%)</title><rect x="1188.8" y="243.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="1188.8" y="227.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.8" y="238.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.05%)</title><rect x="1188.8" y="211.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="222.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.05%)</title><rect x="1189.4" y="323.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.4" y="334.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.05%)</title><rect x="1189.4" y="307.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.4" y="318.0"></text>
</g>
</g>
</svg>
