<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (882 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (15 samples, 1.70%)</title><rect x="10.0" y="915.0" width="20.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (1 samples, 0.11%)</title><rect x="10.0" y="899.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1 samples, 0.11%)</title><rect x="10.0" y="883.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::DB::Delete(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="867.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="851.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="835.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.11%)</title><rect x="10.0" y="819.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.11%)</title><rect x="10.0" y="803.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.11%)</title><rect x="10.0" y="787.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.11%)</title><rect x="10.0" y="771.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.11%)</title><rect x="10.0" y="755.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::DeleteCF(unsigned int, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="739.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.11%)</title><rect x="10.0" y="723.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.11%)</title><rect x="10.0" y="707.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3576987644435631905.so (1 samples, 0.11%)</title><rect x="10.0" y="691.0" width="1.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3576987644435631905.so (1 samples, 0.11%)</title><rect x="10.0" y="675.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="10.0" y="659.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="10.0" y="643.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="10.0" y="627.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>jni_CallStaticIntMethodV (1 samples, 0.11%)</title><rect x="10.0" y="611.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (1 samples, 0.11%)</title><rect x="10.0" y="595.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="10.0" y="579.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="10.0" y="563.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>call_stub (14 samples, 1.59%)</title><rect x="11.3" y="899.0" width="18.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.3" y="910.0"></text>
</g>
<g>
<title>[unknown_Java] (62 samples, 7.03%)</title><rect x="30.1" y="915.0" width="82.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="33.1" y="926.0">[unknown_..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (61 samples, 6.92%)</title><rect x="30.1" y="899.0" width="81.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="33.1" y="910.0">Java_org_..</text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (61 samples, 6.92%)</title><rect x="30.1" y="883.0" width="81.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="33.1" y="894.0">rocksdb_d..</text>
</g>
<g>
<title>rocksdb::DB::Delete(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;) (61 samples, 6.92%)</title><rect x="30.1" y="867.0" width="81.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="33.1" y="878.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (61 samples, 6.92%)</title><rect x="30.1" y="851.0" width="81.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="33.1" y="862.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DB::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (61 samples, 6.92%)</title><rect x="30.1" y="835.0" width="81.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="33.1" y="846.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (61 samples, 6.92%)</title><rect x="30.1" y="819.0" width="81.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="33.1" y="830.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (61 samples, 6.92%)</title><rect x="30.1" y="803.0" width="81.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="33.1" y="814.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (61 samples, 6.92%)</title><rect x="30.1" y="787.0" width="81.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="33.1" y="798.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (61 samples, 6.92%)</title><rect x="30.1" y="771.0" width="81.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="33.1" y="782.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (61 samples, 6.92%)</title><rect x="30.1" y="755.0" width="81.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="33.1" y="766.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::DeleteCF(unsigned int, rocksdb::Slice const&amp;) (61 samples, 6.92%)</title><rect x="30.1" y="739.0" width="81.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="33.1" y="750.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (61 samples, 6.92%)</title><rect x="30.1" y="723.0" width="81.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="33.1" y="734.0">rocksdb::..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (61 samples, 6.92%)</title><rect x="30.1" y="707.0" width="81.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="33.1" y="718.0">bool rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni3576987644435631905.so (61 samples, 6.92%)</title><rect x="30.1" y="691.0" width="81.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="33.1" y="702.0">/tmp/libr..</text>
</g>
<g>
<title>/tmp/librocksdbjni3576987644435631905.so (60 samples, 6.80%)</title><rect x="30.1" y="675.0" width="80.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="33.1" y="686.0">/tmp/libr..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (60 samples, 6.80%)</title><rect x="30.1" y="659.0" width="80.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="33.1" y="670.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (60 samples, 6.80%)</title><rect x="30.1" y="643.0" width="80.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="33.1" y="654.0">rocksdb::..</text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (25 samples, 2.83%)</title><rect x="30.1" y="627.0" width="33.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="33.1" y="638.0">JN..</text>
</g>
<g>
<title>jni_CallStaticIntMethodV (25 samples, 2.83%)</title><rect x="30.1" y="611.0" width="33.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="33.1" y="622.0">jn..</text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (25 samples, 2.83%)</title><rect x="30.1" y="595.0" width="33.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="33.1" y="606.0">jn..</text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.11%)</title><rect x="30.1" y="579.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="33.1" y="590.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.23%)</title><rect x="31.4" y="579.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="34.4" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (22 samples, 2.49%)</title><rect x="34.1" y="579.0" width="29.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="37.1" y="590.0">Ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097844ul, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.23%)</title><rect x="38.1" y="563.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="41.1" y="574.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.11%)</title><rect x="40.8" y="563.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="43.8" y="574.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (15 samples, 1.70%)</title><rect x="42.1" y="563.0" width="20.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="45.1" y="574.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="62.2" y="563.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="65.2" y="574.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.11%)</title><rect x="62.2" y="547.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="65.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::NewBuffer(JNIEnv_*, rocksdb::Slice const&amp;) const (35 samples, 3.97%)</title><rect x="63.5" y="627.0" width="46.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="66.5" y="638.0">rock..</text>
</g>
<g>
<title>JNIEnv_::NewObject(_jclass*, _jmethodID*, ...) (35 samples, 3.97%)</title><rect x="63.5" y="611.0" width="46.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="66.5" y="622.0">JNIE..</text>
</g>
<g>
<title>jni_NewObjectV (35 samples, 3.97%)</title><rect x="63.5" y="595.0" width="46.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="66.5" y="606.0">jni_..</text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.0] (35 samples, 3.97%)</title><rect x="63.5" y="579.0" width="46.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="66.5" y="590.0">jni_..</text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (5 samples, 0.57%)</title><rect x="63.5" y="563.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="66.5" y="574.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.23%)</title><rect x="70.2" y="563.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="73.2" y="574.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.11%)</title><rect x="72.9" y="563.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="75.9" y="574.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (27 samples, 3.06%)</title><rect x="74.2" y="563.0" width="36.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="77.2" y="574.0">Jav..</text>
</g>
<g>
<title>HandleMark::~HandleMark() (5 samples, 0.57%)</title><rect x="79.6" y="547.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="82.6" y="558.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (16 samples, 1.81%)</title><rect x="86.3" y="547.0" width="21.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="89.3" y="558.0">J..</text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="107.7" y="547.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="110.7" y="558.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.11%)</title><rect x="109.0" y="547.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="112.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="110.3" y="675.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="113.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="110.3" y="659.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="113.3" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="110.3" y="643.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="113.3" y="654.0"></text>
</g>
<g>
<title>jni_CallStaticIntMethodV (1 samples, 0.11%)</title><rect x="110.3" y="627.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="113.3" y="638.0"></text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (1 samples, 0.11%)</title><rect x="110.3" y="611.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="113.3" y="622.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="110.3" y="595.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="113.3" y="606.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.11%)</title><rect x="110.3" y="579.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="113.3" y="590.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.11%)</title><rect x="111.7" y="899.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="114.7" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.11%)</title><rect x="113.0" y="915.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="116.0" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.11%)</title><rect x="113.0" y="899.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="116.0" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.11%)</title><rect x="113.0" y="883.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="116.0" y="894.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="113.0" y="867.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="116.0" y="878.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.11%)</title><rect x="113.0" y="851.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="116.0" y="862.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.11%)</title><rect x="113.0" y="835.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="116.0" y="846.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.11%)</title><rect x="113.0" y="819.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="116.0" y="830.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (801 samples, 90.82%)</title><rect x="114.4" y="915.0" width="1071.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.4" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.11%)</title><rect x="115.7" y="899.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="118.7" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.11%)</title><rect x="115.7" y="883.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="118.7" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.11%)</title><rect x="115.7" y="867.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="118.7" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (12 samples, 1.36%)</title><rect x="117.0" y="899.0" width="16.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="120.0" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (1 samples, 0.11%)</title><rect x="117.0" y="883.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.0" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.11%)</title><rect x="117.0" y="867.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="120.0" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (11 samples, 1.25%)</title><rect x="118.4" y="883.0" width="14.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.4" y="894.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.11%)</title><rect x="118.4" y="867.0" width="1.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="121.4" y="878.0"></text>
</g>
<g>
<title>epoll_wait (10 samples, 1.13%)</title><rect x="119.7" y="867.0" width="13.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="122.7" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.91%)</title><rect x="122.4" y="851.0" width="10.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="125.4" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (8 samples, 0.91%)</title><rect x="122.4" y="835.0" width="10.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="125.4" y="846.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (7 samples, 0.79%)</title><rect x="123.7" y="819.0" width="9.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="126.7" y="830.0"></text>
</g>
<g>
<title>do_epoll_wait (7 samples, 0.79%)</title><rect x="123.7" y="803.0" width="9.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="126.7" y="814.0"></text>
</g>
<g>
<title>ep_poll (7 samples, 0.79%)</title><rect x="123.7" y="787.0" width="9.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="126.7" y="798.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (2 samples, 0.23%)</title><rect x="123.7" y="771.0" width="2.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="126.7" y="782.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.23%)</title><rect x="123.7" y="755.0" width="2.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="126.7" y="766.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (2 samples, 0.23%)</title><rect x="123.7" y="739.0" width="2.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="126.7" y="750.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.23%)</title><rect x="123.7" y="723.0" width="2.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="126.7" y="734.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.11%)</title><rect x="123.7" y="707.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="126.7" y="718.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.11%)</title><rect x="125.1" y="707.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="128.1" y="718.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (5 samples, 0.57%)</title><rect x="126.4" y="771.0" width="6.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="129.4" y="782.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (5 samples, 0.57%)</title><rect x="126.4" y="755.0" width="6.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="129.4" y="766.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.57%)</title><rect x="126.4" y="739.0" width="6.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="129.4" y="750.0"></text>
</g>
<g>
<title>__schedule (5 samples, 0.57%)</title><rect x="126.4" y="723.0" width="6.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="129.4" y="734.0"></text>
</g>
<g>
<title>finish_task_switch (5 samples, 0.57%)</title><rect x="126.4" y="707.0" width="6.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="129.4" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (787 samples, 89.23%)</title><rect x="133.1" y="899.0" width="1052.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.1" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (787 samples, 89.23%)</title><rect x="133.1" y="883.0" width="1052.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="136.1" y="894.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (778 samples, 88.21%)</title><rect x="133.1" y="867.0" width="1040.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="136.1" y="878.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (777 samples, 88.10%)</title><rect x="133.1" y="851.0" width="1039.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.1" y="862.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (777 samples, 88.10%)</title><rect x="133.1" y="835.0" width="1039.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="136.1" y="846.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (4 samples, 0.45%)</title><rect x="133.1" y="819.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.1" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.23%)</title><rect x="133.1" y="803.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.23%)</title><rect x="133.1" y="787.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="136.1" y="798.0"></text>
</g>
<g>
<title>RequestHandler3_delete.handleRequest (1 samples, 0.11%)</title><rect x="134.4" y="771.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="137.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/ServiceImpl.put (2 samples, 0.23%)</title><rect x="135.8" y="803.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="138.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDBImpl.upsert (2 samples, 0.23%)</title><rect x="135.8" y="787.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="138.8" y="798.0"></text>
</g>
<g>
<title>RequestHandler3_delete.handleRequest (772 samples, 87.53%)</title><rect x="138.4" y="819.0" width="1032.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="141.4" y="830.0">RequestHandler3_delete.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (132 samples, 14.97%)</title><rect x="138.4" y="803.0" width="176.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="141.4" y="814.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (131 samples, 14.85%)</title><rect x="138.4" y="787.0" width="175.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="141.4" y="798.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.45%)</title><rect x="138.4" y="771.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.45%)</title><rect x="138.4" y="755.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="141.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.11%)</title><rect x="138.4" y="739.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.23%)</title><rect x="139.8" y="739.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.11%)</title><rect x="141.1" y="723.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="144.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.11%)</title><rect x="141.1" y="707.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="144.1" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.11%)</title><rect x="142.4" y="739.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="145.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.11%)</title><rect x="142.4" y="723.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="145.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.11%)</title><rect x="142.4" y="707.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.11%)</title><rect x="142.4" y="691.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="145.4" y="702.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.11%)</title><rect x="142.4" y="675.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="145.4" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (127 samples, 14.40%)</title><rect x="143.8" y="771.0" width="169.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.8" y="782.0">one/nio/net/Session.wr..</text>
</g>
<g>
<title>one/nio/net/Session.write (127 samples, 14.40%)</title><rect x="143.8" y="755.0" width="169.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.8" y="766.0">one/nio/net/Session.wr..</text>
</g>
<g>
<title>gettimeofday@plt (1 samples, 0.11%)</title><rect x="143.8" y="739.0" width="1.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="146.8" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (124 samples, 14.06%)</title><rect x="145.1" y="739.0" width="165.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="148.1" y="750.0">one/nio/net/Session$A..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (123 samples, 13.95%)</title><rect x="146.5" y="723.0" width="164.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.5" y="734.0">one/nio/net/NativeSoc..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.11%)</title><rect x="146.5" y="707.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="149.5" y="718.0"></text>
</g>
<g>
<title>send (122 samples, 13.83%)</title><rect x="147.8" y="707.0" width="163.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="150.8" y="718.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (120 samples, 13.61%)</title><rect x="150.5" y="691.0" width="160.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="153.5" y="702.0">entry_SYSCALL_64_aft..</text>
</g>
<g>
<title>do_syscall_64 (120 samples, 13.61%)</title><rect x="150.5" y="675.0" width="160.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="153.5" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (51 samples, 5.78%)</title><rect x="150.5" y="659.0" width="68.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="153.5" y="670.0">__x64_s..</text>
</g>
<g>
<title>__sys_sendto (51 samples, 5.78%)</title><rect x="150.5" y="643.0" width="68.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="153.5" y="654.0">__sys_s..</text>
</g>
<g>
<title>sock_sendmsg (51 samples, 5.78%)</title><rect x="150.5" y="627.0" width="68.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="153.5" y="638.0">sock_se..</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.11%)</title><rect x="150.5" y="611.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="153.5" y="622.0"></text>
</g>
<g>
<title>inet6_sendmsg (49 samples, 5.56%)</title><rect x="151.8" y="611.0" width="65.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="154.8" y="622.0">inet6_s..</text>
</g>
<g>
<title>tcp_sendmsg (49 samples, 5.56%)</title><rect x="151.8" y="595.0" width="65.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="154.8" y="606.0">tcp_sen..</text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.11%)</title><rect x="153.2" y="579.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="156.2" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.11%)</title><rect x="154.5" y="579.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="157.5" y="590.0"></text>
</g>
<g>
<title>sock_zerocopy_put (1 samples, 0.11%)</title><rect x="155.8" y="579.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="158.8" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (45 samples, 5.10%)</title><rect x="157.2" y="579.0" width="60.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="160.2" y="590.0">tcp_se..</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.11%)</title><rect x="158.5" y="563.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="161.5" y="574.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.11%)</title><rect x="158.5" y="547.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="161.5" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (3 samples, 0.34%)</title><rect x="159.8" y="563.0" width="4.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="162.8" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (3 samples, 0.34%)</title><rect x="159.8" y="547.0" width="4.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="162.8" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (2 samples, 0.23%)</title><rect x="159.8" y="531.0" width="2.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="162.8" y="542.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.11%)</title><rect x="159.8" y="515.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="162.8" y="526.0"></text>
</g>
<g>
<title>memset (1 samples, 0.11%)</title><rect x="161.2" y="515.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="164.2" y="526.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.11%)</title><rect x="162.5" y="531.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="165.5" y="542.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.11%)</title><rect x="162.5" y="515.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="165.5" y="526.0"></text>
</g>
<g>
<title>tcp_push (40 samples, 4.54%)</title><rect x="163.9" y="563.0" width="53.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="166.9" y="574.0">tcp_p..</text>
</g>
<g>
<title>__tcp_push_pending_frames (39 samples, 4.42%)</title><rect x="165.2" y="547.0" width="52.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="168.2" y="558.0">__tcp..</text>
</g>
<g>
<title>tcp_write_xmit (39 samples, 4.42%)</title><rect x="165.2" y="531.0" width="52.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="168.2" y="542.0">tcp_w..</text>
</g>
<g>
<title>__tcp_transmit_skb (36 samples, 4.08%)</title><rect x="166.5" y="515.0" width="48.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="169.5" y="526.0">__tc..</text>
</g>
<g>
<title>ip_queue_xmit (34 samples, 3.85%)</title><rect x="167.9" y="499.0" width="45.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="170.9" y="510.0">ip_q..</text>
</g>
<g>
<title>__ip_queue_xmit (34 samples, 3.85%)</title><rect x="167.9" y="483.0" width="45.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="170.9" y="494.0">__ip..</text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.11%)</title><rect x="167.9" y="467.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="170.9" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.11%)</title><rect x="167.9" y="451.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="170.9" y="462.0"></text>
</g>
<g>
<title>ip_local_out (33 samples, 3.74%)</title><rect x="169.2" y="467.0" width="44.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="172.2" y="478.0">ip_l..</text>
</g>
<g>
<title>ip_output (33 samples, 3.74%)</title><rect x="169.2" y="451.0" width="44.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="172.2" y="462.0">ip_o..</text>
</g>
<g>
<title>ip_finish_output (33 samples, 3.74%)</title><rect x="169.2" y="435.0" width="44.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="172.2" y="446.0">ip_f..</text>
</g>
<g>
<title>__ip_finish_output (33 samples, 3.74%)</title><rect x="169.2" y="419.0" width="44.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="172.2" y="430.0">__ip..</text>
</g>
<g>
<title>ip_finish_output2 (32 samples, 3.63%)</title><rect x="170.5" y="403.0" width="42.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="173.5" y="414.0">ip_f..</text>
</g>
<g>
<title>__local_bh_enable_ip (30 samples, 3.40%)</title><rect x="171.9" y="387.0" width="40.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="174.9" y="398.0">__l..</text>
</g>
<g>
<title>do_softirq.part.0 (30 samples, 3.40%)</title><rect x="171.9" y="371.0" width="40.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="174.9" y="382.0">do_..</text>
</g>
<g>
<title>do_softirq_own_stack (29 samples, 3.29%)</title><rect x="173.2" y="355.0" width="38.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="176.2" y="366.0">do_..</text>
</g>
<g>
<title>__softirqentry_text_start (29 samples, 3.29%)</title><rect x="173.2" y="339.0" width="38.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="176.2" y="350.0">__s..</text>
</g>
<g>
<title>net_rx_action (28 samples, 3.17%)</title><rect x="174.6" y="323.0" width="37.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="177.6" y="334.0">net..</text>
</g>
<g>
<title>process_backlog (28 samples, 3.17%)</title><rect x="174.6" y="307.0" width="37.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="177.6" y="318.0">pro..</text>
</g>
<g>
<title>__netif_receive_skb (28 samples, 3.17%)</title><rect x="174.6" y="291.0" width="37.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="177.6" y="302.0">__n..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (28 samples, 3.17%)</title><rect x="174.6" y="275.0" width="37.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="177.6" y="286.0">__n..</text>
</g>
<g>
<title>ip_rcv (28 samples, 3.17%)</title><rect x="174.6" y="259.0" width="37.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="177.6" y="270.0">ip_..</text>
</g>
<g>
<title>ip_rcv_finish (28 samples, 3.17%)</title><rect x="174.6" y="243.0" width="37.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="177.6" y="254.0">ip_..</text>
</g>
<g>
<title>ip_local_deliver (24 samples, 2.72%)</title><rect x="177.2" y="227.0" width="32.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="180.2" y="238.0">ip..</text>
</g>
<g>
<title>ip_local_deliver_finish (24 samples, 2.72%)</title><rect x="177.2" y="211.0" width="32.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="180.2" y="222.0">ip..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (24 samples, 2.72%)</title><rect x="177.2" y="195.0" width="32.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="180.2" y="206.0">ip..</text>
</g>
<g>
<title>tcp_v4_rcv (24 samples, 2.72%)</title><rect x="177.2" y="179.0" width="32.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="180.2" y="190.0">tc..</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.11%)</title><rect x="177.2" y="163.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="180.2" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (23 samples, 2.61%)</title><rect x="178.6" y="163.0" width="30.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="181.6" y="174.0">tc..</text>
</g>
<g>
<title>tcp_rcv_established (23 samples, 2.61%)</title><rect x="178.6" y="147.0" width="30.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="181.6" y="158.0">tc..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.11%)</title><rect x="179.9" y="131.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="182.9" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.11%)</title><rect x="179.9" y="115.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="182.9" y="126.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.11%)</title><rect x="179.9" y="99.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="182.9" y="110.0"></text>
</g>
<g>
<title>tcp_ack (5 samples, 0.57%)</title><rect x="181.2" y="131.0" width="6.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="184.2" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.23%)</title><rect x="185.3" y="115.0" width="2.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="188.3" y="126.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.11%)</title><rect x="185.3" y="99.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="188.3" y="110.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.11%)</title><rect x="185.3" y="83.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="188.3" y="94.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.11%)</title><rect x="185.3" y="67.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="188.3" y="78.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.11%)</title><rect x="185.3" y="51.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="188.3" y="62.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.11%)</title><rect x="185.3" y="35.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="188.3" y="46.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.11%)</title><rect x="186.6" y="99.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="189.6" y="110.0"></text>
</g>
<g>
<title>tcp_data_ready (16 samples, 1.81%)</title><rect x="187.9" y="131.0" width="21.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="190.9" y="142.0">t..</text>
</g>
<g>
<title>sock_def_readable (16 samples, 1.81%)</title><rect x="187.9" y="115.0" width="21.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="190.9" y="126.0">s..</text>
</g>
<g>
<title>__wake_up_sync_key (16 samples, 1.81%)</title><rect x="187.9" y="99.0" width="21.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="190.9" y="110.0">_..</text>
</g>
<g>
<title>__wake_up_common_lock (16 samples, 1.81%)</title><rect x="187.9" y="83.0" width="21.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="190.9" y="94.0">_..</text>
</g>
<g>
<title>__lock_text_start (16 samples, 1.81%)</title><rect x="187.9" y="67.0" width="21.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="190.9" y="78.0">_..</text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.11%)</title><rect x="209.3" y="227.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="212.3" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (1 samples, 0.11%)</title><rect x="210.7" y="227.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="213.7" y="238.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.11%)</title><rect x="212.0" y="387.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="215.0" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.11%)</title><rect x="212.0" y="371.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="215.0" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.11%)</title><rect x="212.0" y="355.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="215.0" y="366.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.11%)</title><rect x="212.0" y="339.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="215.0" y="350.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.11%)</title><rect x="213.4" y="499.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="216.4" y="510.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.11%)</title><rect x="213.4" y="483.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="216.4" y="494.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.23%)</title><rect x="214.7" y="515.0" width="2.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="217.7" y="526.0"></text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.11%)</title><rect x="217.4" y="611.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="220.4" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (69 samples, 7.82%)</title><rect x="218.7" y="659.0" width="92.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="221.7" y="670.0">exit_to_use..</text>
</g>
<g>
<title>schedule (69 samples, 7.82%)</title><rect x="218.7" y="643.0" width="92.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="221.7" y="654.0">schedule</text>
</g>
<g>
<title>__schedule (69 samples, 7.82%)</title><rect x="218.7" y="627.0" width="92.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="221.7" y="638.0">__schedule</text>
</g>
<g>
<title>finish_task_switch (68 samples, 7.71%)</title><rect x="220.0" y="611.0" width="91.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="223.0" y="622.0">finish_tas..</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.23%)</title><rect x="311.0" y="739.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="314.0" y="750.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.23%)</title><rect x="311.0" y="723.0" width="2.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="314.0" y="734.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.23%)</title><rect x="311.0" y="707.0" width="2.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="314.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.11%)</title><rect x="313.7" y="787.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.7" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.11%)</title><rect x="315.0" y="803.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.0" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.11%)</title><rect x="315.0" y="787.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="318.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.11%)</title><rect x="315.0" y="771.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="318.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/ServiceImpl.delete (639 samples, 72.45%)</title><rect x="316.4" y="803.0" width="854.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.4" y="814.0">ru/mail/polis/service/ivanovandrey/ServiceImpl.delete</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDBImpl.remove (638 samples, 72.34%)</title><rect x="316.4" y="787.0" width="853.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.4" y="798.0">ru/mail/polis/dao/RocksDBImpl.remove</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (637 samples, 72.22%)</title><rect x="316.4" y="771.0" width="852.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="319.4" y="782.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>org/rocksdb/RocksDB.delete (637 samples, 72.22%)</title><rect x="316.4" y="755.0" width="852.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="319.4" y="766.0">org/rocksdb/RocksDB.delete</text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.45%)</title><rect x="317.7" y="739.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="320.7" y="750.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_delete__J_3BII (613 samples, 69.50%)</title><rect x="323.1" y="739.0" width="820.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="326.1" y="750.0">Java_org_rocksdb_RocksDB_delete__J_3BII</text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.11%)</title><rect x="324.4" y="723.0" width="1.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="327.4" y="734.0"></text>
</g>
<g>
<title>rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (611 samples, 69.27%)</title><rect x="325.7" y="723.0" width="817.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="328.7" y="734.0">rocksdb_delete_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteAr..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.11%)</title><rect x="327.1" y="707.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="330.1" y="718.0"></text>
</g>
<g>
<title>rocksdb::DB::Delete(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;) (609 samples, 69.05%)</title><rect x="328.4" y="707.0" width="814.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="331.4" y="718.0">rocksdb::DB::Delete(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (608 samples, 68.93%)</title><rect x="329.8" y="691.0" width="813.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="332.8" y="702.0">rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>rocksdb::DB::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (605 samples, 68.59%)</title><rect x="329.8" y="675.0" width="809.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="332.8" y="686.0">rocksdb::DB::Delete(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (1 samples, 0.11%)</title><rect x="329.8" y="659.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="332.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.11%)</title><rect x="331.1" y="659.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="334.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (599 samples, 67.91%)</title><rect x="332.4" y="659.0" width="801.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="335.4" y="670.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (1 samples, 0.11%)</title><rect x="333.8" y="643.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="336.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (596 samples, 67.57%)</title><rect x="335.1" y="643.0" width="797.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="338.1" y="654.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigne..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.11%)</title><rect x="337.8" y="627.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="340.8" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.34%)</title><rect x="339.1" y="627.0" width="4.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="342.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (2 samples, 0.23%)</title><rect x="343.1" y="627.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="346.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.11%)</title><rect x="345.8" y="627.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="348.8" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="345.8" y="611.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="348.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (34 samples, 3.85%)</title><rect x="347.1" y="627.0" width="45.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="350.1" y="638.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.11%)</title><rect x="347.1" y="611.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="350.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (32 samples, 3.63%)</title><rect x="348.5" y="611.0" width="42.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="351.5" y="622.0">rock..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.11%)</title><rect x="348.5" y="595.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="351.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (31 samples, 3.51%)</title><rect x="349.8" y="595.0" width="41.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="352.8" y="606.0">roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni3576987644435631905.so (2 samples, 0.23%)</title><rect x="349.8" y="579.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="352.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (27 samples, 3.06%)</title><rect x="352.5" y="579.0" width="36.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="355.5" y="590.0">roc..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (25 samples, 2.83%)</title><rect x="355.2" y="563.0" width="33.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="358.2" y="574.0">ro..</text>
</g>
<g>
<title>__write (23 samples, 2.61%)</title><rect x="357.8" y="547.0" width="30.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="360.8" y="558.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (21 samples, 2.38%)</title><rect x="360.5" y="531.0" width="28.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="363.5" y="542.0">en..</text>
</g>
<g>
<title>do_syscall_64 (21 samples, 2.38%)</title><rect x="360.5" y="515.0" width="28.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="363.5" y="526.0">do..</text>
</g>
<g>
<title>__x64_sys_write (21 samples, 2.38%)</title><rect x="360.5" y="499.0" width="28.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="363.5" y="510.0">__..</text>
</g>
<g>
<title>ksys_write (21 samples, 2.38%)</title><rect x="360.5" y="483.0" width="28.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="363.5" y="494.0">ks..</text>
</g>
<g>
<title>vfs_write (21 samples, 2.38%)</title><rect x="360.5" y="467.0" width="28.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="363.5" y="478.0">vf..</text>
</g>
<g>
<title>__vfs_write (20 samples, 2.27%)</title><rect x="360.5" y="451.0" width="26.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="363.5" y="462.0">_..</text>
</g>
<g>
<title>new_sync_write (20 samples, 2.27%)</title><rect x="360.5" y="435.0" width="26.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="363.5" y="446.0">n..</text>
</g>
<g>
<title>ext4_file_write_iter (20 samples, 2.27%)</title><rect x="360.5" y="419.0" width="26.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="363.5" y="430.0">e..</text>
</g>
<g>
<title>__generic_file_write_iter (19 samples, 2.15%)</title><rect x="360.5" y="403.0" width="25.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="363.5" y="414.0">_..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.11%)</title><rect x="360.5" y="387.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="363.5" y="398.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.11%)</title><rect x="361.9" y="387.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="364.9" y="398.0"></text>
</g>
<g>
<title>generic_update_time (1 samples, 0.11%)</title><rect x="361.9" y="371.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="364.9" y="382.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.11%)</title><rect x="361.9" y="355.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="364.9" y="366.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.11%)</title><rect x="361.9" y="339.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="364.9" y="350.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.11%)</title><rect x="361.9" y="323.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="364.9" y="334.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.11%)</title><rect x="361.9" y="307.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="364.9" y="318.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.11%)</title><rect x="361.9" y="291.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="364.9" y="302.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.11%)</title><rect x="361.9" y="275.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="364.9" y="286.0"></text>
</g>
<g>
<title>generic_perform_write (17 samples, 1.93%)</title><rect x="363.2" y="387.0" width="22.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="366.2" y="398.0">g..</text>
</g>
<g>
<title>ext4_da_write_begin (5 samples, 0.57%)</title><rect x="363.2" y="371.0" width="6.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="366.2" y="382.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.11%)</title><rect x="363.2" y="355.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="366.2" y="366.0"></text>
</g>
<g>
<title>jbd2__journal_start (1 samples, 0.11%)</title><rect x="363.2" y="339.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="366.2" y="350.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.11%)</title><rect x="363.2" y="323.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="366.2" y="334.0"></text>
</g>
<g>
<title>ext4_block_write_begin (1 samples, 0.11%)</title><rect x="364.5" y="355.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="367.5" y="366.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (3 samples, 0.34%)</title><rect x="365.9" y="355.0" width="4.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="368.9" y="366.0"></text>
</g>
<g>
<title>pagecache_get_page (3 samples, 0.34%)</title><rect x="365.9" y="339.0" width="4.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="368.9" y="350.0"></text>
</g>
<g>
<title>find_get_entry (3 samples, 0.34%)</title><rect x="365.9" y="323.0" width="4.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="368.9" y="334.0"></text>
</g>
<g>
<title>xas_load (2 samples, 0.23%)</title><rect x="367.2" y="307.0" width="2.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="370.2" y="318.0"></text>
</g>
<g>
<title>ext4_da_write_end (12 samples, 1.36%)</title><rect x="369.9" y="371.0" width="16.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="372.9" y="382.0"></text>
</g>
<g>
<title>__ext4_journal_stop (1 samples, 0.11%)</title><rect x="369.9" y="355.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="372.9" y="366.0"></text>
</g>
<g>
<title>jbd2_journal_stop (1 samples, 0.11%)</title><rect x="369.9" y="339.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="372.9" y="350.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.11%)</title><rect x="369.9" y="323.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="372.9" y="334.0"></text>
</g>
<g>
<title>generic_write_end (11 samples, 1.25%)</title><rect x="371.2" y="355.0" width="14.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="374.2" y="366.0"></text>
</g>
<g>
<title>__mark_inode_dirty (9 samples, 1.02%)</title><rect x="372.6" y="339.0" width="12.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="375.6" y="350.0"></text>
</g>
<g>
<title>ext4_dirty_inode (9 samples, 1.02%)</title><rect x="372.6" y="323.0" width="12.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="375.6" y="334.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (9 samples, 1.02%)</title><rect x="372.6" y="307.0" width="12.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="375.6" y="318.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (9 samples, 1.02%)</title><rect x="372.6" y="291.0" width="12.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="375.6" y="302.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.11%)</title><rect x="372.6" y="275.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="375.6" y="286.0"></text>
</g>
<g>
<title>ext4_do_update_inode (8 samples, 0.91%)</title><rect x="373.9" y="275.0" width="10.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="376.9" y="286.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (6 samples, 0.68%)</title><rect x="376.6" y="259.0" width="8.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="379.6" y="270.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.0 (6 samples, 0.68%)</title><rect x="376.6" y="243.0" width="8.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="379.6" y="254.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.11%)</title><rect x="377.9" y="227.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="380.9" y="238.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (2 samples, 0.23%)</title><rect x="379.3" y="227.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="382.3" y="238.0"></text>
</g>
<g>
<title>crypto_shash_update (2 samples, 0.23%)</title><rect x="381.9" y="227.0" width="2.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="384.9" y="238.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (1 samples, 0.11%)</title><rect x="383.3" y="211.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="386.3" y="222.0"></text>
</g>
<g>
<title>block_write_end (1 samples, 0.11%)</title><rect x="384.6" y="339.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="387.6" y="350.0"></text>
</g>
<g>
<title>__block_commit_write.isra.0 (1 samples, 0.11%)</title><rect x="384.6" y="323.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="387.6" y="334.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.11%)</title><rect x="385.9" y="403.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="388.9" y="414.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.0 (1 samples, 0.11%)</title><rect x="385.9" y="387.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="388.9" y="398.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.11%)</title><rect x="387.3" y="451.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="390.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.23%)</title><rect x="388.6" y="579.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="391.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (1 samples, 0.11%)</title><rect x="388.6" y="563.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="391.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="390.0" y="563.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="393.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::FSWritableFile::PrepareWrite(unsigned long, unsigned long, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.11%)</title><rect x="390.0" y="547.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="393.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (1 samples, 0.11%)</title><rect x="391.3" y="611.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="394.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.11%)</title><rect x="392.6" y="627.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="395.6" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.11%)</title><rect x="392.6" y="611.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="395.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (2 samples, 0.23%)</title><rect x="394.0" y="627.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="397.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (2 samples, 0.23%)</title><rect x="396.6" y="627.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="399.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (547 samples, 62.02%)</title><rect x="399.3" y="627.0" width="731.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="402.3" y="638.0">rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::Col..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (547 samples, 62.02%)</title><rect x="399.3" y="611.0" width="731.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="402.3" y="622.0">rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (547 samples, 62.02%)</title><rect x="399.3" y="595.0" width="731.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="402.3" y="606.0">rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsign..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::DeleteCF(unsigned int, rocksdb::Slice const&amp;) (546 samples, 61.90%)</title><rect x="400.7" y="579.0" width="730.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="403.7" y="590.0">rocksdb::MemTableInserter::DeleteCF(unsigned int, rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>/tmp/librocksdbjni3576987644435631905.so (1 samples, 0.11%)</title><rect x="403.3" y="563.0" width="1.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="406.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (542 samples, 61.45%)</title><rect x="404.7" y="563.0" width="725.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="407.7" y="574.0">rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const..</text>
</g>
<g>
<title>/tmp/librocksdbjni3576987644435631905.so (1 samples, 0.11%)</title><rect x="406.0" y="547.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="409.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.11%)</title><rect x="406.0" y="531.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="409.0" y="542.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (536 samples, 60.77%)</title><rect x="407.3" y="547.0" width="717.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="410.3" y="558.0">bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*,..</text>
</g>
<g>
<title>/tmp/librocksdbjni3576987644435631905.so (503 samples, 57.03%)</title><rect x="407.3" y="531.0" width="673.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="410.3" y="542.0">/tmp/librocksdbjni3576987644435631905.so</text>
</g>
<g>
<title>/tmp/librocksdbjni3576987644435631905.so (477 samples, 54.08%)</title><rect x="416.7" y="515.0" width="638.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="419.7" y="526.0">/tmp/librocksdbjni3576987644435631905.so</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (4 samples, 0.45%)</title><rect x="418.0" y="499.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="421.0" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.23%)</title><rect x="423.4" y="499.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="426.4" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.11%)</title><rect x="426.1" y="499.0" width="1.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="429.1" y="510.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.34%)</title><rect x="427.4" y="499.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="430.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="431.4" y="499.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="434.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (465 samples, 52.72%)</title><rect x="432.8" y="499.0" width="622.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="435.8" y="510.0">rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const</text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (4 samples, 0.45%)</title><rect x="442.1" y="483.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="445.1" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.23%)</title><rect x="447.5" y="483.0" width="2.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="450.5" y="494.0"></text>
</g>
<g>
<title>jni_DeleteLocalRef (4 samples, 0.45%)</title><rect x="450.2" y="483.0" width="5.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="453.2" y="494.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.57%)</title><rect x="455.5" y="483.0" width="6.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="458.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (418 samples, 47.39%)</title><rect x="462.2" y="483.0" width="559.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="465.2" y="494.0">rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097844ul, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)0, 1097844ul&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.34%)</title><rect x="479.6" y="467.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="482.6" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (90 samples, 10.20%)</title><rect x="483.6" y="467.0" width="120.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="486.6" y="478.0">JNIEnv_::CallSt..</text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (4 samples, 0.45%)</title><rect x="484.9" y="451.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="487.9" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (1 samples, 0.11%)</title><rect x="490.3" y="451.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="493.3" y="462.0"></text>
</g>
<g>
<title>jni_CallStaticIntMethodV (83 samples, 9.41%)</title><rect x="491.6" y="451.0" width="111.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="494.6" y="462.0">jni_CallStati..</text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="510.4" y="435.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="513.4" y="446.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="511.7" y="435.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="514.7" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (5 samples, 0.57%)</title><rect x="513.0" y="435.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="516.0" y="446.0"></text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (55 samples, 6.24%)</title><rect x="519.7" y="435.0" width="73.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="522.7" y="446.0">jni_invo..</text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (3 samples, 0.34%)</title><rect x="562.5" y="419.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="565.5" y="430.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.11%)</title><rect x="566.6" y="419.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="569.6" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (17 samples, 1.93%)</title><rect x="567.9" y="419.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="570.9" y="430.0">J..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (4 samples, 0.45%)</title><rect x="570.6" y="403.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="573.6" y="414.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (8 samples, 0.91%)</title><rect x="575.9" y="403.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="578.9" y="414.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.11%)</title><rect x="583.9" y="387.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="586.9" y="398.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.11%)</title><rect x="585.3" y="387.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="588.3" y="398.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (3 samples, 0.34%)</title><rect x="586.6" y="403.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="589.6" y="414.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.11%)</title><rect x="590.6" y="419.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="593.6" y="430.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.11%)</title><rect x="592.0" y="419.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="595.0" y="430.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (7 samples, 0.79%)</title><rect x="593.3" y="435.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="596.3" y="446.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (1 samples, 0.11%)</title><rect x="602.7" y="451.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="605.7" y="462.0"></text>
</g>
<g>
<title>JNIEnv_::NewObject(_jclass*, _jmethodID*, ...) (4 samples, 0.45%)</title><rect x="604.0" y="467.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="607.0" y="478.0"></text>
</g>
<g>
<title>jni_CallStaticIntMethodV (1 samples, 0.11%)</title><rect x="609.4" y="467.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="612.4" y="478.0"></text>
</g>
<g>
<title>jni_DeleteLocalRef (12 samples, 1.36%)</title><rect x="610.7" y="467.0" width="16.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="613.7" y="478.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.34%)</title><rect x="626.8" y="467.0" width="4.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="629.8" y="478.0"></text>
</g>
<g>
<title>jni_GetEnv (3 samples, 0.34%)</title><rect x="630.8" y="467.0" width="4.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="633.8" y="478.0"></text>
</g>
<g>
<title>jni_NewDirectByteBuffer (3 samples, 0.34%)</title><rect x="634.8" y="467.0" width="4.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="637.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::NewBuffer(JNIEnv_*, rocksdb::Slice const&amp;) const (274 samples, 31.07%)</title><rect x="638.8" y="467.0" width="366.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="641.8" y="478.0">rocksdb::ComparatorJniCallback::NewBuffer(JNIEnv_*..</text>
</g>
<g>
<title>JNIEnv_::NewObject(_jclass*, _jmethodID*, ...) (266 samples, 30.16%)</title><rect x="640.1" y="451.0" width="355.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="643.1" y="462.0">JNIEnv_::NewObject(_jclass*, _jmethodID*, ...)</text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.11%)</title><rect x="641.5" y="435.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="644.5" y="446.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.11%)</title><rect x="642.8" y="435.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="645.8" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (4 samples, 0.45%)</title><rect x="644.1" y="435.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="647.1" y="446.0"></text>
</g>
<g>
<title>alloc_object(_jclass*, Thread*) (5 samples, 0.57%)</title><rect x="649.5" y="435.0" width="6.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="652.5" y="446.0"></text>
</g>
<g>
<title>jni_NewObjectV (253 samples, 28.68%)</title><rect x="656.2" y="435.0" width="338.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="659.2" y="446.0">jni_NewObjectV</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097844ul, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.68%)</title><rect x="680.3" y="419.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="683.3" y="430.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;5292148ul, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.34%)</title><rect x="688.3" y="419.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="691.3" y="430.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (3 samples, 0.34%)</title><rect x="692.3" y="419.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="695.3" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="696.3" y="419.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="699.3" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::check_valid_for_instantiation(bool, Thread*) (4 samples, 0.45%)</title><rect x="697.7" y="419.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="700.7" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (6 samples, 0.68%)</title><rect x="703.0" y="419.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="706.0" y="430.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (9 samples, 1.02%)</title><rect x="711.0" y="419.0" width="12.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="714.0" y="430.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (4 samples, 0.45%)</title><rect x="723.1" y="419.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="726.1" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 0.68%)</title><rect x="728.4" y="419.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="731.4" y="430.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.11%)</title><rect x="736.5" y="419.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="739.5" y="430.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (8 samples, 0.91%)</title><rect x="737.8" y="419.0" width="10.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="740.8" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (11 samples, 1.25%)</title><rect x="748.5" y="419.0" width="14.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="751.5" y="430.0"></text>
</g>
<g>
<title>alloc_object(_jclass*, Thread*) (66 samples, 7.48%)</title><rect x="763.2" y="419.0" width="88.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="766.2" y="430.0">alloc_obje..</text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (9 samples, 1.02%)</title><rect x="773.9" y="403.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="776.9" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (48 samples, 5.44%)</title><rect x="786.0" y="403.0" width="64.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="789.0" y="414.0">Instanc..</text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (43 samples, 4.88%)</title><rect x="791.3" y="387.0" width="57.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="794.3" y="398.0">Collec..</text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (4 samples, 0.45%)</title><rect x="794.0" y="371.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="797.0" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (28 samples, 3.17%)</title><rect x="799.3" y="371.0" width="37.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="802.3" y="382.0">Mem..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.45%)</title><rect x="814.1" y="355.0" width="5.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="817.1" y="366.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.23%)</title><rect x="819.4" y="355.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="822.4" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.45%)</title><rect x="822.1" y="355.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="825.1" y="366.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (3 samples, 0.34%)</title><rect x="827.4" y="355.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="830.4" y="366.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.34%)</title><rect x="831.5" y="355.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="834.5" y="366.0"></text>
</g>
<g>
<title>memset@plt (1 samples, 0.11%)</title><rect x="835.5" y="355.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="838.5" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.23%)</title><rect x="836.8" y="371.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="839.8" y="382.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.23%)</title><rect x="839.5" y="371.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="842.5" y="382.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.57%)</title><rect x="842.2" y="371.0" width="6.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="845.2" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="848.8" y="387.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="851.8" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::check_valid_for_instantiation(bool, Thread*) (1 samples, 0.11%)</title><rect x="850.2" y="403.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="853.2" y="414.0"></text>
</g>
<g>
<title>java_lang_Class::as_Klass(oopDesc*) (2 samples, 0.23%)</title><rect x="851.5" y="419.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.5" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.0] (92 samples, 10.43%)</title><rect x="854.2" y="419.0" width="123.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="857.2" y="430.0">jni_invoke_nons..</text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (4 samples, 0.45%)</title><rect x="876.9" y="403.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="879.9" y="414.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (4 samples, 0.45%)</title><rect x="882.3" y="403.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="885.3" y="414.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.11%)</title><rect x="887.6" y="403.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="890.6" y="414.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (16 samples, 1.81%)</title><rect x="889.0" y="403.0" width="21.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="892.0" y="414.0">J..</text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (2 samples, 0.23%)</title><rect x="910.4" y="403.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="913.4" y="414.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.23%)</title><rect x="913.1" y="403.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="916.1" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (33 samples, 3.74%)</title><rect x="915.7" y="403.0" width="44.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="918.7" y="414.0">Java..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (3 samples, 0.34%)</title><rect x="931.8" y="387.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.8" y="398.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.11%)</title><rect x="935.8" y="387.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.8" y="398.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.11%)</title><rect x="937.1" y="387.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.1" y="398.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (12 samples, 1.36%)</title><rect x="938.5" y="387.0" width="16.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.5" y="398.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.45%)</title><rect x="954.5" y="387.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="957.5" y="398.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (5 samples, 0.57%)</title><rect x="959.9" y="403.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="962.9" y="414.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (4 samples, 0.45%)</title><rect x="966.6" y="403.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="969.6" y="414.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.45%)</title><rect x="971.9" y="403.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.9" y="414.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (8 samples, 0.91%)</title><rect x="977.3" y="419.0" width="10.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.3" y="430.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (3 samples, 0.34%)</title><rect x="988.0" y="419.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="991.0" y="430.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.23%)</title><rect x="992.0" y="419.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.0" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.0] (1 samples, 0.11%)</title><rect x="994.7" y="435.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="997.7" y="446.0"></text>
</g>
<g>
<title>jni_NewDirectByteBuffer (4 samples, 0.45%)</title><rect x="996.0" y="451.0" width="5.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="999.0" y="462.0"></text>
</g>
<g>
<title>jni_NewObjectV (3 samples, 0.34%)</title><rect x="1001.4" y="451.0" width="4.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1004.4" y="462.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (12 samples, 1.36%)</title><rect x="1005.4" y="467.0" width="16.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1008.4" y="478.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.45%)</title><rect x="1006.7" y="451.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1009.7" y="462.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.11%)</title><rect x="1012.1" y="451.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1015.1" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.34%)</title><rect x="1013.4" y="451.0" width="4.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1016.4" y="462.0"></text>
</g>
<g>
<title>jni_GetEnv (3 samples, 0.34%)</title><rect x="1017.4" y="451.0" width="4.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1020.4" y="462.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::DeleteBuffer(JNIEnv_*, _jobject*) const (9 samples, 1.02%)</title><rect x="1021.4" y="483.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1024.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::DeleteBuffer(JNIEnv_*, _jobject*) const [clone .plt] (1 samples, 0.11%)</title><rect x="1033.5" y="483.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::GetBuffer(JNIEnv_*, rocksdb::Slice const&amp;, bool, rocksdb::ThreadLocalPtr*, _jobject*) const (2 samples, 0.23%)</title><rect x="1034.8" y="483.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::GetBuffer(JNIEnv_*, rocksdb::Slice const&amp;, bool, rocksdb::ThreadLocalPtr*, _jobject*) const [clone .plt] (1 samples, 0.11%)</title><rect x="1037.5" y="483.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1040.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::NewBuffer(JNIEnv_*, rocksdb::Slice const&amp;) const (9 samples, 1.02%)</title><rect x="1038.8" y="483.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::NewBuffer(JNIEnv_*, rocksdb::Slice const&amp;) const [clone .plt] (3 samples, 0.34%)</title><rect x="1050.9" y="483.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.9" y="494.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="1054.9" y="515.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="1056.2" y="515.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1059.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (17 samples, 1.93%)</title><rect x="1057.6" y="515.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.6" y="526.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="1057.6" y="499.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (15 samples, 1.70%)</title><rect x="1058.9" y="499.0" width="20.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.9" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (3 samples, 0.34%)</title><rect x="1058.9" y="483.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.9" y="494.0"></text>
</g>
<g>
<title>jni_CallStaticIntMethodV (3 samples, 0.34%)</title><rect x="1058.9" y="467.0" width="4.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1061.9" y="478.0"></text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (2 samples, 0.23%)</title><rect x="1060.2" y="451.0" width="2.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1063.2" y="462.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="1061.6" y="435.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.6" y="446.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="1061.6" y="419.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.6" y="430.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.11%)</title><rect x="1062.9" y="483.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1065.9" y="494.0"></text>
</g>
<g>
<title>jni_NewDirectByteBuffer (1 samples, 0.11%)</title><rect x="1064.2" y="483.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1067.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::NewBuffer(JNIEnv_*, rocksdb::Slice const&amp;) const (9 samples, 1.02%)</title><rect x="1065.6" y="483.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.6" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::NewObject(_jclass*, _jmethodID*, ...) (9 samples, 1.02%)</title><rect x="1065.6" y="467.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1068.6" y="478.0"></text>
</g>
<g>
<title>jni_NewObjectV (9 samples, 1.02%)</title><rect x="1065.6" y="451.0" width="12.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1068.6" y="462.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="1065.6" y="435.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.6" y="446.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="1066.9" y="435.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.9" y="446.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="1068.3" y="435.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1071.3" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (1 samples, 0.11%)</title><rect x="1069.6" y="435.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.6" y="446.0"></text>
</g>
<g>
<title>alloc_object(_jclass*, Thread*) (4 samples, 0.45%)</title><rect x="1070.9" y="435.0" width="5.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1073.9" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.23%)</title><rect x="1072.3" y="419.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1075.3" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.23%)</title><rect x="1072.3" y="403.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.3" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.23%)</title><rect x="1072.3" y="387.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1075.3" y="398.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.11%)</title><rect x="1072.3" y="371.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1075.3" y="382.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.11%)</title><rect x="1073.6" y="371.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.6" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::check_valid_for_instantiation(bool, Thread*) (1 samples, 0.11%)</title><rect x="1074.9" y="419.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.9" y="430.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (1 samples, 0.11%)</title><rect x="1076.3" y="435.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.11%)</title><rect x="1077.6" y="483.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.6" y="494.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.11%)</title><rect x="1077.6" y="467.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1080.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.11%)</title><rect x="1079.0" y="499.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.0" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="1080.3" y="531.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1083.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (32 samples, 3.63%)</title><rect x="1081.6" y="531.0" width="42.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.6" y="542.0">rock..</text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="1081.6" y="515.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (29 samples, 3.29%)</title><rect x="1083.0" y="515.0" width="38.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.0" y="526.0">roc..</text>
</g>
<g>
<title>JNIEnv_::CallStaticIntMethod(_jclass*, _jmethodID*, ...) (10 samples, 1.13%)</title><rect x="1084.3" y="499.0" width="13.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.3" y="510.0"></text>
</g>
<g>
<title>jni_CallStaticIntMethodV (10 samples, 1.13%)</title><rect x="1084.3" y="483.0" width="13.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1087.3" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.23%)</title><rect x="1084.3" y="467.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.3" y="478.0"></text>
</g>
<g>
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.0] [clone .constprop.0] (8 samples, 0.91%)</title><rect x="1087.0" y="467.0" width="10.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1090.0" y="478.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 0.68%)</title><rect x="1089.7" y="451.0" width="8.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.7" y="462.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097844ul, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="1089.7" y="435.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.7" y="446.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.11%)</title><rect x="1091.0" y="435.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.0" y="446.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.11%)</title><rect x="1092.3" y="435.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.3" y="446.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.23%)</title><rect x="1093.7" y="435.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.7" y="446.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="1096.3" y="435.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.3" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="1097.7" y="499.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1100.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::NewBuffer(JNIEnv_*, rocksdb::Slice const&amp;) const (16 samples, 1.81%)</title><rect x="1099.0" y="499.0" width="21.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.0" y="510.0">r..</text>
</g>
<g>
<title>JNIEnv_::NewObject(_jclass*, _jmethodID*, ...) (15 samples, 1.70%)</title><rect x="1099.0" y="483.0" width="20.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.0" y="494.0"></text>
</g>
<g>
<title>jni_NewObjectV (15 samples, 1.70%)</title><rect x="1099.0" y="467.0" width="20.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1102.0" y="478.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097844ul, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="1101.7" y="451.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1104.7" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (1 samples, 0.11%)</title><rect x="1103.0" y="451.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.0" y="462.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="1104.4" y="451.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.4" y="462.0"></text>
</g>
<g>
<title>alloc_object(_jclass*, Thread*) (4 samples, 0.45%)</title><rect x="1105.7" y="451.0" width="5.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1108.7" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.34%)</title><rect x="1105.7" y="435.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.7" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.34%)</title><rect x="1105.7" y="419.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.7" y="430.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.11%)</title><rect x="1105.7" y="403.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.7" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.23%)</title><rect x="1107.1" y="403.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.1" y="414.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.11%)</title><rect x="1107.1" y="387.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.1" y="398.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.11%)</title><rect x="1108.4" y="387.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.4" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::check_valid_for_instantiation(bool, Thread*) (1 samples, 0.11%)</title><rect x="1109.7" y="435.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.7" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.0] (6 samples, 0.68%)</title><rect x="1111.1" y="451.0" width="8.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1114.1" y="462.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.11%)</title><rect x="1111.1" y="435.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.1" y="446.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.11%)</title><rect x="1112.4" y="435.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.4" y="446.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="1113.7" y="435.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.7" y="446.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.23%)</title><rect x="1115.1" y="435.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.1" y="446.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.11%)</title><rect x="1116.4" y="419.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.4" y="430.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.11%)</title><rect x="1117.8" y="435.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.8" y="446.0"></text>
</g>
<g>
<title>jni_NewObjectV (1 samples, 0.11%)</title><rect x="1119.1" y="483.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1122.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.11%)</title><rect x="1120.4" y="499.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::ComparatorJniCallback::DeleteBuffer(JNIEnv_*, _jobject*) const (1 samples, 0.11%)</title><rect x="1121.8" y="515.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.11%)</title><rect x="1123.1" y="515.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (2 samples, 0.23%)</title><rect x="1124.4" y="547.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.23%)</title><rect x="1127.1" y="547.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (2 samples, 0.23%)</title><rect x="1127.1" y="531.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.11%)</title><rect x="1129.8" y="563.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::AssertHeld() (1 samples, 0.11%)</title><rect x="1131.1" y="627.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.11%)</title><rect x="1132.5" y="643.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.11%)</title><rect x="1133.8" y="659.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="1135.1" y="659.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.1" y="670.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.11%)</title><rect x="1135.1" y="643.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.1" y="654.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.11%)</title><rect x="1136.5" y="659.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.5" y="670.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (1 samples, 0.11%)</title><rect x="1137.8" y="659.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Delete(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="1139.2" y="675.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.11%)</title><rect x="1140.5" y="675.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.11%)</title><rect x="1141.8" y="675.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.68%)</title><rect x="1143.2" y="739.0" width="8.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1146.2" y="750.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.11%)</title><rect x="1143.2" y="723.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1146.2" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (1 samples, 0.11%)</title><rect x="1144.5" y="723.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1147.5" y="734.0"></text>
</g>
<g>
<title>cfree (1 samples, 0.11%)</title><rect x="1145.9" y="723.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1148.9" y="734.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.11%)</title><rect x="1147.2" y="723.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1150.2" y="734.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (2 samples, 0.23%)</title><rect x="1148.5" y="723.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.5" y="734.0"></text>
</g>
<g>
<title>call_stub (5 samples, 0.57%)</title><rect x="1151.2" y="739.0" width="6.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1154.2" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.34%)</title><rect x="1157.9" y="739.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1160.9" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractComparatorJniBridge.compareInternal (5 samples, 0.57%)</title><rect x="1161.9" y="739.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1164.9" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (2 samples, 0.23%)</title><rect x="1165.9" y="723.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1168.9" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator._compare (2 samples, 0.23%)</title><rect x="1165.9" y="707.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1168.9" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/util/ByteUtil.memcmp (2 samples, 0.23%)</title><rect x="1165.9" y="691.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1168.9" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.11%)</title><rect x="1167.3" y="675.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1170.3" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.11%)</title><rect x="1167.3" y="659.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1170.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Converter.toArrayShifted (1 samples, 0.11%)</title><rect x="1168.6" y="771.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1171.6" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.11%)</title><rect x="1168.6" y="755.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1171.6" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1168.6" y="739.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1171.6" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1168.6" y="723.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1171.6" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1168.6" y="707.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1171.6" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.11%)</title><rect x="1168.6" y="691.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1171.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/ServiceImpl.strToByteBuffer (1 samples, 0.11%)</title><rect x="1169.9" y="787.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1172.9" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="1169.9" y="771.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1172.9" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="1169.9" y="755.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1172.9" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1169.9" y="739.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1172.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1169.9" y="723.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1172.9" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1169.9" y="707.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1172.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1169.9" y="691.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1172.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/ServiceImpl.handleDefault (1 samples, 0.11%)</title><rect x="1171.3" y="819.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1174.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.11%)</title><rect x="1171.3" y="803.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1174.3" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.11%)</title><rect x="1171.3" y="787.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1174.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.11%)</title><rect x="1171.3" y="771.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1174.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.11%)</title><rect x="1172.6" y="851.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1175.6" y="862.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.11%)</title><rect x="1172.6" y="835.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1175.6" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.11%)</title><rect x="1172.6" y="819.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1175.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1172.6" y="803.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1175.6" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (9 samples, 1.02%)</title><rect x="1173.9" y="867.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1176.9" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (9 samples, 1.02%)</title><rect x="1173.9" y="851.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1176.9" y="862.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.23%)</title><rect x="1173.9" y="835.0" width="2.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1176.9" y="846.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.23%)</title><rect x="1173.9" y="819.0" width="2.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1176.9" y="830.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.23%)</title><rect x="1173.9" y="803.0" width="2.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1176.9" y="814.0"></text>
</g>
<g>
<title>__recv (7 samples, 0.79%)</title><rect x="1176.6" y="835.0" width="9.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1179.6" y="846.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.68%)</title><rect x="1178.0" y="819.0" width="8.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1181.0" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.68%)</title><rect x="1178.0" y="803.0" width="8.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1181.0" y="814.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (6 samples, 0.68%)</title><rect x="1178.0" y="787.0" width="8.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1181.0" y="798.0"></text>
</g>
<g>
<title>__sys_recvfrom (6 samples, 0.68%)</title><rect x="1178.0" y="771.0" width="8.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1181.0" y="782.0"></text>
</g>
<g>
<title>sock_recvmsg (6 samples, 0.68%)</title><rect x="1178.0" y="755.0" width="8.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1181.0" y="766.0"></text>
</g>
<g>
<title>inet6_recvmsg (4 samples, 0.45%)</title><rect x="1178.0" y="739.0" width="5.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1181.0" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (4 samples, 0.45%)</title><rect x="1178.0" y="723.0" width="5.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1181.0" y="734.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.11%)</title><rect x="1178.0" y="707.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1181.0" y="718.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (2 samples, 0.23%)</title><rect x="1179.3" y="707.0" width="2.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (2 samples, 0.23%)</title><rect x="1179.3" y="691.0" width="2.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.11%)</title><rect x="1180.6" y="675.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1183.6" y="686.0"></text>
</g>
<g>
<title>__check_object_size (1 samples, 0.11%)</title><rect x="1180.6" y="659.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1183.6" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.11%)</title><rect x="1180.6" y="643.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1183.6" y="654.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.11%)</title><rect x="1182.0" y="707.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1185.0" y="718.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.11%)</title><rect x="1182.0" y="691.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1185.0" y="702.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.11%)</title><rect x="1182.0" y="675.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1185.0" y="686.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 0.23%)</title><rect x="1183.3" y="739.0" width="2.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1186.3" y="750.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.11%)</title><rect x="1184.6" y="723.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1187.6" y="734.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.11%)</title><rect x="1184.6" y="707.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1187.6" y="718.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.34%)</title><rect x="1186.0" y="915.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1189.0" y="926.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.34%)</title><rect x="1186.0" y="899.0" width="4.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1189.0" y="910.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.34%)</title><rect x="1186.0" y="883.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.0" y="894.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.34%)</title><rect x="1186.0" y="867.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="878.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.34%)</title><rect x="1186.0" y="851.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="862.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.34%)</title><rect x="1186.0" y="835.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.0" y="846.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.34%)</title><rect x="1186.0" y="819.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.0" y="830.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples, 0.34%)</title><rect x="1186.0" y="803.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="814.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1 samples, 0.11%)</title><rect x="1186.0" y="787.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.11%)</title><rect x="1186.0" y="771.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.11%)</title><rect x="1186.0" y="755.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.11%)</title><rect x="1186.0" y="739.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.11%)</title><rect x="1186.0" y="723.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (2 samples, 0.23%)</title><rect x="1187.3" y="787.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="798.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.0] (1 samples, 0.11%)</title><rect x="1187.3" y="771.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.11%)</title><rect x="1187.3" y="755.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.11%)</title><rect x="1187.3" y="739.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.3" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.11%)</title><rect x="1188.7" y="771.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.11%)</title><rect x="1188.7" y="755.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1188.7" y="739.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1188.7" y="723.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1188.7" y="707.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1188.7" y="691.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.7" y="702.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.11%)</title><rect x="1188.7" y="675.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.7" y="686.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.11%)</title><rect x="1188.7" y="659.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.7" y="670.0"></text>
</g>
</g>
</svg>
