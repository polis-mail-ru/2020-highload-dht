<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix local)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (16,811 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (16,811 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (16,811 samples, 100.00%)</title><rect x="10.0" y="467.0" width="1180.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (16,811 samples, 100.00%)</title><rect x="10.0" y="451.0" width="1180.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (16,811 samples, 100.00%)</title><rect x="10.0" y="435.0" width="1180.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (16,790 samples, 99.88%)</title><rect x="10.0" y="419.0" width="1178.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="430.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (16,790 samples, 99.88%)</title><rect x="10.0" y="403.0" width="1178.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="414.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (16,787 samples, 99.86%)</title><rect x="10.0" y="387.0" width="1178.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="398.0">RequestHandler1_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (6 samples, 0.04%)</title><rect x="10.0" y="371.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (6 samples, 0.04%)</title><rect x="10.0" y="355.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.03%)</title><rect x="10.0" y="339.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5 samples, 0.03%)</title><rect x="10.0" y="323.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.03%)</title><rect x="10.0" y="307.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.get (16,780 samples, 99.82%)</title><rect x="10.5" y="371.0" width="1177.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.5" y="382.0">ru/mail/polis/service/zvladn7/BasicService.get</text>
</g>
<g>
<title>one/nio/http/Response.ok (7 samples, 0.04%)</title><rect x="10.5" y="355.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.03%)</title><rect x="10.6" y="339.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.6" y="350.0"></text>
</g>
<g>
<title>java.lang.String[] (4 samples, 0.02%)</title><rect x="10.6" y="323.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="13.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (16,769 samples, 99.75%)</title><rect x="11.0" y="355.0" width="1177.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.0" y="366.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (84 samples, 0.50%)</title><rect x="11.0" y="339.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (84 samples, 0.50%)</title><rect x="11.0" y="323.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.0" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (84 samples, 0.50%)</title><rect x="11.0" y="307.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.0" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (84 samples, 0.50%)</title><rect x="11.0" y="291.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (84 samples, 0.50%)</title><rect x="11.0" y="275.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.0" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (81 samples, 0.48%)</title><rect x="11.0" y="259.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.0" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (33 samples, 0.20%)</title><rect x="11.0" y="243.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.0" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (33 samples, 0.20%)</title><rect x="11.0" y="227.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.0" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (33 samples, 0.20%)</title><rect x="11.0" y="211.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.0" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (33 samples, 0.20%)</title><rect x="11.0" y="195.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.0" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (33 samples, 0.20%)</title><rect x="11.0" y="179.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.0" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$89/14152727.compare (33 samples, 0.20%)</title><rect x="11.0" y="163.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.0" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (33 samples, 0.20%)</title><rect x="11.0" y="147.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.0" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$87/959901455.compare (33 samples, 0.20%)</title><rect x="11.0" y="131.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (33 samples, 0.20%)</title><rect x="11.0" y="115.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$86/513695478.apply (33 samples, 0.20%)</title><rect x="11.0" y="99.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (33 samples, 0.20%)</title><rect x="11.0" y="83.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.0" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (33 samples, 0.20%)</title><rect x="11.0" y="67.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.0" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (33 samples, 0.20%)</title><rect x="11.0" y="51.0" width="2.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="14.0" y="62.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (48 samples, 0.29%)</title><rect x="13.3" y="243.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.3" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (48 samples, 0.29%)</title><rect x="13.3" y="227.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (48 samples, 0.29%)</title><rect x="13.3" y="211.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (48 samples, 0.29%)</title><rect x="13.3" y="195.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.3" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (48 samples, 0.29%)</title><rect x="13.3" y="179.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.3" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (48 samples, 0.29%)</title><rect x="13.3" y="163.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.3" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (25 samples, 0.15%)</title><rect x="13.3" y="147.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (25 samples, 0.15%)</title><rect x="13.3" y="131.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (25 samples, 0.15%)</title><rect x="13.3" y="115.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (25 samples, 0.15%)</title><rect x="13.3" y="99.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.3" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 0.04%)</title><rect x="13.3" y="83.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.3" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.04%)</title><rect x="13.3" y="67.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="16.3" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (14 samples, 0.08%)</title><rect x="13.9" y="83.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.9" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (11 samples, 0.07%)</title><rect x="13.9" y="67.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.9" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (9 samples, 0.05%)</title><rect x="13.9" y="51.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="16.9" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$89/14152727.compare (23 samples, 0.14%)</title><rect x="15.1" y="147.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.1" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (23 samples, 0.14%)</title><rect x="15.1" y="131.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.1" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$87/959901455.compare (23 samples, 0.14%)</title><rect x="15.1" y="115.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.1" y="126.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (23 samples, 0.14%)</title><rect x="15.1" y="99.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$86/513695478.apply (23 samples, 0.14%)</title><rect x="15.1" y="83.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.1" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (23 samples, 0.14%)</title><rect x="15.1" y="67.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.1" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (23 samples, 0.14%)</title><rect x="15.1" y="51.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.1" y="62.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (23 samples, 0.14%)</title><rect x="15.1" y="35.0" width="1.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="18.1" y="46.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (6 samples, 0.04%)</title><rect x="16.9" y="339.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (6 samples, 0.04%)</title><rect x="16.9" y="323.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$93/1018417577.apply (6 samples, 0.04%)</title><rect x="16.9" y="307.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$iterator$3 (6 samples, 0.04%)</title><rect x="16.9" y="291.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (5 samples, 0.03%)</title><rect x="16.9" y="275.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.9" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.03%)</title><rect x="16.9" y="259.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.9" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5 samples, 0.03%)</title><rect x="16.9" y="243.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="19.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator (16,673 samples, 99.18%)</title><rect x="17.7" y="339.0" width="1170.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.7" y="350.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator (16,672 samples, 99.17%)</title><rect x="17.8" y="323.0" width="1170.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.8" y="334.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (3,362 samples, 20.00%)</title><rect x="17.8" y="307.0" width="236.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.8" y="318.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (3,361 samples, 19.99%)</title><rect x="17.9" y="291.0" width="235.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.9" y="302.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (69 samples, 0.41%)</title><rect x="17.9" y="275.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.9" y="286.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (69 samples, 0.41%)</title><rect x="17.9" y="259.0" width="4.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="20.9" y="270.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (5 samples, 0.03%)</title><rect x="22.7" y="275.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="25.7" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,270 samples, 19.45%)</title><rect x="23.1" y="275.0" width="229.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.1" y="286.0">java/util/PriorityQueue.add</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,270 samples, 19.45%)</title><rect x="23.1" y="259.0" width="229.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.1" y="270.0">java/util/PriorityQueue.offer</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (29 samples, 0.17%)</title><rect x="23.1" y="243.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.1" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (29 samples, 0.17%)</title><rect x="23.1" y="227.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.1" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (29 samples, 0.17%)</title><rect x="23.1" y="211.0" width="2.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="26.1" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,241 samples, 19.28%)</title><rect x="25.2" y="243.0" width="227.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.2" y="254.0">java/util/PriorityQueue.siftUp</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,241 samples, 19.28%)</title><rect x="25.2" y="227.0" width="227.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.2" y="238.0">java/util/PriorityQueue.siftUp..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,241 samples, 19.28%)</title><rect x="25.2" y="211.0" width="227.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.2" y="222.0">com/google/common/collect/Iter..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,241 samples, 19.28%)</title><rect x="25.2" y="195.0" width="227.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.2" y="206.0">com/google/common/collect/Iter..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2,021 samples, 12.02%)</title><rect x="25.2" y="179.0" width="141.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="28.2" y="190.0">com/google/common/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (2,021 samples, 12.02%)</title><rect x="25.2" y="163.0" width="141.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.2" y="174.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (2,021 samples, 12.02%)</title><rect x="25.2" y="147.0" width="141.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.2" y="158.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (2,021 samples, 12.02%)</title><rect x="25.2" y="131.0" width="141.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.2" y="142.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (865 samples, 5.15%)</title><rect x="25.2" y="115.0" width="60.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.2" y="126.0">java/n..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (412 samples, 2.45%)</title><rect x="25.2" y="99.0" width="28.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="28.2" y="110.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (453 samples, 2.69%)</title><rect x="54.1" y="99.0" width="31.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="57.1" y="110.0">ja..</text>
</g>
<g>
<title>byte[] (453 samples, 2.69%)</title><rect x="54.1" y="83.0" width="31.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="57.1" y="94.0">by..</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (74 samples, 0.44%)</title><rect x="85.9" y="115.0" width="5.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="88.9" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (68 samples, 0.40%)</title><rect x="91.1" y="115.0" width="4.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="94.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (826 samples, 4.91%)</title><rect x="95.8" y="115.0" width="58.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.8" y="126.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (602 samples, 3.58%)</title><rect x="95.8" y="99.0" width="42.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.8" y="110.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (308 samples, 1.83%)</title><rect x="95.8" y="83.0" width="21.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="98.8" y="94.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (294 samples, 1.75%)</title><rect x="117.5" y="83.0" width="20.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="120.5" y="94.0"></text>
</g>
<g>
<title>byte[] (294 samples, 1.75%)</title><rect x="117.5" y="67.0" width="20.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="120.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (224 samples, 1.33%)</title><rect x="138.1" y="99.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.1" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (224 samples, 1.33%)</title><rect x="138.1" y="83.0" width="15.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="141.1" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (176 samples, 1.05%)</title><rect x="138.1" y="67.0" width="12.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="141.1" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (48 samples, 0.29%)</title><rect x="150.5" y="67.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.5" y="78.0"></text>
</g>
<g>
<title>byte[] (48 samples, 0.29%)</title><rect x="150.5" y="51.0" width="3.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="153.5" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (188 samples, 1.12%)</title><rect x="153.8" y="115.0" width="13.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (188 samples, 1.12%)</title><rect x="153.8" y="99.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.8" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (133 samples, 0.79%)</title><rect x="153.8" y="83.0" width="9.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="156.8" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (55 samples, 0.33%)</title><rect x="163.2" y="83.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.2" y="94.0"></text>
</g>
<g>
<title>byte[] (55 samples, 0.33%)</title><rect x="163.2" y="67.0" width="3.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="166.2" y="78.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$89/14152727.compare (1,220 samples, 7.26%)</title><rect x="167.0" y="179.0" width="85.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="170.0" y="190.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,220 samples, 7.26%)</title><rect x="167.0" y="163.0" width="85.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="170.0" y="174.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$87/959901455.compare (1,220 samples, 7.26%)</title><rect x="167.0" y="147.0" width="85.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.0" y="158.0">java/util/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,220 samples, 7.26%)</title><rect x="167.0" y="131.0" width="85.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.0" y="142.0">java/util/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$86/513695478.apply (1,220 samples, 7.26%)</title><rect x="167.0" y="115.0" width="85.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.0" y="126.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (1,220 samples, 7.26%)</title><rect x="167.0" y="99.0" width="85.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="170.0" y="110.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,220 samples, 7.26%)</title><rect x="167.0" y="83.0" width="85.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="170.0" y="94.0">java/nio/H..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,220 samples, 7.26%)</title><rect x="167.0" y="67.0" width="85.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="170.0" y="78.0">java.nio.H..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (16 samples, 0.10%)</title><rect x="252.7" y="275.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (16 samples, 0.10%)</title><rect x="252.7" y="259.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.7" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (16 samples, 0.10%)</title><rect x="252.7" y="243.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="255.7" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (13 samples, 0.08%)</title><rect x="252.9" y="227.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.9" y="238.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="253.2" y="211.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.2" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (8 samples, 0.05%)</title><rect x="253.2" y="195.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="256.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (101 samples, 0.60%)</title><rect x="253.8" y="307.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.8" y="318.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (6 samples, 0.04%)</title><rect x="253.8" y="291.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="256.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (95 samples, 0.57%)</title><rect x="254.2" y="291.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.2" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (95 samples, 0.57%)</title><rect x="254.2" y="275.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.2" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (40 samples, 0.24%)</title><rect x="254.2" y="259.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.2" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (40 samples, 0.24%)</title><rect x="254.2" y="243.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="257.2" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (40 samples, 0.24%)</title><rect x="254.2" y="227.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.2" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (40 samples, 0.24%)</title><rect x="254.2" y="211.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="257.2" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (40 samples, 0.24%)</title><rect x="254.2" y="195.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.2" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$89/14152727.compare (40 samples, 0.24%)</title><rect x="254.2" y="179.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.2" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (40 samples, 0.24%)</title><rect x="254.2" y="163.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.2" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$87/959901455.compare (40 samples, 0.24%)</title><rect x="254.2" y="147.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.2" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (40 samples, 0.24%)</title><rect x="254.2" y="131.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="257.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$86/513695478.apply (40 samples, 0.24%)</title><rect x="254.2" y="115.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (40 samples, 0.24%)</title><rect x="254.2" y="99.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.2" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (40 samples, 0.24%)</title><rect x="254.2" y="83.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (40 samples, 0.24%)</title><rect x="254.2" y="67.0" width="2.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="257.2" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (55 samples, 0.33%)</title><rect x="257.0" y="259.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.0" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (55 samples, 0.33%)</title><rect x="257.0" y="243.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="260.0" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (55 samples, 0.33%)</title><rect x="257.0" y="227.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.0" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (55 samples, 0.33%)</title><rect x="257.0" y="211.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.0" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (55 samples, 0.33%)</title><rect x="257.0" y="195.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.0" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (55 samples, 0.33%)</title><rect x="257.0" y="179.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="260.0" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (29 samples, 0.17%)</title><rect x="257.0" y="163.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (29 samples, 0.17%)</title><rect x="257.0" y="147.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (29 samples, 0.17%)</title><rect x="257.0" y="131.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (29 samples, 0.17%)</title><rect x="257.0" y="115.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.0" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (15 samples, 0.09%)</title><rect x="257.0" y="99.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.0" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 0.04%)</title><rect x="257.0" y="83.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="260.0" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.05%)</title><rect x="257.5" y="83.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="260.5" y="94.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.05%)</title><rect x="257.5" y="67.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="260.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (10 samples, 0.06%)</title><rect x="258.2" y="99.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.2" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (6 samples, 0.04%)</title><rect x="258.2" y="83.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.02%)</title><rect x="258.2" y="67.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="261.2" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (4 samples, 0.02%)</title><rect x="258.6" y="83.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.6" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4 samples, 0.02%)</title><rect x="258.6" y="67.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.6" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="258.6" y="51.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.6" y="62.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.02%)</title><rect x="258.6" y="35.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="261.6" y="46.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$89/14152727.compare (26 samples, 0.15%)</title><rect x="259.0" y="163.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.0" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (26 samples, 0.15%)</title><rect x="259.0" y="147.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.0" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$87/959901455.compare (26 samples, 0.15%)</title><rect x="259.0" y="131.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="262.0" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (26 samples, 0.15%)</title><rect x="259.0" y="115.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$86/513695478.apply (26 samples, 0.15%)</title><rect x="259.0" y="99.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (26 samples, 0.15%)</title><rect x="259.0" y="83.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.0" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (26 samples, 0.15%)</title><rect x="259.0" y="67.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.0" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (26 samples, 0.15%)</title><rect x="259.0" y="51.0" width="1.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="262.0" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList (13,209 samples, 78.57%)</title><rect x="260.9" y="307.0" width="927.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.9" y="318.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList</text>
</g>
<g>
<title>java/lang/Iterable.forEach (13,173 samples, 78.36%)</title><rect x="260.9" y="291.0" width="924.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.9" y="302.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$90/1558126979.accept (13,170 samples, 78.34%)</title><rect x="261.1" y="275.0" width="924.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.1" y="286.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$90/1558126979.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$6 (13,170 samples, 78.34%)</title><rect x="261.1" y="259.0" width="924.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.1" y="270.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$6</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.iterator (13,170 samples, 78.34%)</title><rect x="261.1" y="243.0" width="924.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.1" y="254.0">ru/mail/polis/dao/zvladn7/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.SSTable$SSTableIter (67 samples, 0.40%)</title><rect x="261.1" y="227.0" width="4.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="264.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt; (13,103 samples, 77.94%)</title><rect x="265.8" y="227.0" width="919.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.8" y="238.0">ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getElementPosition (13,103 samples, 77.94%)</title><rect x="265.8" y="211.0" width="919.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.8" y="222.0">ru/mail/polis/dao/zvladn7/SSTable.getElementPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (13,103 samples, 77.94%)</title><rect x="265.8" y="195.0" width="919.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.8" y="206.0">ru/mail/polis/dao/zvladn7/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (9,774 samples, 58.14%)</title><rect x="265.8" y="179.0" width="686.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.8" y="190.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,461 samples, 26.54%)</title><rect x="265.8" y="163.0" width="313.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="268.8" y="174.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5,313 samples, 31.60%)</title><rect x="578.9" y="163.0" width="372.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="581.9" y="174.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (5,313 samples, 31.60%)</title><rect x="578.9" y="147.0" width="372.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="581.9" y="158.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (3,329 samples, 19.80%)</title><rect x="951.8" y="179.0" width="233.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="954.8" y="190.0">ru/mail/polis/dao/zvladn7/SSTab..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3,329 samples, 19.80%)</title><rect x="951.8" y="163.0" width="233.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="954.8" y="174.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,251 samples, 13.39%)</title><rect x="951.8" y="147.0" width="158.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="954.8" y="158.0">java.nio.HeapByteBuf..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,078 samples, 6.41%)</title><rect x="1109.8" y="147.0" width="75.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1112.8" y="158.0">java/nio..</text>
</g>
<g>
<title>byte[] (1,078 samples, 6.41%)</title><rect x="1109.8" y="131.0" width="75.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1112.8" y="142.0">byte[]</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (22 samples, 0.13%)</title><rect x="1185.5" y="291.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1188.5" y="302.0"></text>
</g>
<g>
<title>java.lang.Object[] (22 samples, 0.13%)</title><rect x="1185.5" y="275.0" width="1.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1188.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.iterator (14 samples, 0.08%)</title><rect x="1187.1" y="291.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1190.1" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (4 samples, 0.02%)</title><rect x="1187.4" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1190.4" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (4 samples, 0.02%)</title><rect x="1187.4" y="259.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1190.4" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (4 samples, 0.02%)</title><rect x="1187.4" y="243.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1190.4" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (4 samples, 0.02%)</title><rect x="1187.7" y="275.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1190.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (17 samples, 0.10%)</title><rect x="1188.5" y="419.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1191.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.04%)</title><rect x="1188.7" y="403.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1191.7" y="414.0"></text>
</g>
<g>
<title>java.lang.String[] (7 samples, 0.04%)</title><rect x="1188.7" y="387.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1191.7" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.04%)</title><rect x="1189.2" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1192.2" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.04%)</title><rect x="1189.2" y="387.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1192.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.02%)</title><rect x="1189.7" y="419.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1192.7" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.02%)</title><rect x="1189.7" y="403.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1192.7" y="414.0"></text>
</g>
</g>
</svg>
