<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (3,818 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="931.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="915.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="899.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="10.0" y="883.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="10.0" y="867.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="10.0" y="851.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="10.0" y="835.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::soft_ref_policy() (1 samples, 0.03%)</title><rect x="10.0" y="819.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.13%)</title><rect x="10.3" y="931.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.3" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.10%)</title><rect x="10.3" y="915.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.3" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.10%)</title><rect x="10.3" y="899.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.3" y="910.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="10.3" y="883.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.3" y="894.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.03%)</title><rect x="10.3" y="867.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.3" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.08%)</title><rect x="10.6" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.6" y="894.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="10.6" y="867.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.6" y="878.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.03%)</title><rect x="10.9" y="867.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.9" y="878.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.03%)</title><rect x="10.9" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.9" y="862.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="11.2" y="867.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.2" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="11.5" y="915.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="926.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="11.9" y="931.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="14.9" y="942.0"></text>
</g>
<g>
<title>_IO_vsnprintf (1 samples, 0.03%)</title><rect x="11.9" y="915.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="14.9" y="926.0"></text>
</g>
<g>
<title>_IO_vsnprintf (1 samples, 0.03%)</title><rect x="11.9" y="899.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="14.9" y="910.0"></text>
</g>
<g>
<title>__strchrnul_avx2 (1 samples, 0.03%)</title><rect x="11.9" y="883.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="14.9" y="894.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (2 samples, 0.05%)</title><rect x="12.2" y="915.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="15.2" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="12.8" y="931.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="15.8" y="942.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="12.8" y="915.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="15.8" y="926.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="12.8" y="899.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="15.8" y="910.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="12.8" y="883.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="15.8" y="894.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="12.8" y="867.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="15.8" y="878.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="12.8" y="851.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="15.8" y="862.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="12.8" y="835.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="15.8" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.03%)</title><rect x="13.1" y="931.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="16.1" y="942.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="13.1" y="915.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="16.1" y="926.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="13.1" y="899.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="16.1" y="910.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="13.1" y="883.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="16.1" y="894.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="13.1" y="867.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="16.1" y="878.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="13.1" y="851.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="16.1" y="862.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="13.1" y="835.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="16.1" y="846.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (1 samples, 0.03%)</title><rect x="13.1" y="819.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="16.1" y="830.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="13.1" y="803.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="16.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,579 samples, 67.55%)</title><rect x="13.4" y="931.0" width="797.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.4" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,579 samples, 67.55%)</title><rect x="13.4" y="915.0" width="797.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.4" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,579 samples, 67.55%)</title><rect x="13.4" y="899.0" width="797.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.4" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (13 samples, 0.34%)</title><rect x="14.9" y="883.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.21%)</title><rect x="16.5" y="867.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (3 samples, 0.08%)</title><rect x="16.5" y="851.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.13%)</title><rect x="17.4" y="851.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.13%)</title><rect x="17.4" y="835.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.13%)</title><rect x="17.4" y="819.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 0.05%)</title><rect x="17.4" y="803.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.4" y="814.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.08%)</title><rect x="18.0" y="803.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="21.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (403 samples, 10.56%)</title><rect x="19.0" y="883.0" width="124.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.0" y="894.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (397 samples, 10.40%)</title><rect x="20.8" y="867.0" width="122.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.8" y="878.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (299 samples, 7.83%)</title><rect x="20.8" y="851.0" width="92.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.8" y="862.0">java/util/c..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="21.7" y="835.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.03%)</title><rect x="21.7" y="819.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (4 samples, 0.10%)</title><rect x="22.1" y="835.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (14 samples, 0.37%)</title><rect x="23.3" y="835.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.08%)</title><rect x="26.7" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.08%)</title><rect x="26.7" y="803.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.7" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.08%)</title><rect x="26.7" y="787.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.7" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.05%)</title><rect x="26.7" y="771.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="29.7" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.05%)</title><rect x="26.7" y="755.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="29.7" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="27.0" y="739.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="30.0" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="27.0" y="723.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="30.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="27.3" y="771.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="30.3" y="782.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="27.3" y="755.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="30.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (56 samples, 1.47%)</title><rect x="27.6" y="835.0" width="17.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.05%)</title><rect x="27.6" y="819.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (54 samples, 1.41%)</title><rect x="28.2" y="819.0" width="16.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (54 samples, 1.41%)</title><rect x="28.2" y="803.0" width="16.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (49 samples, 1.28%)</title><rect x="29.2" y="787.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.2" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (49 samples, 1.28%)</title><rect x="29.2" y="771.0" width="15.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.2" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 0.24%)</title><rect x="29.2" y="755.0" width="2.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="32.2" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="29.8" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="32.8" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="30.1" y="739.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="33.1" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="30.4" y="739.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="33.4" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.03%)</title><rect x="30.7" y="739.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="33.7" y="750.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="31.0" y="739.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="34.0" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="31.3" y="739.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="34.3" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="31.6" y="739.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="34.6" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 1.02%)</title><rect x="31.9" y="755.0" width="12.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="34.9" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (29 samples, 0.76%)</title><rect x="35.0" y="739.0" width="9.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="38.0" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="35.0" y="723.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="38.0" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (28 samples, 0.73%)</title><rect x="35.3" y="723.0" width="8.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="38.3" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (25 samples, 0.65%)</title><rect x="36.3" y="707.0" width="7.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="39.3" y="718.0"></text>
</g>
<g>
<title>do_futex (24 samples, 0.63%)</title><rect x="36.6" y="691.0" width="7.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="39.6" y="702.0"></text>
</g>
<g>
<title>futex_wake (24 samples, 0.63%)</title><rect x="36.6" y="675.0" width="7.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="39.6" y="686.0"></text>
</g>
<g>
<title>mark_wake_futex (2 samples, 0.05%)</title><rect x="37.2" y="659.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="40.2" y="670.0"></text>
</g>
<g>
<title>__unqueue_futex (1 samples, 0.03%)</title><rect x="37.5" y="643.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="40.5" y="654.0"></text>
</g>
<g>
<title>wake_up_q (20 samples, 0.52%)</title><rect x="37.8" y="659.0" width="6.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="40.8" y="670.0"></text>
</g>
<g>
<title>try_to_wake_up (20 samples, 0.52%)</title><rect x="37.8" y="643.0" width="6.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="40.8" y="654.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (19 samples, 0.50%)</title><rect x="38.1" y="627.0" width="5.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="41.1" y="638.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="44.0" y="755.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="47.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.05%)</title><rect x="44.3" y="787.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.03%)</title><rect x="44.9" y="835.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (220 samples, 5.76%)</title><rect x="45.2" y="835.0" width="68.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.2" y="846.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (219 samples, 5.74%)</title><rect x="45.5" y="819.0" width="67.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.5" y="830.0">jdk/int..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.08%)</title><rect x="46.2" y="803.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="49.2" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.10%)</title><rect x="47.1" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="50.1" y="814.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.03%)</title><rect x="48.3" y="803.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="51.3" y="814.0"></text>
</g>
<g>
<title>Unsafe_Park (98 samples, 2.57%)</title><rect x="48.6" y="803.0" width="30.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="51.6" y="814.0">Un..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.05%)</title><rect x="51.4" y="787.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="54.4" y="798.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="52.0" y="787.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="55.0" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 0.37%)</title><rect x="52.3" y="787.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="55.3" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.18%)</title><rect x="53.6" y="771.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="56.6" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.03%)</title><rect x="55.4" y="755.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="58.4" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.05%)</title><rect x="55.7" y="771.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="58.7" y="782.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.03%)</title><rect x="56.4" y="771.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="59.4" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (56 samples, 1.47%)</title><rect x="56.7" y="787.0" width="17.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="59.7" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (30 samples, 0.79%)</title><rect x="64.7" y="771.0" width="9.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="67.7" y="782.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="64.7" y="755.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="67.7" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (29 samples, 0.76%)</title><rect x="65.0" y="755.0" width="9.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="68.0" y="766.0"></text>
</g>
<g>
<title>__x64_sys_futex (16 samples, 0.42%)</title><rect x="69.0" y="739.0" width="5.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="72.0" y="750.0"></text>
</g>
<g>
<title>do_futex (14 samples, 0.37%)</title><rect x="69.0" y="723.0" width="4.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="72.0" y="734.0"></text>
</g>
<g>
<title>futex_wake (8 samples, 0.21%)</title><rect x="70.3" y="707.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="73.3" y="718.0"></text>
</g>
<g>
<title>get_futex_key (5 samples, 0.13%)</title><rect x="71.2" y="691.0" width="1.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="74.2" y="702.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.14 (2 samples, 0.05%)</title><rect x="72.1" y="675.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="75.1" y="686.0"></text>
</g>
<g>
<title>hash_futex (2 samples, 0.05%)</title><rect x="72.7" y="707.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="75.7" y="718.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.05%)</title><rect x="73.4" y="723.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="76.4" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.05%)</title><rect x="74.0" y="787.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="77.0" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="74.6" y="787.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="77.6" y="798.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.05%)</title><rect x="74.9" y="787.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="77.9" y="798.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="75.5" y="787.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="78.5" y="798.0"></text>
</g>
<g>
<title>pthread_mutex_trylock@plt (1 samples, 0.03%)</title><rect x="75.8" y="787.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="78.8" y="798.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (9 samples, 0.24%)</title><rect x="76.1" y="787.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="79.1" y="798.0"></text>
</g>
<g>
<title>[unknown] (110 samples, 2.88%)</title><rect x="78.9" y="803.0" width="34.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="81.9" y="814.0">[u..</text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="78.9" y="787.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="81.9" y="798.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.03%)</title><rect x="79.2" y="787.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="82.2" y="798.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (9 samples, 0.24%)</title><rect x="79.5" y="787.0" width="2.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="82.5" y="798.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.05%)</title><rect x="82.3" y="787.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="85.3" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (6 samples, 0.16%)</title><rect x="82.9" y="787.0" width="1.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="85.9" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="84.8" y="787.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="87.8" y="798.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (90 samples, 2.36%)</title><rect x="85.1" y="787.0" width="27.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="88.1" y="798.0">p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (28 samples, 0.73%)</title><rect x="104.3" y="771.0" width="8.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="107.3" y="782.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="104.3" y="755.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="107.3" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (27 samples, 0.71%)</title><rect x="104.6" y="755.0" width="8.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="107.6" y="766.0"></text>
</g>
<g>
<title>__x64_sys_futex (18 samples, 0.47%)</title><rect x="107.4" y="739.0" width="5.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="110.4" y="750.0"></text>
</g>
<g>
<title>do_futex (18 samples, 0.47%)</title><rect x="107.4" y="723.0" width="5.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="110.4" y="734.0"></text>
</g>
<g>
<title>futex_wait (18 samples, 0.47%)</title><rect x="107.4" y="707.0" width="5.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="110.4" y="718.0"></text>
</g>
<g>
<title>futex_wait_queue_me (7 samples, 0.18%)</title><rect x="108.0" y="691.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="111.0" y="702.0"></text>
</g>
<g>
<title>plist_add (2 samples, 0.05%)</title><rect x="108.3" y="675.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="111.3" y="686.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.10%)</title><rect x="108.9" y="675.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="111.9" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.10%)</title><rect x="108.9" y="659.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="111.9" y="670.0"></text>
</g>
<g>
<title>futex_wait_setup (8 samples, 0.21%)</title><rect x="110.1" y="691.0" width="2.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="113.1" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="110.4" y="675.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="113.4" y="686.0"></text>
</g>
<g>
<title>get_futex_key (3 samples, 0.08%)</title><rect x="110.8" y="675.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="113.8" y="686.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.14 (1 samples, 0.03%)</title><rect x="111.4" y="659.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="114.4" y="670.0"></text>
</g>
<g>
<title>get_futex_value_locked (2 samples, 0.05%)</title><rect x="111.7" y="675.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="114.7" y="686.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.03%)</title><rect x="112.3" y="675.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="115.3" y="686.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.03%)</title><rect x="112.6" y="691.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="115.6" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="112.9" y="803.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="115.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (16 samples, 0.42%)</title><rect x="113.2" y="851.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (16 samples, 0.42%)</title><rect x="113.2" y="835.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (16 samples, 0.42%)</title><rect x="113.2" y="819.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="113.5" y="803.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="116.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (13 samples, 0.34%)</title><rect x="113.8" y="803.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="116.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 0.34%)</title><rect x="113.8" y="787.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="116.8" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (13 samples, 0.34%)</title><rect x="113.8" y="771.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.8" y="782.0"></text>
</g>
<g>
<title>Unsafe_Park (3 samples, 0.08%)</title><rect x="113.8" y="755.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="116.8" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="113.8" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="116.8" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="114.2" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="117.2" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="114.5" y="739.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="117.5" y="750.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.26%)</title><rect x="114.8" y="755.0" width="3.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="117.8" y="766.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.03%)</title><rect x="114.8" y="739.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="117.8" y="750.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (9 samples, 0.24%)</title><rect x="115.1" y="739.0" width="2.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="118.1" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.10%)</title><rect x="116.6" y="723.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="119.6" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.10%)</title><rect x="116.6" y="707.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="119.6" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.08%)</title><rect x="116.9" y="691.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="119.9" y="702.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.08%)</title><rect x="116.9" y="675.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="119.9" y="686.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.08%)</title><rect x="116.9" y="659.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="119.9" y="670.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="116.9" y="643.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="119.9" y="654.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="116.9" y="627.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="119.9" y="638.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="116.9" y="611.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="119.9" y="622.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.05%)</title><rect x="117.2" y="643.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="120.2" y="654.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.14 (1 samples, 0.03%)</title><rect x="117.6" y="627.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="120.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.03%)</title><rect x="117.9" y="803.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="120.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (82 samples, 2.15%)</title><rect x="118.2" y="851.0" width="25.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="121.2" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (82 samples, 2.15%)</title><rect x="118.2" y="835.0" width="25.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.2" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 2.15%)</title><rect x="118.2" y="819.0" width="25.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="121.2" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (70 samples, 1.83%)</title><rect x="121.9" y="803.0" width="21.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="124.9" y="814.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (70 samples, 1.83%)</title><rect x="121.9" y="787.0" width="21.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.9" y="798.0">j..</text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.05%)</title><rect x="121.9" y="771.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="124.9" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (16 samples, 0.42%)</title><rect x="122.5" y="771.0" width="4.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="125.5" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="123.4" y="755.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="126.4" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="123.7" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="126.7" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.16%)</title><rect x="124.0" y="755.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="127.0" y="766.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.05%)</title><rect x="125.3" y="739.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="128.3" y="750.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.05%)</title><rect x="125.9" y="755.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="128.9" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.05%)</title><rect x="126.5" y="755.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="129.5" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.03%)</title><rect x="127.1" y="755.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="130.1" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (52 samples, 1.36%)</title><rect x="127.4" y="771.0" width="16.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="130.4" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (39 samples, 1.02%)</title><rect x="131.5" y="755.0" width="12.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="134.5" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (39 samples, 1.02%)</title><rect x="131.5" y="739.0" width="12.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="134.5" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (35 samples, 0.92%)</title><rect x="132.7" y="723.0" width="10.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="135.7" y="734.0"></text>
</g>
<g>
<title>do_futex (35 samples, 0.92%)</title><rect x="132.7" y="707.0" width="10.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="135.7" y="718.0"></text>
</g>
<g>
<title>futex_wake (35 samples, 0.92%)</title><rect x="132.7" y="691.0" width="10.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="135.7" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="132.7" y="675.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="135.7" y="686.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.03%)</title><rect x="133.0" y="675.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="136.0" y="686.0"></text>
</g>
<g>
<title>wake_up_q (33 samples, 0.86%)</title><rect x="133.3" y="675.0" width="10.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="136.3" y="686.0"></text>
</g>
<g>
<title>try_to_wake_up (33 samples, 0.86%)</title><rect x="133.3" y="659.0" width="10.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="136.3" y="670.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (32 samples, 0.84%)</title><rect x="133.6" y="643.0" width="9.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="136.6" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$112/1483067148.run (638 samples, 16.71%)</title><rect x="143.5" y="883.0" width="197.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.5" y="894.0">ru/mail/polis/dao/zvladn7/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$flush$9 (638 samples, 16.71%)</title><rect x="143.5" y="867.0" width="197.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="146.5" y="878.0">ru/mail/polis/dao/zvladn7/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.serialize (638 samples, 16.71%)</title><rect x="143.5" y="851.0" width="197.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="146.5" y="862.0">ru/mail/polis/dao/zvladn7/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.serialize (638 samples, 16.71%)</title><rect x="143.5" y="835.0" width="197.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="146.5" y="846.0">ru/mail/polis/dao/zvladn7/..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.03%)</title><rect x="145.7" y="819.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="148.7" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.03%)</title><rect x="145.7" y="803.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.7" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.03%)</title><rect x="145.7" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.7" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.03%)</title><rect x="145.7" y="771.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="148.7" y="782.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (11 samples, 0.29%)</title><rect x="146.0" y="819.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="149.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (11 samples, 0.29%)</title><rect x="146.0" y="803.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="149.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (11 samples, 0.29%)</title><rect x="146.0" y="787.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.clear (1 samples, 0.03%)</title><rect x="146.0" y="771.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (10 samples, 0.26%)</title><rect x="146.3" y="771.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="149.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$116/962164773.getAsBoolean (10 samples, 0.26%)</title><rect x="146.3" y="755.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (10 samples, 0.26%)</title><rect x="146.3" y="739.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (10 samples, 0.26%)</title><rect x="146.3" y="723.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="149.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (10 samples, 0.26%)</title><rect x="146.3" y="707.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable$$Lambda$113/337678801.apply (10 samples, 0.26%)</title><rect x="146.3" y="691.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="149.3" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.lambda$iterator$0 (10 samples, 0.26%)</title><rect x="146.3" y="675.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="149.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (1 samples, 0.03%)</title><rect x="149.4" y="819.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.4" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="149.4" y="803.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.4" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="149.4" y="787.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="152.4" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="149.4" y="771.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="152.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="149.4" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="152.4" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="149.4" y="739.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="152.4" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="149.4" y="723.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="152.4" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (618 samples, 16.19%)</title><rect x="149.7" y="819.0" width="191.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="152.7" y="830.0">sun/nio/ch/FileChannelImp..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (8 samples, 0.21%)</title><rect x="150.0" y="803.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.0" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (8 samples, 0.21%)</title><rect x="150.0" y="787.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (8 samples, 0.21%)</title><rect x="150.0" y="771.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.0" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (601 samples, 15.74%)</title><rect x="152.5" y="803.0" width="185.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.5" y="814.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (11 samples, 0.29%)</title><rect x="152.5" y="787.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="155.5" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.18%)</title><rect x="152.5" y="771.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.5" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.18%)</title><rect x="152.5" y="755.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.5" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="154.0" y="739.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="157.0" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="154.3" y="739.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="157.3" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.10%)</title><rect x="154.6" y="771.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="157.6" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (4 samples, 0.10%)</title><rect x="154.6" y="755.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="157.6" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (565 samples, 14.80%)</title><rect x="155.9" y="787.0" width="174.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.9" y="798.0">sun/nio/ch/IOUtil.writ..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (565 samples, 14.80%)</title><rect x="155.9" y="771.0" width="174.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.9" y="782.0">sun/nio/ch/FileDispatc..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (565 samples, 14.80%)</title><rect x="155.9" y="755.0" width="174.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="158.9" y="766.0">sun/nio/ch/FileDispatc..</text>
</g>
<g>
<title>[unknown] (553 samples, 14.48%)</title><rect x="158.0" y="739.0" width="171.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="161.0" y="750.0">[unknown]</text>
</g>
<g>
<title>__libc_write (547 samples, 14.33%)</title><rect x="158.0" y="723.0" width="169.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="161.0" y="734.0">__libc_write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (445 samples, 11.66%)</title><rect x="189.6" y="707.0" width="137.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="192.6" y="718.0">entry_SYSCALL_64_..</text>
</g>
<g>
<title>__x64_sys_write (3 samples, 0.08%)</title><rect x="189.6" y="691.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="192.6" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (442 samples, 11.58%)</title><rect x="190.5" y="691.0" width="136.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="193.5" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (400 samples, 10.48%)</title><rect x="203.5" y="675.0" width="123.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="206.5" y="686.0">__x64_sys_write</text>
</g>
<g>
<title>ksys_write (400 samples, 10.48%)</title><rect x="203.5" y="659.0" width="123.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="206.5" y="670.0">ksys_write</text>
</g>
<g>
<title>__f_unlock_pos (2 samples, 0.05%)</title><rect x="204.4" y="643.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="207.4" y="654.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.05%)</title><rect x="204.4" y="627.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="207.4" y="638.0"></text>
</g>
<g>
<title>__fdget_pos (16 samples, 0.42%)</title><rect x="205.0" y="643.0" width="5.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="208.0" y="654.0"></text>
</g>
<g>
<title>__fget_light (12 samples, 0.31%)</title><rect x="205.6" y="627.0" width="3.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="208.6" y="638.0"></text>
</g>
<g>
<title>__fget (12 samples, 0.31%)</title><rect x="205.6" y="611.0" width="3.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="208.6" y="622.0"></text>
</g>
<g>
<title>mutex_lock (2 samples, 0.05%)</title><rect x="209.3" y="627.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="212.3" y="638.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.05%)</title><rect x="210.0" y="643.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="213.0" y="654.0"></text>
</g>
<g>
<title>__sb_start_write (1 samples, 0.03%)</title><rect x="210.6" y="643.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="213.6" y="654.0"></text>
</g>
<g>
<title>__vfs_write (2 samples, 0.05%)</title><rect x="210.9" y="643.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="213.9" y="654.0"></text>
</g>
<g>
<title>fput (2 samples, 0.05%)</title><rect x="211.5" y="643.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="214.5" y="654.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.05%)</title><rect x="211.5" y="627.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="214.5" y="638.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="212.1" y="643.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="215.1" y="654.0"></text>
</g>
<g>
<title>vfs_write (371 samples, 9.72%)</title><rect x="212.4" y="643.0" width="114.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="215.4" y="654.0">vfs_write</text>
</g>
<g>
<title>__fsnotify_parent (4 samples, 0.10%)</title><rect x="213.7" y="627.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="216.7" y="638.0"></text>
</g>
<g>
<title>__sb_end_write (1 samples, 0.03%)</title><rect x="214.9" y="627.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="217.9" y="638.0"></text>
</g>
<g>
<title>__sb_start_write (4 samples, 0.10%)</title><rect x="215.2" y="627.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="218.2" y="638.0"></text>
</g>
<g>
<title>__vfs_write (343 samples, 8.98%)</title><rect x="216.5" y="627.0" width="106.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="219.5" y="638.0">__vfs_write</text>
</g>
<g>
<title>ext4_file_write_iter (1 samples, 0.03%)</title><rect x="216.5" y="611.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="219.5" y="622.0"></text>
</g>
<g>
<title>new_sync_write (342 samples, 8.96%)</title><rect x="216.8" y="611.0" width="105.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="219.8" y="622.0">new_sync_write</text>
</g>
<g>
<title>down_write_trylock (2 samples, 0.05%)</title><rect x="218.0" y="595.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="221.0" y="606.0"></text>
</g>
<g>
<title>ext4_file_write_iter (335 samples, 8.77%)</title><rect x="218.6" y="595.0" width="103.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="221.6" y="606.0">ext4_file_wr..</text>
</g>
<g>
<title>__generic_file_write_iter (324 samples, 8.49%)</title><rect x="220.5" y="579.0" width="100.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="223.5" y="590.0">__generic_fi..</text>
</g>
<g>
<title>ext4_da_write_begin (5 samples, 0.13%)</title><rect x="220.8" y="563.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="223.8" y="574.0"></text>
</g>
<g>
<title>ext4_da_write_end (3 samples, 0.08%)</title><rect x="222.3" y="563.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="225.3" y="574.0"></text>
</g>
<g>
<title>file_remove_privs (1 samples, 0.03%)</title><rect x="223.3" y="563.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="226.3" y="574.0"></text>
</g>
<g>
<title>file_update_time (10 samples, 0.26%)</title><rect x="223.6" y="563.0" width="3.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="226.6" y="574.0"></text>
</g>
<g>
<title>current_time (4 samples, 0.10%)</title><rect x="225.4" y="547.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="228.4" y="558.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (3 samples, 0.08%)</title><rect x="225.4" y="531.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="228.4" y="542.0"></text>
</g>
<g>
<title>timespec64_trunc (1 samples, 0.03%)</title><rect x="226.3" y="531.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="229.3" y="542.0"></text>
</g>
<g>
<title>generic_perform_write (304 samples, 7.96%)</title><rect x="226.7" y="563.0" width="93.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="229.7" y="574.0">generic_per..</text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.03%)</title><rect x="227.9" y="547.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="230.9" y="558.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="228.2" y="547.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="231.2" y="558.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="228.2" y="531.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="231.2" y="542.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (3 samples, 0.08%)</title><rect x="228.5" y="547.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="231.5" y="558.0"></text>
</g>
<g>
<title>ext4_da_write_begin (73 samples, 1.91%)</title><rect x="229.4" y="547.0" width="22.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="232.4" y="558.0">e..</text>
</g>
<g>
<title>__ext4_journal_start_sb (28 samples, 0.73%)</title><rect x="232.8" y="531.0" width="8.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="235.8" y="542.0"></text>
</g>
<g>
<title>ext4_journal_check_start (2 samples, 0.05%)</title><rect x="232.8" y="515.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="235.8" y="526.0"></text>
</g>
<g>
<title>jbd2__journal_start (26 samples, 0.68%)</title><rect x="233.5" y="515.0" width="8.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="236.5" y="526.0"></text>
</g>
<g>
<title>kmem_cache_alloc (3 samples, 0.08%)</title><rect x="235.3" y="499.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="238.3" y="510.0"></text>
</g>
<g>
<title>memset_erms (7 samples, 0.18%)</title><rect x="236.2" y="499.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="239.2" y="510.0"></text>
</g>
<g>
<title>start_this_handle (10 samples, 0.26%)</title><rect x="238.4" y="499.0" width="3.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="241.4" y="510.0"></text>
</g>
<g>
<title>add_transaction_credits (3 samples, 0.08%)</title><rect x="240.6" y="483.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="243.6" y="494.0"></text>
</g>
<g>
<title>ext4_block_write_begin (2 samples, 0.05%)</title><rect x="241.5" y="531.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="244.5" y="542.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.03%)</title><rect x="242.1" y="531.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="245.1" y="542.0"></text>
</g>
<g>
<title>ext4_nonda_switch (2 samples, 0.05%)</title><rect x="242.4" y="531.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="245.4" y="542.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (26 samples, 0.68%)</title><rect x="243.0" y="531.0" width="8.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="246.0" y="542.0"></text>
</g>
<g>
<title>pagecache_get_page (23 samples, 0.60%)</title><rect x="243.0" y="515.0" width="7.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="246.0" y="526.0"></text>
</g>
<g>
<title>find_get_entry (18 samples, 0.47%)</title><rect x="244.6" y="499.0" width="5.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="247.6" y="510.0"></text>
</g>
<g>
<title>xas_load (10 samples, 0.26%)</title><rect x="247.1" y="483.0" width="3.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="250.1" y="494.0"></text>
</g>
<g>
<title>wait_for_stable_page (3 samples, 0.08%)</title><rect x="250.1" y="515.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="253.1" y="526.0"></text>
</g>
<g>
<title>unlock_page (3 samples, 0.08%)</title><rect x="251.1" y="531.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="254.1" y="542.0"></text>
</g>
<g>
<title>ext4_da_write_end (194 samples, 5.08%)</title><rect x="252.0" y="547.0" width="60.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="255.0" y="558.0">ext4_d..</text>
</g>
<g>
<title>__ext4_journal_stop (34 samples, 0.89%)</title><rect x="252.9" y="531.0" width="10.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="255.9" y="542.0"></text>
</g>
<g>
<title>__wake_up (1 samples, 0.03%)</title><rect x="252.9" y="515.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="255.9" y="526.0"></text>
</g>
<g>
<title>jbd2_journal_stop (33 samples, 0.86%)</title><rect x="253.2" y="515.0" width="10.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="256.2" y="526.0"></text>
</g>
<g>
<title>__wake_up (14 samples, 0.37%)</title><rect x="256.0" y="499.0" width="4.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="259.0" y="510.0"></text>
</g>
<g>
<title>__wake_up_common_lock (14 samples, 0.37%)</title><rect x="256.0" y="483.0" width="4.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="259.0" y="494.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (10 samples, 0.26%)</title><rect x="257.2" y="467.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="260.2" y="478.0"></text>
</g>
<g>
<title>kmem_cache_free (10 samples, 0.26%)</title><rect x="260.3" y="499.0" width="3.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="263.3" y="510.0"></text>
</g>
<g>
<title>generic_write_end (157 samples, 4.11%)</title><rect x="263.4" y="531.0" width="48.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="266.4" y="542.0">gene..</text>
</g>
<g>
<title>__mark_inode_dirty (144 samples, 3.77%)</title><rect x="263.7" y="515.0" width="44.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="266.7" y="526.0">__ma..</text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.03%)</title><rect x="264.0" y="499.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="267.0" y="510.0"></text>
</g>
<g>
<title>__ext4_journal_stop (1 samples, 0.03%)</title><rect x="264.4" y="499.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="267.4" y="510.0"></text>
</g>
<g>
<title>ext4_dirty_inode (141 samples, 3.69%)</title><rect x="264.7" y="499.0" width="43.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="267.7" y="510.0">ext4..</text>
</g>
<g>
<title>__ext4_journal_start_sb (7 samples, 0.18%)</title><rect x="265.3" y="483.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="268.3" y="494.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.03%)</title><rect x="266.5" y="467.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="269.5" y="478.0"></text>
</g>
<g>
<title>jbd2__journal_start (2 samples, 0.05%)</title><rect x="266.8" y="467.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="269.8" y="478.0"></text>
</g>
<g>
<title>__ext4_journal_stop (2 samples, 0.05%)</title><rect x="267.4" y="483.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="270.4" y="494.0"></text>
</g>
<g>
<title>jbd2_journal_stop (1 samples, 0.03%)</title><rect x="267.8" y="467.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="270.8" y="478.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (130 samples, 3.40%)</title><rect x="268.1" y="483.0" width="40.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="271.1" y="494.0">ext..</text>
</g>
<g>
<title>__brelse (1 samples, 0.03%)</title><rect x="268.4" y="467.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="271.4" y="478.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="268.7" y="467.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="271.7" y="478.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (97 samples, 2.54%)</title><rect x="269.0" y="467.0" width="30.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="272.0" y="478.0">ex..</text>
</g>
<g>
<title>__brelse (4 samples, 0.10%)</title><rect x="275.5" y="451.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="278.5" y="462.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (2 samples, 0.05%)</title><rect x="276.7" y="451.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="279.7" y="462.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.03%)</title><rect x="277.0" y="435.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="280.0" y="446.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.05%)</title><rect x="277.3" y="451.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="280.3" y="462.0"></text>
</g>
<g>
<title>_raw_spin_lock (3 samples, 0.08%)</title><rect x="278.0" y="451.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="281.0" y="462.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.63 (1 samples, 0.03%)</title><rect x="278.9" y="451.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="281.9" y="462.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (58 samples, 1.52%)</title><rect x="279.2" y="451.0" width="17.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="282.2" y="462.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.63 (56 samples, 1.47%)</title><rect x="279.8" y="435.0" width="17.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="282.8" y="446.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (25 samples, 0.65%)</title><rect x="283.2" y="419.0" width="7.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="286.2" y="430.0"></text>
</g>
<g>
<title>crypto_shash_update (20 samples, 0.52%)</title><rect x="290.9" y="419.0" width="6.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="293.9" y="430.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (18 samples, 0.47%)</title><rect x="291.6" y="403.0" width="5.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="294.6" y="414.0"></text>
</g>
<g>
<title>from_kgid (1 samples, 0.03%)</title><rect x="297.1" y="451.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="300.1" y="462.0"></text>
</g>
<g>
<title>from_kprojid (4 samples, 0.10%)</title><rect x="297.4" y="451.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="300.4" y="462.0"></text>
</g>
<g>
<title>map_id_up (4 samples, 0.10%)</title><rect x="297.4" y="435.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="300.4" y="446.0"></text>
</g>
<g>
<title>from_kuid (1 samples, 0.03%)</title><rect x="298.7" y="451.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="301.7" y="462.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.03%)</title><rect x="298.7" y="435.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="301.7" y="446.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (29 samples, 0.76%)</title><rect x="299.0" y="467.0" width="8.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="302.0" y="478.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (21 samples, 0.55%)</title><rect x="299.6" y="451.0" width="6.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="302.6" y="462.0"></text>
</g>
<g>
<title>__getblk_gfp (8 samples, 0.21%)</title><rect x="302.7" y="435.0" width="2.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="305.7" y="446.0"></text>
</g>
<g>
<title>__find_get_block (6 samples, 0.16%)</title><rect x="302.7" y="419.0" width="1.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="305.7" y="430.0"></text>
</g>
<g>
<title>mark_page_accessed (2 samples, 0.05%)</title><rect x="303.9" y="403.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="306.9" y="414.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.05%)</title><rect x="304.5" y="419.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="307.5" y="430.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.05%)</title><rect x="304.5" y="403.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="307.5" y="414.0"></text>
</g>
<g>
<title>ext4_get_group_desc (3 samples, 0.08%)</title><rect x="305.2" y="435.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="308.2" y="446.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (4 samples, 0.10%)</title><rect x="306.1" y="451.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="309.1" y="462.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (2 samples, 0.05%)</title><rect x="306.4" y="435.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="309.4" y="446.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (2 samples, 0.05%)</title><rect x="306.4" y="419.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="309.4" y="430.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (1 samples, 0.03%)</title><rect x="307.0" y="435.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="310.0" y="446.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.03%)</title><rect x="307.3" y="451.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="310.3" y="462.0"></text>
</g>
<g>
<title>ext4_inode_table (1 samples, 0.03%)</title><rect x="307.6" y="451.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="310.6" y="462.0"></text>
</g>
<g>
<title>from_kprojid (1 samples, 0.03%)</title><rect x="307.9" y="467.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="310.9" y="478.0"></text>
</g>
<g>
<title>block_write_end (10 samples, 0.26%)</title><rect x="308.2" y="515.0" width="3.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="311.2" y="526.0"></text>
</g>
<g>
<title>__block_commit_write.isra.41 (9 samples, 0.24%)</title><rect x="308.2" y="499.0" width="2.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="311.2" y="510.0"></text>
</g>
<g>
<title>mark_buffer_dirty (2 samples, 0.05%)</title><rect x="310.4" y="483.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="313.4" y="494.0"></text>
</g>
<g>
<title>mark_buffer_dirty (1 samples, 0.03%)</title><rect x="311.0" y="499.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="314.0" y="510.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.03%)</title><rect x="311.3" y="515.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="314.3" y="526.0"></text>
</g>
<g>
<title>unlock_page (1 samples, 0.03%)</title><rect x="311.6" y="515.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="314.6" y="526.0"></text>
</g>
<g>
<title>iov_iter_advance (6 samples, 0.16%)</title><rect x="312.0" y="547.0" width="1.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="315.0" y="558.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (11 samples, 0.29%)</title><rect x="313.8" y="547.0" width="3.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="316.8" y="558.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.03%)</title><rect x="315.4" y="531.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="318.4" y="542.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (5 samples, 0.13%)</title><rect x="315.7" y="531.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="318.7" y="542.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (10 samples, 0.26%)</title><rect x="317.2" y="547.0" width="3.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="320.2" y="558.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.03%)</title><rect x="320.3" y="547.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="323.3" y="558.0"></text>
</g>
<g>
<title>ext4_write_checks (4 samples, 0.10%)</title><rect x="320.6" y="579.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="323.6" y="590.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.54 (1 samples, 0.03%)</title><rect x="320.6" y="563.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="323.6" y="574.0"></text>
</g>
<g>
<title>generic_write_checks (3 samples, 0.08%)</title><rect x="320.9" y="563.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="323.9" y="574.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.54 (2 samples, 0.05%)</title><rect x="321.2" y="547.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="324.2" y="558.0"></text>
</g>
<g>
<title>up_write (1 samples, 0.03%)</title><rect x="321.8" y="579.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="324.8" y="590.0"></text>
</g>
<g>
<title>up_write (1 samples, 0.03%)</title><rect x="322.2" y="595.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="325.2" y="606.0"></text>
</g>
<g>
<title>fsnotify (2 samples, 0.05%)</title><rect x="322.5" y="627.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="325.5" y="638.0"></text>
</g>
<g>
<title>rw_verify_area (13 samples, 0.34%)</title><rect x="323.1" y="627.0" width="4.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="326.1" y="638.0"></text>
</g>
<g>
<title>apparmor_file_permission (3 samples, 0.08%)</title><rect x="323.1" y="611.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="326.1" y="622.0"></text>
</g>
<g>
<title>security_file_permission (8 samples, 0.21%)</title><rect x="324.0" y="611.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="327.0" y="622.0"></text>
</g>
<g>
<title>apparmor_file_permission (2 samples, 0.05%)</title><rect x="324.3" y="595.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="327.3" y="606.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.05%)</title><rect x="324.3" y="579.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="327.3" y="590.0"></text>
</g>
<g>
<title>selinux_file_permission (5 samples, 0.13%)</title><rect x="324.9" y="595.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="327.9" y="606.0"></text>
</g>
<g>
<title>__inode_security_revalidate (2 samples, 0.05%)</title><rect x="325.9" y="579.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="328.9" y="590.0"></text>
</g>
<g>
<title>selinux_file_permission (2 samples, 0.05%)</title><rect x="326.5" y="611.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="329.5" y="622.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.13%)</title><rect x="327.1" y="723.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="330.1" y="734.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="328.6" y="723.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="331.6" y="734.0"></text>
</g>
<g>
<title>__libc_write (2 samples, 0.05%)</title><rect x="329.0" y="739.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="332.0" y="750.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.08%)</title><rect x="329.6" y="739.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="332.6" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (19 samples, 0.50%)</title><rect x="330.5" y="787.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="333.5" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="334.8" y="771.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="334.8" y="755.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="337.8" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.10%)</title><rect x="335.1" y="771.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="338.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (6 samples, 0.16%)</title><rect x="336.4" y="787.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.4" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.13%)</title><rect x="336.7" y="771.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="339.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (5 samples, 0.13%)</title><rect x="336.7" y="755.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="339.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (3 samples, 0.08%)</title><rect x="336.7" y="739.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.7" y="750.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.05%)</title><rect x="337.6" y="739.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="340.6" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="338.2" y="803.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="341.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (7 samples, 0.18%)</title><rect x="338.5" y="803.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="341.5" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.08%)</title><rect x="339.8" y="787.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="342.8" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/763265542.run (1,520 samples, 39.81%)</title><rect x="340.7" y="883.0" width="469.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.7" y="894.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/763265542...</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$1 (1,519 samples, 39.79%)</title><rect x="341.0" y="867.0" width="469.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="344.0" y="878.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$1</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.process (1,519 samples, 39.79%)</title><rect x="341.0" y="851.0" width="469.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.0" y="862.0">ru/mail/polis/service/zvladn7/AsyncService.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1426899866.process (1,519 samples, 39.79%)</title><rect x="341.0" y="835.0" width="469.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.0" y="846.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1426899866...</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$upsert$9 (1,519 samples, 39.79%)</title><rect x="341.0" y="819.0" width="469.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.0" y="830.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$upsert$9</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1196148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1196148ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="342.9" y="803.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="345.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (32 samples, 0.84%)</title><rect x="343.2" y="803.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (32 samples, 0.84%)</title><rect x="343.2" y="787.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="346.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (28 samples, 0.73%)</title><rect x="344.4" y="771.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (28 samples, 0.73%)</title><rect x="344.4" y="755.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (28 samples, 0.73%)</title><rect x="344.4" y="739.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="347.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (28 samples, 0.73%)</title><rect x="344.4" y="723.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.4" y="734.0"></text>
</g>
<g>
<title>java/lang/StringCoding$1.initialValue (13 samples, 0.34%)</title><rect x="347.2" y="707.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.2" y="718.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.05%)</title><rect x="351.2" y="707.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="354.2" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.10%)</title><rect x="351.8" y="707.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="354.8" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="353.1" y="803.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.1" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="353.1" y="787.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.1" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$108/409150694.get$Lambda (1 samples, 0.03%)</title><rect x="353.1" y="771.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="353.1" y="755.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="356.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,062 samples, 27.82%)</title><rect x="353.4" y="803.0" width="328.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.4" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="357.1" y="787.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="360.1" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="357.1" y="771.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="360.1" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="357.1" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="360.1" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.68] (1 samples, 0.03%)</title><rect x="357.1" y="739.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="360.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (18 samples, 0.47%)</title><rect x="357.4" y="787.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="360.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (18 samples, 0.47%)</title><rect x="357.4" y="771.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="360.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (18 samples, 0.47%)</title><rect x="357.4" y="755.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="360.4" y="766.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.08%)</title><rect x="360.8" y="739.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="363.8" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.10%)</title><rect x="361.7" y="739.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="364.7" y="750.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.10%)</title><rect x="361.7" y="723.0" width="1.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="364.7" y="734.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.08%)</title><rect x="362.0" y="707.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="365.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,019 samples, 26.69%)</title><rect x="362.9" y="787.0" width="315.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="365.9" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="362.9" y="771.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.9" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (45 samples, 1.18%)</title><rect x="363.3" y="771.0" width="13.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.3" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="375.9" y="755.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="378.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="376.5" y="755.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="376.5" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="379.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="376.5" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="379.5" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="376.5" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="379.5" y="718.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="376.5" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="379.5" y="702.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.03%)</title><rect x="376.5" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="379.5" y="686.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.03%)</title><rect x="376.9" y="755.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="376.9" y="739.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.9" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="376.9" y="723.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.9" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="376.9" y="707.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="376.9" y="691.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="379.9" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="376.9" y="675.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="379.9" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (973 samples, 25.48%)</title><rect x="377.2" y="771.0" width="300.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="380.2" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="377.2" y="755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="380.2" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="377.2" y="739.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="380.2" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="377.2" y="723.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="380.2" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="377.2" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="380.2" y="718.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (1 samples, 0.03%)</title><rect x="377.2" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="380.2" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (972 samples, 25.46%)</title><rect x="377.5" y="755.0" width="300.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="380.5" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2 samples, 0.05%)</title><rect x="379.0" y="739.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.0" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (965 samples, 25.28%)</title><rect x="379.6" y="739.0" width="298.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.6" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (963 samples, 25.22%)</title><rect x="380.3" y="723.0" width="297.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.3" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.03%)</title><rect x="382.4" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="385.4" y="718.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.03%)</title><rect x="382.4" y="691.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="385.4" y="702.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="382.4" y="675.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="385.4" y="686.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) [clone .part.22] (1 samples, 0.03%)</title><rect x="382.4" y="659.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="385.4" y="670.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (22 samples, 0.58%)</title><rect x="382.7" y="707.0" width="6.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="385.7" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.05%)</title><rect x="384.3" y="691.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="387.3" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="384.9" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="387.9" y="702.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (6 samples, 0.16%)</title><rect x="385.2" y="691.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="388.2" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.16%)</title><rect x="387.1" y="691.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="390.1" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="387.7" y="675.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="390.7" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (2 samples, 0.05%)</title><rect x="388.3" y="675.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="391.3" y="686.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.03%)</title><rect x="388.9" y="691.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="391.9" y="702.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="389.2" y="691.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="392.2" y="702.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (5 samples, 0.13%)</title><rect x="389.5" y="707.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="392.5" y="718.0"></text>
</g>
<g>
<title>__send (927 samples, 24.28%)</title><rect x="391.1" y="707.0" width="286.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="394.1" y="718.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (863 samples, 22.60%)</title><rect x="410.9" y="691.0" width="266.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="413.9" y="702.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (3 samples, 0.08%)</title><rect x="410.9" y="675.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="413.9" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (860 samples, 22.52%)</title><rect x="411.8" y="675.0" width="265.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="414.8" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__sys_sendto (1 samples, 0.03%)</title><rect x="417.3" y="659.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="420.3" y="670.0"></text>
</g>
<g>
<title>__x64_sys_sendto (841 samples, 22.03%)</title><rect x="417.7" y="659.0" width="259.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="420.7" y="670.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (840 samples, 22.00%)</title><rect x="417.7" y="643.0" width="259.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="420.7" y="654.0">__sys_sendto</text>
</g>
<g>
<title>fput (5 samples, 0.13%)</title><rect x="419.8" y="627.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="422.8" y="638.0"></text>
</g>
<g>
<title>fput_many (5 samples, 0.13%)</title><rect x="419.8" y="611.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="422.8" y="622.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.05%)</title><rect x="421.4" y="627.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="424.4" y="638.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.03%)</title><rect x="422.0" y="627.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="425.0" y="638.0"></text>
</g>
<g>
<title>iov_iter_init (2 samples, 0.05%)</title><rect x="422.3" y="627.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="425.3" y="638.0"></text>
</g>
<g>
<title>sock_sendmsg (807 samples, 21.14%)</title><rect x="422.9" y="627.0" width="249.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="425.9" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.03%)</title><rect x="423.8" y="611.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="426.8" y="622.0"></text>
</g>
<g>
<title>inet6_sendmsg (786 samples, 20.59%)</title><rect x="424.1" y="611.0" width="243.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="427.1" y="622.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (783 samples, 20.51%)</title><rect x="425.1" y="595.0" width="242.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="428.1" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="425.1" y="579.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="428.1" y="590.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.03%)</title><rect x="425.4" y="579.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="428.4" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.05%)</title><rect x="425.7" y="579.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="428.7" y="590.0"></text>
</g>
<g>
<title>lock_sock_nested (8 samples, 0.21%)</title><rect x="426.3" y="579.0" width="2.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="429.3" y="590.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="426.6" y="563.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="429.6" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (6 samples, 0.16%)</title><rect x="426.9" y="563.0" width="1.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="429.9" y="574.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.05%)</title><rect x="428.8" y="579.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="431.8" y="590.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="428.8" y="563.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="431.8" y="574.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="429.1" y="563.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="432.1" y="574.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (6 samples, 0.16%)</title><rect x="429.4" y="579.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="432.4" y="590.0"></text>
</g>
<g>
<title>tcp_release_cb (6 samples, 0.16%)</title><rect x="431.3" y="579.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="434.3" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (753 samples, 19.72%)</title><rect x="433.1" y="579.0" width="232.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="436.1" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.05%)</title><rect x="441.1" y="563.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="444.1" y="574.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.03%)</title><rect x="441.5" y="547.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="444.5" y="558.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.03%)</title><rect x="441.8" y="563.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="444.8" y="574.0"></text>
</g>
<g>
<title>__virt_addr_valid (4 samples, 0.10%)</title><rect x="442.1" y="563.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="445.1" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (10 samples, 0.26%)</title><rect x="443.3" y="563.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="446.3" y="574.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (5 samples, 0.13%)</title><rect x="443.3" y="547.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="446.3" y="558.0"></text>
</g>
<g>
<title>copyin (4 samples, 0.10%)</title><rect x="444.9" y="547.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="447.9" y="558.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.03%)</title><rect x="446.1" y="547.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="449.1" y="558.0"></text>
</g>
<g>
<title>check_stack_object (2 samples, 0.05%)</title><rect x="446.4" y="563.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="449.4" y="574.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.05%)</title><rect x="447.0" y="563.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="450.0" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (5 samples, 0.13%)</title><rect x="447.6" y="563.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="450.6" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (5 samples, 0.13%)</title><rect x="447.6" y="547.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="450.6" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (51 samples, 1.34%)</title><rect x="449.2" y="563.0" width="15.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="452.2" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (46 samples, 1.20%)</title><rect x="450.1" y="547.0" width="14.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="453.1" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.56 (17 samples, 0.45%)</title><rect x="451.0" y="531.0" width="5.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="454.0" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (14 samples, 0.37%)</title><rect x="451.3" y="515.0" width="4.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="454.3" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (5 samples, 0.13%)</title><rect x="453.2" y="499.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="456.2" y="510.0"></text>
</g>
<g>
<title>kmalloc_slab (3 samples, 0.08%)</title><rect x="454.7" y="499.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="457.7" y="510.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.03%)</title><rect x="455.7" y="515.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="458.7" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="456.0" y="515.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="459.0" y="526.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.03%)</title><rect x="456.3" y="531.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="459.3" y="542.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="456.6" y="531.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="459.6" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (12 samples, 0.31%)</title><rect x="456.9" y="531.0" width="3.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="459.9" y="542.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.03%)</title><rect x="460.3" y="515.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="463.3" y="526.0"></text>
</g>
<g>
<title>ksize (10 samples, 0.26%)</title><rect x="460.6" y="531.0" width="3.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="463.6" y="542.0"></text>
</g>
<g>
<title>__ksize (10 samples, 0.26%)</title><rect x="460.6" y="515.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="463.6" y="526.0"></text>
</g>
<g>
<title>should_failslab (2 samples, 0.05%)</title><rect x="463.7" y="531.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="466.7" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.03%)</title><rect x="464.3" y="547.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="467.3" y="558.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.03%)</title><rect x="464.6" y="547.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="467.6" y="558.0"></text>
</g>
<g>
<title>skb_entail (6 samples, 0.16%)</title><rect x="464.9" y="563.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="467.9" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.03%)</title><rect x="466.8" y="563.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="469.8" y="574.0"></text>
</g>
<g>
<title>tcp_push (622 samples, 16.29%)</title><rect x="467.1" y="563.0" width="192.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="470.1" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (620 samples, 16.24%)</title><rect x="467.7" y="547.0" width="191.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="470.7" y="558.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>ktime_get (2 samples, 0.05%)</title><rect x="468.0" y="531.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="471.0" y="542.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.03%)</title><rect x="468.6" y="531.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="471.6" y="542.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="469.0" y="531.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="472.0" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (615 samples, 16.11%)</title><rect x="469.3" y="531.0" width="190.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="472.3" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.05%)</title><rect x="473.0" y="515.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="476.0" y="526.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (566 samples, 14.82%)</title><rect x="473.6" y="515.0" width="174.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="476.6" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="480.4" y="499.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="483.4" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (2 samples, 0.05%)</title><rect x="480.7" y="499.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="483.7" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (526 samples, 13.78%)</title><rect x="481.3" y="499.0" width="162.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="484.3" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (522 samples, 13.67%)</title><rect x="481.6" y="483.0" width="161.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="484.6" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (511 samples, 13.38%)</title><rect x="483.8" y="467.0" width="157.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="486.8" y="478.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (12 samples, 0.31%)</title><rect x="483.8" y="451.0" width="3.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="486.8" y="462.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.05%)</title><rect x="484.7" y="435.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="487.7" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (5 samples, 0.13%)</title><rect x="485.3" y="435.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="488.3" y="446.0"></text>
</g>
<g>
<title>netlbl_enabled (3 samples, 0.08%)</title><rect x="485.6" y="419.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="488.6" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_output (1 samples, 0.03%)</title><rect x="486.6" y="419.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="489.6" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_output (2 samples, 0.05%)</title><rect x="486.9" y="435.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="489.9" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.03%)</title><rect x="487.5" y="451.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="490.5" y="462.0"></text>
</g>
<g>
<title>ip_output (496 samples, 12.99%)</title><rect x="487.8" y="451.0" width="153.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="490.8" y="462.0">ip_output</text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.03%)</title><rect x="488.4" y="435.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="491.4" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (455 samples, 11.92%)</title><rect x="488.7" y="435.0" width="140.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="491.7" y="446.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (6 samples, 0.16%)</title><rect x="489.0" y="419.0" width="1.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="492.0" y="430.0"></text>
</g>
<g>
<title>__ip_finish_output (442 samples, 11.58%)</title><rect x="490.9" y="419.0" width="136.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="493.9" y="430.0">__ip_finish_output</text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.03%)</title><rect x="492.1" y="403.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="495.1" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (435 samples, 11.39%)</title><rect x="492.4" y="403.0" width="134.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="495.4" y="414.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (368 samples, 9.64%)</title><rect x="498.3" y="387.0" width="113.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="501.3" y="398.0">__local_bh_ena..</text>
</g>
<g>
<title>do_softirq.part.20 (366 samples, 9.59%)</title><rect x="498.9" y="371.0" width="113.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="501.9" y="382.0">do_softirq.par..</text>
</g>
<g>
<title>do_softirq_own_stack (364 samples, 9.53%)</title><rect x="499.6" y="355.0" width="112.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="502.6" y="366.0">do_softirq_own..</text>
</g>
<g>
<title>__softirqentry_text_start (362 samples, 9.48%)</title><rect x="499.6" y="339.0" width="111.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="502.6" y="350.0">__softirqentr..</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.05%)</title><rect x="502.6" y="323.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="505.6" y="334.0"></text>
</g>
<g>
<title>net_rx_action (349 samples, 9.14%)</title><rect x="503.3" y="323.0" width="107.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="506.3" y="334.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.03%)</title><rect x="504.8" y="307.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="507.8" y="318.0"></text>
</g>
<g>
<title>__netif_receive_skb (2 samples, 0.05%)</title><rect x="505.1" y="307.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="508.1" y="318.0"></text>
</g>
<g>
<title>process_backlog (341 samples, 8.93%)</title><rect x="505.7" y="307.0" width="105.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="508.7" y="318.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (335 samples, 8.77%)</title><rect x="507.6" y="291.0" width="103.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="510.6" y="302.0">__netif_rece..</text>
</g>
<g>
<title>__netif_receive_skb_core (3 samples, 0.08%)</title><rect x="507.9" y="275.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="510.9" y="286.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (331 samples, 8.67%)</title><rect x="508.8" y="275.0" width="102.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="511.8" y="286.0">__netif_rece..</text>
</g>
<g>
<title>__netif_receive_skb_core (7 samples, 0.18%)</title><rect x="509.4" y="259.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="512.4" y="270.0"></text>
</g>
<g>
<title>ip_rcv (320 samples, 8.38%)</title><rect x="511.6" y="259.0" width="98.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="514.6" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (3 samples, 0.08%)</title><rect x="511.9" y="243.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="514.9" y="254.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.20 (5 samples, 0.13%)</title><rect x="512.8" y="243.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="515.8" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (310 samples, 8.12%)</title><rect x="514.4" y="243.0" width="95.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="517.4" y="254.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (306 samples, 8.01%)</title><rect x="514.4" y="227.0" width="94.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="517.4" y="238.0">ip_local_de..</text>
</g>
<g>
<title>ip_local_deliver_finish (304 samples, 7.96%)</title><rect x="515.0" y="211.0" width="94.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="518.0" y="222.0">ip_local_de..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (301 samples, 7.88%)</title><rect x="515.3" y="195.0" width="93.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="518.3" y="206.0">ip_protocol..</text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.44 (1 samples, 0.03%)</title><rect x="517.5" y="179.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="520.5" y="190.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="517.8" y="179.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="520.8" y="190.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.03%)</title><rect x="518.1" y="179.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="521.1" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.03%)</title><rect x="518.4" y="179.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="521.4" y="190.0"></text>
</g>
<g>
<title>sock_put (1 samples, 0.03%)</title><rect x="518.7" y="179.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="521.7" y="190.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (3 samples, 0.08%)</title><rect x="519.0" y="179.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="522.0" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (286 samples, 7.49%)</title><rect x="520.0" y="179.0" width="88.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="523.0" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (18 samples, 0.47%)</title><rect x="524.0" y="163.0" width="5.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="527.0" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (3 samples, 0.08%)</title><rect x="528.6" y="147.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="531.6" y="158.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.05%)</title><rect x="529.5" y="163.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="532.5" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.03%)</title><rect x="530.2" y="163.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="533.2" y="174.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.05%)</title><rect x="530.5" y="163.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="533.5" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (25 samples, 0.65%)</title><rect x="531.1" y="163.0" width="7.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="534.1" y="174.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (6 samples, 0.16%)</title><rect x="531.4" y="147.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="534.4" y="158.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (16 samples, 0.42%)</title><rect x="533.2" y="147.0" width="5.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="536.2" y="158.0"></text>
</g>
<g>
<title>selinux_sock_rcv_skb_compat (1 samples, 0.03%)</title><rect x="533.9" y="131.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="536.9" y="142.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (13 samples, 0.34%)</title><rect x="534.2" y="131.0" width="4.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="537.2" y="142.0"></text>
</g>
<g>
<title>selinux_sock_rcv_skb_compat (8 samples, 0.21%)</title><rect x="535.7" y="115.0" width="2.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="538.7" y="126.0"></text>
</g>
<g>
<title>avc_has_perm (1 samples, 0.03%)</title><rect x="536.3" y="99.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="539.3" y="110.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (1 samples, 0.03%)</title><rect x="536.6" y="99.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="539.6" y="110.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.64 (3 samples, 0.08%)</title><rect x="537.0" y="99.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="540.0" y="110.0"></text>
</g>
<g>
<title>selinux_xfrm_sock_rcv_skb (1 samples, 0.03%)</title><rect x="537.9" y="99.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="540.9" y="110.0"></text>
</g>
<g>
<title>avc_has_perm (1 samples, 0.03%)</title><rect x="537.9" y="83.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="540.9" y="94.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (2 samples, 0.05%)</title><rect x="538.2" y="147.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="541.2" y="158.0"></text>
</g>
<g>
<title>sock_put (3 samples, 0.08%)</title><rect x="538.8" y="163.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="541.8" y="174.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (1 samples, 0.03%)</title><rect x="539.7" y="163.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="542.7" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (219 samples, 5.74%)</title><rect x="540.0" y="163.0" width="67.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="543.0" y="174.0">tcp_v4_..</text>
</g>
<g>
<title>ktime_get_seconds (1 samples, 0.03%)</title><rect x="540.0" y="147.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="543.0" y="158.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.08%)</title><rect x="540.4" y="147.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="543.4" y="158.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.05%)</title><rect x="541.3" y="147.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="544.3" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (213 samples, 5.58%)</title><rect x="541.9" y="147.0" width="65.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="544.9" y="158.0">tcp_rcv..</text>
</g>
<g>
<title>__tcp_ack_snd_check (13 samples, 0.34%)</title><rect x="545.0" y="131.0" width="4.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="548.0" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (11 samples, 0.29%)</title><rect x="545.6" y="115.0" width="3.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="548.6" y="126.0"></text>
</g>
<g>
<title>sk_reset_timer (11 samples, 0.29%)</title><rect x="545.6" y="99.0" width="3.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="548.6" y="110.0"></text>
</g>
<g>
<title>mod_timer (9 samples, 0.24%)</title><rect x="546.2" y="83.0" width="2.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="549.2" y="94.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="546.5" y="67.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="549.5" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (7 samples, 0.18%)</title><rect x="546.8" y="67.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="549.8" y="78.0"></text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.08%)</title><rect x="549.0" y="131.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="552.0" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.05%)</title><rect x="549.9" y="131.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="552.9" y="142.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.03%)</title><rect x="550.6" y="131.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="553.6" y="142.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.03%)</title><rect x="550.9" y="131.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="553.9" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (74 samples, 1.94%)</title><rect x="551.2" y="131.0" width="22.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="554.2" y="142.0">s..</text>
</g>
<g>
<title>__wake_up_sync_key (72 samples, 1.89%)</title><rect x="551.8" y="115.0" width="22.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="554.8" y="126.0">_..</text>
</g>
<g>
<title>__wake_up_common_lock (70 samples, 1.83%)</title><rect x="552.1" y="99.0" width="21.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="555.1" y="110.0">_..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (69 samples, 1.81%)</title><rect x="552.4" y="83.0" width="21.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="555.4" y="94.0">_..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="573.7" y="99.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="576.7" y="110.0"></text>
</g>
<g>
<title>tcp_ack (82 samples, 2.15%)</title><rect x="574.0" y="131.0" width="25.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="577.0" y="142.0">t..</text>
</g>
<g>
<title>__kfree_skb (34 samples, 0.89%)</title><rect x="581.5" y="115.0" width="10.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="584.5" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (8 samples, 0.21%)</title><rect x="581.5" y="99.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="584.5" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (8 samples, 0.21%)</title><rect x="581.5" y="83.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="584.5" y="94.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.05%)</title><rect x="583.3" y="67.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="586.3" y="78.0"></text>
</g>
<g>
<title>skb_release_all (25 samples, 0.65%)</title><rect x="583.9" y="99.0" width="7.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="586.9" y="110.0"></text>
</g>
<g>
<title>skb_release_data (24 samples, 0.63%)</title><rect x="583.9" y="83.0" width="7.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="586.9" y="94.0"></text>
</g>
<g>
<title>skb_free_head (4 samples, 0.10%)</title><rect x="590.1" y="67.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="593.1" y="78.0"></text>
</g>
<g>
<title>kfree (4 samples, 0.10%)</title><rect x="590.1" y="51.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="593.1" y="62.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.05%)</title><rect x="590.7" y="35.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="593.7" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="591.3" y="83.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="594.3" y="94.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.03%)</title><rect x="591.7" y="99.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="594.7" y="110.0"></text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.08%)</title><rect x="592.0" y="115.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="595.0" y="126.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.03%)</title><rect x="592.9" y="115.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="595.9" y="126.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.05%)</title><rect x="593.2" y="115.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="596.2" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.46 (4 samples, 0.10%)</title><rect x="593.8" y="115.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="596.8" y="126.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="594.7" y="99.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="597.7" y="110.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.03%)</title><rect x="595.1" y="115.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="598.1" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.03%)</title><rect x="595.4" y="115.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="598.4" y="126.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.03%)</title><rect x="595.7" y="115.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="598.7" y="126.0"></text>
</g>
<g>
<title>tcp_rate_gen (4 samples, 0.10%)</title><rect x="596.0" y="115.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="599.0" y="126.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.05%)</title><rect x="597.2" y="115.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="600.2" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (5 samples, 0.13%)</title><rect x="597.8" y="115.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="600.8" y="126.0"></text>
</g>
<g>
<title>tcp_check_space (3 samples, 0.08%)</title><rect x="599.4" y="131.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="602.4" y="142.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.03%)</title><rect x="600.3" y="131.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="603.3" y="142.0"></text>
</g>
<g>
<title>tcp_event_data_recv (5 samples, 0.13%)</title><rect x="600.6" y="131.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="603.6" y="142.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.13%)</title><rect x="602.2" y="131.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="605.2" y="142.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.05%)</title><rect x="602.2" y="115.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="605.2" y="126.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.08%)</title><rect x="602.8" y="115.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="605.8" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (3 samples, 0.08%)</title><rect x="603.7" y="131.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="606.7" y="142.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.05%)</title><rect x="604.6" y="131.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="607.6" y="142.0"></text>
</g>
<g>
<title>tcp_rack_advance (1 samples, 0.03%)</title><rect x="605.3" y="131.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="608.3" y="142.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.03%)</title><rect x="605.6" y="131.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="608.6" y="142.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.10%)</title><rect x="605.9" y="131.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="608.9" y="142.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="607.1" y="131.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="610.1" y="142.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.03%)</title><rect x="607.4" y="131.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="610.4" y="142.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.03%)</title><rect x="607.7" y="163.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="610.7" y="174.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.03%)</title><rect x="608.0" y="163.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="611.0" y="174.0"></text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.05%)</title><rect x="608.3" y="195.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="611.3" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.03%)</title><rect x="609.0" y="227.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="612.0" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (3 samples, 0.08%)</title><rect x="609.3" y="227.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="612.3" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (1 samples, 0.03%)</title><rect x="610.2" y="243.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="613.2" y="254.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.20 (1 samples, 0.03%)</title><rect x="610.5" y="259.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="613.5" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.03%)</title><rect x="610.8" y="259.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="613.8" y="270.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.03%)</title><rect x="611.1" y="323.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="614.1" y="334.0"></text>
</g>
<g>
<title>net_rx_action (2 samples, 0.05%)</title><rect x="611.4" y="339.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="614.4" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (46 samples, 1.20%)</title><rect x="612.1" y="387.0" width="14.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="615.1" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (44 samples, 1.15%)</title><rect x="612.1" y="371.0" width="13.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="615.1" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (25 samples, 0.65%)</title><rect x="613.6" y="355.0" width="7.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="616.6" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (21 samples, 0.55%)</title><rect x="614.5" y="339.0" width="6.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="617.5" y="350.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.08%)</title><rect x="616.1" y="323.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="619.1" y="334.0"></text>
</g>
<g>
<title>netif_rx (10 samples, 0.26%)</title><rect x="617.0" y="323.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="620.0" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.03%)</title><rect x="617.0" y="307.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="620.0" y="318.0"></text>
</g>
<g>
<title>netif_rx_internal (9 samples, 0.24%)</title><rect x="617.3" y="307.0" width="2.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="620.3" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (8 samples, 0.21%)</title><rect x="617.6" y="291.0" width="2.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="620.6" y="302.0"></text>
</g>
<g>
<title>tcp_wfree (3 samples, 0.08%)</title><rect x="620.1" y="323.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="623.1" y="334.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.03%)</title><rect x="620.7" y="307.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="623.7" y="318.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.03%)</title><rect x="621.0" y="339.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="624.0" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (6 samples, 0.16%)</title><rect x="621.3" y="355.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="624.3" y="366.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (1 samples, 0.03%)</title><rect x="623.2" y="355.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="626.2" y="366.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.03%)</title><rect x="623.5" y="355.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="626.5" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (5 samples, 0.13%)</title><rect x="623.8" y="355.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="626.8" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (2 samples, 0.05%)</title><rect x="624.4" y="339.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="627.4" y="350.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.03%)</title><rect x="625.0" y="339.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="628.0" y="350.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.03%)</title><rect x="625.3" y="355.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="628.3" y="366.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (2 samples, 0.05%)</title><rect x="625.7" y="371.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="628.7" y="382.0"></text>
</g>
<g>
<title>do_softirq.part.20 (2 samples, 0.05%)</title><rect x="626.3" y="387.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="629.3" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.05%)</title><rect x="626.9" y="403.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="629.9" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (3 samples, 0.08%)</title><rect x="627.5" y="419.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="630.5" y="430.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.08%)</title><rect x="628.4" y="419.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="631.4" y="430.0"></text>
</g>
<g>
<title>nf_hook_slow (35 samples, 0.92%)</title><rect x="629.4" y="435.0" width="10.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="632.4" y="446.0"></text>
</g>
<g>
<title>selinux_ip_postroute (2 samples, 0.05%)</title><rect x="630.3" y="419.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="633.3" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (30 samples, 0.79%)</title><rect x="630.9" y="419.0" width="9.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="633.9" y="430.0"></text>
</g>
<g>
<title>selinux_ip_postroute (29 samples, 0.76%)</title><rect x="631.2" y="403.0" width="9.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="634.2" y="414.0"></text>
</g>
<g>
<title>selinux_ip_postroute_compat (22 samples, 0.58%)</title><rect x="632.8" y="387.0" width="6.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="635.8" y="398.0"></text>
</g>
<g>
<title>avc_has_perm (1 samples, 0.03%)</title><rect x="635.2" y="371.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="638.2" y="382.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.64 (8 samples, 0.21%)</title><rect x="635.5" y="371.0" width="2.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="638.5" y="382.0"></text>
</g>
<g>
<title>selinux_xfrm_postroute_last (5 samples, 0.13%)</title><rect x="638.0" y="371.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="641.0" y="382.0"></text>
</g>
<g>
<title>avc_has_perm (5 samples, 0.13%)</title><rect x="638.0" y="355.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="641.0" y="366.0"></text>
</g>
<g>
<title>selinux_xfrm_postroute_last (2 samples, 0.05%)</title><rect x="639.6" y="387.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="642.6" y="398.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (3 samples, 0.08%)</title><rect x="640.2" y="435.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="643.2" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (2 samples, 0.05%)</title><rect x="641.1" y="451.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="644.1" y="462.0"></text>
</g>
<g>
<title>ipv4_dst_check (4 samples, 0.10%)</title><rect x="641.7" y="467.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="644.7" y="478.0"></text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.03%)</title><rect x="643.0" y="483.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="646.0" y="494.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.03%)</title><rect x="643.3" y="483.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="646.3" y="494.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.03%)</title><rect x="643.6" y="483.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="646.6" y="494.0"></text>
</g>
<g>
<title>skb_clone (10 samples, 0.26%)</title><rect x="643.9" y="499.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="646.9" y="510.0"></text>
</g>
<g>
<title>__skb_clone (8 samples, 0.21%)</title><rect x="644.5" y="483.0" width="2.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="647.5" y="494.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.03%)</title><rect x="646.7" y="467.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="649.7" y="478.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="647.0" y="499.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="650.0" y="510.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.03%)</title><rect x="647.3" y="499.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="650.3" y="510.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (1 samples, 0.03%)</title><rect x="647.6" y="499.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="650.6" y="510.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.05%)</title><rect x="647.9" y="499.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="650.9" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (2 samples, 0.05%)</title><rect x="647.9" y="483.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="650.9" y="494.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (5 samples, 0.13%)</title><rect x="648.5" y="515.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="651.5" y="526.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.10%)</title><rect x="650.1" y="515.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="653.1" y="526.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.10%)</title><rect x="650.1" y="499.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="653.1" y="510.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.08%)</title><rect x="651.3" y="515.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="654.3" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="652.2" y="515.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="655.2" y="526.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.03%)</title><rect x="652.5" y="515.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="655.5" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (11 samples, 0.29%)</title><rect x="652.8" y="515.0" width="3.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="655.8" y="526.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.03%)</title><rect x="654.4" y="499.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="657.4" y="510.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.03%)</title><rect x="654.7" y="499.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="657.7" y="510.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.10%)</title><rect x="655.0" y="499.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="658.0" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.10%)</title><rect x="655.0" y="483.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="658.0" y="494.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.10%)</title><rect x="655.0" y="467.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="658.0" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.08%)</title><rect x="655.3" y="451.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="658.3" y="462.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.03%)</title><rect x="656.2" y="515.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="659.2" y="526.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (1 samples, 0.03%)</title><rect x="656.6" y="515.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="659.6" y="526.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.10%)</title><rect x="656.9" y="515.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="659.9" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.05%)</title><rect x="657.5" y="499.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="660.5" y="510.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.05%)</title><rect x="657.5" y="483.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="660.5" y="494.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.34 (2 samples, 0.05%)</title><rect x="658.1" y="515.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="661.1" y="526.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.05%)</title><rect x="658.7" y="515.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="661.7" y="526.0"></text>
</g>
<g>
<title>tcp_send_mss (20 samples, 0.52%)</title><rect x="659.3" y="563.0" width="6.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="662.3" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (8 samples, 0.21%)</title><rect x="659.6" y="547.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="662.6" y="558.0"></text>
</g>
<g>
<title>tcp_current_mss (11 samples, 0.29%)</title><rect x="662.1" y="547.0" width="3.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="665.1" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.05%)</title><rect x="664.3" y="531.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="667.3" y="542.0"></text>
</g>
<g>
<title>tcp_established_options (2 samples, 0.05%)</title><rect x="664.9" y="531.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="667.9" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.03%)</title><rect x="665.5" y="563.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="668.5" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.08%)</title><rect x="665.8" y="579.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="668.8" y="590.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.03%)</title><rect x="666.8" y="579.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="669.8" y="590.0"></text>
</g>
<g>
<title>inet_send_prepare (2 samples, 0.05%)</title><rect x="667.1" y="611.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="670.1" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (14 samples, 0.37%)</title><rect x="667.7" y="611.0" width="4.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="670.7" y="622.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (7 samples, 0.18%)</title><rect x="667.7" y="595.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="670.7" y="606.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (7 samples, 0.18%)</title><rect x="667.7" y="579.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="670.7" y="590.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.08%)</title><rect x="668.9" y="563.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="671.9" y="574.0"></text>
</g>
<g>
<title>selinux_socket_sendmsg (3 samples, 0.08%)</title><rect x="669.8" y="595.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="672.8" y="606.0"></text>
</g>
<g>
<title>sock_has_perm (3 samples, 0.08%)</title><rect x="669.8" y="579.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="672.8" y="590.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg (3 samples, 0.08%)</title><rect x="670.8" y="595.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="673.8" y="606.0"></text>
</g>
<g>
<title>tomoyo_sock_family.part.1 (2 samples, 0.05%)</title><rect x="670.8" y="579.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="673.8" y="590.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg_permission (1 samples, 0.03%)</title><rect x="671.4" y="579.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="674.4" y="590.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg_permission (1 samples, 0.03%)</title><rect x="671.7" y="595.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="674.7" y="606.0"></text>
</g>
<g>
<title>selinux_socket_sendmsg (1 samples, 0.03%)</title><rect x="672.0" y="611.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="675.0" y="622.0"></text>
</g>
<g>
<title>sockfd_lookup_light (16 samples, 0.42%)</title><rect x="672.3" y="627.0" width="5.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="675.3" y="638.0"></text>
</g>
<g>
<title>__fdget (15 samples, 0.39%)</title><rect x="672.3" y="611.0" width="4.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="675.3" y="622.0"></text>
</g>
<g>
<title>__fget_light (15 samples, 0.39%)</title><rect x="672.3" y="595.0" width="4.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="675.3" y="606.0"></text>
</g>
<g>
<title>__fget (15 samples, 0.39%)</title><rect x="672.3" y="579.0" width="4.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="675.3" y="590.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="677.0" y="611.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="680.0" y="622.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.03%)</title><rect x="677.3" y="643.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="680.3" y="654.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="677.6" y="707.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="680.6" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (12 samples, 0.31%)</title><rect x="677.9" y="787.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="680.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.24%)</title><rect x="678.8" y="771.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="681.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.24%)</title><rect x="678.8" y="755.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.8" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="681.6" y="803.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="684.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="681.6" y="787.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="684.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="681.6" y="771.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="684.6" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="681.6" y="755.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="684.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.upsert (332 samples, 8.70%)</title><rect x="681.9" y="803.0" width="102.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="684.9" y="814.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.execute (332 samples, 8.70%)</title><rect x="681.9" y="787.0" width="102.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="684.9" y="798.0">ru/mail/poli..</text>
</g>
<g>
<title>java/util/Objects.requireNonNull (4 samples, 0.10%)</title><rect x="683.1" y="771.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="686.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (17 samples, 0.45%)</title><rect x="684.4" y="771.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="687.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (17 samples, 0.45%)</title><rect x="684.4" y="755.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="687.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (17 samples, 0.45%)</title><rect x="684.4" y="739.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="687.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.10%)</title><rect x="684.4" y="723.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="687.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (4 samples, 0.10%)</title><rect x="684.4" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="687.4" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.08%)</title><rect x="684.4" y="691.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="687.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.08%)</title><rect x="684.4" y="675.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="687.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.05%)</title><rect x="684.7" y="659.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="687.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="685.3" y="691.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.03%)</title><rect x="685.6" y="723.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="688.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="685.6" y="707.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="688.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="685.9" y="723.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="688.9" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="685.9" y="707.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="688.9" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="685.9" y="691.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="688.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (1 samples, 0.03%)</title><rect x="685.9" y="675.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="688.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (11 samples, 0.29%)</title><rect x="686.2" y="723.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="689.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (2 samples, 0.05%)</title><rect x="689.0" y="707.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="692.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (6 samples, 0.16%)</title><rect x="689.6" y="771.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="692.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (6 samples, 0.16%)</title><rect x="689.6" y="755.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="692.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (3 samples, 0.08%)</title><rect x="690.2" y="739.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="693.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$104/1396512699.run (1 samples, 0.03%)</title><rect x="691.2" y="739.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="694.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$104/1396512699.run (301 samples, 7.88%)</title><rect x="691.5" y="771.0" width="93.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="694.5" y="782.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$upsert$5 (301 samples, 7.88%)</title><rect x="691.5" y="755.0" width="93.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.5" y="766.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.upsert (301 samples, 7.88%)</title><rect x="691.5" y="739.0" width="93.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="694.5" y="750.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (10 samples, 0.26%)</title><rect x="691.5" y="723.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="694.5" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="694.3" y="707.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="697.3" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="694.3" y="691.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="697.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="694.3" y="675.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="697.3" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="694.3" y="659.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="697.3" y="670.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (1 samples, 0.03%)</title><rect x="694.3" y="643.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="697.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (283 samples, 7.41%)</title><rect x="694.6" y="723.0" width="87.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="697.6" y="734.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (270 samples, 7.07%)</title><rect x="697.0" y="707.0" width="83.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="700.0" y="718.0">java/util..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.24%)</title><rect x="703.5" y="691.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="706.5" y="702.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="706.0" y="675.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="709.0" y="686.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="706.0" y="659.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="709.0" y="670.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="706.0" y="643.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="709.0" y="654.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="706.0" y="627.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="709.0" y="638.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="706.0" y="611.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="709.0" y="622.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="706.0" y="595.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="709.0" y="606.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="706.0" y="579.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="709.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (1 samples, 0.03%)</title><rect x="706.3" y="691.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="709.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (1 samples, 0.03%)</title><rect x="706.3" y="675.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="709.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (17 samples, 0.45%)</title><rect x="706.6" y="691.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (6 samples, 0.16%)</title><rect x="707.2" y="675.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="708.5" y="659.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="708.5" y="643.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="711.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="708.5" y="627.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="711.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="708.5" y="611.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="711.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.03%)</title><rect x="708.5" y="595.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="711.5" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="708.5" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="711.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="708.5" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="711.5" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="708.5" y="547.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.5" y="558.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.03%)</title><rect x="708.5" y="531.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="711.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.03%)</title><rect x="708.8" y="659.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="711.8" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="708.8" y="643.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.8" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="708.8" y="627.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.8" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="708.8" y="611.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="711.8" y="622.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.03%)</title><rect x="708.8" y="595.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="711.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (9 samples, 0.24%)</title><rect x="709.1" y="675.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="712.1" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.24%)</title><rect x="709.1" y="659.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.1" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.18%)</title><rect x="709.7" y="643.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="712.7" y="654.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.18%)</title><rect x="709.7" y="627.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="712.7" y="638.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.05%)</title><rect x="711.3" y="611.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="714.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (222 samples, 5.81%)</title><rect x="711.9" y="691.0" width="68.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.9" y="702.0">java/ut..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (222 samples, 5.81%)</title><rect x="711.9" y="675.0" width="68.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="714.9" y="686.0">java/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (87 samples, 2.28%)</title><rect x="753.6" y="659.0" width="26.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="756.6" y="670.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (87 samples, 2.28%)</title><rect x="753.6" y="643.0" width="26.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.6" y="654.0">j..</text>
</g>
<g>
<title>vectorizedMismatch (29 samples, 0.76%)</title><rect x="771.5" y="627.0" width="9.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="774.5" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.13%)</title><rect x="780.5" y="707.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="783.5" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="781.1" y="691.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="784.1" y="702.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="781.4" y="691.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="784.4" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="781.4" y="675.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="784.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (8 samples, 0.21%)</title><rect x="782.0" y="723.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="785.0" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (8 samples, 0.21%)</title><rect x="782.0" y="707.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="785.0" y="718.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="782.0" y="691.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="785.0" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="782.3" y="691.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="785.3" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="782.3" y="675.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="785.3" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="782.3" y="659.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="785.3" y="670.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="782.3" y="643.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="785.3" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (6 samples, 0.16%)</title><rect x="782.7" y="691.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="785.7" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="782.7" y="675.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="785.7" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="782.7" y="659.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="785.7" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="782.7" y="643.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="785.7" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.16%)</title><rect x="782.7" y="627.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="785.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.16%)</title><rect x="782.7" y="611.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (2 samples, 0.05%)</title><rect x="783.9" y="595.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="786.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lockAction (21 samples, 0.55%)</title><rect x="784.5" y="803.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="787.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.31%)</title><rect x="784.5" y="787.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="787.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.21%)</title><rect x="785.7" y="771.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="788.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.08%)</title><rect x="785.7" y="755.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="788.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.08%)</title><rect x="785.7" y="739.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.08%)</title><rect x="785.7" y="723.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="786.1" y="707.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="789.1" y="718.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="786.4" y="707.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="789.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.13%)</title><rect x="786.7" y="755.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="789.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.13%)</title><rect x="786.7" y="739.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="789.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.21%)</title><rect x="788.2" y="787.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="791.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.21%)</title><rect x="788.2" y="771.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.21%)</title><rect x="788.2" y="755.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="791.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$108/409150694.run (1 samples, 0.03%)</title><rect x="790.7" y="787.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="793.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$upsert$8 (1 samples, 0.03%)</title><rect x="790.7" y="771.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="793.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfPresent (1 samples, 0.03%)</title><rect x="790.7" y="755.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="793.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="790.7" y="739.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="793.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="790.7" y="723.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="793.7" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="790.7" y="707.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="793.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.wrapArray (8 samples, 0.21%)</title><rect x="791.0" y="803.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="794.0" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.21%)</title><rect x="791.0" y="787.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.0" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.21%)</title><rect x="791.0" y="771.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="794.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="791.0" y="755.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="794.0" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="791.0" y="739.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="794.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="791.0" y="723.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="794.0" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="791.0" y="707.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.0" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="791.0" y="691.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="794.0" y="702.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="791.0" y="675.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="794.0" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="791.3" y="675.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="794.3" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="791.3" y="659.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="794.3" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.03%)</title><rect x="791.3" y="643.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="794.3" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="791.6" y="755.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="794.6" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="791.6" y="739.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.6" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="791.6" y="723.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="794.6" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.05%)</title><rect x="792.5" y="707.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="795.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="793.2" y="707.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="796.2" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.wrapString (55 samples, 1.44%)</title><rect x="793.5" y="803.0" width="17.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="796.5" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (21 samples, 0.55%)</title><rect x="793.5" y="787.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.5" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (21 samples, 0.55%)</title><rect x="793.5" y="771.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="796.5" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (21 samples, 0.55%)</title><rect x="793.5" y="755.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="796.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (21 samples, 0.55%)</title><rect x="793.5" y="739.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="796.5" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (21 samples, 0.55%)</title><rect x="793.5" y="723.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="796.5" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="797.8" y="707.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="800.8" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (5 samples, 0.13%)</title><rect x="798.1" y="707.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="801.1" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="799.7" y="707.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="802.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.toBytes (34 samples, 0.89%)</title><rect x="800.0" y="787.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.0" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (34 samples, 0.89%)</title><rect x="800.0" y="771.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="803.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="800.0" y="755.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="803.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="800.0" y="739.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="803.0" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="800.0" y="723.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="803.0" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="800.0" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="803.0" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="800.0" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="803.0" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (33 samples, 0.86%)</title><rect x="800.3" y="755.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.3" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (33 samples, 0.86%)</title><rect x="800.3" y="739.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="803.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (22 samples, 0.58%)</title><rect x="800.3" y="723.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.3" y="734.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (9 samples, 0.24%)</title><rect x="804.3" y="707.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="807.3" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (11 samples, 0.29%)</title><rect x="807.1" y="723.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="810.1" y="734.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.03%)</title><rect x="810.2" y="707.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="813.2" y="718.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,015 samples, 26.58%)</title><rect x="810.5" y="931.0" width="313.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="813.5" y="942.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (337 samples, 8.83%)</title><rect x="812.3" y="915.0" width="104.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="815.3" y="926.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (333 samples, 8.72%)</title><rect x="813.6" y="899.0" width="102.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="816.6" y="910.0">one/nio/net/..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.03%)</title><rect x="817.0" y="883.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="820.0" y="894.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.03%)</title><rect x="817.0" y="867.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="820.0" y="878.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="817.0" y="851.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="820.0" y="862.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.03%)</title><rect x="817.0" y="835.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="820.0" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (4 samples, 0.10%)</title><rect x="817.3" y="883.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="820.3" y="894.0"></text>
</g>
<g>
<title>[unknown] (312 samples, 8.17%)</title><rect x="818.5" y="883.0" width="96.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="821.5" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (8 samples, 0.21%)</title><rect x="818.5" y="867.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="821.5" y="878.0"></text>
</g>
<g>
<title>clock_gettime (8 samples, 0.21%)</title><rect x="818.5" y="851.0" width="2.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="821.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="819.4" y="835.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="822.4" y="846.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.10%)</title><rect x="819.7" y="835.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="822.7" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.08%)</title><rect x="820.1" y="819.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="823.1" y="830.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (7 samples, 0.18%)</title><rect x="821.0" y="867.0" width="2.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="824.0" y="878.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.08%)</title><rect x="823.1" y="867.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="826.1" y="878.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.05%)</title><rect x="824.1" y="867.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="827.1" y="878.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="824.1" y="851.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="827.1" y="862.0"></text>
</g>
<g>
<title>epoll_wait (292 samples, 7.65%)</title><rect x="824.7" y="867.0" width="90.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="827.7" y="878.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (173 samples, 4.53%)</title><rect x="861.5" y="851.0" width="53.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="864.5" y="862.0">entry..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (6 samples, 0.16%)</title><rect x="861.5" y="835.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="864.5" y="846.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.05%)</title><rect x="863.3" y="835.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="866.3" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (165 samples, 4.32%)</title><rect x="863.9" y="835.0" width="51.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="866.9" y="846.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (153 samples, 4.01%)</title><rect x="867.6" y="819.0" width="47.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="870.6" y="830.0">__x6..</text>
</g>
<g>
<title>do_epoll_wait (153 samples, 4.01%)</title><rect x="867.6" y="803.0" width="47.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="870.6" y="814.0">do_e..</text>
</g>
<g>
<title>__fdget (7 samples, 0.18%)</title><rect x="867.6" y="787.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="870.6" y="798.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.18%)</title><rect x="867.6" y="771.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="870.6" y="782.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.10%)</title><rect x="868.6" y="755.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="871.6" y="766.0"></text>
</g>
<g>
<title>ep_poll (141 samples, 3.69%)</title><rect x="869.8" y="787.0" width="43.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="872.8" y="798.0">ep_p..</text>
</g>
<g>
<title>_raw_write_lock_irq (1 samples, 0.03%)</title><rect x="876.6" y="771.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="879.6" y="782.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (109 samples, 2.85%)</title><rect x="876.9" y="771.0" width="33.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="879.9" y="782.0">ep..</text>
</g>
<g>
<title>ep_send_events_proc (72 samples, 1.89%)</title><rect x="886.5" y="755.0" width="22.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="889.5" y="766.0">e..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="892.4" y="739.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="895.4" y="750.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (45 samples, 1.18%)</title><rect x="892.7" y="739.0" width="13.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="895.7" y="750.0"></text>
</g>
<g>
<title>sock_poll (34 samples, 0.89%)</title><rect x="894.8" y="723.0" width="10.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="897.8" y="734.0"></text>
</g>
<g>
<title>tcp_poll (11 samples, 0.29%)</title><rect x="898.2" y="707.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="901.2" y="718.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.03%)</title><rect x="901.3" y="691.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="904.3" y="702.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (12 samples, 0.31%)</title><rect x="901.6" y="707.0" width="3.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="904.6" y="718.0"></text>
</g>
<g>
<title>tcp_poll (4 samples, 0.10%)</title><rect x="905.4" y="723.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="908.4" y="734.0"></text>
</g>
<g>
<title>sock_poll (7 samples, 0.18%)</title><rect x="906.6" y="739.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="909.6" y="750.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.08%)</title><rect x="908.8" y="755.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="911.8" y="766.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="909.4" y="739.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="912.4" y="750.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.08%)</title><rect x="909.7" y="755.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="912.7" y="766.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.05%)</title><rect x="910.6" y="771.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="913.6" y="782.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (6 samples, 0.16%)</title><rect x="911.2" y="771.0" width="1.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="914.2" y="782.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (6 samples, 0.16%)</title><rect x="911.2" y="755.0" width="1.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="914.2" y="766.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.13%)</title><rect x="911.5" y="739.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="914.5" y="750.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.13%)</title><rect x="911.5" y="723.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="914.5" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.03%)</title><rect x="913.1" y="771.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="916.1" y="782.0"></text>
</g>
<g>
<title>fput (5 samples, 0.13%)</title><rect x="913.4" y="787.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="916.4" y="798.0"></text>
</g>
<g>
<title>fput_many (5 samples, 0.13%)</title><rect x="913.4" y="771.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="916.4" y="782.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.13%)</title><rect x="914.9" y="883.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="917.9" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (669 samples, 17.52%)</title><rect x="916.5" y="915.0" width="206.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="919.5" y="926.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (660 samples, 17.29%)</title><rect x="919.3" y="899.0" width="203.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="922.3" y="910.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (325 samples, 8.51%)</title><rect x="919.9" y="883.0" width="100.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="922.9" y="894.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (2 samples, 0.05%)</title><rect x="931.9" y="867.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="934.9" y="878.0"></text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.03%)</title><rect x="932.6" y="867.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="935.6" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="932.9" y="867.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="935.9" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (178 samples, 4.66%)</title><rect x="933.2" y="867.0" width="55.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="936.2" y="878.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (178 samples, 4.66%)</title><rect x="933.2" y="851.0" width="55.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="936.2" y="862.0">one/n..</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (142 samples, 3.72%)</title><rect x="933.8" y="835.0" width="43.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="936.8" y="846.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (17 samples, 0.45%)</title><rect x="933.8" y="819.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="936.8" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (17 samples, 0.45%)</title><rect x="933.8" y="803.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="936.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.08%)</title><rect x="934.7" y="787.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="937.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.08%)</title><rect x="934.7" y="771.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="937.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="935.6" y="787.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="938.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="935.6" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="938.6" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="935.6" y="755.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="938.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="935.6" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.6" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="935.6" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="938.6" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="935.6" y="707.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="938.6" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="935.6" y="691.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.6" y="702.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.03%)</title><rect x="935.6" y="675.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="938.6" y="686.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="935.6" y="659.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="938.6" y="670.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.05%)</title><rect x="936.0" y="787.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="939.0" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="936.6" y="787.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="939.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (7 samples, 0.18%)</title><rect x="936.9" y="787.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="939.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.13%)</title><rect x="937.5" y="771.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="940.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.13%)</title><rect x="937.5" y="755.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="940.5" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.13%)</title><rect x="937.5" y="739.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="940.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.upsert (125 samples, 3.27%)</title><rect x="939.0" y="819.0" width="38.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="942.0" y="830.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.10%)</title><rect x="939.0" y="803.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="942.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.10%)</title><rect x="939.0" y="787.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="942.0" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1426899866.get$Lambda (4 samples, 0.10%)</title><rect x="939.0" y="771.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="942.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.08%)</title><rect x="939.4" y="755.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.4" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.08%)</title><rect x="939.4" y="739.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.4" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="939.4" y="723.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.4" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="939.4" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.4" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="939.4" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.4" y="702.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="939.7" y="691.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="942.7" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="940.0" y="723.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="943.0" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.processRequest (121 samples, 3.17%)</title><rect x="940.3" y="803.0" width="37.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="943.3" y="814.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="940.3" y="787.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="943.3" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="940.3" y="771.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="943.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/763265542.get$Lambda (1 samples, 0.03%)</title><rect x="940.3" y="755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="943.3" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="940.3" y="739.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="943.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (120 samples, 3.14%)</title><rect x="940.6" y="787.0" width="37.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="943.6" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (120 samples, 3.14%)</title><rect x="940.6" y="771.0" width="37.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="943.6" y="782.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (3 samples, 0.08%)</title><rect x="940.6" y="755.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="943.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.08%)</title><rect x="940.6" y="739.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="943.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.08%)</title><rect x="940.6" y="723.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="943.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.08%)</title><rect x="940.6" y="707.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="943.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.05%)</title><rect x="940.9" y="691.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="943.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.03%)</title><rect x="940.9" y="675.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="943.9" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="940.9" y="659.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="943.9" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.03%)</title><rect x="940.9" y="643.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="943.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.03%)</title><rect x="941.2" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="944.2" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="941.2" y="659.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="944.2" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="941.2" y="643.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="944.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (38 samples, 1.00%)</title><rect x="941.5" y="755.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="944.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (24 samples, 0.63%)</title><rect x="944.3" y="739.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="947.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (22 samples, 0.58%)</title><rect x="944.3" y="723.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="947.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (22 samples, 0.58%)</title><rect x="944.3" y="707.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="947.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (22 samples, 0.58%)</title><rect x="944.3" y="691.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="947.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.18%)</title><rect x="944.3" y="675.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="947.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (9 samples, 0.24%)</title><rect x="946.5" y="675.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="949.5" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.03%)</title><rect x="946.8" y="659.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="949.8" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="946.8" y="643.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="949.8" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="946.8" y="627.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="949.8" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="946.8" y="611.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="949.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.18%)</title><rect x="947.1" y="659.0" width="2.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="950.1" y="670.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="947.1" y="643.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="950.1" y="654.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (6 samples, 0.16%)</title><rect x="947.4" y="643.0" width="1.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="950.4" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.05%)</title><rect x="948.6" y="627.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="951.6" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.05%)</title><rect x="948.6" y="611.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="951.6" y="622.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="948.9" y="595.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="951.9" y="606.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="948.9" y="579.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="951.9" y="590.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.16%)</title><rect x="949.2" y="675.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="952.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.05%)</title><rect x="951.1" y="723.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="954.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.05%)</title><rect x="951.1" y="707.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="954.1" y="718.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.13%)</title><rect x="951.7" y="739.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="954.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 2.07%)</title><rect x="953.3" y="755.0" width="24.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="956.3" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 2.07%)</title><rect x="953.3" y="739.0" width="24.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="956.3" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 2.07%)</title><rect x="953.3" y="723.0" width="24.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="956.3" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="955.1" y="707.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="958.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (71 samples, 1.86%)</title><rect x="955.7" y="707.0" width="22.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="958.7" y="718.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (71 samples, 1.86%)</title><rect x="955.7" y="691.0" width="22.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="958.7" y="702.0">j..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="955.7" y="675.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="958.7" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="956.0" y="675.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="959.0" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 0.24%)</title><rect x="956.3" y="675.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="959.3" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="957.3" y="659.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.3" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="957.3" y="643.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="960.3" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="957.6" y="659.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.6" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.03%)</title><rect x="957.9" y="659.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="960.9" y="670.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="958.2" y="659.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="961.2" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="958.5" y="659.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="961.5" y="670.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.03%)</title><rect x="958.8" y="659.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="961.8" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (60 samples, 1.57%)</title><rect x="959.1" y="675.0" width="18.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="962.1" y="686.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (43 samples, 1.13%)</title><rect x="964.4" y="659.0" width="13.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="967.4" y="670.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="964.4" y="643.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="967.4" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (42 samples, 1.10%)</title><rect x="964.7" y="643.0" width="13.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="967.7" y="654.0"></text>
</g>
<g>
<title>__x64_sys_futex (39 samples, 1.02%)</title><rect x="965.6" y="627.0" width="12.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="968.6" y="638.0"></text>
</g>
<g>
<title>do_futex (38 samples, 1.00%)</title><rect x="965.9" y="611.0" width="11.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="968.9" y="622.0"></text>
</g>
<g>
<title>futex_wake (34 samples, 0.89%)</title><rect x="966.9" y="595.0" width="10.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="969.9" y="606.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="968.1" y="579.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="971.1" y="590.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.03%)</title><rect x="968.4" y="579.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="971.4" y="590.0"></text>
</g>
<g>
<title>wake_up_q (28 samples, 0.73%)</title><rect x="968.7" y="579.0" width="8.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="971.7" y="590.0"></text>
</g>
<g>
<title>try_to_wake_up (28 samples, 0.73%)</title><rect x="968.7" y="563.0" width="8.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="971.7" y="574.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (28 samples, 0.73%)</title><rect x="968.7" y="547.0" width="8.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="971.7" y="558.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.03%)</title><rect x="977.4" y="595.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="980.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (34 samples, 0.89%)</title><rect x="977.7" y="835.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="980.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (34 samples, 0.89%)</title><rect x="977.7" y="819.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="980.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (19 samples, 0.50%)</title><rect x="977.7" y="803.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="980.7" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.10%)</title><rect x="982.3" y="787.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="985.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (15 samples, 0.39%)</title><rect x="983.5" y="803.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="986.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (15 samples, 0.39%)</title><rect x="983.5" y="787.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="986.5" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (15 samples, 0.39%)</title><rect x="983.5" y="771.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="986.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.18%)</title><rect x="986.0" y="755.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="989.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (44 samples, 1.15%)</title><rect x="988.2" y="867.0" width="13.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="991.2" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.05%)</title><rect x="988.8" y="851.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="991.8" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="989.1" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="992.1" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="989.1" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="992.1" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="989.1" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.1" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="989.1" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.1" y="798.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="989.1" y="771.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.1" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (32 samples, 0.84%)</title><rect x="989.4" y="851.0" width="9.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="992.4" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 0.76%)</title><rect x="990.0" y="835.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="993.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="998.1" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1001.1" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="998.1" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.1" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="998.1" y="787.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.1" y="798.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (1 samples, 0.03%)</title><rect x="998.1" y="771.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.1" y="782.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="998.4" y="819.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1001.4" y="830.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="998.4" y="803.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1001.4" y="814.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="998.4" y="787.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1001.4" y="798.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="998.4" y="771.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1001.4" y="782.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="998.4" y="755.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1001.4" y="766.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="998.4" y="739.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1001.4" y="750.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="998.4" y="723.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1001.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="998.7" y="819.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1001.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="998.7" y="803.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1001.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.03%)</title><rect x="998.7" y="787.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1001.7" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="998.7" y="771.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.7" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="998.7" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.7" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="998.7" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1001.7" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="998.7" y="723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.7" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="998.7" y="707.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.7" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="999.0" y="835.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1002.0" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="999.0" y="819.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1002.0" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="999.0" y="803.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1002.0" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (8 samples, 0.21%)</title><rect x="999.3" y="851.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1002.3" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.08%)</title><rect x="1001.8" y="867.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1004.8" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1002.4" y="851.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1005.4" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1002.4" y="835.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.4" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1002.4" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1005.4" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1002.4" y="803.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.4" y="814.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="1002.4" y="787.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (30 samples, 0.79%)</title><rect x="1002.7" y="867.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1005.7" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (25 samples, 0.65%)</title><rect x="1003.3" y="851.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1006.3" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (25 samples, 0.65%)</title><rect x="1003.3" y="835.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1006.3" y="846.0"></text>
</g>
<g>
<title>jbyte_arraycopy (5 samples, 0.13%)</title><rect x="1008.9" y="819.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1011.9" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="1010.4" y="819.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1013.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.08%)</title><rect x="1011.1" y="851.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1014.1" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.08%)</title><rect x="1011.1" y="835.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1014.1" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1011.1" y="819.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1014.1" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.05%)</title><rect x="1011.4" y="819.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1014.4" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1011.4" y="803.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1011.4" y="787.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.4" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1011.4" y="771.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.4" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1011.4" y="755.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1014.4" y="766.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.03%)</title><rect x="1011.4" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.4" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="1011.4" y="723.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1014.4" y="734.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="1011.4" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1014.4" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1011.7" y="803.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1014.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (27 samples, 0.71%)</title><rect x="1012.0" y="867.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1015.0" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.08%)</title><rect x="1013.2" y="851.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1016.2" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (20 samples, 0.52%)</title><rect x="1014.1" y="851.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1017.1" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1020.0" y="835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1023.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1020.0" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1023.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1020.0" y="803.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1023.0" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1020.0" y="787.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1023.0" y="798.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="1020.0" y="771.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1023.0" y="782.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.03%)</title><rect x="1020.0" y="755.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1023.0" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.08%)</title><rect x="1020.3" y="883.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1023.3" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.05%)</title><rect x="1020.6" y="867.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1023.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (330 samples, 8.64%)</title><rect x="1021.3" y="883.0" width="101.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1024.3" y="894.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (316 samples, 8.28%)</title><rect x="1022.2" y="867.0" width="97.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1025.2" y="878.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (39 samples, 1.02%)</title><rect x="1024.7" y="851.0" width="12.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1027.7" y="862.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.08%)</title><rect x="1025.6" y="835.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1028.6" y="846.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="1026.5" y="835.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.5" y="846.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.03%)</title><rect x="1027.1" y="835.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.1" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (2 samples, 0.05%)</title><rect x="1027.4" y="835.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.4" y="846.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (8 samples, 0.21%)</title><rect x="1028.1" y="835.0" width="2.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1031.1" y="846.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (15 samples, 0.39%)</title><rect x="1030.5" y="835.0" width="4.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1033.5" y="846.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.10%)</title><rect x="1032.1" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1035.1" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (6 samples, 0.16%)</title><rect x="1033.3" y="819.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.3" y="830.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (5 samples, 0.13%)</title><rect x="1035.2" y="835.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1038.2" y="846.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.08%)</title><rect x="1036.7" y="851.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1039.7" y="862.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (5 samples, 0.13%)</title><rect x="1037.6" y="851.0" width="1.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1040.6" y="862.0"></text>
</g>
<g>
<title>__recv (256 samples, 6.71%)</title><rect x="1039.2" y="851.0" width="79.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1042.2" y="862.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (180 samples, 4.71%)</title><rect x="1062.7" y="835.0" width="55.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1065.7" y="846.0">entry..</text>
</g>
<g>
<title>__x64_sys_recvfrom (2 samples, 0.05%)</title><rect x="1062.7" y="819.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1065.7" y="830.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="1063.3" y="819.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1066.3" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (177 samples, 4.64%)</title><rect x="1063.6" y="819.0" width="54.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1066.6" y="830.0">do_sy..</text>
</g>
<g>
<title>__sys_recvfrom (4 samples, 0.10%)</title><rect x="1070.4" y="803.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1073.4" y="814.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (151 samples, 3.95%)</title><rect x="1071.6" y="803.0" width="46.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1074.6" y="814.0">__x6..</text>
</g>
<g>
<title>__sys_recvfrom (144 samples, 3.77%)</title><rect x="1071.6" y="787.0" width="44.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1074.6" y="798.0">__sy..</text>
</g>
<g>
<title>__fdget (1 samples, 0.03%)</title><rect x="1073.5" y="771.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1076.5" y="782.0"></text>
</g>
<g>
<title>fput (2 samples, 0.05%)</title><rect x="1073.8" y="771.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1076.8" y="782.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.05%)</title><rect x="1073.8" y="755.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1076.8" y="766.0"></text>
</g>
<g>
<title>sock_recvmsg (120 samples, 3.14%)</title><rect x="1074.4" y="771.0" width="37.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1077.4" y="782.0">soc..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.05%)</title><rect x="1074.7" y="755.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1077.7" y="766.0"></text>
</g>
<g>
<title>inet6_recvmsg (91 samples, 2.38%)</title><rect x="1075.3" y="755.0" width="28.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1078.3" y="766.0">in..</text>
</g>
<g>
<title>tcp_recvmsg (90 samples, 2.36%)</title><rect x="1075.6" y="739.0" width="27.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1078.6" y="750.0">t..</text>
</g>
<g>
<title>__kfree_skb (26 samples, 0.68%)</title><rect x="1078.4" y="723.0" width="8.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1081.4" y="734.0"></text>
</g>
<g>
<title>skb_release_all (25 samples, 0.65%)</title><rect x="1078.4" y="707.0" width="7.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1081.4" y="718.0"></text>
</g>
<g>
<title>dst_release (2 samples, 0.05%)</title><rect x="1078.4" y="691.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1081.4" y="702.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.08%)</title><rect x="1079.0" y="691.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1082.0" y="702.0"></text>
</g>
<g>
<title>skb_release_head_state (18 samples, 0.47%)</title><rect x="1080.0" y="691.0" width="5.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1083.0" y="702.0"></text>
</g>
<g>
<title>dst_release (12 samples, 0.31%)</title><rect x="1080.6" y="675.0" width="3.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1083.6" y="686.0"></text>
</g>
<g>
<title>sock_rfree (4 samples, 0.10%)</title><rect x="1084.3" y="675.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1087.3" y="686.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.05%)</title><rect x="1085.5" y="691.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1088.5" y="702.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.03%)</title><rect x="1086.2" y="707.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1089.2" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="1086.5" y="723.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1089.5" y="734.0"></text>
</g>
<g>
<title>lock_sock_nested (5 samples, 0.13%)</title><rect x="1086.8" y="723.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1089.8" y="734.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.13%)</title><rect x="1086.8" y="707.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1089.8" y="718.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.13%)</title><rect x="1088.3" y="723.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1091.3" y="734.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.05%)</title><rect x="1088.6" y="707.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1091.6" y="718.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.03%)</title><rect x="1089.2" y="707.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1092.2" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="1089.2" y="691.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1092.2" y="702.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="1089.6" y="707.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1092.6" y="718.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (33 samples, 0.86%)</title><rect x="1089.9" y="723.0" width="10.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1092.9" y="734.0"></text>
</g>
<g>
<title>__skb_datagram_iter (33 samples, 0.86%)</title><rect x="1089.9" y="707.0" width="10.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1092.9" y="718.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="1094.5" y="691.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1097.5" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (17 samples, 0.45%)</title><rect x="1094.8" y="691.0" width="5.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1097.8" y="702.0"></text>
</g>
<g>
<title>__check_object_size (1 samples, 0.03%)</title><rect x="1094.8" y="675.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1097.8" y="686.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.03%)</title><rect x="1094.8" y="659.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1097.8" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.05%)</title><rect x="1095.1" y="675.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1098.1" y="686.0"></text>
</g>
<g>
<title>_copy_to_iter (13 samples, 0.34%)</title><rect x="1095.7" y="675.0" width="4.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1098.7" y="686.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (10 samples, 0.26%)</title><rect x="1096.0" y="659.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1099.0" y="670.0"></text>
</g>
<g>
<title>copyout (2 samples, 0.05%)</title><rect x="1099.1" y="659.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1102.1" y="670.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.03%)</title><rect x="1099.8" y="675.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1102.8" y="686.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (4 samples, 0.10%)</title><rect x="1100.1" y="723.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1103.1" y="734.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (7 samples, 0.18%)</title><rect x="1101.3" y="723.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1104.3" y="734.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.13%)</title><rect x="1101.9" y="707.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1104.9" y="718.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.10%)</title><rect x="1101.9" y="691.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1104.9" y="702.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.08%)</title><rect x="1102.2" y="675.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1105.2" y="686.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.03%)</title><rect x="1103.2" y="691.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1106.2" y="702.0"></text>
</g>
<g>
<title>security_socket_recvmsg (25 samples, 0.65%)</title><rect x="1103.5" y="755.0" width="7.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1106.5" y="766.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (12 samples, 0.31%)</title><rect x="1104.4" y="739.0" width="3.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1107.4" y="750.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (12 samples, 0.31%)</title><rect x="1104.4" y="723.0" width="3.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1107.4" y="734.0"></text>
</g>
<g>
<title>aa_sk_perm (10 samples, 0.26%)</title><rect x="1105.0" y="707.0" width="3.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1108.0" y="718.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (9 samples, 0.24%)</title><rect x="1108.1" y="739.0" width="2.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1111.1" y="750.0"></text>
</g>
<g>
<title>sock_has_perm (9 samples, 0.24%)</title><rect x="1108.1" y="723.0" width="2.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1111.1" y="734.0"></text>
</g>
<g>
<title>sock_has_perm (1 samples, 0.03%)</title><rect x="1110.9" y="739.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1113.9" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.03%)</title><rect x="1111.2" y="755.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1114.2" y="766.0"></text>
</g>
<g>
<title>sockfd_lookup_light (15 samples, 0.39%)</title><rect x="1111.5" y="771.0" width="4.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1114.5" y="782.0"></text>
</g>
<g>
<title>__fdget (11 samples, 0.29%)</title><rect x="1111.8" y="755.0" width="3.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1114.8" y="766.0"></text>
</g>
<g>
<title>__fget_light (11 samples, 0.29%)</title><rect x="1111.8" y="739.0" width="3.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1114.8" y="750.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.24%)</title><rect x="1112.4" y="723.0" width="2.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1115.4" y="734.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.08%)</title><rect x="1115.2" y="755.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1118.2" y="766.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="1116.1" y="787.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1119.1" y="798.0"></text>
</g>
<g>
<title>import_single_range (4 samples, 0.10%)</title><rect x="1116.4" y="787.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1119.4" y="798.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.05%)</title><rect x="1117.7" y="787.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1120.7" y="798.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.10%)</title><rect x="1118.3" y="851.0" width="1.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1121.3" y="862.0"></text>
</g>
<g>
<title>recv@plt (1 samples, 0.03%)</title><rect x="1119.5" y="851.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1122.5" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (11 samples, 0.29%)</title><rect x="1119.8" y="867.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1122.8" y="878.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1122.3" y="851.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1125.3" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="1122.6" y="851.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.6" y="862.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="1122.6" y="835.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1125.6" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="1122.6" y="819.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1125.6" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.08%)</title><rect x="1123.2" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.2" y="926.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="1123.6" y="899.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1126.6" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="1123.6" y="883.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1126.6" y="894.0"></text>
</g>
<g>
<title>start_thread (213 samples, 5.58%)</title><rect x="1124.2" y="931.0" width="65.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1127.2" y="942.0">start_t..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (213 samples, 5.58%)</title><rect x="1124.2" y="915.0" width="65.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1127.2" y="926.0">thread_..</text>
</g>
<g>
<title>Thread::call_run() (213 samples, 5.58%)</title><rect x="1124.2" y="899.0" width="65.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.2" y="910.0">Thread:..</text>
</g>
<g>
<title>GangWorker::loop() (210 samples, 5.50%)</title><rect x="1124.2" y="883.0" width="64.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.2" y="894.0">GangWor..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (12 samples, 0.31%)</title><rect x="1124.2" y="867.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.2" y="878.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (12 samples, 0.31%)</title><rect x="1124.2" y="851.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.2" y="862.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (4 samples, 0.10%)</title><rect x="1124.5" y="835.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.5" y="846.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.149] (3 samples, 0.08%)</title><rect x="1124.5" y="819.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.5" y="830.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (1 samples, 0.03%)</title><rect x="1124.8" y="803.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.8" y="814.0"></text>
</g>
<g>
<title>__GI___getrusage (1 samples, 0.03%)</title><rect x="1124.8" y="787.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1127.8" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1124.8" y="771.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1127.8" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1124.8" y="755.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1127.8" y="766.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.03%)</title><rect x="1125.1" y="803.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.1" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1125.1" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.1" y="798.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.03%)</title><rect x="1125.1" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.1" y="782.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.03%)</title><rect x="1125.4" y="819.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.4" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1125.4" y="803.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.4" y="814.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.03%)</title><rect x="1125.4" y="787.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.4" y="798.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.149] (7 samples, 0.18%)</title><rect x="1125.7" y="835.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.7" y="846.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (7 samples, 0.18%)</title><rect x="1125.7" y="819.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.7" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (7 samples, 0.18%)</title><rect x="1125.7" y="803.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.7" y="814.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (5 samples, 0.13%)</title><rect x="1126.3" y="787.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.3" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (189 samples, 4.95%)</title><rect x="1127.9" y="867.0" width="58.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.9" y="878.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (31 samples, 0.81%)</title><rect x="1127.9" y="851.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.9" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.03%)</title><rect x="1128.8" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.8" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (26 samples, 0.68%)</title><rect x="1129.1" y="835.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.1" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (8 samples, 0.21%)</title><rect x="1134.7" y="819.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.7" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1136.8" y="803.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.8" y="814.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.03%)</title><rect x="1137.2" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.2" y="846.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1137.2" y="819.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1140.2" y="830.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (148 samples, 3.88%)</title><rect x="1137.5" y="851.0" width="45.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.5" y="862.0">G1Re..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (148 samples, 3.88%)</title><rect x="1137.5" y="835.0" width="45.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.5" y="846.0">G1Re..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (146 samples, 3.82%)</title><rect x="1137.5" y="819.0" width="45.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.5" y="830.0">G1Co..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (146 samples, 3.82%)</title><rect x="1137.5" y="803.0" width="45.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.5" y="814.0">Dirt..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.03%)</title><rect x="1137.5" y="787.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.5" y="798.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (145 samples, 3.80%)</title><rect x="1137.8" y="787.0" width="44.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.8" y="798.0">G1Re..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.03%)</title><rect x="1137.8" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.8" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (93 samples, 2.44%)</title><rect x="1138.1" y="771.0" width="28.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.1" y="782.0">G1..</text>
</g>
<g>
<title>G1CardTable::mark_card_deferred(unsigned long) (2 samples, 0.05%)</title><rect x="1151.1" y="755.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.1" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (48 samples, 1.26%)</title><rect x="1151.7" y="755.0" width="14.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.7" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (12 samples, 0.31%)</title><rect x="1162.5" y="739.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.5" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1166.2" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.2" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1166.5" y="755.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.5" y="766.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (51 samples, 1.34%)</title><rect x="1166.8" y="771.0" width="15.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.8" y="782.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (50 samples, 1.31%)</title><rect x="1167.1" y="755.0" width="15.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.1" y="766.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (18 samples, 0.47%)</title><rect x="1168.1" y="739.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.1" y="750.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (10 samples, 0.26%)</title><rect x="1169.9" y="723.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="734.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (5 samples, 0.13%)</title><rect x="1170.5" y="707.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.5" y="718.0"></text>
</g>
<g>
<title>oopDesc::size() (2 samples, 0.05%)</title><rect x="1172.1" y="707.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.1" y="718.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.03%)</title><rect x="1172.7" y="707.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.7" y="718.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1173.0" y="723.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.0" y="734.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.03%)</title><rect x="1173.3" y="723.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="734.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.05%)</title><rect x="1173.6" y="739.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.6" y="750.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.577] (2 samples, 0.05%)</title><rect x="1174.2" y="739.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.2" y="750.0"></text>
</g>
<g>
<title>oopDesc::size() (7 samples, 0.18%)</title><rect x="1174.9" y="739.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.9" y="750.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (5 samples, 0.13%)</title><rect x="1177.0" y="739.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.0" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBoundedDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate_bounded&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*, MemRegion) (2 samples, 0.05%)</title><rect x="1178.6" y="739.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="750.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.05%)</title><rect x="1178.6" y="723.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.6" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (11 samples, 0.29%)</title><rect x="1179.2" y="739.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.2" y="750.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (4 samples, 0.10%)</title><rect x="1181.3" y="723.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="734.0"></text>
</g>
<g>
<title>G1EvacPhaseTimesTracker::~G1EvacPhaseTimesTracker() (1 samples, 0.03%)</title><rect x="1182.6" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="830.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(CardTableEntryClosure*, unsigned int) (1 samples, 0.03%)</title><rect x="1182.9" y="819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.10%)</title><rect x="1183.2" y="851.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="862.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.10%)</title><rect x="1183.2" y="835.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="846.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (4 samples, 0.10%)</title><rect x="1183.2" y="819.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="830.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (4 samples, 0.10%)</title><rect x="1183.2" y="803.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.2" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (4 samples, 0.10%)</title><rect x="1183.2" y="787.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.2" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.05%)</title><rect x="1183.8" y="771.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.05%)</title><rect x="1183.8" y="755.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (6 samples, 0.16%)</title><rect x="1184.4" y="851.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="862.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (2 samples, 0.05%)</title><rect x="1184.4" y="835.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.10%)</title><rect x="1185.1" y="835.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.1" y="846.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (4 samples, 0.10%)</title><rect x="1185.1" y="819.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.1" y="830.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.08%)</title><rect x="1185.4" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.4" y="814.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.03%)</title><rect x="1185.4" y="787.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="798.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.03%)</title><rect x="1185.4" y="771.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.4" y="782.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (2 samples, 0.05%)</title><rect x="1185.7" y="787.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="798.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (2 samples, 0.05%)</title><rect x="1185.7" y="771.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="782.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="1185.7" y="755.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.7" y="766.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.03%)</title><rect x="1186.0" y="755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="766.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (6 samples, 0.16%)</title><rect x="1186.3" y="867.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="878.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (6 samples, 0.16%)</title><rect x="1186.3" y="851.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.3" y="862.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (4 samples, 0.10%)</title><rect x="1186.3" y="835.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.3" y="846.0"></text>
</g>
<g>
<title>MarkBitMap::get_next_marked_addr(HeapWord const*, HeapWord const*) const (1 samples, 0.03%)</title><rect x="1186.3" y="819.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.3" y="830.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.233] (1 samples, 0.03%)</title><rect x="1186.6" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (2 samples, 0.05%)</title><rect x="1186.9" y="819.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="830.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.233] (1 samples, 0.03%)</title><rect x="1187.2" y="803.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.2" y="814.0"></text>
</g>
<g>
<title>MarkBitMap::get_next_marked_addr(HeapWord const*, HeapWord const*) const (1 samples, 0.03%)</title><rect x="1187.5" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.5" y="846.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1187.8" y="835.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.8" y="846.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1188.1" y="867.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.1" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::par_apply_closure_to_all_completed_buffers(CardTableEntryClosure*) (1 samples, 0.03%)</title><rect x="1188.1" y="851.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.1" y="862.0"></text>
</g>
<g>
<title>RedirtyLoggedCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.03%)</title><rect x="1188.1" y="835.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.1" y="846.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1188.5" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.5" y="878.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (1 samples, 0.03%)</title><rect x="1188.5" y="851.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.5" y="862.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="1188.5" y="835.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1191.5" y="846.0"></text>
</g>
<g>
<title>GCIdMark::GCIdMark(unsigned int) (1 samples, 0.03%)</title><rect x="1188.8" y="867.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="878.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.08%)</title><rect x="1189.1" y="883.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.1" y="894.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.08%)</title><rect x="1189.1" y="867.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.1" y="878.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.63] (2 samples, 0.05%)</title><rect x="1189.1" y="851.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.1" y="862.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.05%)</title><rect x="1189.1" y="835.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="846.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.05%)</title><rect x="1189.1" y="819.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.1" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.05%)</title><rect x="1189.1" y="803.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*) (1 samples, 0.03%)</title><rect x="1189.1" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.1" y="798.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (1 samples, 0.03%)</title><rect x="1189.1" y="771.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.1" y="782.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.03%)</title><rect x="1189.1" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.1" y="766.0"></text>
</g>
<g>
<title>__new_sem_post (1 samples, 0.03%)</title><rect x="1189.1" y="739.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1192.1" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1189.1" y="723.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1192.1" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1189.1" y="707.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1192.1" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1189.1" y="691.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1192.1" y="702.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1189.1" y="675.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1192.1" y="686.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1189.1" y="659.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1192.1" y="670.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="1189.1" y="643.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1192.1" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="1189.1" y="627.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1192.1" y="638.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="1189.1" y="611.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1192.1" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, EvacuationInfo&amp;, unsigned long const*) (1 samples, 0.03%)</title><rect x="1189.4" y="787.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.4" y="798.0"></text>
</g>
<g>
<title>SurvRateGroup::all_surviving_words_recorded(G1Predictions const&amp;, bool) (1 samples, 0.03%)</title><rect x="1189.4" y="771.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.4" y="782.0"></text>
</g>
<g>
<title>TruncatedSeq::add(double) (1 samples, 0.03%)</title><rect x="1189.4" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.4" y="766.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.03%)</title><rect x="1189.7" y="851.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1192.7" y="862.0"></text>
</g>
</g>
</svg>
