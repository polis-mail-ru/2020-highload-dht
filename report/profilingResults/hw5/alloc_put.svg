<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="469"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="469"> </text>
<g id="frames">
<g>
<title>all (616,910 samples, 100.00%)</title><rect x="10.0" y="435.0" width="1180.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="446.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (391,843 samples, 63.52%)</title><rect x="10.0" y="419.0" width="749.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="430.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (391,843 samples, 63.52%)</title><rect x="10.0" y="403.0" width="749.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="414.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (391,843 samples, 63.52%)</title><rect x="10.0" y="387.0" width="749.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="398.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6,469 samples, 1.05%)</title><rect x="10.0" y="371.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (6,469 samples, 1.05%)</title><rect x="10.0" y="355.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (6,296 samples, 1.02%)</title><rect x="10.0" y="339.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (6,296 samples, 1.02%)</title><rect x="10.0" y="323.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (6,296 samples, 1.02%)</title><rect x="10.0" y="307.0" width="12.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (173 samples, 0.03%)</title><rect x="22.0" y="339.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (173 samples, 0.03%)</title><rect x="22.0" y="323.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (173 samples, 0.03%)</title><rect x="22.0" y="307.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (173 samples, 0.03%)</title><rect x="22.0" y="291.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.0" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (173 samples, 0.03%)</title><rect x="22.0" y="275.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="25.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/1493404285.run (385,374 samples, 62.47%)</title><rect x="22.4" y="371.0" width="737.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.4" y="382.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/1493404285.run</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$4 (385,374 samples, 62.47%)</title><rect x="22.4" y="355.0" width="737.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.4" y="366.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$4</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.process (385,374 samples, 62.47%)</title><rect x="22.4" y="339.0" width="737.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.4" y="350.0">ru/mail/polis/service/zvladn7/AsyncService.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1553196913.process (385,374 samples, 62.47%)</title><rect x="22.4" y="323.0" width="737.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.4" y="334.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1553196913.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$upsert$3 (385,374 samples, 62.47%)</title><rect x="22.4" y="307.0" width="737.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.4" y="318.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$upsert$3</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.handleUpsert (385,374 samples, 62.47%)</title><rect x="22.4" y="291.0" width="737.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.4" y="302.0">ru/mail/polis/service/zvladn7/ServiceHelper.handleUpsert</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2,449 samples, 0.40%)</title><rect x="22.4" y="275.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.4" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,449 samples, 0.40%)</title><rect x="22.4" y="259.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$110/1140211891.get$Lambda (2,449 samples, 0.40%)</title><rect x="22.4" y="243.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.4" y="254.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.ServiceHelper$$Lambda$110 (2,449 samples, 0.40%)</title><rect x="22.4" y="227.0" width="4.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="25.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.handleOrProxy (366,599 samples, 59.43%)</title><rect x="27.1" y="275.0" width="701.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.1" y="286.0">ru/mail/polis/service/zvladn7/ServiceHelper.handleOrProxy</text>
</g>
<g>
<title>java/util/AbstractCollection.toString (57,125 samples, 9.26%)</title><rect x="27.1" y="259.0" width="109.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.1" y="270.0">java/util/Abs..</text>
</g>
<g>
<title>java.lang.StringBuilder (3,817 samples, 0.62%)</title><rect x="27.1" y="243.0" width="7.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="30.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (4,919 samples, 0.80%)</title><rect x="34.4" y="243.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="37.4" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (4,919 samples, 0.80%)</title><rect x="34.4" y="227.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.4" y="238.0"></text>
</g>
<g>
<title>byte[] (4,919 samples, 0.80%)</title><rect x="34.4" y="211.0" width="9.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="37.4" y="222.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (22,013 samples, 3.57%)</title><rect x="43.8" y="243.0" width="42.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="46.8" y="254.0">java..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (22,013 samples, 3.57%)</title><rect x="43.8" y="227.0" width="42.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.8" y="238.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (22,013 samples, 3.57%)</title><rect x="43.8" y="211.0" width="42.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.8" y="222.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (22,013 samples, 3.57%)</title><rect x="43.8" y="195.0" width="42.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="46.8" y="206.0">java..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (22,013 samples, 3.57%)</title><rect x="43.8" y="179.0" width="42.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.8" y="190.0">java..</text>
</g>
<g>
<title>byte[] (18,994 samples, 3.08%)</title><rect x="43.8" y="163.0" width="36.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="46.8" y="174.0">byt..</text>
</g>
<g>
<title>byte[] (3,019 samples, 0.49%)</title><rect x="80.1" y="163.0" width="5.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="83.1" y="174.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (17,986 samples, 2.92%)</title><rect x="85.9" y="243.0" width="34.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.9" y="254.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (17,986 samples, 2.92%)</title><rect x="85.9" y="227.0" width="34.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.9" y="238.0">ja..</text>
</g>
<g>
<title>java.lang.String (3,061 samples, 0.50%)</title><rect x="85.9" y="211.0" width="5.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="88.9" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (14,925 samples, 2.42%)</title><rect x="91.7" y="211.0" width="28.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="94.7" y="222.0">ja..</text>
</g>
<g>
<title>byte[] (13,199 samples, 2.14%)</title><rect x="91.7" y="195.0" width="25.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="94.7" y="206.0">b..</text>
</g>
<g>
<title>byte[] (1,726 samples, 0.28%)</title><rect x="117.0" y="195.0" width="3.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="120.0" y="206.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (8,390 samples, 1.36%)</title><rect x="120.3" y="243.0" width="16.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.3" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (6,169 samples, 1.00%)</title><rect x="120.3" y="227.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.3" y="238.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (6,169 samples, 1.00%)</title><rect x="120.3" y="211.0" width="11.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="123.3" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2,221 samples, 0.36%)</title><rect x="132.1" y="227.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="135.1" y="238.0"></text>
</g>
<g>
<title>java.util.HashMap$KeySet (2,221 samples, 0.36%)</title><rect x="132.1" y="211.0" width="4.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="135.1" y="222.0"></text>
</g>
<g>
<title>java/util/Collection.stream (692 samples, 0.11%)</title><rect x="136.3" y="259.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.3" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.spliterator (247 samples, 0.04%)</title><rect x="136.3" y="243.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.3" y="254.0"></text>
</g>
<g>
<title>java.util.ArrayList$ArrayListSpliterator (247 samples, 0.04%)</title><rect x="136.3" y="227.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="139.3" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (445 samples, 0.07%)</title><rect x="136.8" y="243.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="139.8" y="254.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (445 samples, 0.07%)</title><rect x="136.8" y="227.0" width="0.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="139.8" y="238.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (284 samples, 0.05%)</title><rect x="137.6" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="140.6" y="270.0"></text>
</g>
<g>
<title>java.util.stream.Collectors$CollectorImpl (284 samples, 0.05%)</title><rect x="137.6" y="243.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="140.6" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1,760 samples, 0.29%)</title><rect x="138.2" y="259.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.2" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1,395 samples, 0.23%)</title><rect x="138.2" y="243.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="141.2" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1,395 samples, 0.23%)</title><rect x="138.2" y="227.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.2" y="238.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1,068 samples, 0.17%)</title><rect x="138.2" y="211.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="141.2" y="222.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (823 samples, 0.13%)</title><rect x="138.2" y="195.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.2" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (589 samples, 0.10%)</title><rect x="138.2" y="179.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.2" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (589 samples, 0.10%)</title><rect x="138.2" y="163.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="141.2" y="174.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (589 samples, 0.10%)</title><rect x="138.2" y="147.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.2" y="158.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$131/202169536.accept (589 samples, 0.10%)</title><rect x="138.2" y="131.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.2" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (589 samples, 0.10%)</title><rect x="138.2" y="115.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="141.2" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (589 samples, 0.10%)</title><rect x="138.2" y="99.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.2" y="110.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (589 samples, 0.10%)</title><rect x="138.2" y="83.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="141.2" y="94.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (589 samples, 0.10%)</title><rect x="138.2" y="67.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="141.2" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (589 samples, 0.10%)</title><rect x="138.2" y="51.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="141.2" y="62.0"></text>
</g>
<g>
<title>java.lang.Object[] (589 samples, 0.10%)</title><rect x="138.2" y="35.0" width="1.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="141.2" y="46.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (234 samples, 0.04%)</title><rect x="139.3" y="179.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="142.3" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (234 samples, 0.04%)</title><rect x="139.3" y="163.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="142.3" y="174.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$130/1911790067.get (234 samples, 0.04%)</title><rect x="139.3" y="147.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.3" y="158.0"></text>
</g>
<g>
<title>java.util.ArrayList (234 samples, 0.04%)</title><rect x="139.3" y="131.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="142.3" y="142.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (245 samples, 0.04%)</title><rect x="139.8" y="195.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="142.8" y="206.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (245 samples, 0.04%)</title><rect x="139.8" y="179.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.8" y="190.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2$1 (245 samples, 0.04%)</title><rect x="139.8" y="163.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="142.8" y="174.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (327 samples, 0.05%)</title><rect x="140.2" y="211.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="143.2" y="222.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (327 samples, 0.05%)</title><rect x="140.2" y="195.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.2" y="206.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3ReducingSink (327 samples, 0.05%)</title><rect x="140.2" y="179.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="143.2" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps.makeRef (365 samples, 0.06%)</title><rect x="140.9" y="243.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.9" y="254.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3 (365 samples, 0.06%)</title><rect x="140.9" y="227.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="143.9" y="238.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (579 samples, 0.09%)</title><rect x="141.6" y="259.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.6" y="270.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2 (579 samples, 0.09%)</title><rect x="141.6" y="243.0" width="1.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="144.6" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15,365 samples, 2.49%)</title><rect x="142.7" y="259.0" width="29.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.7" y="270.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15,365 samples, 2.49%)</title><rect x="142.7" y="243.0" width="29.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.7" y="254.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10,431 samples, 1.69%)</title><rect x="142.7" y="227.0" width="19.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="145.7" y="238.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (10,431 samples, 1.69%)</title><rect x="142.7" y="211.0" width="19.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="145.7" y="222.0"></text>
</g>
<g>
<title>byte[] (8,473 samples, 1.37%)</title><rect x="142.7" y="195.0" width="16.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="145.7" y="206.0"></text>
</g>
<g>
<title>byte[] (1,958 samples, 0.32%)</title><rect x="158.9" y="195.0" width="3.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="161.9" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4,934 samples, 0.80%)</title><rect x="162.6" y="227.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="165.6" y="238.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (4,934 samples, 0.80%)</title><rect x="162.6" y="211.0" width="9.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="165.6" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8,977 samples, 1.46%)</title><rect x="172.1" y="259.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (8,977 samples, 1.46%)</title><rect x="172.1" y="243.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8,977 samples, 1.46%)</title><rect x="172.1" y="227.0" width="17.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="175.1" y="238.0"></text>
</g>
<g>
<title>java.lang.String (3,268 samples, 0.53%)</title><rect x="172.1" y="211.0" width="6.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="175.1" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5,709 samples, 0.93%)</title><rect x="178.3" y="211.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="181.3" y="222.0"></text>
</g>
<g>
<title>byte[] (5,709 samples, 0.93%)</title><rect x="178.3" y="195.0" width="10.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="181.3" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8,962 samples, 1.45%)</title><rect x="189.2" y="259.0" width="17.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (8,962 samples, 1.45%)</title><rect x="189.2" y="243.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="192.2" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8,962 samples, 1.45%)</title><rect x="189.2" y="227.0" width="17.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="192.2" y="238.0"></text>
</g>
<g>
<title>java.lang.String (3,437 samples, 0.56%)</title><rect x="189.2" y="211.0" width="6.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="192.2" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5,525 samples, 0.90%)</title><rect x="195.8" y="211.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.8" y="222.0"></text>
</g>
<g>
<title>byte[] (5,525 samples, 0.90%)</title><rect x="195.8" y="195.0" width="10.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="198.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$102/1040244136.execute (55,865 samples, 9.06%)</title><rect x="206.4" y="259.0" width="106.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.4" y="270.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.lambda$handleUpsert$4 (55,865 samples, 9.06%)</title><rect x="206.4" y="243.0" width="106.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.4" y="254.0">ru/mail/polis..</text>
</g>
<g>
<title>one.nio.http.Response (3,884 samples, 0.63%)</title><rect x="206.4" y="227.0" width="7.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="209.4" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (13,896 samples, 2.25%)</title><rect x="213.8" y="227.0" width="26.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.8" y="238.0">o..</text>
</g>
<g>
<title>byte[] (6,069 samples, 0.98%)</title><rect x="213.8" y="211.0" width="11.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="216.8" y="222.0"></text>
</g>
<g>
<title>java.lang.String[] (4,724 samples, 0.77%)</title><rect x="225.4" y="211.0" width="9.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="228.4" y="222.0"></text>
</g>
<g>
<title>java.lang.String (3,103 samples, 0.50%)</title><rect x="234.4" y="211.0" width="6.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="237.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.upsert (31,615 samples, 5.12%)</title><rect x="240.4" y="227.0" width="60.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.4" y="238.0">ru/mai..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4,463 samples, 0.72%)</title><rect x="240.4" y="211.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.4" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4,463 samples, 0.72%)</title><rect x="240.4" y="195.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$116/1748414627.get$Lambda (4,463 samples, 0.72%)</title><rect x="240.4" y="179.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="243.4" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$116 (4,463 samples, 0.72%)</title><rect x="240.4" y="163.0" width="8.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="243.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.execute (27,152 samples, 4.40%)</title><rect x="248.9" y="211.0" width="51.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.9" y="222.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (718 samples, 0.12%)</title><rect x="248.9" y="195.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (718 samples, 0.12%)</title><rect x="248.9" y="179.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (718 samples, 0.12%)</title><rect x="248.9" y="163.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.9" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (648 samples, 0.11%)</title><rect x="248.9" y="147.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.9" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (648 samples, 0.11%)</title><rect x="248.9" y="131.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.9" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (364 samples, 0.06%)</title><rect x="248.9" y="115.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="251.9" y="126.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (364 samples, 0.06%)</title><rect x="248.9" y="99.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="251.9" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (284 samples, 0.05%)</title><rect x="249.6" y="115.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (284 samples, 0.05%)</title><rect x="249.6" y="99.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.6" y="110.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (284 samples, 0.05%)</title><rect x="249.6" y="83.0" width="0.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="252.6" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$116/1748414627.run (26,434 samples, 4.28%)</title><rect x="250.3" y="195.0" width="50.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.3" y="206.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$upsert$5 (26,434 samples, 4.28%)</title><rect x="250.3" y="179.0" width="50.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.3" y="190.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.upsert (26,434 samples, 4.28%)</title><rect x="250.3" y="163.0" width="50.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="253.3" y="174.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (15,438 samples, 2.50%)</title><rect x="250.3" y="147.0" width="29.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.3" y="158.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (15,438 samples, 2.50%)</title><rect x="250.3" y="131.0" width="29.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="253.3" y="142.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (1,383 samples, 0.22%)</title><rect x="279.8" y="147.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1,383 samples, 0.22%)</title><rect x="279.8" y="131.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="282.8" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Index (439 samples, 0.07%)</title><rect x="279.8" y="115.0" width="0.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="282.8" y="126.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Node (944 samples, 0.15%)</title><rect x="280.7" y="115.0" width="1.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="283.7" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (4,169 samples, 0.68%)</title><rect x="282.5" y="147.0" width="7.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="285.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (5,444 samples, 0.88%)</title><rect x="290.4" y="147.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.4" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5,444 samples, 0.88%)</title><rect x="290.4" y="131.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.4" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5,444 samples, 0.88%)</title><rect x="290.4" y="115.0" width="10.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="293.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.wrapArray (6,470 samples, 1.05%)</title><rect x="300.8" y="227.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6,470 samples, 1.05%)</title><rect x="300.8" y="211.0" width="12.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6,470 samples, 1.05%)</title><rect x="300.8" y="195.0" width="12.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="303.8" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,470 samples, 1.05%)</title><rect x="300.8" y="179.0" width="12.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="303.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$110/1140211891.resolve (3,108 samples, 0.50%)</title><rect x="313.2" y="259.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.lambda$handleUpsert$5 (3,108 samples, 0.50%)</title><rect x="313.2" y="243.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ConflictResolver.resolveChangesAndSend (3,108 samples, 0.50%)</title><rect x="313.2" y="227.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.2" y="238.0"></text>
</g>
<g>
<title>one.nio.http.Response (267 samples, 0.04%)</title><rect x="313.2" y="211.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="316.2" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,740 samples, 0.28%)</title><rect x="313.7" y="211.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.7" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,740 samples, 0.28%)</title><rect x="313.7" y="195.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.7" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,179 samples, 0.19%)</title><rect x="313.7" y="179.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.7" y="190.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,179 samples, 0.19%)</title><rect x="313.7" y="163.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.7" y="174.0"></text>
</g>
<g>
<title>byte[] (1,179 samples, 0.19%)</title><rect x="313.7" y="147.0" width="2.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="316.7" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (561 samples, 0.09%)</title><rect x="316.0" y="179.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.0" y="190.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (561 samples, 0.09%)</title><rect x="316.0" y="163.0" width="1.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="319.0" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,101 samples, 0.18%)</title><rect x="317.1" y="211.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="320.1" y="222.0"></text>
</g>
<g>
<title>byte[] (462 samples, 0.07%)</title><rect x="317.1" y="195.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="320.1" y="206.0"></text>
</g>
<g>
<title>java.lang.String[] (329 samples, 0.05%)</title><rect x="317.9" y="195.0" width="0.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="320.9" y="206.0"></text>
</g>
<g>
<title>java.lang.String (310 samples, 0.05%)</title><rect x="318.6" y="195.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="321.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.parseReplicasParameter (3,631 samples, 0.59%)</title><rect x="319.2" y="259.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="322.2" y="270.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.ReplicasHolder (3,631 samples, 0.59%)</title><rect x="319.2" y="243.0" width="6.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="322.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.proxy (154,177 samples, 24.99%)</title><rect x="326.1" y="259.0" width="294.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.1" y="270.0">ru/mail/polis/service/zvladn7/ServiceHel..</text>
</g>
<g>
<title>java.util.ArrayList (434 samples, 0.07%)</title><rect x="326.1" y="243.0" width="0.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="329.1" y="254.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (153,743 samples, 24.92%)</title><rect x="326.9" y="243.0" width="294.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="329.9" y="254.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/HashSet.iterator (663 samples, 0.11%)</title><rect x="326.9" y="227.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.9" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (663 samples, 0.11%)</title><rect x="326.9" y="211.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="329.9" y="222.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (663 samples, 0.11%)</title><rect x="326.9" y="195.0" width="1.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="329.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$126/767535484.accept (153,080 samples, 24.81%)</title><rect x="328.2" y="227.0" width="292.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.2" y="238.0">ru/mail/polis/service/zvladn7/ServiceHe..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.lambda$proxy$6 (153,080 samples, 24.81%)</title><rect x="328.2" y="211.0" width="292.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.2" y="222.0">ru/mail/polis/service/zvladn7/ServiceHe..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,978 samples, 0.32%)</title><rect x="328.2" y="195.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.2" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/459848100.invoke (1,978 samples, 0.32%)</title><rect x="328.2" y="179.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.2" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,978 samples, 0.32%)</title><rect x="328.2" y="163.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.2" y="174.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (629 samples, 0.10%)</title><rect x="328.2" y="147.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.2" y="158.0"></text>
</g>
<g>
<title>java.lang.String (629 samples, 0.10%)</title><rect x="328.2" y="131.0" width="1.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="331.2" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1,349 samples, 0.22%)</title><rect x="329.4" y="147.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.4" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1,349 samples, 0.22%)</title><rect x="329.4" y="131.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="332.4" y="142.0"></text>
</g>
<g>
<title>byte[] (1,349 samples, 0.22%)</title><rect x="329.4" y="115.0" width="2.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="332.4" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (424 samples, 0.07%)</title><rect x="332.0" y="195.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.0" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (424 samples, 0.07%)</title><rect x="332.0" y="179.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="335.0" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (424 samples, 0.07%)</title><rect x="332.0" y="163.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="335.0" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (424 samples, 0.07%)</title><rect x="332.0" y="147.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="335.0" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (424 samples, 0.07%)</title><rect x="332.0" y="131.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.0" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (424 samples, 0.07%)</title><rect x="332.0" y="115.0" width="0.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="335.0" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (150,678 samples, 24.42%)</title><rect x="332.8" y="195.0" width="288.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="335.8" y="206.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (150,678 samples, 24.42%)</title><rect x="332.8" y="179.0" width="288.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.8" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (1,190 samples, 0.19%)</title><rect x="332.8" y="163.0" width="2.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="335.8" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (136,193 samples, 22.08%)</title><rect x="335.1" y="163.0" width="260.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="338.1" y="174.0">one/nio/http/HttpClient$ResponseRea..</text>
</g>
<g>
<title>byte[] (30,674 samples, 4.97%)</title><rect x="335.1" y="147.0" width="58.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="338.1" y="158.0">byte[]</text>
</g>
<g>
<title>byte[] (105,519 samples, 17.10%)</title><rect x="393.8" y="147.0" width="201.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="396.8" y="158.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (6,976 samples, 1.13%)</title><rect x="595.6" y="163.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="598.6" y="174.0"></text>
</g>
<g>
<title>byte[] (224 samples, 0.04%)</title><rect x="595.6" y="147.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="598.6" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (438 samples, 0.07%)</title><rect x="596.0" y="147.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="599.0" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (438 samples, 0.07%)</title><rect x="596.0" y="131.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="599.0" y="142.0"></text>
</g>
<g>
<title>java.lang.String (197 samples, 0.03%)</title><rect x="596.0" y="115.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="599.0" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (241 samples, 0.04%)</title><rect x="596.4" y="115.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="599.4" y="126.0"></text>
</g>
<g>
<title>byte[] (241 samples, 0.04%)</title><rect x="596.4" y="99.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="599.4" y="110.0"></text>
</g>
<g>
<title>one.nio.http.Response (169 samples, 0.03%)</title><rect x="596.9" y="147.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="599.9" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (5,230 samples, 0.85%)</title><rect x="597.2" y="147.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="600.2" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,230 samples, 0.85%)</title><rect x="597.2" y="131.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="600.2" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,230 samples, 0.85%)</title><rect x="597.2" y="115.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="600.2" y="126.0"></text>
</g>
<g>
<title>char[] (3,251 samples, 0.53%)</title><rect x="597.2" y="99.0" width="6.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="600.2" y="110.0"></text>
</g>
<g>
<title>java.lang.String (904 samples, 0.15%)</title><rect x="603.4" y="99.0" width="1.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="606.4" y="110.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,075 samples, 0.17%)</title><rect x="605.1" y="99.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="608.1" y="110.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,075 samples, 0.17%)</title><rect x="605.1" y="83.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="608.1" y="94.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,075 samples, 0.17%)</title><rect x="605.1" y="67.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="608.1" y="78.0"></text>
</g>
<g>
<title>byte[] (1,075 samples, 0.17%)</title><rect x="605.1" y="51.0" width="2.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="608.1" y="62.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (251 samples, 0.04%)</title><rect x="607.2" y="147.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="610.2" y="158.0"></text>
</g>
<g>
<title>java.lang.String[] (251 samples, 0.04%)</title><rect x="607.2" y="131.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="610.2" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (664 samples, 0.11%)</title><rect x="607.7" y="147.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (664 samples, 0.11%)</title><rect x="607.7" y="131.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="610.7" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (664 samples, 0.11%)</title><rect x="607.7" y="115.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="610.7" y="126.0"></text>
</g>
<g>
<title>java.lang.String (326 samples, 0.05%)</title><rect x="607.7" y="99.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="610.7" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (338 samples, 0.05%)</title><rect x="608.3" y="99.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="611.3" y="110.0"></text>
</g>
<g>
<title>byte[] (338 samples, 0.05%)</title><rect x="608.3" y="83.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="611.3" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (5,116 samples, 0.83%)</title><rect x="608.9" y="163.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="611.9" y="174.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5,116 samples, 0.83%)</title><rect x="608.9" y="147.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="611.9" y="158.0"></text>
</g>
<g>
<title>byte[] (5,116 samples, 0.83%)</title><rect x="608.9" y="131.0" width="9.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="611.9" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (813 samples, 0.13%)</title><rect x="618.7" y="163.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="621.7" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (813 samples, 0.13%)</title><rect x="618.7" y="147.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="621.7" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (813 samples, 0.13%)</title><rect x="618.7" y="131.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="621.7" y="142.0"></text>
</g>
<g>
<title>java.lang.String (348 samples, 0.06%)</title><rect x="618.7" y="115.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="621.7" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (465 samples, 0.08%)</title><rect x="619.4" y="115.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.4" y="126.0"></text>
</g>
<g>
<title>byte[] (465 samples, 0.08%)</title><rect x="619.4" y="99.0" width="0.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="622.4" y="110.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (390 samples, 0.06%)</title><rect x="620.3" y="163.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="623.3" y="174.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (390 samples, 0.06%)</title><rect x="620.3" y="147.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="623.3" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (390 samples, 0.06%)</title><rect x="620.3" y="131.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.3" y="142.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (390 samples, 0.06%)</title><rect x="620.3" y="115.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="623.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceTopology.nodesForKey (56,074 samples, 9.09%)</title><rect x="621.0" y="259.0" width="107.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="624.0" y="270.0">ru/mail/polis..</text>
</g>
<g>
<title>java.util.HashSet (1,938 samples, 0.31%)</title><rect x="621.0" y="243.0" width="3.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="624.0" y="254.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (2,231 samples, 0.36%)</title><rect x="624.7" y="243.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="627.7" y="254.0"></text>
</g>
<g>
<title>java.lang.Integer (2,231 samples, 0.36%)</title><rect x="624.7" y="227.0" width="4.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="627.7" y="238.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (7,021 samples, 1.14%)</title><rect x="629.0" y="243.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="632.0" y="254.0"></text>
</g>
<g>
<title>java.util.HashMap (7,021 samples, 1.14%)</title><rect x="629.0" y="227.0" width="13.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="632.0" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (7,381 samples, 1.20%)</title><rect x="642.4" y="243.0" width="14.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="645.4" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (7,381 samples, 1.20%)</title><rect x="642.4" y="227.0" width="14.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.4" y="238.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (7,381 samples, 1.20%)</title><rect x="642.4" y="211.0" width="14.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="645.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceTopology.addReplicasForKey (37,503 samples, 6.08%)</title><rect x="656.5" y="243.0" width="71.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.5" y="254.0">ru/mail/..</text>
</g>
<g>
<title>java/util/HashSet.add (28,248 samples, 4.58%)</title><rect x="656.5" y="227.0" width="54.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.5" y="238.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (28,248 samples, 4.58%)</title><rect x="656.5" y="211.0" width="54.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.5" y="222.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (28,248 samples, 4.58%)</title><rect x="656.5" y="195.0" width="54.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="659.5" y="206.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.newNode (16,730 samples, 2.71%)</title><rect x="656.5" y="179.0" width="32.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.5" y="190.0">ja..</text>
</g>
<g>
<title>java.util.HashMap$Node (16,730 samples, 2.71%)</title><rect x="656.5" y="163.0" width="32.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="659.5" y="174.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.resize (11,518 samples, 1.87%)</title><rect x="688.5" y="179.0" width="22.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="691.5" y="190.0">j..</text>
</g>
<g>
<title>java.util.HashMap$Node[] (9,647 samples, 1.56%)</title><rect x="688.5" y="163.0" width="18.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="691.5" y="174.0"></text>
</g>
<g>
<title>java.util.HashMap$Node[] (1,871 samples, 0.30%)</title><rect x="707.0" y="163.0" width="3.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="710.0" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (5,092 samples, 0.83%)</title><rect x="710.6" y="227.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="713.6" y="238.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (5,092 samples, 0.83%)</title><rect x="710.6" y="211.0" width="9.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="713.6" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (4,087 samples, 0.66%)</title><rect x="720.3" y="227.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="723.3" y="238.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (4,087 samples, 0.66%)</title><rect x="720.3" y="211.0" width="7.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="723.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.wrapString (16,326 samples, 2.65%)</title><rect x="728.3" y="275.0" width="31.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="731.3" y="286.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7,375 samples, 1.20%)</title><rect x="728.3" y="259.0" width="14.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7,375 samples, 1.20%)</title><rect x="728.3" y="243.0" width="14.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="731.3" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7,375 samples, 1.20%)</title><rect x="728.3" y="227.0" width="14.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="731.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.toBytes (8,951 samples, 1.45%)</title><rect x="742.4" y="259.0" width="17.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="745.4" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (8,951 samples, 1.45%)</title><rect x="742.4" y="243.0" width="17.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="745.4" y="254.0"></text>
</g>
<g>
<title>byte[] (8,951 samples, 1.45%)</title><rect x="742.4" y="227.0" width="17.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="745.4" y="238.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (225,067 samples, 36.48%)</title><rect x="759.5" y="419.0" width="430.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.5" y="430.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (7,323 samples, 1.19%)</title><rect x="759.5" y="403.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="762.5" y="414.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (7,323 samples, 1.19%)</title><rect x="759.5" y="387.0" width="14.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="762.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (217,744 samples, 35.30%)</title><rect x="773.5" y="403.0" width="416.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="776.5" y="414.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (217,744 samples, 35.30%)</title><rect x="773.5" y="387.0" width="416.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.5" y="398.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (217,744 samples, 35.30%)</title><rect x="773.5" y="371.0" width="416.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.5" y="382.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (36,779 samples, 5.96%)</title><rect x="773.5" y="355.0" width="70.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="776.5" y="366.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (36,779 samples, 5.96%)</title><rect x="773.5" y="339.0" width="70.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="776.5" y="350.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (23,665 samples, 3.84%)</title><rect x="773.5" y="323.0" width="45.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="776.5" y="334.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (13,204 samples, 2.14%)</title><rect x="773.5" y="307.0" width="25.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.5" y="318.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (13,204 samples, 2.14%)</title><rect x="773.5" y="291.0" width="25.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.5" y="302.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (13,204 samples, 2.14%)</title><rect x="773.5" y="275.0" width="25.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.5" y="286.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (13,204 samples, 2.14%)</title><rect x="773.5" y="259.0" width="25.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.5" y="270.0">j..</text>
</g>
<g>
<title>java.lang.String (5,477 samples, 0.89%)</title><rect x="773.5" y="243.0" width="10.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="776.5" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7,727 samples, 1.25%)</title><rect x="784.0" y="243.0" width="14.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.0" y="254.0"></text>
</g>
<g>
<title>byte[] (7,727 samples, 1.25%)</title><rect x="784.0" y="227.0" width="14.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="787.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.upsert (10,461 samples, 1.70%)</title><rect x="798.8" y="307.0" width="20.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="801.8" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5,194 samples, 0.84%)</title><rect x="798.8" y="291.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="801.8" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5,194 samples, 0.84%)</title><rect x="798.8" y="275.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1553196913.get$Lambda (5,194 samples, 0.84%)</title><rect x="798.8" y="259.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="801.8" y="270.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$94 (5,194 samples, 0.84%)</title><rect x="798.8" y="243.0" width="9.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="801.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.processRequest (5,267 samples, 0.85%)</title><rect x="808.7" y="291.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="811.7" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5,125 samples, 0.83%)</title><rect x="808.7" y="275.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="811.7" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5,125 samples, 0.83%)</title><rect x="808.7" y="259.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="811.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/1493404285.get$Lambda (5,125 samples, 0.83%)</title><rect x="808.7" y="243.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="811.7" y="254.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$100 (5,125 samples, 0.83%)</title><rect x="808.7" y="227.0" width="9.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="811.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (142 samples, 0.02%)</title><rect x="818.5" y="275.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="821.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (142 samples, 0.02%)</title><rect x="818.5" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="821.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (142 samples, 0.02%)</title><rect x="818.5" y="243.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="821.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (142 samples, 0.02%)</title><rect x="818.5" y="227.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="821.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (142 samples, 0.02%)</title><rect x="818.5" y="211.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="821.5" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (142 samples, 0.02%)</title><rect x="818.5" y="195.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="821.5" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (13,114 samples, 2.13%)</title><rect x="818.8" y="323.0" width="25.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="821.8" y="334.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (13,114 samples, 2.13%)</title><rect x="818.8" y="307.0" width="25.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="821.8" y="318.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (13,114 samples, 2.13%)</title><rect x="818.8" y="291.0" width="25.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="821.8" y="302.0">j..</text>
</g>
<g>
<title>java.lang.String (5,720 samples, 0.93%)</title><rect x="818.8" y="275.0" width="10.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="821.8" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7,394 samples, 1.20%)</title><rect x="829.7" y="275.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="832.7" y="286.0"></text>
</g>
<g>
<title>byte[] (7,394 samples, 1.20%)</title><rect x="829.7" y="259.0" width="14.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="832.7" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (66,006 samples, 10.70%)</title><rect x="843.9" y="355.0" width="126.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="846.9" y="366.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one.nio.http.Request (11,617 samples, 1.88%)</title><rect x="843.9" y="339.0" width="22.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="846.9" y="350.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (15,450 samples, 2.50%)</title><rect x="866.1" y="339.0" width="29.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="869.1" y="350.0">on..</text>
</g>
<g>
<title>java.lang.String[] (13,188 samples, 2.14%)</title><rect x="866.1" y="323.0" width="25.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="869.1" y="334.0">j..</text>
</g>
<g>
<title>java.lang.String[] (2,262 samples, 0.37%)</title><rect x="891.3" y="323.0" width="4.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="894.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (38,939 samples, 6.31%)</title><rect x="895.6" y="339.0" width="74.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="898.6" y="350.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (38,939 samples, 6.31%)</title><rect x="895.6" y="323.0" width="74.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="898.6" y="334.0">one/nio/..</text>
</g>
<g>
<title>char[] (16,619 samples, 2.69%)</title><rect x="895.6" y="307.0" width="31.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="898.6" y="318.0">ch..</text>
</g>
<g>
<title>char[] (4,450 samples, 0.72%)</title><rect x="927.4" y="307.0" width="8.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="930.4" y="318.0"></text>
</g>
<g>
<title>java.lang.String (6,615 samples, 1.07%)</title><rect x="935.9" y="307.0" width="12.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="938.9" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11,255 samples, 1.82%)</title><rect x="948.6" y="307.0" width="21.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="951.6" y="318.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11,255 samples, 1.82%)</title><rect x="948.6" y="291.0" width="21.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="951.6" y="302.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (11,255 samples, 1.82%)</title><rect x="948.6" y="275.0" width="21.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="951.6" y="286.0">j..</text>
</g>
<g>
<title>byte[] (11,255 samples, 1.82%)</title><rect x="948.6" y="259.0" width="21.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="951.6" y="270.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8,825 samples, 1.43%)</title><rect x="970.1" y="355.0" width="16.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="973.1" y="366.0"></text>
</g>
<g>
<title>byte[] (8,825 samples, 1.43%)</title><rect x="970.1" y="339.0" width="16.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="973.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10,439 samples, 1.69%)</title><rect x="987.0" y="355.0" width="20.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="990.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (10,439 samples, 1.69%)</title><rect x="987.0" y="339.0" width="20.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="990.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10,439 samples, 1.69%)</title><rect x="987.0" y="323.0" width="20.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="990.0" y="334.0"></text>
</g>
<g>
<title>java.lang.String (6,594 samples, 1.07%)</title><rect x="987.0" y="307.0" width="12.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="990.0" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,845 samples, 0.62%)</title><rect x="999.6" y="307.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1002.6" y="318.0"></text>
</g>
<g>
<title>byte[] (3,845 samples, 0.62%)</title><rect x="999.6" y="291.0" width="7.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1002.6" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (95,695 samples, 15.51%)</title><rect x="1007.0" y="355.0" width="183.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1010.0" y="366.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (95,695 samples, 15.51%)</title><rect x="1007.0" y="339.0" width="183.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1010.0" y="350.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (45,274 samples, 7.34%)</title><rect x="1007.0" y="323.0" width="86.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1010.0" y="334.0">char[]</text>
</g>
<g>
<title>char[] (9,161 samples, 1.48%)</title><rect x="1093.6" y="323.0" width="17.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1096.6" y="334.0"></text>
</g>
<g>
<title>java.lang.String (15,293 samples, 2.48%)</title><rect x="1111.1" y="323.0" width="29.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1114.1" y="334.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (25,967 samples, 4.21%)</title><rect x="1140.3" y="323.0" width="49.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1143.3" y="334.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (25,967 samples, 4.21%)</title><rect x="1140.3" y="307.0" width="49.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1143.3" y="318.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (25,967 samples, 4.21%)</title><rect x="1140.3" y="291.0" width="49.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1143.3" y="302.0">java/..</text>
</g>
<g>
<title>byte[] (25,766 samples, 4.18%)</title><rect x="1140.3" y="275.0" width="49.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1143.3" y="286.0">byte[]</text>
</g>
<g>
<title>byte[] (201 samples, 0.03%)</title><rect x="1189.6" y="275.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1192.6" y="286.0"></text>
</g>
</g>
</svg>
