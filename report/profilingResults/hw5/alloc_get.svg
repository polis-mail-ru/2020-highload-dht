<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (51,736 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (29,407 samples, 56.84%)</title><rect x="10.0" y="547.0" width="670.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="558.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (29,407 samples, 56.84%)</title><rect x="10.0" y="531.0" width="670.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="542.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (29,407 samples, 56.84%)</title><rect x="10.0" y="515.0" width="670.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="526.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (91 samples, 0.18%)</title><rect x="10.0" y="499.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (91 samples, 0.18%)</title><rect x="10.0" y="483.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (91 samples, 0.18%)</title><rect x="10.0" y="467.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (91 samples, 0.18%)</title><rect x="10.0" y="451.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (91 samples, 0.18%)</title><rect x="10.0" y="435.0" width="2.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$102/765673396.run (29,316 samples, 56.66%)</title><rect x="12.1" y="499.0" width="668.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.1" y="510.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$102/765673396.run</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$4 (29,316 samples, 56.66%)</title><rect x="12.1" y="483.0" width="668.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.1" y="494.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$4</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.process (29,316 samples, 56.66%)</title><rect x="12.1" y="467.0" width="668.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.1" y="478.0">ru/mail/polis/service/zvladn7/AsyncService.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$152/1493404285.process (29,316 samples, 56.66%)</title><rect x="12.1" y="451.0" width="668.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.1" y="462.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$152/1493404285.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$get$1 (29,316 samples, 56.66%)</title><rect x="12.1" y="435.0" width="668.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.1" y="446.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$get$1</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.handleGet (29,316 samples, 56.66%)</title><rect x="12.1" y="419.0" width="668.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.1" y="430.0">ru/mail/polis/service/zvladn7/ServiceHelper.handleGet</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (67 samples, 0.13%)</title><rect x="12.1" y="403.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.1" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (67 samples, 0.13%)</title><rect x="12.1" y="387.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$153/499901514.get$Lambda (45 samples, 0.09%)</title><rect x="12.1" y="371.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.1" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.ServiceHelper$$Lambda$153 (45 samples, 0.09%)</title><rect x="12.1" y="355.0" width="1.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="15.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$156/683987622.get$Lambda (22 samples, 0.04%)</title><rect x="13.1" y="371.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.1" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.ServiceHelper$$Lambda$156 (22 samples, 0.04%)</title><rect x="13.1" y="355.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="16.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.handleOrProxy (28,760 samples, 55.59%)</title><rect x="13.6" y="403.0" width="656.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.6" y="414.0">ru/mail/polis/service/zvladn7/ServiceHelper.handleOrProxy</text>
</g>
<g>
<title>java/util/AbstractCollection.toString (723 samples, 1.40%)</title><rect x="13.6" y="387.0" width="16.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.6" y="398.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (33 samples, 0.06%)</title><rect x="13.6" y="371.0" width="0.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="16.6" y="382.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (44 samples, 0.09%)</title><rect x="14.4" y="371.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.4" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (44 samples, 0.09%)</title><rect x="14.4" y="355.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.4" y="366.0"></text>
</g>
<g>
<title>byte[] (44 samples, 0.09%)</title><rect x="14.4" y="339.0" width="1.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="17.4" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (341 samples, 0.66%)</title><rect x="15.4" y="371.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.4" y="382.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (341 samples, 0.66%)</title><rect x="15.4" y="355.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.4" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (341 samples, 0.66%)</title><rect x="15.4" y="339.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.4" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (341 samples, 0.66%)</title><rect x="15.4" y="323.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.4" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (341 samples, 0.66%)</title><rect x="15.4" y="307.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.4" y="318.0"></text>
</g>
<g>
<title>byte[] (341 samples, 0.66%)</title><rect x="15.4" y="291.0" width="7.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="18.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (204 samples, 0.39%)</title><rect x="23.1" y="371.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.1" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (204 samples, 0.39%)</title><rect x="23.1" y="355.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.1" y="366.0"></text>
</g>
<g>
<title>java.lang.String (40 samples, 0.08%)</title><rect x="23.1" y="339.0" width="0.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="26.1" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (164 samples, 0.32%)</title><rect x="24.0" y="339.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.0" y="350.0"></text>
</g>
<g>
<title>byte[] (164 samples, 0.32%)</title><rect x="24.0" y="323.0" width="3.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="27.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (101 samples, 0.20%)</title><rect x="27.8" y="371.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (76 samples, 0.15%)</title><rect x="27.8" y="355.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="30.8" y="366.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (76 samples, 0.15%)</title><rect x="27.8" y="339.0" width="1.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="30.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (25 samples, 0.05%)</title><rect x="29.5" y="355.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.5" y="366.0"></text>
</g>
<g>
<title>java.util.HashMap$KeySet (25 samples, 0.05%)</title><rect x="29.5" y="339.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="32.5" y="350.0"></text>
</g>
<g>
<title>java/util/Collection.stream (43 samples, 0.08%)</title><rect x="30.1" y="387.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.1" y="398.0"></text>
</g>
<g>
<title>java/util/ArrayList.spliterator (16 samples, 0.03%)</title><rect x="30.1" y="371.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="33.1" y="382.0"></text>
</g>
<g>
<title>java.util.ArrayList$ArrayListSpliterator (16 samples, 0.03%)</title><rect x="30.1" y="355.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="33.1" y="366.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (27 samples, 0.05%)</title><rect x="30.5" y="371.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.5" y="382.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (27 samples, 0.05%)</title><rect x="30.5" y="355.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="33.5" y="366.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (16 samples, 0.03%)</title><rect x="31.1" y="387.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.1" y="398.0"></text>
</g>
<g>
<title>java.util.stream.Collectors$CollectorImpl (16 samples, 0.03%)</title><rect x="31.1" y="371.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="34.1" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (104 samples, 0.20%)</title><rect x="31.4" y="387.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.4" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (87 samples, 0.17%)</title><rect x="31.4" y="371.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.4" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (87 samples, 0.17%)</title><rect x="31.4" y="355.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.4" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (64 samples, 0.12%)</title><rect x="31.4" y="339.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="34.4" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (51 samples, 0.10%)</title><rect x="31.4" y="323.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.4" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (37 samples, 0.07%)</title><rect x="31.4" y="307.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.4" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (37 samples, 0.07%)</title><rect x="31.4" y="291.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.4" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (37 samples, 0.07%)</title><rect x="31.4" y="275.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.4" y="286.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$131/2121829522.accept (37 samples, 0.07%)</title><rect x="31.4" y="259.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.4" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (37 samples, 0.07%)</title><rect x="31.4" y="243.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.4" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (37 samples, 0.07%)</title><rect x="31.4" y="227.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.4" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (37 samples, 0.07%)</title><rect x="31.4" y="211.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.4" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (37 samples, 0.07%)</title><rect x="31.4" y="195.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.4" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (37 samples, 0.07%)</title><rect x="31.4" y="179.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.4" y="190.0"></text>
</g>
<g>
<title>java.lang.Object[] (37 samples, 0.07%)</title><rect x="31.4" y="163.0" width="0.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="34.4" y="174.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (14 samples, 0.03%)</title><rect x="32.3" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.3" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (14 samples, 0.03%)</title><rect x="32.3" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.3" y="302.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$128/695758895.get (14 samples, 0.03%)</title><rect x="32.3" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="35.3" y="286.0"></text>
</g>
<g>
<title>java.util.ArrayList (14 samples, 0.03%)</title><rect x="32.3" y="259.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="35.3" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (13 samples, 0.03%)</title><rect x="32.6" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="35.6" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (13 samples, 0.03%)</title><rect x="32.6" y="307.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.6" y="318.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2$1 (13 samples, 0.03%)</title><rect x="32.6" y="291.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="35.6" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (23 samples, 0.04%)</title><rect x="32.9" y="339.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="35.9" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (23 samples, 0.04%)</title><rect x="32.9" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.9" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3ReducingSink (23 samples, 0.04%)</title><rect x="32.9" y="307.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="35.9" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps.makeRef (17 samples, 0.03%)</title><rect x="33.4" y="371.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.4" y="382.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3 (17 samples, 0.03%)</title><rect x="33.4" y="355.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="36.4" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (35 samples, 0.07%)</title><rect x="33.8" y="387.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.8" y="398.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2 (35 samples, 0.07%)</title><rect x="33.8" y="371.0" width="0.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="36.8" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (157 samples, 0.30%)</title><rect x="34.6" y="387.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (157 samples, 0.30%)</title><rect x="34.6" y="371.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (118 samples, 0.23%)</title><rect x="34.6" y="355.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.6" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (118 samples, 0.23%)</title><rect x="34.6" y="339.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="37.6" y="350.0"></text>
</g>
<g>
<title>byte[] (118 samples, 0.23%)</title><rect x="34.6" y="323.0" width="2.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="37.6" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (39 samples, 0.08%)</title><rect x="37.3" y="355.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="40.3" y="366.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (39 samples, 0.08%)</title><rect x="37.3" y="339.0" width="0.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="40.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (82 samples, 0.16%)</title><rect x="38.2" y="387.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (82 samples, 0.16%)</title><rect x="38.2" y="371.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.2" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (82 samples, 0.16%)</title><rect x="38.2" y="355.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.2" y="366.0"></text>
</g>
<g>
<title>java.lang.String (27 samples, 0.05%)</title><rect x="38.2" y="339.0" width="0.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="41.2" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (55 samples, 0.11%)</title><rect x="38.8" y="339.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.8" y="350.0"></text>
</g>
<g>
<title>byte[] (55 samples, 0.11%)</title><rect x="38.8" y="323.0" width="1.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="41.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (94 samples, 0.18%)</title><rect x="40.1" y="387.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="43.1" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (94 samples, 0.18%)</title><rect x="40.1" y="371.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.1" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (94 samples, 0.18%)</title><rect x="40.1" y="355.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.1" y="366.0"></text>
</g>
<g>
<title>java.lang.String (28 samples, 0.05%)</title><rect x="40.1" y="339.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="43.1" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (66 samples, 0.13%)</title><rect x="40.7" y="339.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="43.7" y="350.0"></text>
</g>
<g>
<title>byte[] (66 samples, 0.13%)</title><rect x="40.7" y="323.0" width="1.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="43.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$153/499901514.execute (19,859 samples, 38.39%)</title><rect x="42.2" y="387.0" width="453.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="45.2" y="398.0">ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$153/499901..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.lambda$handleGet$0 (19,859 samples, 38.39%)</title><rect x="42.2" y="371.0" width="453.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.2" y="382.0">ru/mail/polis/service/zvladn7/ServiceHelper.lambda$handleGet$0</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (19,580 samples, 37.85%)</title><rect x="42.2" y="355.0" width="446.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.2" y="366.0">ru/mail/polis/dao/DAO.getValue</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1,330 samples, 2.57%)</title><rect x="42.2" y="339.0" width="30.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.2" y="350.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,202 samples, 2.32%)</title><rect x="42.2" y="323.0" width="27.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="45.2" y="334.0">c..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (254 samples, 0.49%)</title><rect x="42.2" y="307.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.2" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (254 samples, 0.49%)</title><rect x="42.2" y="291.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.2" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (254 samples, 0.49%)</title><rect x="42.2" y="275.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="45.2" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (254 samples, 0.49%)</title><rect x="42.2" y="259.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.2" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (254 samples, 0.49%)</title><rect x="42.2" y="243.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.2" y="254.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$149/1922495495.compare (254 samples, 0.49%)</title><rect x="42.2" y="227.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.2" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (254 samples, 0.49%)</title><rect x="42.2" y="211.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.2" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/377478451.compare (254 samples, 0.49%)</title><rect x="42.2" y="195.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.2" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (254 samples, 0.49%)</title><rect x="42.2" y="179.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$147/613845546.apply (254 samples, 0.49%)</title><rect x="42.2" y="163.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (254 samples, 0.49%)</title><rect x="42.2" y="147.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.2" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (254 samples, 0.49%)</title><rect x="42.2" y="131.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.2" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (254 samples, 0.49%)</title><rect x="42.2" y="115.0" width="5.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="45.2" y="126.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (948 samples, 1.83%)</title><rect x="48.0" y="307.0" width="21.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="51.0" y="318.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (948 samples, 1.83%)</title><rect x="48.0" y="291.0" width="21.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.0" y="302.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (948 samples, 1.83%)</title><rect x="48.0" y="275.0" width="21.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="51.0" y="286.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (948 samples, 1.83%)</title><rect x="48.0" y="259.0" width="21.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.0" y="270.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (948 samples, 1.83%)</title><rect x="48.0" y="243.0" width="21.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.0" y="254.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (948 samples, 1.83%)</title><rect x="48.0" y="227.0" width="21.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.0" y="238.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (724 samples, 1.40%)</title><rect x="48.0" y="211.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (724 samples, 1.40%)</title><rect x="48.0" y="195.0" width="16.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (724 samples, 1.40%)</title><rect x="48.0" y="179.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (724 samples, 1.40%)</title><rect x="48.0" y="163.0" width="16.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (294 samples, 0.57%)</title><rect x="48.0" y="147.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.0" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (190 samples, 0.37%)</title><rect x="48.0" y="131.0" width="4.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="51.0" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (104 samples, 0.20%)</title><rect x="52.3" y="131.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.3" y="142.0"></text>
</g>
<g>
<title>byte[] (104 samples, 0.20%)</title><rect x="52.3" y="115.0" width="2.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="55.3" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (27 samples, 0.05%)</title><rect x="54.7" y="147.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="57.7" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (30 samples, 0.06%)</title><rect x="55.3" y="147.0" width="0.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="58.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (275 samples, 0.53%)</title><rect x="56.0" y="147.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (167 samples, 0.32%)</title><rect x="56.0" y="131.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.0" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (113 samples, 0.22%)</title><rect x="56.0" y="115.0" width="2.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="59.0" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (54 samples, 0.10%)</title><rect x="58.6" y="115.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="61.6" y="126.0"></text>
</g>
<g>
<title>byte[] (54 samples, 0.10%)</title><rect x="58.6" y="99.0" width="1.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="61.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (108 samples, 0.21%)</title><rect x="59.8" y="131.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (108 samples, 0.21%)</title><rect x="59.8" y="115.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="62.8" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (78 samples, 0.15%)</title><rect x="59.8" y="99.0" width="1.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="62.8" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (30 samples, 0.06%)</title><rect x="61.6" y="99.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="64.6" y="110.0"></text>
</g>
<g>
<title>byte[] (30 samples, 0.06%)</title><rect x="61.6" y="83.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="64.6" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (98 samples, 0.19%)</title><rect x="62.3" y="147.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.3" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (98 samples, 0.19%)</title><rect x="62.3" y="131.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="65.3" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (65 samples, 0.13%)</title><rect x="62.3" y="115.0" width="1.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="65.3" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (33 samples, 0.06%)</title><rect x="63.8" y="115.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.8" y="126.0"></text>
</g>
<g>
<title>byte[] (33 samples, 0.06%)</title><rect x="63.8" y="99.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="66.8" y="110.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$149/1922495495.compare (224 samples, 0.43%)</title><rect x="64.5" y="211.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.5" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (224 samples, 0.43%)</title><rect x="64.5" y="195.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.5" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/377478451.compare (224 samples, 0.43%)</title><rect x="64.5" y="179.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="67.5" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (224 samples, 0.43%)</title><rect x="64.5" y="163.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$147/613845546.apply (224 samples, 0.43%)</title><rect x="64.5" y="147.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (224 samples, 0.43%)</title><rect x="64.5" y="131.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.5" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (224 samples, 0.43%)</title><rect x="64.5" y="115.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="67.5" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (224 samples, 0.43%)</title><rect x="64.5" y="99.0" width="5.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="67.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$170/1639699458.apply (128 samples, 0.25%)</title><rect x="69.6" y="323.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (128 samples, 0.25%)</title><rect x="69.6" y="307.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.6" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (128 samples, 0.25%)</title><rect x="69.6" y="291.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="72.6" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (128 samples, 0.25%)</title><rect x="69.6" y="275.0" width="2.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="72.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.cellIterator (18,250 samples, 35.28%)</title><rect x="72.5" y="339.0" width="416.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.5" y="350.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.cellIterator</text>
</g>
<g>
<title>java.util.ArrayList (52 samples, 0.10%)</title><rect x="72.5" y="323.0" width="1.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="75.5" y="334.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (72 samples, 0.14%)</title><rect x="73.7" y="323.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.7" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (72 samples, 0.14%)</title><rect x="73.7" y="307.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.7" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (72 samples, 0.14%)</title><rect x="73.7" y="291.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.7" y="302.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (72 samples, 0.14%)</title><rect x="73.7" y="275.0" width="1.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="76.7" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (48 samples, 0.09%)</title><rect x="75.4" y="323.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="78.4" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (48 samples, 0.09%)</title><rect x="75.4" y="307.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$159/884727449.get$Lambda (48 samples, 0.09%)</title><rect x="75.4" y="291.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.4" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$159 (48 samples, 0.09%)</title><rect x="75.4" y="275.0" width="1.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="78.4" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (90 samples, 0.17%)</title><rect x="76.5" y="323.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.5" y="334.0"></text>
</g>
<g>
<title>java.lang.Object[] (90 samples, 0.17%)</title><rect x="76.5" y="307.0" width="2.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="79.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator (17,388 samples, 33.61%)</title><rect x="78.5" y="323.0" width="396.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.5" y="334.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (3,487 samples, 6.74%)</title><rect x="78.5" y="307.0" width="79.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.5" y="318.0">com/googl..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (19 samples, 0.04%)</title><rect x="78.5" y="291.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="81.5" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (3,468 samples, 6.70%)</title><rect x="78.9" y="291.0" width="79.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.9" y="302.0">com/googl..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (39 samples, 0.08%)</title><rect x="78.9" y="275.0" width="0.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="81.9" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (123 samples, 0.24%)</title><rect x="79.8" y="275.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.8" y="286.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (123 samples, 0.24%)</title><rect x="79.8" y="259.0" width="2.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="82.8" y="270.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (35 samples, 0.07%)</title><rect x="82.6" y="275.0" width="0.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="85.6" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (31 samples, 0.06%)</title><rect x="83.4" y="275.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.4" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (31 samples, 0.06%)</title><rect x="83.4" y="259.0" width="0.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="86.4" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2,963 samples, 5.73%)</title><rect x="84.1" y="275.0" width="67.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="87.1" y="286.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2,963 samples, 5.73%)</title><rect x="84.1" y="259.0" width="67.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="87.1" y="270.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (42 samples, 0.08%)</title><rect x="84.1" y="243.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.1" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (42 samples, 0.08%)</title><rect x="84.1" y="227.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="87.1" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (42 samples, 0.08%)</title><rect x="84.1" y="211.0" width="1.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="87.1" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2,921 samples, 5.65%)</title><rect x="85.1" y="243.0" width="66.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.1" y="254.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2,921 samples, 5.65%)</title><rect x="85.1" y="227.0" width="66.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.1" y="238.0">java/ut..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,921 samples, 5.65%)</title><rect x="85.1" y="211.0" width="66.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.1" y="222.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,921 samples, 5.65%)</title><rect x="85.1" y="195.0" width="66.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.1" y="206.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2,378 samples, 4.60%)</title><rect x="85.1" y="179.0" width="54.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.1" y="190.0">com/g..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (2,378 samples, 4.60%)</title><rect x="85.1" y="163.0" width="54.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.1" y="174.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (2,378 samples, 4.60%)</title><rect x="85.1" y="147.0" width="54.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.1" y="158.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (2,378 samples, 4.60%)</title><rect x="85.1" y="131.0" width="54.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.1" y="142.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (923 samples, 1.78%)</title><rect x="85.1" y="115.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.1" y="126.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (554 samples, 1.07%)</title><rect x="85.1" y="99.0" width="12.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="88.1" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (369 samples, 0.71%)</title><rect x="97.7" y="99.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.7" y="110.0"></text>
</g>
<g>
<title>byte[] (369 samples, 0.71%)</title><rect x="97.7" y="83.0" width="8.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="100.7" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (93 samples, 0.18%)</title><rect x="106.2" y="115.0" width="2.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="109.2" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (107 samples, 0.21%)</title><rect x="108.3" y="115.0" width="2.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="111.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (965 samples, 1.87%)</title><rect x="110.7" y="115.0" width="22.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.7" y="126.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (661 samples, 1.28%)</title><rect x="110.7" y="99.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.7" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (425 samples, 0.82%)</title><rect x="110.7" y="83.0" width="9.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="113.7" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (236 samples, 0.46%)</title><rect x="120.4" y="83.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="123.4" y="94.0"></text>
</g>
<g>
<title>byte[] (236 samples, 0.46%)</title><rect x="120.4" y="67.0" width="5.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="123.4" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (304 samples, 0.59%)</title><rect x="125.8" y="99.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="128.8" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (304 samples, 0.59%)</title><rect x="125.8" y="83.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="128.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (207 samples, 0.40%)</title><rect x="125.8" y="67.0" width="4.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="128.8" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (97 samples, 0.19%)</title><rect x="130.5" y="67.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.5" y="78.0"></text>
</g>
<g>
<title>byte[] (97 samples, 0.19%)</title><rect x="130.5" y="51.0" width="2.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="133.5" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (290 samples, 0.56%)</title><rect x="132.7" y="115.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="135.7" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (290 samples, 0.56%)</title><rect x="132.7" y="99.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.7" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (202 samples, 0.39%)</title><rect x="132.7" y="83.0" width="4.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="135.7" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (88 samples, 0.17%)</title><rect x="137.3" y="83.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="140.3" y="94.0"></text>
</g>
<g>
<title>byte[] (88 samples, 0.17%)</title><rect x="137.3" y="67.0" width="2.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="140.3" y="78.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$149/1922495495.compare (543 samples, 1.05%)</title><rect x="139.3" y="179.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="142.3" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (543 samples, 1.05%)</title><rect x="139.3" y="163.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.3" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/377478451.compare (543 samples, 1.05%)</title><rect x="139.3" y="147.0" width="12.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.3" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (543 samples, 1.05%)</title><rect x="139.3" y="131.0" width="12.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="142.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$147/613845546.apply (543 samples, 1.05%)</title><rect x="139.3" y="115.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (543 samples, 1.05%)</title><rect x="139.3" y="99.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="142.3" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (543 samples, 1.05%)</title><rect x="139.3" y="83.0" width="12.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.3" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (543 samples, 1.05%)</title><rect x="139.3" y="67.0" width="12.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="142.3" y="78.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (277 samples, 0.54%)</title><rect x="151.7" y="275.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="154.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (277 samples, 0.54%)</title><rect x="151.7" y="259.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="154.7" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (277 samples, 0.54%)</title><rect x="151.7" y="243.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="154.7" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (38 samples, 0.07%)</title><rect x="151.7" y="227.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="154.7" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$144/1530082927.getAsBoolean (38 samples, 0.07%)</title><rect x="151.7" y="211.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="154.7" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (38 samples, 0.07%)</title><rect x="151.7" y="195.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="154.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (38 samples, 0.07%)</title><rect x="151.7" y="179.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.7" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (38 samples, 0.07%)</title><rect x="151.7" y="163.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="154.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable$$Lambda$139/605082488.apply (38 samples, 0.07%)</title><rect x="151.7" y="147.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="154.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.lambda$iterator$0 (38 samples, 0.07%)</title><rect x="151.7" y="131.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.7" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (38 samples, 0.07%)</title><rect x="151.7" y="115.0" width="0.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="154.7" y="126.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (239 samples, 0.46%)</title><rect x="152.6" y="227.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="155.6" y="238.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (47 samples, 0.09%)</title><rect x="152.6" y="211.0" width="1.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="155.6" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (55 samples, 0.11%)</title><rect x="153.7" y="211.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="156.7" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (55 samples, 0.11%)</title><rect x="153.7" y="195.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.7" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$141/1981903028.get$Lambda (36 samples, 0.07%)</title><rect x="153.7" y="179.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.7" y="190.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$141 (36 samples, 0.07%)</title><rect x="153.7" y="163.0" width="0.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="156.7" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$144/1530082927.get$Lambda (19 samples, 0.04%)</title><rect x="154.5" y="179.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.5" y="190.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$144 (19 samples, 0.04%)</title><rect x="154.5" y="163.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="157.5" y="174.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (33 samples, 0.06%)</title><rect x="154.9" y="211.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.9" y="222.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (33 samples, 0.06%)</title><rect x="154.9" y="195.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="157.9" y="206.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (33 samples, 0.06%)</title><rect x="154.9" y="179.0" width="0.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="157.9" y="190.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (104 samples, 0.20%)</title><rect x="155.7" y="211.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="158.7" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (104 samples, 0.20%)</title><rect x="155.7" y="195.0" width="2.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="158.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1,290 samples, 2.49%)</title><rect x="158.0" y="307.0" width="29.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="161.0" y="318.0">ru..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (42 samples, 0.08%)</title><rect x="158.0" y="291.0" width="1.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="161.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1,248 samples, 2.41%)</title><rect x="159.0" y="291.0" width="28.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.0" y="302.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,248 samples, 2.41%)</title><rect x="159.0" y="275.0" width="28.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="162.0" y="286.0">co..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (249 samples, 0.48%)</title><rect x="159.0" y="259.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="162.0" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (249 samples, 0.48%)</title><rect x="159.0" y="243.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="162.0" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (249 samples, 0.48%)</title><rect x="159.0" y="227.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="162.0" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (249 samples, 0.48%)</title><rect x="159.0" y="211.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="162.0" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (249 samples, 0.48%)</title><rect x="159.0" y="195.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="162.0" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$149/1922495495.compare (249 samples, 0.48%)</title><rect x="159.0" y="179.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="162.0" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (249 samples, 0.48%)</title><rect x="159.0" y="163.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="162.0" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/377478451.compare (249 samples, 0.48%)</title><rect x="159.0" y="147.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.0" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (249 samples, 0.48%)</title><rect x="159.0" y="131.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$147/613845546.apply (249 samples, 0.48%)</title><rect x="159.0" y="115.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="162.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (249 samples, 0.48%)</title><rect x="159.0" y="99.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.0" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (249 samples, 0.48%)</title><rect x="159.0" y="83.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="162.0" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (249 samples, 0.48%)</title><rect x="159.0" y="67.0" width="5.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="162.0" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (999 samples, 1.93%)</title><rect x="164.7" y="259.0" width="22.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="167.7" y="270.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (999 samples, 1.93%)</title><rect x="164.7" y="243.0" width="22.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="167.7" y="254.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (999 samples, 1.93%)</title><rect x="164.7" y="227.0" width="22.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.7" y="238.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (999 samples, 1.93%)</title><rect x="164.7" y="211.0" width="22.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="167.7" y="222.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (999 samples, 1.93%)</title><rect x="164.7" y="195.0" width="22.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.7" y="206.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (999 samples, 1.93%)</title><rect x="164.7" y="179.0" width="22.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.7" y="190.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (758 samples, 1.47%)</title><rect x="164.7" y="163.0" width="17.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (758 samples, 1.47%)</title><rect x="164.7" y="147.0" width="17.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (758 samples, 1.47%)</title><rect x="164.7" y="131.0" width="17.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (758 samples, 1.47%)</title><rect x="164.7" y="115.0" width="17.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="167.7" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (348 samples, 0.67%)</title><rect x="164.7" y="99.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="167.7" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (220 samples, 0.43%)</title><rect x="164.7" y="83.0" width="5.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="167.7" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (128 samples, 0.25%)</title><rect x="169.7" y="83.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.7" y="94.0"></text>
</g>
<g>
<title>byte[] (128 samples, 0.25%)</title><rect x="169.7" y="67.0" width="2.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="172.7" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (32 samples, 0.06%)</title><rect x="172.6" y="99.0" width="0.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="175.6" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (28 samples, 0.05%)</title><rect x="173.4" y="99.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="176.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (275 samples, 0.53%)</title><rect x="174.0" y="99.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="177.0" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (178 samples, 0.34%)</title><rect x="174.0" y="83.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="177.0" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (104 samples, 0.20%)</title><rect x="174.0" y="67.0" width="2.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="177.0" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (74 samples, 0.14%)</title><rect x="176.4" y="67.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.4" y="78.0"></text>
</g>
<g>
<title>byte[] (74 samples, 0.14%)</title><rect x="176.4" y="51.0" width="1.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="179.4" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (97 samples, 0.19%)</title><rect x="178.1" y="83.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="181.1" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (97 samples, 0.19%)</title><rect x="178.1" y="67.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.1" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (67 samples, 0.13%)</title><rect x="178.1" y="51.0" width="1.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="181.1" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (30 samples, 0.06%)</title><rect x="179.6" y="51.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.6" y="62.0"></text>
</g>
<g>
<title>byte[] (30 samples, 0.06%)</title><rect x="179.6" y="35.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="182.6" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (75 samples, 0.14%)</title><rect x="180.3" y="99.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.3" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (75 samples, 0.14%)</title><rect x="180.3" y="83.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.3" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (51 samples, 0.10%)</title><rect x="180.3" y="67.0" width="1.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="183.3" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (24 samples, 0.05%)</title><rect x="181.4" y="67.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.4" y="78.0"></text>
</g>
<g>
<title>byte[] (24 samples, 0.05%)</title><rect x="181.4" y="51.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="184.4" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$149/1922495495.compare (241 samples, 0.47%)</title><rect x="182.0" y="163.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.0" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (241 samples, 0.47%)</title><rect x="182.0" y="147.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.0" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/377478451.compare (241 samples, 0.47%)</title><rect x="182.0" y="131.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.0" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (241 samples, 0.47%)</title><rect x="182.0" y="115.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$147/613845546.apply (241 samples, 0.47%)</title><rect x="182.0" y="99.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (241 samples, 0.47%)</title><rect x="182.0" y="83.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.0" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (241 samples, 0.47%)</title><rect x="182.0" y="67.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.0" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (241 samples, 0.47%)</title><rect x="182.0" y="51.0" width="5.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="185.0" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList (12,611 samples, 24.38%)</title><rect x="187.5" y="307.0" width="287.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.5" y="318.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.ge..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (12,568 samples, 24.29%)</title><rect x="187.5" y="291.0" width="286.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.5" y="302.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (114 samples, 0.22%)</title><rect x="187.5" y="275.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.5" y="286.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (53 samples, 0.10%)</title><rect x="187.5" y="259.0" width="1.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="190.5" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (61 samples, 0.12%)</title><rect x="188.7" y="259.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.7" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (61 samples, 0.12%)</title><rect x="188.7" y="243.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="191.7" y="254.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (61 samples, 0.12%)</title><rect x="188.7" y="227.0" width="1.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="191.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$166/934927094.accept (12,454 samples, 24.07%)</title><rect x="190.1" y="275.0" width="284.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="193.1" y="286.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl$$..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$9 (12,454 samples, 24.07%)</title><rect x="190.1" y="259.0" width="284.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.1" y="270.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.l..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.iterator (12,454 samples, 24.07%)</title><rect x="190.1" y="243.0" width="284.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.1" y="254.0">ru/mail/polis/dao/zvladn7/SSTable.iter..</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.SSTable$SSTableIter (190 samples, 0.37%)</title><rect x="190.1" y="227.0" width="4.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="193.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt; (12,264 samples, 23.70%)</title><rect x="194.4" y="227.0" width="279.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.4" y="238.0">ru/mail/polis/dao/zvladn7/SSTable$SST..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getElementPosition (12,264 samples, 23.70%)</title><rect x="194.4" y="211.0" width="279.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="197.4" y="222.0">ru/mail/polis/dao/zvladn7/SSTable.get..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (12,264 samples, 23.70%)</title><rect x="194.4" y="195.0" width="279.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.4" y="206.0">ru/mail/polis/dao/zvladn7/SSTable.get..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (10,050 samples, 19.43%)</title><rect x="194.4" y="179.0" width="229.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="197.4" y="190.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,632 samples, 8.95%)</title><rect x="194.4" y="163.0" width="105.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="197.4" y="174.0">java.nio.Heap..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5,418 samples, 10.47%)</title><rect x="300.1" y="163.0" width="123.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.1" y="174.0">java/nio/HeapBy..</text>
</g>
<g>
<title>byte[] (5,418 samples, 10.47%)</title><rect x="300.1" y="147.0" width="123.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="303.1" y="158.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (2,214 samples, 4.28%)</title><rect x="423.6" y="179.0" width="50.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.6" y="190.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,214 samples, 4.28%)</title><rect x="423.6" y="163.0" width="50.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="426.6" y="174.0">java/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,214 samples, 4.28%)</title><rect x="423.6" y="147.0" width="50.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="426.6" y="158.0">java/..</text>
</g>
<g>
<title>byte[] (2,214 samples, 4.28%)</title><rect x="423.6" y="131.0" width="50.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="426.6" y="142.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (43 samples, 0.08%)</title><rect x="474.1" y="291.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="477.1" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (43 samples, 0.08%)</title><rect x="474.1" y="275.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="477.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$166/934927094.get$Lambda (43 samples, 0.08%)</title><rect x="474.1" y="259.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="477.1" y="270.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$166 (43 samples, 0.08%)</title><rect x="474.1" y="243.0" width="1.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="477.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.iterator (600 samples, 1.16%)</title><rect x="475.1" y="323.0" width="13.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="478.1" y="334.0"></text>
</g>
<g>
<title>java/util/Collection.stream (175 samples, 0.34%)</title><rect x="475.1" y="307.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="478.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (68 samples, 0.13%)</title><rect x="475.1" y="291.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="478.1" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (68 samples, 0.13%)</title><rect x="475.1" y="275.0" width="1.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="478.1" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (107 samples, 0.21%)</title><rect x="476.7" y="291.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.7" y="302.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (107 samples, 0.21%)</title><rect x="476.7" y="275.0" width="2.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="479.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (19 samples, 0.04%)</title><rect x="479.1" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.1" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (19 samples, 0.04%)</title><rect x="479.1" y="291.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="482.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (81 samples, 0.16%)</title><rect x="479.5" y="307.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (81 samples, 0.16%)</title><rect x="479.5" y="291.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="482.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (81 samples, 0.16%)</title><rect x="479.5" y="275.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="482.5" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (81 samples, 0.16%)</title><rect x="479.5" y="259.0" width="1.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="482.5" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (189 samples, 0.37%)</title><rect x="481.4" y="307.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.4" y="318.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (47 samples, 0.09%)</title><rect x="481.4" y="291.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="484.4" y="302.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (47 samples, 0.09%)</title><rect x="481.4" y="275.0" width="1.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="484.4" y="286.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (142 samples, 0.27%)</title><rect x="482.4" y="291.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.4" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (34 samples, 0.07%)</title><rect x="482.4" y="275.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="485.4" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (34 samples, 0.07%)</title><rect x="482.4" y="259.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="485.4" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$140/539968290.get$Lambda (34 samples, 0.07%)</title><rect x="482.4" y="243.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="485.4" y="254.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$140 (34 samples, 0.07%)</title><rect x="482.4" y="227.0" width="0.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="485.4" y="238.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (108 samples, 0.21%)</title><rect x="483.2" y="275.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="486.2" y="286.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (108 samples, 0.21%)</title><rect x="483.2" y="259.0" width="2.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="486.2" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (136 samples, 0.26%)</title><rect x="485.7" y="307.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.7" y="318.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (136 samples, 0.26%)</title><rect x="485.7" y="291.0" width="3.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="488.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.getLocalResponse (279 samples, 0.54%)</title><rect x="488.8" y="355.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="491.8" y="366.0"></text>
</g>
<g>
<title>com/google/common/primitives/Longs.toByteArray (29 samples, 0.06%)</title><rect x="488.8" y="339.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="491.8" y="350.0"></text>
</g>
<g>
<title>byte[] (29 samples, 0.06%)</title><rect x="488.8" y="323.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="491.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (168 samples, 0.32%)</title><rect x="489.4" y="339.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="492.4" y="350.0"></text>
</g>
<g>
<title>one.nio.http.Response (33 samples, 0.06%)</title><rect x="489.4" y="323.0" width="0.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="492.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (135 samples, 0.26%)</title><rect x="490.2" y="323.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="493.2" y="334.0"></text>
</g>
<g>
<title>byte[] (62 samples, 0.12%)</title><rect x="490.2" y="307.0" width="1.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="493.2" y="318.0"></text>
</g>
<g>
<title>java.lang.String[] (43 samples, 0.08%)</title><rect x="491.6" y="307.0" width="1.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="494.6" y="318.0"></text>
</g>
<g>
<title>java.lang.String (30 samples, 0.06%)</title><rect x="492.6" y="307.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="495.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.toBytes (82 samples, 0.16%)</title><rect x="493.3" y="339.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="496.3" y="350.0"></text>
</g>
<g>
<title>byte[] (50 samples, 0.10%)</title><rect x="493.3" y="323.0" width="1.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="496.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.toBytes (32 samples, 0.06%)</title><rect x="494.4" y="323.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="497.4" y="334.0"></text>
</g>
<g>
<title>byte[] (32 samples, 0.06%)</title><rect x="494.4" y="307.0" width="0.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="497.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$156/683987622.resolve (128 samples, 0.25%)</title><rect x="495.2" y="387.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="498.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.lambda$handleGet$1 (128 samples, 0.25%)</title><rect x="495.2" y="371.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ConflictResolver.resolveGetAndSend (128 samples, 0.25%)</title><rect x="495.2" y="355.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="498.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (49 samples, 0.09%)</title><rect x="495.2" y="339.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="498.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (49 samples, 0.09%)</title><rect x="495.2" y="323.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="498.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (26 samples, 0.05%)</title><rect x="495.2" y="307.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="498.2" y="318.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (26 samples, 0.05%)</title><rect x="495.2" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.2" y="302.0"></text>
</g>
<g>
<title>byte[] (26 samples, 0.05%)</title><rect x="495.2" y="275.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="498.2" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (23 samples, 0.04%)</title><rect x="495.7" y="307.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="498.7" y="318.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (23 samples, 0.04%)</title><rect x="495.7" y="291.0" width="0.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="498.7" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (65 samples, 0.13%)</title><rect x="496.3" y="339.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="499.3" y="350.0"></text>
</g>
<g>
<title>one.nio.http.Response (15 samples, 0.03%)</title><rect x="496.3" y="323.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="499.3" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (50 samples, 0.10%)</title><rect x="496.6" y="323.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.6" y="334.0"></text>
</g>
<g>
<title>byte[] (24 samples, 0.05%)</title><rect x="496.6" y="307.0" width="0.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="499.6" y="318.0"></text>
</g>
<g>
<title>java.lang.String[] (13 samples, 0.03%)</title><rect x="497.2" y="307.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="500.2" y="318.0"></text>
</g>
<g>
<title>java.lang.String (13 samples, 0.03%)</title><rect x="497.5" y="307.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="500.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ConflictResolver.getValueBody (14 samples, 0.03%)</title><rect x="497.8" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="500.8" y="350.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.03%)</title><rect x="497.8" y="323.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="500.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.parseReplicasParameter (31 samples, 0.06%)</title><rect x="498.1" y="387.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="501.1" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.ReplicasHolder (31 samples, 0.06%)</title><rect x="498.1" y="371.0" width="0.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="501.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.proxy (6,870 samples, 13.28%)</title><rect x="498.8" y="387.0" width="156.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="501.8" y="398.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (6,864 samples, 13.27%)</title><rect x="498.8" y="371.0" width="156.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="501.8" y="382.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$121/1547590688.accept (6,859 samples, 13.26%)</title><rect x="498.9" y="355.0" width="156.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.9" y="366.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.lambda$proxy$6 (6,859 samples, 13.26%)</title><rect x="498.9" y="339.0" width="156.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="501.9" y="350.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (21 samples, 0.04%)</title><rect x="498.9" y="323.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="501.9" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/459848100.invoke (21 samples, 0.04%)</title><rect x="498.9" y="307.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.9" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (21 samples, 0.04%)</title><rect x="498.9" y="291.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="501.9" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (12 samples, 0.02%)</title><rect x="499.1" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (12 samples, 0.02%)</title><rect x="499.1" y="259.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="502.1" y="270.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.02%)</title><rect x="499.1" y="243.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="502.1" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (6,830 samples, 13.20%)</title><rect x="499.6" y="323.0" width="155.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.6" y="334.0">one/nio/http/HttpCli..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (6,830 samples, 13.20%)</title><rect x="499.6" y="307.0" width="155.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="502.6" y="318.0">one/nio/http/HttpCli..</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (15 samples, 0.03%)</title><rect x="499.6" y="291.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="502.6" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (6,204 samples, 11.99%)</title><rect x="499.9" y="291.0" width="141.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.9" y="302.0">one/nio/http/HttpC..</text>
</g>
<g>
<title>byte[] (2,101 samples, 4.06%)</title><rect x="499.9" y="275.0" width="47.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="502.9" y="286.0">byte[]</text>
</g>
<g>
<title>byte[] (4,103 samples, 7.93%)</title><rect x="547.8" y="275.0" width="93.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="550.8" y="286.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (529 samples, 1.02%)</title><rect x="641.4" y="291.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="644.4" y="302.0"></text>
</g>
<g>
<title>byte[] (20 samples, 0.04%)</title><rect x="641.4" y="275.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="644.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (22 samples, 0.04%)</title><rect x="641.9" y="275.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="644.9" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (22 samples, 0.04%)</title><rect x="641.9" y="259.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="644.9" y="270.0"></text>
</g>
<g>
<title>java.lang.String (11 samples, 0.02%)</title><rect x="641.9" y="243.0" width="0.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="644.9" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (11 samples, 0.02%)</title><rect x="642.1" y="243.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="645.1" y="254.0"></text>
</g>
<g>
<title>byte[] (11 samples, 0.02%)</title><rect x="642.1" y="227.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="645.1" y="238.0"></text>
</g>
<g>
<title>one.nio.http.Response (17 samples, 0.03%)</title><rect x="642.4" y="275.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="645.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (411 samples, 0.79%)</title><rect x="642.8" y="275.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="645.8" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (411 samples, 0.79%)</title><rect x="642.8" y="259.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.8" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (411 samples, 0.79%)</title><rect x="642.8" y="243.0" width="9.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="645.8" y="254.0"></text>
</g>
<g>
<title>char[] (250 samples, 0.48%)</title><rect x="642.8" y="227.0" width="5.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="645.8" y="238.0"></text>
</g>
<g>
<title>java.lang.String (76 samples, 0.15%)</title><rect x="648.5" y="227.0" width="1.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="651.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (85 samples, 0.16%)</title><rect x="650.2" y="227.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="653.2" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (85 samples, 0.16%)</title><rect x="650.2" y="211.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="653.2" y="222.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (85 samples, 0.16%)</title><rect x="650.2" y="195.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="653.2" y="206.0"></text>
</g>
<g>
<title>byte[] (85 samples, 0.16%)</title><rect x="650.2" y="179.0" width="1.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="653.2" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (21 samples, 0.04%)</title><rect x="652.1" y="275.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.1" y="286.0"></text>
</g>
<g>
<title>java.lang.String[] (21 samples, 0.04%)</title><rect x="652.1" y="259.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="655.1" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (38 samples, 0.07%)</title><rect x="652.6" y="275.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (38 samples, 0.07%)</title><rect x="652.6" y="259.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="655.6" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (38 samples, 0.07%)</title><rect x="652.6" y="243.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="655.6" y="254.0"></text>
</g>
<g>
<title>java.lang.String (19 samples, 0.04%)</title><rect x="652.6" y="227.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="655.6" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (19 samples, 0.04%)</title><rect x="653.1" y="227.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="656.1" y="238.0"></text>
</g>
<g>
<title>byte[] (19 samples, 0.04%)</title><rect x="653.1" y="211.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="656.1" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (36 samples, 0.07%)</title><rect x="653.5" y="291.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.5" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (36 samples, 0.07%)</title><rect x="653.5" y="275.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="656.5" y="286.0"></text>
</g>
<g>
<title>byte[] (36 samples, 0.07%)</title><rect x="653.5" y="259.0" width="0.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="656.5" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (36 samples, 0.07%)</title><rect x="654.3" y="291.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.3" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (36 samples, 0.07%)</title><rect x="654.3" y="275.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="657.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (36 samples, 0.07%)</title><rect x="654.3" y="259.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.3" y="270.0"></text>
</g>
<g>
<title>java.lang.String (14 samples, 0.03%)</title><rect x="654.3" y="243.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="657.3" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (22 samples, 0.04%)</title><rect x="654.6" y="243.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.6" y="254.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.04%)</title><rect x="654.6" y="227.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="657.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceTopology.nodesForKey (618 samples, 1.19%)</title><rect x="655.5" y="387.0" width="14.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="658.5" y="398.0"></text>
</g>
<g>
<title>java.util.HashSet (30 samples, 0.06%)</title><rect x="655.5" y="371.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="658.5" y="382.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (44 samples, 0.09%)</title><rect x="656.2" y="371.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="659.2" y="382.0"></text>
</g>
<g>
<title>java.lang.Integer (44 samples, 0.09%)</title><rect x="656.2" y="355.0" width="1.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="659.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (64 samples, 0.12%)</title><rect x="657.2" y="371.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.2" y="382.0"></text>
</g>
<g>
<title>java.util.HashMap (64 samples, 0.12%)</title><rect x="657.2" y="355.0" width="1.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="660.2" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (72 samples, 0.14%)</title><rect x="658.6" y="371.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="661.6" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (72 samples, 0.14%)</title><rect x="658.6" y="355.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="661.6" y="366.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (72 samples, 0.14%)</title><rect x="658.6" y="339.0" width="1.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="661.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceTopology.addReplicasForKey (408 samples, 0.79%)</title><rect x="660.3" y="371.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="663.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (290 samples, 0.56%)</title><rect x="660.3" y="355.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="663.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (290 samples, 0.56%)</title><rect x="660.3" y="339.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="663.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (290 samples, 0.56%)</title><rect x="660.3" y="323.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="663.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (154 samples, 0.30%)</title><rect x="660.3" y="307.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="663.3" y="318.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (154 samples, 0.30%)</title><rect x="660.3" y="291.0" width="3.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="663.3" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (136 samples, 0.26%)</title><rect x="663.8" y="307.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.8" y="318.0"></text>
</g>
<g>
<title>java.util.HashMap$Node[] (136 samples, 0.26%)</title><rect x="663.8" y="291.0" width="3.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="666.8" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (58 samples, 0.11%)</title><rect x="666.9" y="355.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="669.9" y="366.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (58 samples, 0.11%)</title><rect x="666.9" y="339.0" width="1.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="669.9" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (58 samples, 0.11%)</title><rect x="668.2" y="355.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="671.2" y="366.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (58 samples, 0.11%)</title><rect x="668.2" y="339.0" width="1.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="671.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.wrapString (489 samples, 0.95%)</title><rect x="669.6" y="403.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="672.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (88 samples, 0.17%)</title><rect x="669.6" y="387.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="672.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (88 samples, 0.17%)</title><rect x="669.6" y="371.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="672.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (88 samples, 0.17%)</title><rect x="669.6" y="355.0" width="2.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="672.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.toBytes (401 samples, 0.78%)</title><rect x="671.6" y="387.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="674.6" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (401 samples, 0.78%)</title><rect x="671.6" y="371.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="674.6" y="382.0"></text>
</g>
<g>
<title>byte[] (401 samples, 0.78%)</title><rect x="671.6" y="355.0" width="9.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="674.6" y="366.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (22,329 samples, 43.16%)</title><rect x="680.7" y="547.0" width="509.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="683.7" y="558.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (629 samples, 1.22%)</title><rect x="680.7" y="531.0" width="14.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="683.7" y="542.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (629 samples, 1.22%)</title><rect x="680.7" y="515.0" width="14.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="683.7" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (21,700 samples, 41.94%)</title><rect x="695.1" y="531.0" width="494.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="698.1" y="542.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (21,700 samples, 41.94%)</title><rect x="695.1" y="515.0" width="494.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.1" y="526.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (21,700 samples, 41.94%)</title><rect x="695.1" y="499.0" width="494.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="698.1" y="510.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,089 samples, 7.90%)</title><rect x="695.1" y="483.0" width="93.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="698.1" y="494.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,089 samples, 7.90%)</title><rect x="695.1" y="467.0" width="93.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="698.1" y="478.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (2,505 samples, 4.84%)</title><rect x="695.1" y="451.0" width="57.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="698.1" y="462.0">Reques..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1,747 samples, 3.38%)</title><rect x="695.1" y="435.0" width="39.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="698.1" y="446.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,747 samples, 3.38%)</title><rect x="695.1" y="419.0" width="39.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.1" y="430.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (1,747 samples, 3.38%)</title><rect x="695.1" y="403.0" width="39.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.1" y="414.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,747 samples, 3.38%)</title><rect x="695.1" y="387.0" width="39.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.1" y="398.0">jav..</text>
</g>
<g>
<title>java.lang.String (830 samples, 1.60%)</title><rect x="695.1" y="371.0" width="18.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="698.1" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (917 samples, 1.77%)</title><rect x="714.0" y="371.0" width="20.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="717.0" y="382.0"></text>
</g>
<g>
<title>byte[] (917 samples, 1.77%)</title><rect x="714.0" y="355.0" width="20.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="717.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.get (758 samples, 1.47%)</title><rect x="734.9" y="435.0" width="17.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="737.9" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (417 samples, 0.81%)</title><rect x="734.9" y="419.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="737.9" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (417 samples, 0.81%)</title><rect x="734.9" y="403.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="737.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$152/1493404285.get$Lambda (417 samples, 0.81%)</title><rect x="734.9" y="387.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="737.9" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$152 (417 samples, 0.81%)</title><rect x="734.9" y="371.0" width="9.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="737.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.processRequest (341 samples, 0.66%)</title><rect x="744.4" y="419.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="747.4" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (331 samples, 0.64%)</title><rect x="744.4" y="403.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.4" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (331 samples, 0.64%)</title><rect x="744.4" y="387.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="747.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$102/765673396.get$Lambda (331 samples, 0.64%)</title><rect x="744.4" y="371.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="747.4" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$102 (331 samples, 0.64%)</title><rect x="744.4" y="355.0" width="7.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="747.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,584 samples, 3.06%)</title><rect x="752.2" y="451.0" width="36.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="755.2" y="462.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (1,584 samples, 3.06%)</title><rect x="752.2" y="435.0" width="36.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="755.2" y="446.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,584 samples, 3.06%)</title><rect x="752.2" y="419.0" width="36.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="755.2" y="430.0">jav..</text>
</g>
<g>
<title>java.lang.String (452 samples, 0.87%)</title><rect x="752.2" y="403.0" width="10.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="755.2" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,132 samples, 2.19%)</title><rect x="762.5" y="403.0" width="25.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.5" y="414.0">j..</text>
</g>
<g>
<title>byte[] (1,132 samples, 2.19%)</title><rect x="762.5" y="387.0" width="25.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="765.5" y="398.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (8,530 samples, 16.49%)</title><rect x="788.3" y="483.0" width="194.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="791.3" y="494.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one.nio.http.Request (640 samples, 1.24%)</title><rect x="788.3" y="467.0" width="14.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="791.3" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2,575 samples, 4.98%)</title><rect x="802.9" y="467.0" width="58.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="805.9" y="478.0">one/ni..</text>
</g>
<g>
<title>java.lang.String[] (1,443 samples, 2.79%)</title><rect x="802.9" y="451.0" width="32.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="805.9" y="462.0">ja..</text>
</g>
<g>
<title>java.lang.String[] (1,132 samples, 2.19%)</title><rect x="835.8" y="451.0" width="25.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="838.8" y="462.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,315 samples, 10.27%)</title><rect x="861.7" y="467.0" width="121.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="864.7" y="478.0">one/nio/util/Ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,315 samples, 10.27%)</title><rect x="861.7" y="451.0" width="121.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="864.7" y="462.0">one/nio/util/Ut..</text>
</g>
<g>
<title>char[] (3,096 samples, 5.98%)</title><rect x="861.7" y="435.0" width="70.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="864.7" y="446.0">char[]</text>
</g>
<g>
<title>char[] (31 samples, 0.06%)</title><rect x="932.3" y="435.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="935.3" y="446.0"></text>
</g>
<g>
<title>java.lang.String (923 samples, 1.78%)</title><rect x="933.0" y="435.0" width="21.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="936.0" y="446.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,265 samples, 2.45%)</title><rect x="954.0" y="435.0" width="28.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="957.0" y="446.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,265 samples, 2.45%)</title><rect x="954.0" y="419.0" width="28.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="957.0" y="430.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,265 samples, 2.45%)</title><rect x="954.0" y="403.0" width="28.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="957.0" y="414.0">ja..</text>
</g>
<g>
<title>byte[] (1,265 samples, 2.45%)</title><rect x="954.0" y="387.0" width="28.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="957.0" y="398.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (9,081 samples, 17.55%)</title><rect x="982.9" y="483.0" width="207.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="985.9" y="494.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (9,081 samples, 17.55%)</title><rect x="982.9" y="467.0" width="207.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="985.9" y="478.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (3,730 samples, 7.21%)</title><rect x="982.9" y="451.0" width="85.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="985.9" y="462.0">char[]</text>
</g>
<g>
<title>char[] (662 samples, 1.28%)</title><rect x="1068.0" y="451.0" width="15.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1071.0" y="462.0"></text>
</g>
<g>
<title>java.lang.String (2,255 samples, 4.36%)</title><rect x="1083.1" y="451.0" width="51.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1086.1" y="462.0">java...</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,434 samples, 4.70%)</title><rect x="1134.5" y="451.0" width="55.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1137.5" y="462.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,434 samples, 4.70%)</title><rect x="1134.5" y="435.0" width="55.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1137.5" y="446.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,434 samples, 4.70%)</title><rect x="1134.5" y="419.0" width="55.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1137.5" y="430.0">java/..</text>
</g>
<g>
<title>byte[] (2,195 samples, 4.24%)</title><rect x="1134.5" y="403.0" width="50.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1137.5" y="414.0">byte[]</text>
</g>
<g>
<title>byte[] (239 samples, 0.46%)</title><rect x="1184.5" y="403.0" width="5.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1187.5" y="414.0"></text>
</g>
</g>
</svg>
