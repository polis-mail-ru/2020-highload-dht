<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (1,623 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (840 samples, 51.76%)</title><rect x="10.0" y="483.0" width="610.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="494.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (840 samples, 51.76%)</title><rect x="10.0" y="467.0" width="610.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="478.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (840 samples, 51.76%)</title><rect x="10.0" y="451.0" width="610.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="462.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (26 samples, 1.60%)</title><rect x="10.0" y="435.0" width="18.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (26 samples, 1.60%)</title><rect x="10.0" y="419.0" width="18.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (25 samples, 1.54%)</title><rect x="10.0" y="403.0" width="18.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (25 samples, 1.54%)</title><rect x="10.0" y="387.0" width="18.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (25 samples, 1.54%)</title><rect x="10.0" y="371.0" width="18.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.06%)</title><rect x="28.2" y="403.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.06%)</title><rect x="28.2" y="387.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.06%)</title><rect x="28.2" y="371.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.06%)</title><rect x="28.2" y="355.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="31.2" y="366.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1 samples, 0.06%)</title><rect x="28.2" y="339.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="31.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/919025338.run (814 samples, 50.15%)</title><rect x="28.9" y="435.0" width="591.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.9" y="446.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/919025338.run</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$6 (814 samples, 50.15%)</title><rect x="28.9" y="419.0" width="591.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.9" y="430.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$6</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.process (814 samples, 50.15%)</title><rect x="28.9" y="403.0" width="591.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.9" y="414.0">ru/mail/polis/service/zvladn7/AsyncService.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$133/1529390653.process (814 samples, 50.15%)</title><rect x="28.9" y="387.0" width="591.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.9" y="398.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$133/1529390653.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$get$2 (814 samples, 50.15%)</title><rect x="28.9" y="371.0" width="591.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.9" y="382.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$get$2</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.handleGet (814 samples, 50.15%)</title><rect x="28.9" y="355.0" width="591.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.9" y="366.0">ru/mail/polis/service/zvladn7/AsyncService.handleGet</text>
</g>
<g>
<title>com/google/common/cache/LocalCache$LocalManualCache.getIfPresent (15 samples, 0.92%)</title><rect x="28.9" y="339.0" width="10.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="31.9" y="350.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache.getIfPresent (15 samples, 0.92%)</title><rect x="28.9" y="323.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.9" y="334.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.get (15 samples, 0.92%)</title><rect x="28.9" y="307.0" width="10.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.9" y="318.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.recordRead (15 samples, 0.92%)</title><rect x="28.9" y="291.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (15 samples, 0.92%)</title><rect x="28.9" y="275.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (15 samples, 0.92%)</title><rect x="28.9" y="259.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.9" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentLinkedQueue$Node (15 samples, 0.92%)</title><rect x="28.9" y="243.0" width="10.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="31.9" y="254.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$LocalManualCache.put (1 samples, 0.06%)</title><rect x="39.8" y="339.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.8" y="350.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache.put (1 samples, 0.06%)</title><rect x="39.8" y="323.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.8" y="334.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.put (1 samples, 0.06%)</title><rect x="39.8" y="307.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.8" y="318.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.postWriteCleanup (1 samples, 0.06%)</title><rect x="39.8" y="291.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.8" y="302.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.runUnlockedCleanup (1 samples, 0.06%)</title><rect x="39.8" y="275.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.8" y="286.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache.processPendingNotifications (1 samples, 0.06%)</title><rect x="39.8" y="259.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$89/1827725498.onRemoval (1 samples, 0.06%)</title><rect x="39.8" y="243.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$new$1 (1 samples, 0.06%)</title><rect x="39.8" y="227.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.8" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.06%)</title><rect x="39.8" y="211.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.8" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/847847259.invoke (1 samples, 0.06%)</title><rect x="39.8" y="195.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.8" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.06%)</title><rect x="39.8" y="179.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.8" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.06%)</title><rect x="39.8" y="163.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.8" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.06%)</title><rect x="39.8" y="147.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.8" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray0 (1 samples, 0.06%)</title><rect x="39.8" y="131.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="42.8" y="142.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.06%)</title><rect x="39.8" y="115.0" width="0.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="42.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (116 samples, 7.15%)</title><rect x="40.5" y="339.0" width="84.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.5" y="350.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (116 samples, 7.15%)</title><rect x="40.5" y="323.0" width="84.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="43.5" y="334.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (80 samples, 4.93%)</title><rect x="40.5" y="307.0" width="58.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.5" y="318.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (80 samples, 4.93%)</title><rect x="40.5" y="291.0" width="58.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.5" y="302.0">one/ni..</text>
</g>
<g>
<title>byte[] (80 samples, 4.93%)</title><rect x="40.5" y="275.0" width="58.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="43.5" y="286.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (36 samples, 2.22%)</title><rect x="98.7" y="307.0" width="26.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="101.7" y="318.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (36 samples, 2.22%)</title><rect x="98.7" y="291.0" width="26.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="101.7" y="302.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.ok (119 samples, 7.33%)</title><rect x="124.9" y="339.0" width="86.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="127.9" y="350.0">one/nio/ht..</text>
</g>
<g>
<title>one.nio.http.Response (21 samples, 1.29%)</title><rect x="124.9" y="323.0" width="15.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="127.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (98 samples, 6.04%)</title><rect x="140.1" y="323.0" width="71.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.1" y="334.0">one/nio/..</text>
</g>
<g>
<title>byte[] (38 samples, 2.34%)</title><rect x="140.1" y="307.0" width="27.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="143.1" y="318.0">b..</text>
</g>
<g>
<title>java.lang.String[] (35 samples, 2.16%)</title><rect x="167.8" y="307.0" width="25.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="170.8" y="318.0">j..</text>
</g>
<g>
<title>java.lang.String (25 samples, 1.54%)</title><rect x="193.2" y="307.0" width="18.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="196.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (561 samples, 34.57%)</title><rect x="211.4" y="339.0" width="407.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.4" y="350.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (7 samples, 0.43%)</title><rect x="211.4" y="323.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.4" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (7 samples, 0.43%)</title><rect x="211.4" y="307.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="214.4" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (7 samples, 0.43%)</title><rect x="211.4" y="291.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="214.4" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (7 samples, 0.43%)</title><rect x="211.4" y="275.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="214.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (7 samples, 0.43%)</title><rect x="211.4" y="259.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.4" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (6 samples, 0.37%)</title><rect x="211.4" y="243.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.4" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (3 samples, 0.18%)</title><rect x="211.4" y="227.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="214.4" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (3 samples, 0.18%)</title><rect x="211.4" y="211.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.4" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (3 samples, 0.18%)</title><rect x="211.4" y="195.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.4" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3 samples, 0.18%)</title><rect x="211.4" y="179.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="214.4" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3 samples, 0.18%)</title><rect x="211.4" y="163.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="214.4" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$129/1632874312.compare (3 samples, 0.18%)</title><rect x="211.4" y="147.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.18%)</title><rect x="211.4" y="131.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.4" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (3 samples, 0.18%)</title><rect x="211.4" y="115.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.4" y="126.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.18%)</title><rect x="211.4" y="99.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$127/1793959830.apply (3 samples, 0.18%)</title><rect x="211.4" y="83.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="214.4" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (3 samples, 0.18%)</title><rect x="211.4" y="67.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.4" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.18%)</title><rect x="211.4" y="51.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.4" y="62.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.18%)</title><rect x="211.4" y="35.0" width="2.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="214.4" y="46.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3 samples, 0.18%)</title><rect x="213.6" y="227.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.6" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3 samples, 0.18%)</title><rect x="213.6" y="211.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.6" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3 samples, 0.18%)</title><rect x="213.6" y="195.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.6" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3 samples, 0.18%)</title><rect x="213.6" y="179.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="216.6" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3 samples, 0.18%)</title><rect x="213.6" y="163.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.6" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3 samples, 0.18%)</title><rect x="213.6" y="147.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.6" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3 samples, 0.18%)</title><rect x="213.6" y="131.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="216.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (3 samples, 0.18%)</title><rect x="213.6" y="115.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (3 samples, 0.18%)</title><rect x="213.6" y="99.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (3 samples, 0.18%)</title><rect x="213.6" y="83.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.6" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.12%)</title><rect x="213.6" y="67.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.6" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.12%)</title><rect x="213.6" y="51.0" width="1.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="216.6" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (1 samples, 0.06%)</title><rect x="215.0" y="67.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.0" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.06%)</title><rect x="215.0" y="51.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="218.0" y="62.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1 samples, 0.06%)</title><rect x="215.0" y="35.0" width="0.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="218.0" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$142/1764424015.apply (1 samples, 0.06%)</title><rect x="215.8" y="243.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (1 samples, 0.06%)</title><rect x="215.8" y="227.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.8" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.06%)</title><rect x="215.8" y="211.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.8" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1 samples, 0.06%)</title><rect x="215.8" y="195.0" width="0.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="218.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator (554 samples, 34.13%)</title><rect x="216.5" y="323.0" width="402.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.5" y="334.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.06%)</title><rect x="216.5" y="307.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.5" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.06%)</title><rect x="216.5" y="291.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$134/847296688.get$Lambda (1 samples, 0.06%)</title><rect x="216.5" y="275.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.5" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$134 (1 samples, 0.06%)</title><rect x="216.5" y="259.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="219.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator (552 samples, 34.01%)</title><rect x="217.2" y="307.0" width="401.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="220.2" y="318.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (129 samples, 7.95%)</title><rect x="217.2" y="291.0" width="93.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.2" y="302.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (129 samples, 7.95%)</title><rect x="217.2" y="275.0" width="93.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.2" y="286.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.06%)</title><rect x="217.2" y="259.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="220.2" y="270.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (1 samples, 0.06%)</title><rect x="217.2" y="243.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="220.2" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (128 samples, 7.89%)</title><rect x="217.9" y="259.0" width="93.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.9" y="270.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (128 samples, 7.89%)</title><rect x="217.9" y="243.0" width="93.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="220.9" y="254.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (1 samples, 0.06%)</title><rect x="217.9" y="227.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.9" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.06%)</title><rect x="217.9" y="211.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.9" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (1 samples, 0.06%)</title><rect x="217.9" y="195.0" width="0.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="220.9" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (127 samples, 7.83%)</title><rect x="218.7" y="227.0" width="92.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.7" y="238.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (127 samples, 7.83%)</title><rect x="218.7" y="211.0" width="92.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="221.7" y="222.0">java/util/P..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (127 samples, 7.83%)</title><rect x="218.7" y="195.0" width="92.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.7" y="206.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (127 samples, 7.83%)</title><rect x="218.7" y="179.0" width="92.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.7" y="190.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (77 samples, 4.74%)</title><rect x="218.7" y="163.0" width="55.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.7" y="174.0">com/g..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (77 samples, 4.74%)</title><rect x="218.7" y="147.0" width="55.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.7" y="158.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (77 samples, 4.74%)</title><rect x="218.7" y="131.0" width="55.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.7" y="142.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (77 samples, 4.74%)</title><rect x="218.7" y="115.0" width="55.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.7" y="126.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (35 samples, 2.16%)</title><rect x="218.7" y="99.0" width="25.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.7" y="110.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (21 samples, 1.29%)</title><rect x="218.7" y="83.0" width="15.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="221.7" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.86%)</title><rect x="233.9" y="83.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.9" y="94.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.86%)</title><rect x="233.9" y="67.0" width="10.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="236.9" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (2 samples, 0.12%)</title><rect x="244.1" y="99.0" width="1.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="247.1" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (2 samples, 0.12%)</title><rect x="245.6" y="99.0" width="1.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="248.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (33 samples, 2.03%)</title><rect x="247.0" y="99.0" width="24.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.0" y="110.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (25 samples, 1.54%)</title><rect x="247.0" y="83.0" width="18.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.0" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11 samples, 0.68%)</title><rect x="247.0" y="67.0" width="8.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="250.0" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.86%)</title><rect x="255.0" y="67.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.0" y="78.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.86%)</title><rect x="255.0" y="51.0" width="10.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="258.0" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (8 samples, 0.49%)</title><rect x="265.2" y="83.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.2" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8 samples, 0.49%)</title><rect x="265.2" y="67.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.2" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.25%)</title><rect x="265.2" y="51.0" width="2.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="268.2" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.25%)</title><rect x="268.1" y="51.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.1" y="62.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.25%)</title><rect x="268.1" y="35.0" width="2.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="271.1" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (5 samples, 0.31%)</title><rect x="271.0" y="99.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.0" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5 samples, 0.31%)</title><rect x="271.0" y="83.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.0" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.12%)</title><rect x="271.0" y="67.0" width="1.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="274.0" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.18%)</title><rect x="272.5" y="67.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.5" y="78.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.18%)</title><rect x="272.5" y="51.0" width="2.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="275.5" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$129/1632874312.compare (50 samples, 3.08%)</title><rect x="274.6" y="163.0" width="36.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="277.6" y="174.0">jav..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (50 samples, 3.08%)</title><rect x="274.6" y="147.0" width="36.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.6" y="158.0">jav..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (50 samples, 3.08%)</title><rect x="274.6" y="131.0" width="36.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.6" y="142.0">jav..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (50 samples, 3.08%)</title><rect x="274.6" y="115.0" width="36.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.6" y="126.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$127/1793959830.apply (50 samples, 3.08%)</title><rect x="274.6" y="99.0" width="36.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="277.6" y="110.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (50 samples, 3.08%)</title><rect x="274.6" y="83.0" width="36.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="277.6" y="94.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (50 samples, 3.08%)</title><rect x="274.6" y="67.0" width="36.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.6" y="78.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (50 samples, 3.08%)</title><rect x="274.6" y="51.0" width="36.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="277.6" y="62.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (3 samples, 0.18%)</title><rect x="311.0" y="291.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="314.0" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (1 samples, 0.06%)</title><rect x="311.0" y="275.0" width="0.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="314.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (2 samples, 0.12%)</title><rect x="311.7" y="275.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.7" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.12%)</title><rect x="311.7" y="259.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="314.7" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.06%)</title><rect x="311.7" y="243.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="314.7" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.06%)</title><rect x="311.7" y="227.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.7" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1 samples, 0.06%)</title><rect x="311.7" y="211.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.7" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.06%)</title><rect x="311.7" y="195.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="314.7" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.06%)</title><rect x="311.7" y="179.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="314.7" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$129/1632874312.compare (1 samples, 0.06%)</title><rect x="311.7" y="163.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.7" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1 samples, 0.06%)</title><rect x="311.7" y="147.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.7" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (1 samples, 0.06%)</title><rect x="311.7" y="131.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.7" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1 samples, 0.06%)</title><rect x="311.7" y="115.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$127/1793959830.apply (1 samples, 0.06%)</title><rect x="311.7" y="99.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.7" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (1 samples, 0.06%)</title><rect x="311.7" y="83.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.7" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.06%)</title><rect x="311.7" y="67.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.7" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1 samples, 0.06%)</title><rect x="311.7" y="51.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="314.7" y="62.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1 samples, 0.06%)</title><rect x="312.5" y="243.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.5" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1 samples, 0.06%)</title><rect x="312.5" y="227.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.5" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1 samples, 0.06%)</title><rect x="312.5" y="211.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="315.5" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1 samples, 0.06%)</title><rect x="312.5" y="195.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="315.5" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.06%)</title><rect x="312.5" y="179.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.5" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.06%)</title><rect x="312.5" y="163.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.5" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$129/1632874312.compare (1 samples, 0.06%)</title><rect x="312.5" y="147.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.5" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1 samples, 0.06%)</title><rect x="312.5" y="131.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="315.5" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (1 samples, 0.06%)</title><rect x="312.5" y="115.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.5" y="126.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1 samples, 0.06%)</title><rect x="312.5" y="99.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$127/1793959830.apply (1 samples, 0.06%)</title><rect x="312.5" y="83.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="315.5" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (1 samples, 0.06%)</title><rect x="312.5" y="67.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="315.5" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.06%)</title><rect x="312.5" y="51.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="315.5" y="62.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1 samples, 0.06%)</title><rect x="312.5" y="35.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="315.5" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList (420 samples, 25.88%)</title><rect x="313.2" y="291.0" width="305.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.2" y="302.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.getA..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (419 samples, 25.82%)</title><rect x="313.2" y="275.0" width="304.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.2" y="286.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$138/910183989.accept (419 samples, 25.82%)</title><rect x="313.2" y="259.0" width="304.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.2" y="270.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lam..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$9 (419 samples, 25.82%)</title><rect x="313.2" y="243.0" width="304.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.2" y="254.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.lamb..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.iterator (419 samples, 25.82%)</title><rect x="313.2" y="227.0" width="304.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.2" y="238.0">ru/mail/polis/dao/zvladn7/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.SSTable$SSTableIter (2 samples, 0.12%)</title><rect x="313.2" y="211.0" width="1.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="316.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt; (417 samples, 25.69%)</title><rect x="314.6" y="211.0" width="303.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.6" y="222.0">ru/mail/polis/dao/zvladn7/SSTable$SSTable..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getElementPosition (417 samples, 25.69%)</title><rect x="314.6" y="195.0" width="303.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="317.6" y="206.0">ru/mail/polis/dao/zvladn7/SSTable.getElem..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (417 samples, 25.69%)</title><rect x="314.6" y="179.0" width="303.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="317.6" y="190.0">ru/mail/polis/dao/zvladn7/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (297 samples, 18.30%)</title><rect x="314.6" y="163.0" width="216.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.6" y="174.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (146 samples, 9.00%)</title><rect x="314.6" y="147.0" width="106.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="317.6" y="158.0">java.nio.Heap..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (151 samples, 9.30%)</title><rect x="420.8" y="147.0" width="109.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="423.8" y="158.0">java/nio/Heap..</text>
</g>
<g>
<title>byte[] (151 samples, 9.30%)</title><rect x="420.8" y="131.0" width="109.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="423.8" y="142.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (120 samples, 7.39%)</title><rect x="530.6" y="163.0" width="87.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="533.6" y="174.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (120 samples, 7.39%)</title><rect x="530.6" y="147.0" width="87.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="533.6" y="158.0">java/nio/B..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (72 samples, 4.44%)</title><rect x="530.6" y="131.0" width="52.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="533.6" y="142.0">java...</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (48 samples, 2.96%)</title><rect x="582.9" y="131.0" width="34.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="585.9" y="142.0">ja..</text>
</g>
<g>
<title>byte[] (48 samples, 2.96%)</title><rect x="582.9" y="115.0" width="34.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="585.9" y="126.0">by..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.06%)</title><rect x="617.8" y="275.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="620.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.06%)</title><rect x="617.8" y="259.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="620.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$138/910183989.get$Lambda (1 samples, 0.06%)</title><rect x="617.8" y="243.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="620.8" y="254.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$138 (1 samples, 0.06%)</title><rect x="617.8" y="227.0" width="0.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="620.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.iterator (1 samples, 0.06%)</title><rect x="618.5" y="307.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="621.5" y="318.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.06%)</title><rect x="618.5" y="291.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="621.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (1 samples, 0.06%)</title><rect x="618.5" y="275.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.5" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (1 samples, 0.06%)</title><rect x="618.5" y="259.0" width="0.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="621.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.toBytes (1 samples, 0.06%)</title><rect x="619.3" y="339.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="622.3" y="350.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.06%)</title><rect x="619.3" y="323.0" width="0.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="622.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.wrapString (1 samples, 0.06%)</title><rect x="620.0" y="339.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="623.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.toBytes (1 samples, 0.06%)</title><rect x="620.0" y="323.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (1 samples, 0.06%)</title><rect x="620.0" y="307.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="623.0" y="318.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.06%)</title><rect x="620.0" y="291.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="623.0" y="302.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (783 samples, 48.24%)</title><rect x="620.7" y="483.0" width="569.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.7" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (46 samples, 2.83%)</title><rect x="620.7" y="467.0" width="33.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.7" y="478.0">on..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (46 samples, 2.83%)</title><rect x="620.7" y="451.0" width="33.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="623.7" y="462.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.process (737 samples, 45.41%)</title><rect x="654.2" y="467.0" width="535.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.2" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (737 samples, 45.41%)</title><rect x="654.2" y="451.0" width="535.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="657.2" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (737 samples, 45.41%)</title><rect x="654.2" y="435.0" width="535.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.2" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (201 samples, 12.38%)</title><rect x="654.2" y="419.0" width="146.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.2" y="430.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (201 samples, 12.38%)</title><rect x="654.2" y="403.0" width="146.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.2" y="414.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (118 samples, 7.27%)</title><rect x="654.2" y="387.0" width="85.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="657.2" y="398.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (69 samples, 4.25%)</title><rect x="654.2" y="371.0" width="50.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="657.2" y="382.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (69 samples, 4.25%)</title><rect x="654.2" y="355.0" width="50.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.2" y="366.0">one/n..</text>
</g>
<g>
<title>java/lang/String.substring (69 samples, 4.25%)</title><rect x="654.2" y="339.0" width="50.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="657.2" y="350.0">java/..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (69 samples, 4.25%)</title><rect x="654.2" y="323.0" width="50.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="657.2" y="334.0">java/..</text>
</g>
<g>
<title>java.lang.String (36 samples, 2.22%)</title><rect x="654.2" y="307.0" width="26.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="657.2" y="318.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (33 samples, 2.03%)</title><rect x="680.3" y="307.0" width="24.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="683.3" y="318.0">j..</text>
</g>
<g>
<title>byte[] (33 samples, 2.03%)</title><rect x="680.3" y="291.0" width="24.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="683.3" y="302.0">b..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.get (49 samples, 3.02%)</title><rect x="704.3" y="371.0" width="35.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="707.3" y="382.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (28 samples, 1.73%)</title><rect x="704.3" y="355.0" width="20.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="707.3" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (28 samples, 1.73%)</title><rect x="704.3" y="339.0" width="20.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="707.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$133/1529390653.get$Lambda (28 samples, 1.73%)</title><rect x="704.3" y="323.0" width="20.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="707.3" y="334.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$133 (28 samples, 1.73%)</title><rect x="704.3" y="307.0" width="20.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="707.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.processRequest (21 samples, 1.29%)</title><rect x="724.7" y="355.0" width="15.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="727.7" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (18 samples, 1.11%)</title><rect x="724.7" y="339.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="727.7" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (18 samples, 1.11%)</title><rect x="724.7" y="323.0" width="13.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="727.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/919025338.get$Lambda (18 samples, 1.11%)</title><rect x="724.7" y="307.0" width="13.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="727.7" y="318.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$100 (18 samples, 1.11%)</title><rect x="724.7" y="291.0" width="13.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="727.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.18%)</title><rect x="737.8" y="339.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="740.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.18%)</title><rect x="737.8" y="323.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="740.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.18%)</title><rect x="737.8" y="307.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="740.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.18%)</title><rect x="737.8" y="291.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="740.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.18%)</title><rect x="737.8" y="275.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="740.8" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (3 samples, 0.18%)</title><rect x="737.8" y="259.0" width="2.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="740.8" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (83 samples, 5.11%)</title><rect x="740.0" y="387.0" width="60.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="743.0" y="398.0">one/ni..</text>
</g>
<g>
<title>java/lang/String.substring (83 samples, 5.11%)</title><rect x="740.0" y="371.0" width="60.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="743.0" y="382.0">java/l..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (83 samples, 5.11%)</title><rect x="740.0" y="355.0" width="60.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="743.0" y="366.0">java/l..</text>
</g>
<g>
<title>java.lang.String (38 samples, 2.34%)</title><rect x="740.0" y="339.0" width="27.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="743.0" y="350.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (45 samples, 2.77%)</title><rect x="767.6" y="339.0" width="32.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="770.6" y="350.0">ja..</text>
</g>
<g>
<title>byte[] (45 samples, 2.77%)</title><rect x="767.6" y="323.0" width="32.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="770.6" y="334.0">by..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (357 samples, 22.00%)</title><rect x="800.3" y="419.0" width="259.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.3" y="430.0">one/nio/http/HttpSession.parseRequest</text>
</g>
<g>
<title>one.nio.http.Request (61 samples, 3.76%)</title><rect x="800.3" y="403.0" width="44.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="803.3" y="414.0">one...</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (121 samples, 7.46%)</title><rect x="844.7" y="403.0" width="87.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="847.7" y="414.0">one/nio/ht..</text>
</g>
<g>
<title>java.lang.String[] (121 samples, 7.46%)</title><rect x="844.7" y="387.0" width="87.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="847.7" y="398.0">java.lang...</text>
</g>
<g>
<title>one/nio/util/Utf8.read (175 samples, 10.78%)</title><rect x="932.6" y="403.0" width="127.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="935.6" y="414.0">one/nio/util/Utf..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (175 samples, 10.78%)</title><rect x="932.6" y="387.0" width="127.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="935.6" y="398.0">one/nio/util/Utf..</text>
</g>
<g>
<title>char[] (84 samples, 5.18%)</title><rect x="932.6" y="371.0" width="61.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="935.6" y="382.0">char[]</text>
</g>
<g>
<title>java.lang.String (40 samples, 2.46%)</title><rect x="993.7" y="371.0" width="29.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="996.7" y="382.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (51 samples, 3.14%)</title><rect x="1022.8" y="371.0" width="37.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1025.8" y="382.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (51 samples, 3.14%)</title><rect x="1022.8" y="355.0" width="37.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1025.8" y="366.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (51 samples, 3.14%)</title><rect x="1022.8" y="339.0" width="37.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1025.8" y="350.0">jav..</text>
</g>
<g>
<title>byte[] (51 samples, 3.14%)</title><rect x="1022.8" y="323.0" width="37.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1025.8" y="334.0">byt..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (179 samples, 11.03%)</title><rect x="1059.9" y="419.0" width="130.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1062.9" y="430.0">one/nio/util/Utf..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (179 samples, 11.03%)</title><rect x="1059.9" y="403.0" width="130.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1062.9" y="414.0">one/nio/util/Utf..</text>
</g>
<g>
<title>char[] (84 samples, 5.18%)</title><rect x="1059.9" y="387.0" width="61.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1062.9" y="398.0">char[]</text>
</g>
<g>
<title>java.lang.String (36 samples, 2.22%)</title><rect x="1120.9" y="387.0" width="26.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1123.9" y="398.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (59 samples, 3.64%)</title><rect x="1147.1" y="387.0" width="42.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1150.1" y="398.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (59 samples, 3.64%)</title><rect x="1147.1" y="371.0" width="42.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1150.1" y="382.0">java..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (59 samples, 3.64%)</title><rect x="1147.1" y="355.0" width="42.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1150.1" y="366.0">java..</text>
</g>
<g>
<title>byte[] (59 samples, 3.64%)</title><rect x="1147.1" y="339.0" width="42.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1150.1" y="350.0">byte[]</text>
</g>
</g>
</svg>
