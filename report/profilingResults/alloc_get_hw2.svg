<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="549"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="549"> </text>
<g id="frames">
<g>
<title>all (32,631 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="526.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (32,631 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="510.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (194 samples, 0.59%)</title><rect x="10.0" y="483.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (194 samples, 0.59%)</title><rect x="10.0" y="467.0" width="7.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (32,437 samples, 99.41%)</title><rect x="17.0" y="483.0" width="1173.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="494.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (32,437 samples, 99.41%)</title><rect x="17.0" y="467.0" width="1173.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="478.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (32,437 samples, 99.41%)</title><rect x="17.0" y="451.0" width="1173.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.0" y="462.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (32,068 samples, 98.27%)</title><rect x="17.0" y="435.0" width="1159.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="446.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (32,068 samples, 98.27%)</title><rect x="17.0" y="419.0" width="1159.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="430.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (32,031 samples, 98.16%)</title><rect x="17.0" y="403.0" width="1158.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="414.0">RequestHandler1_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (100 samples, 0.31%)</title><rect x="17.0" y="387.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (100 samples, 0.31%)</title><rect x="17.0" y="371.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (62 samples, 0.19%)</title><rect x="17.0" y="355.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (62 samples, 0.19%)</title><rect x="17.0" y="339.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="350.0"></text>
</g>
<g>
<title>byte[] (62 samples, 0.19%)</title><rect x="17.0" y="323.0" width="2.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="20.0" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (38 samples, 0.12%)</title><rect x="19.3" y="355.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.3" y="366.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (38 samples, 0.12%)</title><rect x="19.3" y="339.0" width="1.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="22.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (32 samples, 0.10%)</title><rect x="20.6" y="387.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (32 samples, 0.10%)</title><rect x="20.6" y="371.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (32 samples, 0.10%)</title><rect x="20.6" y="355.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.6" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (32 samples, 0.10%)</title><rect x="20.6" y="339.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.6" y="350.0"></text>
</g>
<g>
<title>java.lang.String (10 samples, 0.03%)</title><rect x="20.6" y="323.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="23.6" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (22 samples, 0.07%)</title><rect x="21.0" y="323.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.0" y="334.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.07%)</title><rect x="21.0" y="307.0" width="0.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="24.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.get (31,899 samples, 97.76%)</title><rect x="21.8" y="387.0" width="1153.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.8" y="398.0">ru/mail/polis/service/zvladn7/BasicService.get</text>
</g>
<g>
<title>one/nio/http/Response.ok (82 samples, 0.25%)</title><rect x="21.8" y="371.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.8" y="382.0"></text>
</g>
<g>
<title>one.nio.http.Response (9 samples, 0.03%)</title><rect x="21.8" y="355.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="24.8" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (73 samples, 0.22%)</title><rect x="22.1" y="355.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.1" y="366.0"></text>
</g>
<g>
<title>byte[] (35 samples, 0.11%)</title><rect x="22.1" y="339.0" width="1.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="25.1" y="350.0"></text>
</g>
<g>
<title>java.lang.String[] (21 samples, 0.06%)</title><rect x="23.4" y="339.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="26.4" y="350.0"></text>
</g>
<g>
<title>java.lang.String (17 samples, 0.05%)</title><rect x="24.1" y="339.0" width="0.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="27.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (31,790 samples, 97.42%)</title><rect x="24.8" y="371.0" width="1149.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="27.8" y="382.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (2,313 samples, 7.09%)</title><rect x="24.8" y="355.0" width="83.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="27.8" y="366.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2,313 samples, 7.09%)</title><rect x="24.8" y="339.0" width="83.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.8" y="350.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2,313 samples, 7.09%)</title><rect x="24.8" y="323.0" width="83.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.8" y="334.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (2,313 samples, 7.09%)</title><rect x="24.8" y="307.0" width="83.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.8" y="318.0">com/googl..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2,313 samples, 7.09%)</title><rect x="24.8" y="291.0" width="83.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="27.8" y="302.0">ru/mail/p..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,161 samples, 6.62%)</title><rect x="24.8" y="275.0" width="78.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.8" y="286.0">com/googl..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1,237 samples, 3.79%)</title><rect x="24.8" y="259.0" width="44.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.8" y="270.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1,237 samples, 3.79%)</title><rect x="24.8" y="243.0" width="44.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.8" y="254.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1,237 samples, 3.79%)</title><rect x="24.8" y="227.0" width="44.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.8" y="238.0">java..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,237 samples, 3.79%)</title><rect x="24.8" y="211.0" width="44.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.8" y="222.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,237 samples, 3.79%)</title><rect x="24.8" y="195.0" width="44.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.8" y="206.0">com/..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$99/1511943480.compare (1,237 samples, 3.79%)</title><rect x="24.8" y="179.0" width="44.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.8" y="190.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,237 samples, 3.79%)</title><rect x="24.8" y="163.0" width="44.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.8" y="174.0">java..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (1,237 samples, 3.79%)</title><rect x="24.8" y="147.0" width="44.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="27.8" y="158.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,237 samples, 3.79%)</title><rect x="24.8" y="131.0" width="44.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.8" y="142.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$97/1945080538.apply (1,237 samples, 3.79%)</title><rect x="24.8" y="115.0" width="44.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.8" y="126.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (1,237 samples, 3.79%)</title><rect x="24.8" y="99.0" width="44.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.8" y="110.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,237 samples, 3.79%)</title><rect x="24.8" y="83.0" width="44.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.8" y="94.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,237 samples, 3.79%)</title><rect x="24.8" y="67.0" width="44.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="27.8" y="78.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (924 samples, 2.83%)</title><rect x="69.5" y="259.0" width="33.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.5" y="270.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (924 samples, 2.83%)</title><rect x="69.5" y="243.0" width="33.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.5" y="254.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (924 samples, 2.83%)</title><rect x="69.5" y="227.0" width="33.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.5" y="238.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (924 samples, 2.83%)</title><rect x="69.5" y="211.0" width="33.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.5" y="222.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (924 samples, 2.83%)</title><rect x="69.5" y="195.0" width="33.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="72.5" y="206.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (924 samples, 2.83%)</title><rect x="69.5" y="179.0" width="33.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.5" y="190.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (726 samples, 2.22%)</title><rect x="69.5" y="163.0" width="26.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.5" y="174.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (726 samples, 2.22%)</title><rect x="69.5" y="147.0" width="26.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.5" y="158.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (726 samples, 2.22%)</title><rect x="69.5" y="131.0" width="26.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="72.5" y="142.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (726 samples, 2.22%)</title><rect x="69.5" y="115.0" width="26.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.5" y="126.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (343 samples, 1.05%)</title><rect x="69.5" y="99.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.5" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (217 samples, 0.67%)</title><rect x="69.5" y="83.0" width="7.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="72.5" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (126 samples, 0.39%)</title><rect x="77.3" y="83.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.3" y="94.0"></text>
</g>
<g>
<title>byte[] (126 samples, 0.39%)</title><rect x="77.3" y="67.0" width="4.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="80.3" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (36 samples, 0.11%)</title><rect x="81.9" y="99.0" width="1.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="84.9" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (42 samples, 0.13%)</title><rect x="83.2" y="99.0" width="1.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="86.2" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (190 samples, 0.58%)</title><rect x="84.7" y="99.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.7" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (153 samples, 0.47%)</title><rect x="84.7" y="83.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.7" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (75 samples, 0.23%)</title><rect x="84.7" y="67.0" width="2.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="87.7" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (78 samples, 0.24%)</title><rect x="87.4" y="67.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.4" y="78.0"></text>
</g>
<g>
<title>byte[] (78 samples, 0.24%)</title><rect x="87.4" y="51.0" width="2.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="90.4" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (37 samples, 0.11%)</title><rect x="90.2" y="83.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="93.2" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (37 samples, 0.11%)</title><rect x="90.2" y="67.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="93.2" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (37 samples, 0.11%)</title><rect x="90.2" y="51.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.2" y="62.0"></text>
</g>
<g>
<title>byte[] (37 samples, 0.11%)</title><rect x="90.2" y="35.0" width="1.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="93.2" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (115 samples, 0.35%)</title><rect x="91.6" y="99.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.6" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (115 samples, 0.35%)</title><rect x="91.6" y="83.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.6" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (76 samples, 0.23%)</title><rect x="91.6" y="67.0" width="2.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="94.6" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (39 samples, 0.12%)</title><rect x="94.3" y="67.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.3" y="78.0"></text>
</g>
<g>
<title>byte[] (39 samples, 0.12%)</title><rect x="94.3" y="51.0" width="1.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="97.3" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$99/1511943480.compare (198 samples, 0.61%)</title><rect x="95.7" y="163.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.7" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (198 samples, 0.61%)</title><rect x="95.7" y="147.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.7" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (198 samples, 0.61%)</title><rect x="95.7" y="131.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.7" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (198 samples, 0.61%)</title><rect x="95.7" y="115.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$97/1945080538.apply (198 samples, 0.61%)</title><rect x="95.7" y="99.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.7" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (198 samples, 0.61%)</title><rect x="95.7" y="83.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.7" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (198 samples, 0.61%)</title><rect x="95.7" y="67.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.7" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (198 samples, 0.61%)</title><rect x="95.7" y="51.0" width="7.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="98.7" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$107/731840231.apply (152 samples, 0.47%)</title><rect x="102.9" y="275.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="105.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (152 samples, 0.47%)</title><rect x="102.9" y="259.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.9" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (152 samples, 0.47%)</title><rect x="102.9" y="243.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.9" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (152 samples, 0.47%)</title><rect x="102.9" y="227.0" width="5.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="105.9" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (34 samples, 0.10%)</title><rect x="108.4" y="355.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.4" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (34 samples, 0.10%)</title><rect x="108.4" y="339.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$119/389634056.apply (34 samples, 0.10%)</title><rect x="108.4" y="323.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$iterator$4 (34 samples, 0.10%)</title><rect x="108.4" y="307.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="111.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (10 samples, 0.03%)</title><rect x="108.5" y="291.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.5" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (10 samples, 0.03%)</title><rect x="108.5" y="275.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.5" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (10 samples, 0.03%)</title><rect x="108.5" y="259.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="111.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (20 samples, 0.06%)</title><rect x="108.9" y="291.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.9" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (20 samples, 0.06%)</title><rect x="108.9" y="275.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.9" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (20 samples, 0.06%)</title><rect x="108.9" y="259.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="111.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (12 samples, 0.04%)</title><rect x="109.6" y="355.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="112.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (12 samples, 0.04%)</title><rect x="109.6" y="339.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.6" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (12 samples, 0.04%)</title><rect x="109.6" y="323.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="112.6" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (12 samples, 0.04%)</title><rect x="109.6" y="307.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="112.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (15 samples, 0.05%)</title><rect x="110.1" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (15 samples, 0.05%)</title><rect x="110.1" y="339.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (15 samples, 0.05%)</title><rect x="110.1" y="323.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.1" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (15 samples, 0.05%)</title><rect x="110.1" y="307.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="113.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator (29,416 samples, 90.15%)</title><rect x="110.6" y="355.0" width="1063.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="113.6" y="366.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator</text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 0.03%)</title><rect x="111.1" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (9 samples, 0.03%)</title><rect x="111.1" y="323.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="114.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (9 samples, 0.03%)</title><rect x="111.1" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="114.1" y="318.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (9 samples, 0.03%)</title><rect x="111.1" y="291.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="114.1" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (56 samples, 0.17%)</title><rect x="111.6" y="339.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="114.6" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (56 samples, 0.17%)</title><rect x="111.6" y="323.0" width="2.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="114.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator (29,270 samples, 89.70%)</title><rect x="113.6" y="339.0" width="1058.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.6" y="350.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (8,025 samples, 24.59%)</title><rect x="113.6" y="323.0" width="290.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.6" y="334.0">com/google/common/collect/Iterators.mer..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (8,021 samples, 24.58%)</title><rect x="113.7" y="307.0" width="290.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="116.7" y="318.0">com/google/common/collect/Iterators$Mer..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (236 samples, 0.72%)</title><rect x="113.9" y="291.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.9" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (236 samples, 0.72%)</title><rect x="113.9" y="275.0" width="8.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="116.9" y="286.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (12 samples, 0.04%)</title><rect x="122.5" y="291.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="125.5" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (7,714 samples, 23.64%)</title><rect x="123.1" y="291.0" width="279.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.1" y="302.0">java/util/PriorityQueue.add</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (7,714 samples, 23.64%)</title><rect x="123.1" y="275.0" width="279.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.1" y="286.0">java/util/PriorityQueue.offer</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (158 samples, 0.48%)</title><rect x="123.1" y="259.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="126.1" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (158 samples, 0.48%)</title><rect x="123.1" y="243.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="126.1" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (158 samples, 0.48%)</title><rect x="123.1" y="227.0" width="5.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="126.1" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (7,556 samples, 23.16%)</title><rect x="128.8" y="259.0" width="273.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="131.8" y="270.0">java/util/PriorityQueue.siftUp</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (7,556 samples, 23.16%)</title><rect x="128.8" y="243.0" width="273.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="131.8" y="254.0">java/util/PriorityQueue.siftUpUsingCo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7,556 samples, 23.16%)</title><rect x="128.8" y="227.0" width="273.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.8" y="238.0">com/google/common/collect/Iterators$M..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7,556 samples, 23.16%)</title><rect x="128.8" y="211.0" width="273.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.8" y="222.0">com/google/common/collect/Iterators$M..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4,937 samples, 15.13%)</title><rect x="128.8" y="195.0" width="178.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.8" y="206.0">com/google/common/colle..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (4,937 samples, 15.13%)</title><rect x="128.8" y="179.0" width="178.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.8" y="190.0">ru/mail/polis/dao/zvlad..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (4,937 samples, 15.13%)</title><rect x="128.8" y="163.0" width="178.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="131.8" y="174.0">ru/mail/polis/dao/zvlad..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (4,937 samples, 15.13%)</title><rect x="128.8" y="147.0" width="178.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="131.8" y="158.0">ru/mail/polis/dao/zvlad..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,374 samples, 7.28%)</title><rect x="128.8" y="131.0" width="85.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.8" y="142.0">java/nio/B..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,456 samples, 4.46%)</title><rect x="128.8" y="115.0" width="52.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="131.8" y="126.0">java...</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (918 samples, 2.81%)</title><rect x="181.5" y="115.0" width="33.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.5" y="126.0">ja..</text>
</g>
<g>
<title>byte[] (918 samples, 2.81%)</title><rect x="181.5" y="99.0" width="33.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="184.5" y="110.0">by..</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (218 samples, 0.67%)</title><rect x="214.7" y="131.0" width="7.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="217.7" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (243 samples, 0.74%)</title><rect x="222.6" y="131.0" width="8.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="225.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (1,408 samples, 4.31%)</title><rect x="231.3" y="131.0" width="51.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.3" y="142.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,179 samples, 3.61%)</title><rect x="231.3" y="115.0" width="42.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.3" y="126.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (488 samples, 1.50%)</title><rect x="231.3" y="99.0" width="17.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="234.3" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (691 samples, 2.12%)</title><rect x="249.0" y="99.0" width="25.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.0" y="110.0">j..</text>
</g>
<g>
<title>byte[] (691 samples, 2.12%)</title><rect x="249.0" y="83.0" width="25.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="252.0" y="94.0">b..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (229 samples, 0.70%)</title><rect x="274.0" y="115.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.0" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (229 samples, 0.70%)</title><rect x="274.0" y="99.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.0" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (229 samples, 0.70%)</title><rect x="274.0" y="83.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.0" y="94.0"></text>
</g>
<g>
<title>byte[] (229 samples, 0.70%)</title><rect x="274.0" y="67.0" width="8.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="277.0" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (694 samples, 2.13%)</title><rect x="282.3" y="131.0" width="25.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.3" y="142.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (694 samples, 2.13%)</title><rect x="282.3" y="115.0" width="25.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.3" y="126.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (437 samples, 1.34%)</title><rect x="282.3" y="99.0" width="15.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="285.3" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (257 samples, 0.79%)</title><rect x="298.1" y="99.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.1" y="110.0"></text>
</g>
<g>
<title>byte[] (257 samples, 0.79%)</title><rect x="298.1" y="83.0" width="9.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="301.1" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$99/1511943480.compare (2,619 samples, 8.03%)</title><rect x="307.4" y="195.0" width="94.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.4" y="206.0">java/util/C..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,619 samples, 8.03%)</title><rect x="307.4" y="179.0" width="94.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.4" y="190.0">java/util/C..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (2,619 samples, 8.03%)</title><rect x="307.4" y="163.0" width="94.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.4" y="174.0">java/util/C..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2,619 samples, 8.03%)</title><rect x="307.4" y="147.0" width="94.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.4" y="158.0">java/util/C..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$97/1945080538.apply (2,619 samples, 8.03%)</title><rect x="307.4" y="131.0" width="94.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.4" y="142.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (2,619 samples, 8.03%)</title><rect x="307.4" y="115.0" width="94.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.4" y="126.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2,619 samples, 8.03%)</title><rect x="307.4" y="99.0" width="94.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.4" y="110.0">java/nio/He..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2,619 samples, 8.03%)</title><rect x="307.4" y="83.0" width="94.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="310.4" y="94.0">java.nio.He..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (48 samples, 0.15%)</title><rect x="402.1" y="291.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="405.1" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (48 samples, 0.15%)</title><rect x="402.1" y="275.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="405.1" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (48 samples, 0.15%)</title><rect x="402.1" y="259.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="405.1" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (43 samples, 0.13%)</title><rect x="402.2" y="243.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="405.2" y="254.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (10 samples, 0.03%)</title><rect x="402.2" y="227.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="405.2" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (12 samples, 0.04%)</title><rect x="402.6" y="227.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="405.6" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (12 samples, 0.04%)</title><rect x="402.6" y="211.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="405.6" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$95/1366553535.get$Lambda (11 samples, 0.03%)</title><rect x="402.6" y="195.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="405.6" y="206.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$95 (11 samples, 0.03%)</title><rect x="402.6" y="179.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="405.6" y="190.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (18 samples, 0.06%)</title><rect x="403.2" y="227.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.2" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (18 samples, 0.06%)</title><rect x="403.2" y="211.0" width="0.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="406.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (456 samples, 1.40%)</title><rect x="403.8" y="323.0" width="16.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="406.8" y="334.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (11 samples, 0.03%)</title><rect x="403.8" y="307.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="406.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (445 samples, 1.36%)</title><rect x="404.2" y="307.0" width="16.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="407.2" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (445 samples, 1.36%)</title><rect x="404.2" y="291.0" width="16.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="407.2" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (250 samples, 0.77%)</title><rect x="404.2" y="275.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.2" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (250 samples, 0.77%)</title><rect x="404.2" y="259.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="407.2" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (250 samples, 0.77%)</title><rect x="404.2" y="243.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="407.2" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (250 samples, 0.77%)</title><rect x="404.2" y="227.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="407.2" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (250 samples, 0.77%)</title><rect x="404.2" y="211.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.2" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$99/1511943480.compare (250 samples, 0.77%)</title><rect x="404.2" y="195.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="407.2" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (250 samples, 0.77%)</title><rect x="404.2" y="179.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.2" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (250 samples, 0.77%)</title><rect x="404.2" y="163.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.2" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (250 samples, 0.77%)</title><rect x="404.2" y="147.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="407.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$97/1945080538.apply (250 samples, 0.77%)</title><rect x="404.2" y="131.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (250 samples, 0.77%)</title><rect x="404.2" y="115.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="407.2" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (250 samples, 0.77%)</title><rect x="404.2" y="99.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.2" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (250 samples, 0.77%)</title><rect x="404.2" y="83.0" width="9.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="407.2" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (195 samples, 0.60%)</title><rect x="413.2" y="275.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="416.2" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (195 samples, 0.60%)</title><rect x="413.2" y="259.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="416.2" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (195 samples, 0.60%)</title><rect x="413.2" y="243.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="416.2" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (195 samples, 0.60%)</title><rect x="413.2" y="227.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="416.2" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (195 samples, 0.60%)</title><rect x="413.2" y="211.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="416.2" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (195 samples, 0.60%)</title><rect x="413.2" y="195.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="416.2" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (126 samples, 0.39%)</title><rect x="413.2" y="179.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="416.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (126 samples, 0.39%)</title><rect x="413.2" y="163.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="416.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (126 samples, 0.39%)</title><rect x="413.2" y="147.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="416.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (126 samples, 0.39%)</title><rect x="413.2" y="131.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.2" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (61 samples, 0.19%)</title><rect x="413.2" y="115.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="416.2" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (37 samples, 0.11%)</title><rect x="413.2" y="99.0" width="1.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="416.2" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (24 samples, 0.07%)</title><rect x="414.6" y="99.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="417.6" y="110.0"></text>
</g>
<g>
<title>byte[] (24 samples, 0.07%)</title><rect x="414.6" y="83.0" width="0.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="417.6" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (38 samples, 0.12%)</title><rect x="415.8" y="115.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="418.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (29 samples, 0.09%)</title><rect x="415.8" y="99.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="418.8" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (15 samples, 0.05%)</title><rect x="415.8" y="83.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="418.8" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.04%)</title><rect x="416.3" y="83.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="419.3" y="94.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.04%)</title><rect x="416.3" y="67.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="419.3" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (9 samples, 0.03%)</title><rect x="416.8" y="99.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="419.8" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (9 samples, 0.03%)</title><rect x="416.8" y="83.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="419.8" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.03%)</title><rect x="416.8" y="67.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.8" y="78.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.03%)</title><rect x="416.8" y="51.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="419.8" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (18 samples, 0.06%)</title><rect x="417.1" y="115.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (18 samples, 0.06%)</title><rect x="417.1" y="99.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.1" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (14 samples, 0.04%)</title><rect x="417.1" y="83.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="420.1" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$99/1511943480.compare (69 samples, 0.21%)</title><rect x="417.8" y="179.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.8" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (69 samples, 0.21%)</title><rect x="417.8" y="163.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="420.8" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (69 samples, 0.21%)</title><rect x="417.8" y="147.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="420.8" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (69 samples, 0.21%)</title><rect x="417.8" y="131.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="420.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$97/1945080538.apply (69 samples, 0.21%)</title><rect x="417.8" y="115.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (69 samples, 0.21%)</title><rect x="417.8" y="99.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="420.8" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (69 samples, 0.21%)</title><rect x="417.8" y="83.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (69 samples, 0.21%)</title><rect x="417.8" y="67.0" width="2.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="420.8" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList (20,789 samples, 63.71%)</title><rect x="420.3" y="323.0" width="751.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="423.3" y="334.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList</text>
</g>
<g>
<title>java/lang/Iterable.forEach (20,785 samples, 63.70%)</title><rect x="420.3" y="307.0" width="751.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="423.3" y="318.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (19 samples, 0.06%)</title><rect x="420.3" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="423.3" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (13 samples, 0.04%)</title><rect x="420.5" y="275.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.5" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (13 samples, 0.04%)</title><rect x="420.5" y="259.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="423.5" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (13 samples, 0.04%)</title><rect x="420.5" y="243.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="423.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$104/515740218.accept (20,766 samples, 63.64%)</title><rect x="421.0" y="291.0" width="750.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="424.0" y="302.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$104/515740218.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$10 (20,766 samples, 63.64%)</title><rect x="421.0" y="275.0" width="750.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="424.0" y="286.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$10</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.iterator (20,766 samples, 63.64%)</title><rect x="421.0" y="259.0" width="750.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="424.0" y="270.0">ru/mail/polis/dao/zvladn7/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.SSTable$SSTableIter (203 samples, 0.62%)</title><rect x="421.0" y="243.0" width="7.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="424.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt; (20,563 samples, 63.02%)</title><rect x="428.3" y="243.0" width="743.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="431.3" y="254.0">ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getElementPosition (20,563 samples, 63.02%)</title><rect x="428.3" y="227.0" width="743.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="431.3" y="238.0">ru/mail/polis/dao/zvladn7/SSTable.getElementPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (20,563 samples, 63.02%)</title><rect x="428.3" y="211.0" width="743.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="431.3" y="222.0">ru/mail/polis/dao/zvladn7/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (17,127 samples, 52.49%)</title><rect x="428.3" y="195.0" width="619.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.3" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,895 samples, 21.13%)</title><rect x="428.3" y="179.0" width="249.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="431.3" y="190.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10,232 samples, 31.36%)</title><rect x="677.7" y="179.0" width="370.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="680.7" y="190.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (10,232 samples, 31.36%)</title><rect x="677.7" y="163.0" width="370.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="680.7" y="174.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (3,436 samples, 10.53%)</title><rect x="1047.7" y="195.0" width="124.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1050.7" y="206.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3,436 samples, 10.53%)</title><rect x="1047.7" y="179.0" width="124.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1050.7" y="190.0">java/nio/ByteBu..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3,436 samples, 10.53%)</title><rect x="1047.7" y="163.0" width="124.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1050.7" y="174.0">java/nio/HeapBy..</text>
</g>
<g>
<title>byte[] (3,436 samples, 10.53%)</title><rect x="1047.7" y="147.0" width="124.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1050.7" y="158.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.iterator (63 samples, 0.19%)</title><rect x="1172.1" y="339.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1175.1" y="350.0"></text>
</g>
<g>
<title>java/util/Collection.stream (15 samples, 0.05%)</title><rect x="1172.1" y="323.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1175.1" y="334.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (9 samples, 0.03%)</title><rect x="1172.3" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1175.3" y="318.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (9 samples, 0.03%)</title><rect x="1172.3" y="291.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1175.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (17 samples, 0.05%)</title><rect x="1172.7" y="323.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1175.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (17 samples, 0.05%)</title><rect x="1172.7" y="307.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1175.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (17 samples, 0.05%)</title><rect x="1172.7" y="291.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1175.7" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (17 samples, 0.05%)</title><rect x="1172.7" y="275.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1175.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (14 samples, 0.04%)</title><rect x="1173.3" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1176.3" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (11 samples, 0.03%)</title><rect x="1173.4" y="307.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1176.4" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (7 samples, 0.02%)</title><rect x="1173.5" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1176.5" y="302.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (7 samples, 0.02%)</title><rect x="1173.5" y="275.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1176.5" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (15 samples, 0.05%)</title><rect x="1173.8" y="323.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1176.8" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (15 samples, 0.05%)</title><rect x="1173.8" y="307.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1176.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.toBytes (7 samples, 0.02%)</title><rect x="1174.3" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1177.3" y="382.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.02%)</title><rect x="1174.3" y="355.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1177.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.wrapString (19 samples, 0.06%)</title><rect x="1174.6" y="371.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1177.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.04%)</title><rect x="1174.6" y="355.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1177.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.04%)</title><rect x="1174.6" y="339.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1177.6" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (12 samples, 0.04%)</title><rect x="1174.6" y="323.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1177.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.toBytes (7 samples, 0.02%)</title><rect x="1175.1" y="355.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1178.1" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (7 samples, 0.02%)</title><rect x="1175.1" y="339.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1178.1" y="350.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.02%)</title><rect x="1175.1" y="323.0" width="0.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1178.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (37 samples, 0.11%)</title><rect x="1175.3" y="403.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1178.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (37 samples, 0.11%)</title><rect x="1175.3" y="387.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1178.3" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (37 samples, 0.11%)</title><rect x="1175.3" y="371.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1178.3" y="382.0"></text>
</g>
<g>
<title>java.lang.String (11 samples, 0.03%)</title><rect x="1175.3" y="355.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1178.3" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (26 samples, 0.08%)</title><rect x="1175.7" y="355.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1178.7" y="366.0"></text>
</g>
<g>
<title>byte[] (26 samples, 0.08%)</title><rect x="1175.7" y="339.0" width="1.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1178.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (292 samples, 0.89%)</title><rect x="1176.7" y="435.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1179.7" y="446.0"></text>
</g>
<g>
<title>one.nio.http.Request (25 samples, 0.08%)</title><rect x="1176.7" y="419.0" width="0.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (54 samples, 0.17%)</title><rect x="1177.6" y="419.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1180.6" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (54 samples, 0.17%)</title><rect x="1177.6" y="403.0" width="1.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1180.6" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (213 samples, 0.65%)</title><rect x="1179.5" y="419.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1182.5" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (213 samples, 0.65%)</title><rect x="1179.5" y="403.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1182.5" y="414.0"></text>
</g>
<g>
<title>char[] (170 samples, 0.52%)</title><rect x="1179.5" y="387.0" width="6.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1182.5" y="398.0"></text>
</g>
<g>
<title>java.lang.String (20 samples, 0.06%)</title><rect x="1185.7" y="387.0" width="0.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1188.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (23 samples, 0.07%)</title><rect x="1186.4" y="387.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1189.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (23 samples, 0.07%)</title><rect x="1186.4" y="371.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1189.4" y="382.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (23 samples, 0.07%)</title><rect x="1186.4" y="355.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1189.4" y="366.0"></text>
</g>
<g>
<title>byte[] (23 samples, 0.07%)</title><rect x="1186.4" y="339.0" width="0.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1189.4" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (77 samples, 0.24%)</title><rect x="1187.2" y="435.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1190.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (77 samples, 0.24%)</title><rect x="1187.2" y="419.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1190.2" y="430.0"></text>
</g>
<g>
<title>char[] (44 samples, 0.13%)</title><rect x="1187.2" y="403.0" width="1.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1190.2" y="414.0"></text>
</g>
<g>
<title>java.lang.String (16 samples, 0.05%)</title><rect x="1188.8" y="403.0" width="0.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1191.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (17 samples, 0.05%)</title><rect x="1189.4" y="403.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (17 samples, 0.05%)</title><rect x="1189.4" y="387.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1192.4" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (17 samples, 0.05%)</title><rect x="1189.4" y="371.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1192.4" y="382.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.05%)</title><rect x="1189.4" y="355.0" width="0.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1192.4" y="366.0"></text>
</g>
</g>
</svg>
