<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="549"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="549"> </text>
<g id="frames">
<g>
<title>all (53,080 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="526.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (53,080 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="510.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (476 samples, 0.90%)</title><rect x="10.0" y="483.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (476 samples, 0.90%)</title><rect x="10.0" y="467.0" width="10.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (52,604 samples, 99.10%)</title><rect x="20.6" y="483.0" width="1169.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.6" y="494.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (52,604 samples, 99.10%)</title><rect x="20.6" y="467.0" width="1169.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.6" y="478.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (52,604 samples, 99.10%)</title><rect x="20.6" y="451.0" width="1169.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.6" y="462.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (52,007 samples, 97.98%)</title><rect x="20.6" y="435.0" width="1156.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.6" y="446.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (52,007 samples, 97.98%)</title><rect x="20.6" y="419.0" width="1156.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.6" y="430.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (51,932 samples, 97.84%)</title><rect x="20.6" y="403.0" width="1154.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.6" y="414.0">RequestHandler1_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (165 samples, 0.31%)</title><rect x="20.6" y="387.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (165 samples, 0.31%)</title><rect x="20.6" y="371.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (112 samples, 0.21%)</title><rect x="20.6" y="355.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.6" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (112 samples, 0.21%)</title><rect x="20.6" y="339.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.6" y="350.0"></text>
</g>
<g>
<title>byte[] (112 samples, 0.21%)</title><rect x="20.6" y="323.0" width="2.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="23.6" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (53 samples, 0.10%)</title><rect x="23.1" y="355.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.1" y="366.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (53 samples, 0.10%)</title><rect x="23.1" y="339.0" width="1.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="26.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (50 samples, 0.09%)</title><rect x="24.2" y="387.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (50 samples, 0.09%)</title><rect x="24.2" y="371.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (50 samples, 0.09%)</title><rect x="24.2" y="355.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.2" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (50 samples, 0.09%)</title><rect x="24.2" y="339.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.2" y="350.0"></text>
</g>
<g>
<title>java.lang.String (31 samples, 0.06%)</title><rect x="24.2" y="323.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="27.2" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (19 samples, 0.04%)</title><rect x="24.9" y="323.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.9" y="334.0"></text>
</g>
<g>
<title>byte[] (19 samples, 0.04%)</title><rect x="24.9" y="307.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="27.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.get (51,717 samples, 97.43%)</title><rect x="25.4" y="387.0" width="1149.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.4" y="398.0">ru/mail/polis/service/zvladn7/BasicService.get</text>
</g>
<g>
<title>one/nio/http/Response.ok (153 samples, 0.29%)</title><rect x="25.4" y="371.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.4" y="382.0"></text>
</g>
<g>
<title>one.nio.http.Response (35 samples, 0.07%)</title><rect x="25.4" y="355.0" width="0.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="28.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (118 samples, 0.22%)</title><rect x="26.1" y="355.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.1" y="366.0"></text>
</g>
<g>
<title>byte[] (43 samples, 0.08%)</title><rect x="26.1" y="339.0" width="1.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="29.1" y="350.0"></text>
</g>
<g>
<title>java.lang.String[] (45 samples, 0.08%)</title><rect x="27.1" y="339.0" width="1.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="30.1" y="350.0"></text>
</g>
<g>
<title>java.lang.String (30 samples, 0.06%)</title><rect x="28.1" y="339.0" width="0.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="31.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (51,437 samples, 96.90%)</title><rect x="28.8" y="371.0" width="1143.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.8" y="382.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (6,013 samples, 11.33%)</title><rect x="28.8" y="355.0" width="133.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.8" y="366.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (6,013 samples, 11.33%)</title><rect x="28.8" y="339.0" width="133.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.8" y="350.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (6,013 samples, 11.33%)</title><rect x="28.8" y="323.0" width="133.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.8" y="334.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (6,013 samples, 11.33%)</title><rect x="28.8" y="307.0" width="133.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.8" y="318.0">com/google/common..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (6,013 samples, 11.33%)</title><rect x="28.8" y="291.0" width="133.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="31.8" y="302.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (5,411 samples, 10.19%)</title><rect x="28.8" y="275.0" width="120.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.8" y="286.0">com/google/comm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (59 samples, 0.11%)</title><rect x="28.8" y="259.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.8" y="270.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (59 samples, 0.11%)</title><rect x="28.8" y="243.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.8" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (59 samples, 0.11%)</title><rect x="28.8" y="227.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.8" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (59 samples, 0.11%)</title><rect x="28.8" y="211.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.8" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (59 samples, 0.11%)</title><rect x="28.8" y="195.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.8" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$93/1494427147.getAsBoolean (59 samples, 0.11%)</title><rect x="28.8" y="179.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.8" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (59 samples, 0.11%)</title><rect x="28.8" y="163.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (59 samples, 0.11%)</title><rect x="28.8" y="147.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (40 samples, 0.08%)</title><rect x="28.8" y="131.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (40 samples, 0.08%)</title><rect x="28.8" y="115.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.8" y="126.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (40 samples, 0.08%)</title><rect x="28.8" y="99.0" width="0.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="31.8" y="110.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (19 samples, 0.04%)</title><rect x="29.7" y="131.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable$$Lambda$90/232723180.apply (19 samples, 0.04%)</title><rect x="29.7" y="115.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.lambda$iterator$0 (19 samples, 0.04%)</title><rect x="29.7" y="99.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.7" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (19 samples, 0.04%)</title><rect x="29.7" y="83.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="32.7" y="94.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (2,580 samples, 4.86%)</title><rect x="30.1" y="259.0" width="57.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.1" y="270.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (2,580 samples, 4.86%)</title><rect x="30.1" y="243.0" width="57.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.1" y="254.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (2,580 samples, 4.86%)</title><rect x="30.1" y="227.0" width="57.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.1" y="238.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,580 samples, 4.86%)</title><rect x="30.1" y="211.0" width="57.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.1" y="222.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,580 samples, 4.86%)</title><rect x="30.1" y="195.0" width="57.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.1" y="206.0">com/go..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$96/491361846.compare (2,580 samples, 4.86%)</title><rect x="30.1" y="179.0" width="57.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.1" y="190.0">java/u..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,580 samples, 4.86%)</title><rect x="30.1" y="163.0" width="57.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.1" y="174.0">java/u..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (2,580 samples, 4.86%)</title><rect x="30.1" y="147.0" width="57.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.1" y="158.0">java/u..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2,580 samples, 4.86%)</title><rect x="30.1" y="131.0" width="57.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.1" y="142.0">java/u..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$94/2131252786.apply (2,580 samples, 4.86%)</title><rect x="30.1" y="115.0" width="57.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="33.1" y="126.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (2,580 samples, 4.86%)</title><rect x="30.1" y="99.0" width="57.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.1" y="110.0">ru/mai..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2,580 samples, 4.86%)</title><rect x="30.1" y="83.0" width="57.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.1" y="94.0">java/n..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2,580 samples, 4.86%)</title><rect x="30.1" y="67.0" width="57.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="33.1" y="78.0">java.n..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (2,772 samples, 5.22%)</title><rect x="87.4" y="259.0" width="61.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.4" y="270.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2,772 samples, 5.22%)</title><rect x="87.4" y="243.0" width="61.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.4" y="254.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2,772 samples, 5.22%)</title><rect x="87.4" y="227.0" width="61.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.4" y="238.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2,772 samples, 5.22%)</title><rect x="87.4" y="211.0" width="61.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.4" y="222.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,772 samples, 5.22%)</title><rect x="87.4" y="195.0" width="61.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.4" y="206.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,772 samples, 5.22%)</title><rect x="87.4" y="179.0" width="61.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="90.4" y="190.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2,159 samples, 4.07%)</title><rect x="87.4" y="163.0" width="48.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.4" y="174.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (2,159 samples, 4.07%)</title><rect x="87.4" y="147.0" width="48.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.4" y="158.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (2,159 samples, 4.07%)</title><rect x="87.4" y="131.0" width="48.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.4" y="142.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (2,159 samples, 4.07%)</title><rect x="87.4" y="115.0" width="48.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.4" y="126.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,006 samples, 1.90%)</title><rect x="87.4" y="99.0" width="22.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.4" y="110.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (626 samples, 1.18%)</title><rect x="87.4" y="83.0" width="13.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="90.4" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (380 samples, 0.72%)</title><rect x="101.3" y="83.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="104.3" y="94.0"></text>
</g>
<g>
<title>byte[] (380 samples, 0.72%)</title><rect x="101.3" y="67.0" width="8.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="104.3" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (113 samples, 0.21%)</title><rect x="109.8" y="99.0" width="2.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="112.8" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (92 samples, 0.17%)</title><rect x="112.3" y="99.0" width="2.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="115.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (583 samples, 1.10%)</title><rect x="114.4" y="99.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="117.4" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (465 samples, 0.88%)</title><rect x="114.4" y="83.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (226 samples, 0.43%)</title><rect x="114.4" y="67.0" width="5.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="117.4" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (239 samples, 0.45%)</title><rect x="119.4" y="67.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.4" y="78.0"></text>
</g>
<g>
<title>byte[] (239 samples, 0.45%)</title><rect x="119.4" y="51.0" width="5.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="122.4" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (118 samples, 0.22%)</title><rect x="124.7" y="83.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="127.7" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (118 samples, 0.22%)</title><rect x="124.7" y="67.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.7" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (118 samples, 0.22%)</title><rect x="124.7" y="51.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="127.7" y="62.0"></text>
</g>
<g>
<title>byte[] (118 samples, 0.22%)</title><rect x="124.7" y="35.0" width="2.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="127.7" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (365 samples, 0.69%)</title><rect x="127.3" y="99.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="130.3" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (365 samples, 0.69%)</title><rect x="127.3" y="83.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.3" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (244 samples, 0.46%)</title><rect x="127.3" y="67.0" width="5.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="130.3" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (121 samples, 0.23%)</title><rect x="132.7" y="67.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.7" y="78.0"></text>
</g>
<g>
<title>byte[] (121 samples, 0.23%)</title><rect x="132.7" y="51.0" width="2.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="135.7" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$96/491361846.compare (613 samples, 1.15%)</title><rect x="135.4" y="163.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="138.4" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (613 samples, 1.15%)</title><rect x="135.4" y="147.0" width="13.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (613 samples, 1.15%)</title><rect x="135.4" y="131.0" width="13.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.4" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (613 samples, 1.15%)</title><rect x="135.4" y="115.0" width="13.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$94/2131252786.apply (613 samples, 1.15%)</title><rect x="135.4" y="99.0" width="13.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (613 samples, 1.15%)</title><rect x="135.4" y="83.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="138.4" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (613 samples, 1.15%)</title><rect x="135.4" y="67.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.4" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (613 samples, 1.15%)</title><rect x="135.4" y="51.0" width="13.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="138.4" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$105/137990672.apply (602 samples, 1.13%)</title><rect x="149.1" y="275.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (602 samples, 1.13%)</title><rect x="149.1" y="259.0" width="13.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.1" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (602 samples, 1.13%)</title><rect x="149.1" y="243.0" width="13.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.1" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (602 samples, 1.13%)</title><rect x="149.1" y="227.0" width="13.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="152.1" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (134 samples, 0.25%)</title><rect x="162.4" y="355.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="165.4" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (134 samples, 0.25%)</title><rect x="162.4" y="339.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$119/985731125.apply (134 samples, 0.25%)</title><rect x="162.4" y="323.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$iterator$4 (134 samples, 0.25%)</title><rect x="162.4" y="307.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="165.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (25 samples, 0.05%)</title><rect x="162.4" y="291.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="165.4" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (25 samples, 0.05%)</title><rect x="162.4" y="275.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="165.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (55 samples, 0.10%)</title><rect x="163.0" y="291.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.0" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (55 samples, 0.10%)</title><rect x="163.0" y="275.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.0" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (55 samples, 0.10%)</title><rect x="163.0" y="259.0" width="1.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="166.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (54 samples, 0.10%)</title><rect x="164.2" y="291.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.2" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (54 samples, 0.10%)</title><rect x="164.2" y="275.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.2" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (54 samples, 0.10%)</title><rect x="164.2" y="259.0" width="1.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="167.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (61 samples, 0.11%)</title><rect x="165.4" y="355.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="168.4" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (61 samples, 0.11%)</title><rect x="165.4" y="339.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="168.4" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (61 samples, 0.11%)</title><rect x="165.4" y="323.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="168.4" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (61 samples, 0.11%)</title><rect x="165.4" y="307.0" width="1.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="168.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (57 samples, 0.11%)</title><rect x="166.8" y="355.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (57 samples, 0.11%)</title><rect x="166.8" y="339.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="169.8" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (57 samples, 0.11%)</title><rect x="166.8" y="323.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="169.8" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (57 samples, 0.11%)</title><rect x="166.8" y="307.0" width="1.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="169.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator (45,172 samples, 85.10%)</title><rect x="168.0" y="355.0" width="1004.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.0" y="366.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (31 samples, 0.06%)</title><rect x="168.0" y="339.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="171.0" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (31 samples, 0.06%)</title><rect x="168.0" y="323.0" width="0.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="171.0" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (34 samples, 0.06%)</title><rect x="168.7" y="339.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="171.7" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (34 samples, 0.06%)</title><rect x="168.7" y="323.0" width="0.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="171.7" y="334.0"></text>
</g>
<g>
<title>java.util.ArrayList (35 samples, 0.07%)</title><rect x="169.5" y="339.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="172.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (48 samples, 0.09%)</title><rect x="170.3" y="339.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (48 samples, 0.09%)</title><rect x="170.3" y="323.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="173.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (48 samples, 0.09%)</title><rect x="170.3" y="307.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="173.3" y="318.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (48 samples, 0.09%)</title><rect x="170.3" y="291.0" width="1.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="173.3" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (30 samples, 0.06%)</title><rect x="171.3" y="339.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="174.3" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (30 samples, 0.06%)</title><rect x="171.3" y="323.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="174.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$98/1745829435.get$Lambda (30 samples, 0.06%)</title><rect x="171.3" y="307.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="174.3" y="318.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$98 (30 samples, 0.06%)</title><rect x="171.3" y="291.0" width="0.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="174.3" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (95 samples, 0.18%)</title><rect x="172.0" y="339.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.0" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (95 samples, 0.18%)</title><rect x="172.0" y="323.0" width="2.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="175.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator (44,535 samples, 83.90%)</title><rect x="174.1" y="339.0" width="990.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="177.1" y="350.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (11,524 samples, 21.71%)</title><rect x="174.1" y="323.0" width="256.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.1" y="334.0">com/google/common/collect/Iterator..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (18 samples, 0.03%)</title><rect x="174.1" y="307.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="177.1" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (11,506 samples, 21.68%)</title><rect x="174.5" y="307.0" width="255.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="177.5" y="318.0">com/google/common/collect/Iterator..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (27 samples, 0.05%)</title><rect x="174.5" y="291.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="177.5" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (432 samples, 0.81%)</title><rect x="175.1" y="291.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="178.1" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (432 samples, 0.81%)</title><rect x="175.1" y="275.0" width="9.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="178.1" y="286.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (48 samples, 0.09%)</title><rect x="184.7" y="291.0" width="1.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="187.7" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (34 samples, 0.06%)</title><rect x="185.8" y="291.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.8" y="302.0"></text>
</g>
<g>
<title>java.lang.Object[] (34 samples, 0.06%)</title><rect x="185.8" y="275.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="188.8" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (10,706 samples, 20.17%)</title><rect x="186.5" y="291.0" width="238.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.5" y="302.0">java/util/PriorityQueue.add</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (10,706 samples, 20.17%)</title><rect x="186.5" y="275.0" width="238.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.5" y="286.0">java/util/PriorityQueue.offer</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (323 samples, 0.61%)</title><rect x="186.5" y="259.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.5" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (323 samples, 0.61%)</title><rect x="186.5" y="243.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="189.5" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (323 samples, 0.61%)</title><rect x="186.5" y="227.0" width="7.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="189.5" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (10,383 samples, 19.56%)</title><rect x="193.7" y="259.0" width="230.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.7" y="270.0">java/util/PriorityQueue.siftUp</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (10,383 samples, 19.56%)</title><rect x="193.7" y="243.0" width="230.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="196.7" y="254.0">java/util/PriorityQueue.siftUp..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10,383 samples, 19.56%)</title><rect x="193.7" y="227.0" width="230.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.7" y="238.0">com/google/common/collect/Iter..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10,383 samples, 19.56%)</title><rect x="193.7" y="211.0" width="230.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.7" y="222.0">com/google/common/collect/Iter..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (8,205 samples, 15.46%)</title><rect x="193.7" y="195.0" width="182.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.7" y="206.0">com/google/common/collec..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (8,205 samples, 15.46%)</title><rect x="193.7" y="179.0" width="182.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="196.7" y="190.0">ru/mail/polis/dao/zvladn..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (8,205 samples, 15.46%)</title><rect x="193.7" y="163.0" width="182.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.7" y="174.0">ru/mail/polis/dao/zvladn..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (8,205 samples, 15.46%)</title><rect x="193.7" y="147.0" width="182.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="196.7" y="158.0">ru/mail/polis/dao/zvladn..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3,934 samples, 7.41%)</title><rect x="193.7" y="131.0" width="87.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.7" y="142.0">java/nio/B..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,495 samples, 4.70%)</title><rect x="193.7" y="115.0" width="55.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="196.7" y="126.0">java...</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,439 samples, 2.71%)</title><rect x="249.2" y="115.0" width="32.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.2" y="126.0">ja..</text>
</g>
<g>
<title>byte[] (1,439 samples, 2.71%)</title><rect x="249.2" y="99.0" width="32.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="252.2" y="110.0">by..</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (434 samples, 0.82%)</title><rect x="281.2" y="131.0" width="9.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="284.2" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (431 samples, 0.81%)</title><rect x="290.8" y="131.0" width="9.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="293.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (2,230 samples, 4.20%)</title><rect x="300.4" y="131.0" width="49.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="303.4" y="142.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,799 samples, 3.39%)</title><rect x="300.4" y="115.0" width="40.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="303.4" y="126.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (787 samples, 1.48%)</title><rect x="300.4" y="99.0" width="17.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="303.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,012 samples, 1.91%)</title><rect x="317.9" y="99.0" width="22.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="320.9" y="110.0">j..</text>
</g>
<g>
<title>byte[] (1,012 samples, 1.91%)</title><rect x="317.9" y="83.0" width="22.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="320.9" y="94.0">b..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (431 samples, 0.81%)</title><rect x="340.4" y="115.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="343.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (431 samples, 0.81%)</title><rect x="340.4" y="99.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (431 samples, 0.81%)</title><rect x="340.4" y="83.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.4" y="94.0"></text>
</g>
<g>
<title>byte[] (431 samples, 0.81%)</title><rect x="340.4" y="67.0" width="9.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="343.4" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (1,176 samples, 2.22%)</title><rect x="350.0" y="131.0" width="26.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.0" y="142.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,176 samples, 2.22%)</title><rect x="350.0" y="115.0" width="26.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.0" y="126.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (780 samples, 1.47%)</title><rect x="350.0" y="99.0" width="17.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="353.0" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (396 samples, 0.75%)</title><rect x="367.3" y="99.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="370.3" y="110.0"></text>
</g>
<g>
<title>byte[] (396 samples, 0.75%)</title><rect x="367.3" y="83.0" width="8.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="370.3" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$96/491361846.compare (2,178 samples, 4.10%)</title><rect x="376.1" y="195.0" width="48.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="379.1" y="206.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,178 samples, 4.10%)</title><rect x="376.1" y="179.0" width="48.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="379.1" y="190.0">java..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (2,178 samples, 4.10%)</title><rect x="376.1" y="163.0" width="48.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.1" y="174.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2,178 samples, 4.10%)</title><rect x="376.1" y="147.0" width="48.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="379.1" y="158.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$94/2131252786.apply (2,178 samples, 4.10%)</title><rect x="376.1" y="131.0" width="48.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.1" y="142.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (2,178 samples, 4.10%)</title><rect x="376.1" y="115.0" width="48.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="379.1" y="126.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2,178 samples, 4.10%)</title><rect x="376.1" y="99.0" width="48.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="379.1" y="110.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2,178 samples, 4.10%)</title><rect x="376.1" y="83.0" width="48.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="379.1" y="94.0">java..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (259 samples, 0.49%)</title><rect x="424.5" y="291.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="427.5" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (259 samples, 0.49%)</title><rect x="424.5" y="275.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="427.5" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (259 samples, 0.49%)</title><rect x="424.5" y="259.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="427.5" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (57 samples, 0.11%)</title><rect x="424.5" y="243.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="427.5" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$93/1494427147.getAsBoolean (57 samples, 0.11%)</title><rect x="424.5" y="227.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="427.5" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (57 samples, 0.11%)</title><rect x="424.5" y="211.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="427.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (57 samples, 0.11%)</title><rect x="424.5" y="195.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="427.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (32 samples, 0.06%)</title><rect x="424.5" y="179.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="427.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (32 samples, 0.06%)</title><rect x="424.5" y="163.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="427.5" y="174.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (32 samples, 0.06%)</title><rect x="424.5" y="147.0" width="0.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="427.5" y="158.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (25 samples, 0.05%)</title><rect x="425.2" y="179.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable$$Lambda$90/232723180.apply (25 samples, 0.05%)</title><rect x="425.2" y="163.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.lambda$iterator$0 (25 samples, 0.05%)</title><rect x="425.2" y="147.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="428.2" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (25 samples, 0.05%)</title><rect x="425.2" y="131.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="428.2" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (202 samples, 0.38%)</title><rect x="425.8" y="243.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="428.8" y="254.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (50 samples, 0.09%)</title><rect x="425.8" y="227.0" width="1.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="428.8" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (37 samples, 0.07%)</title><rect x="426.9" y="227.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.9" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (37 samples, 0.07%)</title><rect x="426.9" y="211.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="429.9" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$92/604189455.get$Lambda (20 samples, 0.04%)</title><rect x="426.9" y="195.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="429.9" y="206.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$92 (20 samples, 0.04%)</title><rect x="426.9" y="179.0" width="0.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="429.9" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$93/1494427147.get$Lambda (17 samples, 0.03%)</title><rect x="427.4" y="195.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="430.4" y="206.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$93 (17 samples, 0.03%)</title><rect x="427.4" y="179.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="430.4" y="190.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (26 samples, 0.05%)</title><rect x="427.7" y="227.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="430.7" y="238.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (26 samples, 0.05%)</title><rect x="427.7" y="211.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="430.7" y="222.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (26 samples, 0.05%)</title><rect x="427.7" y="195.0" width="0.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="430.7" y="206.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (89 samples, 0.17%)</title><rect x="428.3" y="227.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.3" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (89 samples, 0.17%)</title><rect x="428.3" y="211.0" width="2.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="431.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (817 samples, 1.54%)</title><rect x="430.3" y="323.0" width="18.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="433.3" y="334.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (27 samples, 0.05%)</title><rect x="430.3" y="307.0" width="0.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="433.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (790 samples, 1.49%)</title><rect x="430.9" y="307.0" width="17.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.9" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (790 samples, 1.49%)</title><rect x="430.9" y="291.0" width="17.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="433.9" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (44 samples, 0.08%)</title><rect x="430.9" y="275.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.9" y="286.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (44 samples, 0.08%)</title><rect x="430.9" y="259.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.9" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (44 samples, 0.08%)</title><rect x="430.9" y="243.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="433.9" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (44 samples, 0.08%)</title><rect x="430.9" y="227.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="433.9" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (44 samples, 0.08%)</title><rect x="430.9" y="211.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.9" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$93/1494427147.getAsBoolean (44 samples, 0.08%)</title><rect x="430.9" y="195.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="433.9" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (44 samples, 0.08%)</title><rect x="430.9" y="179.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (44 samples, 0.08%)</title><rect x="430.9" y="163.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.9" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (20 samples, 0.04%)</title><rect x="430.9" y="147.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (20 samples, 0.04%)</title><rect x="430.9" y="131.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.9" y="142.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (20 samples, 0.04%)</title><rect x="430.9" y="115.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="433.9" y="126.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (24 samples, 0.05%)</title><rect x="431.3" y="147.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="434.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable$$Lambda$90/232723180.apply (24 samples, 0.05%)</title><rect x="431.3" y="131.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.lambda$iterator$0 (24 samples, 0.05%)</title><rect x="431.3" y="115.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="434.3" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (24 samples, 0.05%)</title><rect x="431.3" y="99.0" width="0.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="434.3" y="110.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (656 samples, 1.24%)</title><rect x="431.9" y="275.0" width="14.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.9" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (656 samples, 1.24%)</title><rect x="431.9" y="259.0" width="14.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="434.9" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (656 samples, 1.24%)</title><rect x="431.9" y="243.0" width="14.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.9" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (656 samples, 1.24%)</title><rect x="431.9" y="227.0" width="14.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.9" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (656 samples, 1.24%)</title><rect x="431.9" y="211.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.9" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$96/491361846.compare (656 samples, 1.24%)</title><rect x="431.9" y="195.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.9" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (656 samples, 1.24%)</title><rect x="431.9" y="179.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="434.9" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (656 samples, 1.24%)</title><rect x="431.9" y="163.0" width="14.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="434.9" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (656 samples, 1.24%)</title><rect x="431.9" y="147.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="434.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$94/2131252786.apply (656 samples, 1.24%)</title><rect x="431.9" y="131.0" width="14.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (656 samples, 1.24%)</title><rect x="431.9" y="115.0" width="14.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="434.9" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (656 samples, 1.24%)</title><rect x="431.9" y="99.0" width="14.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="434.9" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (656 samples, 1.24%)</title><rect x="431.9" y="83.0" width="14.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="434.9" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (90 samples, 0.17%)</title><rect x="446.5" y="275.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="449.5" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (90 samples, 0.17%)</title><rect x="446.5" y="259.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="449.5" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (90 samples, 0.17%)</title><rect x="446.5" y="243.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.5" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (90 samples, 0.17%)</title><rect x="446.5" y="227.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="449.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (90 samples, 0.17%)</title><rect x="446.5" y="211.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.5" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (90 samples, 0.17%)</title><rect x="446.5" y="195.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.5" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$96/491361846.compare (90 samples, 0.17%)</title><rect x="446.5" y="179.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="449.5" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (90 samples, 0.17%)</title><rect x="446.5" y="163.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="449.5" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (90 samples, 0.17%)</title><rect x="446.5" y="147.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="449.5" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (90 samples, 0.17%)</title><rect x="446.5" y="131.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="449.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$94/2131252786.apply (90 samples, 0.17%)</title><rect x="446.5" y="115.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="449.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (90 samples, 0.17%)</title><rect x="446.5" y="99.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.5" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (90 samples, 0.17%)</title><rect x="446.5" y="83.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="449.5" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (90 samples, 0.17%)</title><rect x="446.5" y="67.0" width="2.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="449.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList (32,194 samples, 60.65%)</title><rect x="448.5" y="323.0" width="715.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="451.5" y="334.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList</text>
</g>
<g>
<title>java/lang/Iterable.forEach (32,162 samples, 60.59%)</title><rect x="448.5" y="307.0" width="714.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="451.5" y="318.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (77 samples, 0.15%)</title><rect x="448.5" y="291.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="451.5" y="302.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (29 samples, 0.05%)</title><rect x="448.5" y="275.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="451.5" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (48 samples, 0.09%)</title><rect x="449.1" y="275.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.1" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (48 samples, 0.09%)</title><rect x="449.1" y="259.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="452.1" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (48 samples, 0.09%)</title><rect x="449.1" y="243.0" width="1.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="452.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$101/358387649.accept (32,085 samples, 60.45%)</title><rect x="450.2" y="291.0" width="713.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="453.2" y="302.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$101/358387649.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$10 (32,085 samples, 60.45%)</title><rect x="450.2" y="275.0" width="713.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.2" y="286.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$10</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.iterator (32,085 samples, 60.45%)</title><rect x="450.2" y="259.0" width="713.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="453.2" y="270.0">ru/mail/polis/dao/zvladn7/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.SSTable$SSTableIter (375 samples, 0.71%)</title><rect x="450.2" y="243.0" width="8.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="453.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt; (31,710 samples, 59.74%)</title><rect x="458.5" y="243.0" width="704.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.5" y="254.0">ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getElementPosition (31,710 samples, 59.74%)</title><rect x="458.5" y="227.0" width="704.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.5" y="238.0">ru/mail/polis/dao/zvladn7/SSTable.getElementPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (31,710 samples, 59.74%)</title><rect x="458.5" y="211.0" width="704.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="461.5" y="222.0">ru/mail/polis/dao/zvladn7/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (25,877 samples, 48.75%)</title><rect x="458.5" y="195.0" width="575.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="461.5" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11,599 samples, 21.85%)</title><rect x="458.5" y="179.0" width="257.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="461.5" y="190.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14,278 samples, 26.90%)</title><rect x="716.4" y="179.0" width="317.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="719.4" y="190.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (14,278 samples, 26.90%)</title><rect x="716.4" y="163.0" width="317.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="719.4" y="174.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (5,833 samples, 10.99%)</title><rect x="1033.8" y="195.0" width="129.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1036.8" y="206.0">ru/mail/polis/da..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5,833 samples, 10.99%)</title><rect x="1033.8" y="179.0" width="129.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1036.8" y="190.0">java/nio/ByteBuf..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5,833 samples, 10.99%)</title><rect x="1033.8" y="163.0" width="129.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1036.8" y="174.0">java/nio/HeapByt..</text>
</g>
<g>
<title>byte[] (5,833 samples, 10.99%)</title><rect x="1033.8" y="147.0" width="129.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1036.8" y="158.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (32 samples, 0.06%)</title><rect x="1163.4" y="307.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1166.4" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (32 samples, 0.06%)</title><rect x="1163.4" y="291.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1166.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$101/358387649.get$Lambda (32 samples, 0.06%)</title><rect x="1163.4" y="275.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1166.4" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$101 (32 samples, 0.06%)</title><rect x="1163.4" y="259.0" width="0.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1166.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.iterator (364 samples, 0.69%)</title><rect x="1164.1" y="339.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1167.1" y="350.0"></text>
</g>
<g>
<title>java/util/Collection.stream (94 samples, 0.18%)</title><rect x="1164.1" y="323.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1167.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (29 samples, 0.05%)</title><rect x="1164.1" y="307.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1167.1" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (29 samples, 0.05%)</title><rect x="1164.1" y="291.0" width="0.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1167.1" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (65 samples, 0.12%)</title><rect x="1164.8" y="307.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1167.8" y="318.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (65 samples, 0.12%)</title><rect x="1164.8" y="291.0" width="1.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1167.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (19 samples, 0.04%)</title><rect x="1166.2" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1169.2" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (19 samples, 0.04%)</title><rect x="1166.2" y="307.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1169.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (62 samples, 0.12%)</title><rect x="1166.7" y="323.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1169.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (62 samples, 0.12%)</title><rect x="1166.7" y="307.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1169.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (62 samples, 0.12%)</title><rect x="1166.7" y="291.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1169.7" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (62 samples, 0.12%)</title><rect x="1166.7" y="275.0" width="1.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1169.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (106 samples, 0.20%)</title><rect x="1168.0" y="323.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1171.0" y="334.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (31 samples, 0.06%)</title><rect x="1168.0" y="307.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1171.0" y="318.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (31 samples, 0.06%)</title><rect x="1168.0" y="291.0" width="0.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1171.0" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (75 samples, 0.14%)</title><rect x="1168.7" y="307.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1171.7" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (16 samples, 0.03%)</title><rect x="1168.7" y="291.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1171.7" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (16 samples, 0.03%)</title><rect x="1168.7" y="275.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1171.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$91/798825164.get$Lambda (16 samples, 0.03%)</title><rect x="1168.7" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1171.7" y="270.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$91 (16 samples, 0.03%)</title><rect x="1168.7" y="243.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1171.7" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (59 samples, 0.11%)</title><rect x="1169.1" y="291.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1172.1" y="302.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (59 samples, 0.11%)</title><rect x="1169.1" y="275.0" width="1.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1172.1" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (83 samples, 0.16%)</title><rect x="1170.4" y="323.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1173.4" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (83 samples, 0.16%)</title><rect x="1170.4" y="307.0" width="1.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1173.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.toBytes (30 samples, 0.06%)</title><rect x="1172.2" y="371.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1175.2" y="382.0"></text>
</g>
<g>
<title>byte[] (30 samples, 0.06%)</title><rect x="1172.2" y="355.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1175.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.wrapString (97 samples, 0.18%)</title><rect x="1172.9" y="371.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1175.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (56 samples, 0.11%)</title><rect x="1172.9" y="355.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1175.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (56 samples, 0.11%)</title><rect x="1172.9" y="339.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1175.9" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (56 samples, 0.11%)</title><rect x="1172.9" y="323.0" width="1.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1175.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.toBytes (41 samples, 0.08%)</title><rect x="1174.1" y="355.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1177.1" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (41 samples, 0.08%)</title><rect x="1174.1" y="339.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1177.1" y="350.0"></text>
</g>
<g>
<title>byte[] (41 samples, 0.08%)</title><rect x="1174.1" y="323.0" width="1.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1177.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (75 samples, 0.14%)</title><rect x="1175.1" y="403.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1178.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (75 samples, 0.14%)</title><rect x="1175.1" y="387.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1178.1" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (75 samples, 0.14%)</title><rect x="1175.1" y="371.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1178.1" y="382.0"></text>
</g>
<g>
<title>java.lang.String (34 samples, 0.06%)</title><rect x="1175.1" y="355.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1178.1" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (41 samples, 0.08%)</title><rect x="1175.8" y="355.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1178.8" y="366.0"></text>
</g>
<g>
<title>byte[] (41 samples, 0.08%)</title><rect x="1175.8" y="339.0" width="0.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1178.8" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (440 samples, 0.83%)</title><rect x="1176.7" y="435.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1179.7" y="446.0"></text>
</g>
<g>
<title>one.nio.http.Request (53 samples, 0.10%)</title><rect x="1176.7" y="419.0" width="1.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (95 samples, 0.18%)</title><rect x="1177.9" y="419.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1180.9" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (95 samples, 0.18%)</title><rect x="1177.9" y="403.0" width="2.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1180.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (292 samples, 0.55%)</title><rect x="1180.0" y="419.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1183.0" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (292 samples, 0.55%)</title><rect x="1180.0" y="403.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1183.0" y="414.0"></text>
</g>
<g>
<title>char[] (222 samples, 0.42%)</title><rect x="1180.0" y="387.0" width="5.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1183.0" y="398.0"></text>
</g>
<g>
<title>java.lang.String (26 samples, 0.05%)</title><rect x="1185.0" y="387.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1188.0" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (44 samples, 0.08%)</title><rect x="1185.5" y="387.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1188.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (44 samples, 0.08%)</title><rect x="1185.5" y="371.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1188.5" y="382.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (44 samples, 0.08%)</title><rect x="1185.5" y="355.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1188.5" y="366.0"></text>
</g>
<g>
<title>byte[] (44 samples, 0.08%)</title><rect x="1185.5" y="339.0" width="1.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1188.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (157 samples, 0.30%)</title><rect x="1186.5" y="435.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1189.5" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (157 samples, 0.30%)</title><rect x="1186.5" y="419.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1189.5" y="430.0"></text>
</g>
<g>
<title>char[] (63 samples, 0.12%)</title><rect x="1186.5" y="403.0" width="1.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1189.5" y="414.0"></text>
</g>
<g>
<title>java.lang.String (30 samples, 0.06%)</title><rect x="1187.9" y="403.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1190.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (64 samples, 0.12%)</title><rect x="1188.6" y="403.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1191.6" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (64 samples, 0.12%)</title><rect x="1188.6" y="387.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1191.6" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (64 samples, 0.12%)</title><rect x="1188.6" y="371.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1191.6" y="382.0"></text>
</g>
<g>
<title>byte[] (64 samples, 0.12%)</title><rect x="1188.6" y="355.0" width="1.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1191.6" y="366.0"></text>
</g>
</g>
</svg>
