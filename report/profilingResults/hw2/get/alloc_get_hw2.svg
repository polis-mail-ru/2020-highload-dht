<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="549"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="549"> </text>
<g id="frames">
<g>
<title>all (44,150 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.0" y="526.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (44,150 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="510.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (403 samples, 0.91%)</title><rect x="10.0" y="483.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (403 samples, 0.91%)</title><rect x="10.0" y="467.0" width="10.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (43,747 samples, 99.09%)</title><rect x="20.8" y="483.0" width="1169.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.8" y="494.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (43,747 samples, 99.09%)</title><rect x="20.8" y="467.0" width="1169.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.8" y="478.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (43,747 samples, 99.09%)</title><rect x="20.8" y="451.0" width="1169.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.8" y="462.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (43,514 samples, 98.56%)</title><rect x="20.8" y="435.0" width="1163.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.8" y="446.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (43,514 samples, 98.56%)</title><rect x="20.8" y="419.0" width="1163.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.8" y="430.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (43,493 samples, 98.51%)</title><rect x="20.8" y="403.0" width="1162.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.8" y="414.0">RequestHandler1_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (59 samples, 0.13%)</title><rect x="20.8" y="387.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (59 samples, 0.13%)</title><rect x="20.8" y="371.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.8" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (43 samples, 0.10%)</title><rect x="20.8" y="355.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.8" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (43 samples, 0.10%)</title><rect x="20.8" y="339.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.8" y="350.0"></text>
</g>
<g>
<title>byte[] (43 samples, 0.10%)</title><rect x="20.8" y="323.0" width="1.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="23.8" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 0.04%)</title><rect x="21.9" y="355.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.9" y="366.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (16 samples, 0.04%)</title><rect x="21.9" y="339.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="24.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (26 samples, 0.06%)</title><rect x="22.3" y="387.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.3" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (26 samples, 0.06%)</title><rect x="22.3" y="371.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.3" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (26 samples, 0.06%)</title><rect x="22.3" y="355.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.3" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (26 samples, 0.06%)</title><rect x="22.3" y="339.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.3" y="350.0"></text>
</g>
<g>
<title>java.lang.String (12 samples, 0.03%)</title><rect x="22.3" y="323.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="25.3" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (14 samples, 0.03%)</title><rect x="22.7" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.7" y="334.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.03%)</title><rect x="22.7" y="307.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="25.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.get (43,408 samples, 98.32%)</title><rect x="23.0" y="387.0" width="1160.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.0" y="398.0">ru/mail/polis/service/zvladn7/BasicService.get</text>
</g>
<g>
<title>one/nio/http/Response.ok (48 samples, 0.11%)</title><rect x="23.0" y="371.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.0" y="382.0"></text>
</g>
<g>
<title>one.nio.http.Response (13 samples, 0.03%)</title><rect x="23.0" y="355.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="26.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (35 samples, 0.08%)</title><rect x="23.4" y="355.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.4" y="366.0"></text>
</g>
<g>
<title>byte[] (21 samples, 0.05%)</title><rect x="23.4" y="339.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="26.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (43,300 samples, 98.07%)</title><rect x="24.3" y="371.0" width="1157.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.3" y="382.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (778 samples, 1.76%)</title><rect x="24.3" y="355.0" width="20.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.3" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (778 samples, 1.76%)</title><rect x="24.3" y="339.0" width="20.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.3" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (778 samples, 1.76%)</title><rect x="24.3" y="323.0" width="20.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.3" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (778 samples, 1.76%)</title><rect x="24.3" y="307.0" width="20.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (778 samples, 1.76%)</title><rect x="24.3" y="291.0" width="20.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.3" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (727 samples, 1.65%)</title><rect x="24.3" y="275.0" width="19.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.3" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (304 samples, 0.69%)</title><rect x="24.3" y="259.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.3" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (304 samples, 0.69%)</title><rect x="24.3" y="243.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.3" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (304 samples, 0.69%)</title><rect x="24.3" y="227.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.3" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (304 samples, 0.69%)</title><rect x="24.3" y="211.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.3" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (304 samples, 0.69%)</title><rect x="24.3" y="195.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.3" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$100/821788979.compare (304 samples, 0.69%)</title><rect x="24.3" y="179.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.3" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (304 samples, 0.69%)</title><rect x="24.3" y="163.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.3" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (304 samples, 0.69%)</title><rect x="24.3" y="147.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.3" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (304 samples, 0.69%)</title><rect x="24.3" y="131.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$98/1732288223.apply (304 samples, 0.69%)</title><rect x="24.3" y="115.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (304 samples, 0.69%)</title><rect x="24.3" y="99.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.3" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (304 samples, 0.69%)</title><rect x="24.3" y="83.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.3" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (304 samples, 0.69%)</title><rect x="24.3" y="67.0" width="8.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="27.3" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (423 samples, 0.96%)</title><rect x="32.5" y="259.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.5" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (423 samples, 0.96%)</title><rect x="32.5" y="243.0" width="11.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.5" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (423 samples, 0.96%)</title><rect x="32.5" y="227.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.5" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (423 samples, 0.96%)</title><rect x="32.5" y="211.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="35.5" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (423 samples, 0.96%)</title><rect x="32.5" y="195.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.5" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (423 samples, 0.96%)</title><rect x="32.5" y="179.0" width="11.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.5" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (255 samples, 0.58%)</title><rect x="32.5" y="163.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (255 samples, 0.58%)</title><rect x="32.5" y="147.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (255 samples, 0.58%)</title><rect x="32.5" y="131.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (255 samples, 0.58%)</title><rect x="32.5" y="115.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="35.5" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (96 samples, 0.22%)</title><rect x="32.5" y="99.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.5" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (67 samples, 0.15%)</title><rect x="32.5" y="83.0" width="1.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="35.5" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (29 samples, 0.07%)</title><rect x="34.2" y="83.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="37.2" y="94.0"></text>
</g>
<g>
<title>byte[] (29 samples, 0.07%)</title><rect x="34.2" y="67.0" width="0.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="37.2" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (16 samples, 0.04%)</title><rect x="35.0" y="99.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="38.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (100 samples, 0.23%)</title><rect x="35.7" y="99.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="38.7" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (60 samples, 0.14%)</title><rect x="35.7" y="83.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.7" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (36 samples, 0.08%)</title><rect x="35.7" y="67.0" width="0.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="38.7" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (24 samples, 0.05%)</title><rect x="36.6" y="67.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="39.6" y="78.0"></text>
</g>
<g>
<title>byte[] (24 samples, 0.05%)</title><rect x="36.6" y="51.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="39.6" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (40 samples, 0.09%)</title><rect x="37.3" y="83.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.3" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (40 samples, 0.09%)</title><rect x="37.3" y="67.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.3" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (25 samples, 0.06%)</title><rect x="37.3" y="51.0" width="0.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="40.3" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (15 samples, 0.03%)</title><rect x="38.0" y="51.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.0" y="62.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.03%)</title><rect x="38.0" y="35.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="41.0" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (34 samples, 0.08%)</title><rect x="38.4" y="99.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="41.4" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (34 samples, 0.08%)</title><rect x="38.4" y="83.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (24 samples, 0.05%)</title><rect x="38.4" y="67.0" width="0.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="41.4" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.02%)</title><rect x="39.0" y="67.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.0" y="78.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.02%)</title><rect x="39.0" y="51.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="42.0" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$100/821788979.compare (168 samples, 0.38%)</title><rect x="39.3" y="163.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.3" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (168 samples, 0.38%)</title><rect x="39.3" y="147.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.3" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (168 samples, 0.38%)</title><rect x="39.3" y="131.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.3" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (168 samples, 0.38%)</title><rect x="39.3" y="115.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$98/1732288223.apply (168 samples, 0.38%)</title><rect x="39.3" y="99.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (168 samples, 0.38%)</title><rect x="39.3" y="83.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.3" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (168 samples, 0.38%)</title><rect x="39.3" y="67.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.3" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (168 samples, 0.38%)</title><rect x="39.3" y="51.0" width="4.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="42.3" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$108/272895898.apply (51 samples, 0.12%)</title><rect x="43.8" y="275.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (51 samples, 0.12%)</title><rect x="43.8" y="259.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.8" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (51 samples, 0.12%)</title><rect x="43.8" y="243.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="46.8" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (51 samples, 0.12%)</title><rect x="43.8" y="227.0" width="1.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="46.8" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (49 samples, 0.11%)</title><rect x="45.1" y="355.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.1" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (49 samples, 0.11%)</title><rect x="45.1" y="339.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$119/1348330480.apply (49 samples, 0.11%)</title><rect x="45.1" y="323.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$iterator$4 (49 samples, 0.11%)</title><rect x="45.1" y="307.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (25 samples, 0.06%)</title><rect x="45.1" y="291.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.1" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (25 samples, 0.06%)</title><rect x="45.1" y="275.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="48.1" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (25 samples, 0.06%)</title><rect x="45.1" y="259.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="48.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (24 samples, 0.05%)</title><rect x="45.8" y="291.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.8" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (24 samples, 0.05%)</title><rect x="45.8" y="275.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.8" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.05%)</title><rect x="45.8" y="259.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="48.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (24 samples, 0.05%)</title><rect x="46.4" y="355.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.4" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (24 samples, 0.05%)</title><rect x="46.4" y="339.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.4" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (24 samples, 0.05%)</title><rect x="46.4" y="323.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.4" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.05%)</title><rect x="46.4" y="307.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="49.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (27 samples, 0.06%)</title><rect x="47.1" y="355.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (27 samples, 0.06%)</title><rect x="47.1" y="339.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (27 samples, 0.06%)</title><rect x="47.1" y="323.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="50.1" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (27 samples, 0.06%)</title><rect x="47.1" y="307.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="50.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator (42,422 samples, 96.09%)</title><rect x="47.8" y="355.0" width="1133.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.8" y="366.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (20 samples, 0.05%)</title><rect x="47.8" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.8" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (20 samples, 0.05%)</title><rect x="47.8" y="323.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="50.8" y="334.0"></text>
</g>
<g>
<title>java.util.ArrayList (13 samples, 0.03%)</title><rect x="48.5" y="339.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="51.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (17 samples, 0.04%)</title><rect x="48.9" y="339.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (17 samples, 0.04%)</title><rect x="48.9" y="323.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (17 samples, 0.04%)</title><rect x="48.9" y="307.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.9" y="318.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (17 samples, 0.04%)</title><rect x="48.9" y="291.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="51.9" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (11 samples, 0.02%)</title><rect x="49.3" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.3" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (11 samples, 0.02%)</title><rect x="49.3" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$102/1277747175.get$Lambda (11 samples, 0.02%)</title><rect x="49.3" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.3" y="318.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$102 (11 samples, 0.02%)</title><rect x="49.3" y="291.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="52.3" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (57 samples, 0.13%)</title><rect x="49.6" y="339.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.6" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (57 samples, 0.13%)</title><rect x="49.6" y="323.0" width="1.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="52.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator (41,732 samples, 94.52%)</title><rect x="51.1" y="339.0" width="1115.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.1" y="350.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (8,749 samples, 19.82%)</title><rect x="51.1" y="323.0" width="233.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.1" y="334.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (8,743 samples, 19.80%)</title><rect x="51.3" y="307.0" width="233.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.3" y="318.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (14 samples, 0.03%)</title><rect x="51.3" y="291.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="54.3" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (234 samples, 0.53%)</title><rect x="51.7" y="291.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.7" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (234 samples, 0.53%)</title><rect x="51.7" y="275.0" width="6.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="54.7" y="286.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (12 samples, 0.03%)</title><rect x="57.9" y="291.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="60.9" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (10 samples, 0.02%)</title><rect x="58.2" y="291.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.2" y="302.0"></text>
</g>
<g>
<title>java.lang.Object[] (10 samples, 0.02%)</title><rect x="58.2" y="275.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="61.2" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (8,382 samples, 18.99%)</title><rect x="58.5" y="291.0" width="224.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="61.5" y="302.0">java/util/PriorityQueue.add</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (8,382 samples, 18.99%)</title><rect x="58.5" y="275.0" width="224.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="61.5" y="286.0">java/util/PriorityQueue.offer</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (106 samples, 0.24%)</title><rect x="58.5" y="259.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.5" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (106 samples, 0.24%)</title><rect x="58.5" y="243.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.5" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (106 samples, 0.24%)</title><rect x="58.5" y="227.0" width="2.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="61.5" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (8,276 samples, 18.75%)</title><rect x="61.3" y="259.0" width="221.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.3" y="270.0">java/util/PriorityQueue.siftUp</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (8,276 samples, 18.75%)</title><rect x="61.3" y="243.0" width="221.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.3" y="254.0">java/util/PriorityQueue.siftU..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8,276 samples, 18.75%)</title><rect x="61.3" y="227.0" width="221.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.3" y="238.0">com/google/common/collect/Ite..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8,276 samples, 18.75%)</title><rect x="61.3" y="211.0" width="221.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.3" y="222.0">com/google/common/collect/Ite..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (5,740 samples, 13.00%)</title><rect x="61.3" y="195.0" width="153.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.3" y="206.0">com/google/common/c..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (5,740 samples, 13.00%)</title><rect x="61.3" y="179.0" width="153.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.3" y="190.0">ru/mail/polis/dao/z..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (5,740 samples, 13.00%)</title><rect x="61.3" y="163.0" width="153.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.3" y="174.0">ru/mail/polis/dao/z..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (5,740 samples, 13.00%)</title><rect x="61.3" y="147.0" width="153.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.3" y="158.0">ru/mail/polis/dao/z..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,317 samples, 5.25%)</title><rect x="61.3" y="131.0" width="62.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.3" y="142.0">java/n..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,340 samples, 3.04%)</title><rect x="61.3" y="115.0" width="35.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="64.3" y="126.0">jav..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (977 samples, 2.21%)</title><rect x="97.2" y="115.0" width="26.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.2" y="126.0">j..</text>
</g>
<g>
<title>byte[] (977 samples, 2.21%)</title><rect x="97.2" y="99.0" width="26.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="100.2" y="110.0">b..</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (199 samples, 0.45%)</title><rect x="123.3" y="131.0" width="5.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="126.3" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (217 samples, 0.49%)</title><rect x="128.6" y="131.0" width="5.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="131.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (2,334 samples, 5.29%)</title><rect x="134.4" y="131.0" width="62.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.4" y="142.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,671 samples, 3.78%)</title><rect x="134.4" y="115.0" width="44.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="137.4" y="126.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (885 samples, 2.00%)</title><rect x="134.4" y="99.0" width="23.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="137.4" y="110.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (786 samples, 1.78%)</title><rect x="158.0" y="99.0" width="21.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.0" y="110.0">j..</text>
</g>
<g>
<title>byte[] (786 samples, 1.78%)</title><rect x="158.0" y="83.0" width="21.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="161.0" y="94.0">b..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (663 samples, 1.50%)</title><rect x="179.0" y="115.0" width="17.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="182.0" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (663 samples, 1.50%)</title><rect x="179.0" y="99.0" width="17.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.0" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (459 samples, 1.04%)</title><rect x="179.0" y="83.0" width="12.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="182.0" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (204 samples, 0.46%)</title><rect x="191.3" y="83.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.3" y="94.0"></text>
</g>
<g>
<title>byte[] (204 samples, 0.46%)</title><rect x="191.3" y="67.0" width="5.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="194.3" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (673 samples, 1.52%)</title><rect x="196.8" y="131.0" width="18.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="199.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (673 samples, 1.52%)</title><rect x="196.8" y="115.0" width="18.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.8" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (444 samples, 1.01%)</title><rect x="196.8" y="99.0" width="11.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="199.8" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (229 samples, 0.52%)</title><rect x="208.6" y="99.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.6" y="110.0"></text>
</g>
<g>
<title>byte[] (229 samples, 0.52%)</title><rect x="208.6" y="83.0" width="6.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="211.6" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$100/821788979.compare (2,536 samples, 5.74%)</title><rect x="214.8" y="195.0" width="67.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.8" y="206.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,536 samples, 5.74%)</title><rect x="214.8" y="179.0" width="67.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.8" y="190.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (2,536 samples, 5.74%)</title><rect x="214.8" y="163.0" width="67.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.8" y="174.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2,536 samples, 5.74%)</title><rect x="214.8" y="147.0" width="67.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.8" y="158.0">java/ut..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$98/1732288223.apply (2,536 samples, 5.74%)</title><rect x="214.8" y="131.0" width="67.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.8" y="142.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (2,536 samples, 5.74%)</title><rect x="214.8" y="115.0" width="67.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.8" y="126.0">ru/mail..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2,536 samples, 5.74%)</title><rect x="214.8" y="99.0" width="67.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.8" y="110.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2,536 samples, 5.74%)</title><rect x="214.8" y="83.0" width="67.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="217.8" y="94.0">java.ni..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (91 samples, 0.21%)</title><rect x="282.5" y="291.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.5" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (91 samples, 0.21%)</title><rect x="282.5" y="275.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="285.5" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (91 samples, 0.21%)</title><rect x="282.5" y="259.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.5" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (12 samples, 0.03%)</title><rect x="282.5" y="243.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.5" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$96/1192894212.getAsBoolean (12 samples, 0.03%)</title><rect x="282.5" y="227.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.5" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (12 samples, 0.03%)</title><rect x="282.5" y="211.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (12 samples, 0.03%)</title><rect x="282.5" y="195.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.5" y="206.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (12 samples, 0.03%)</title><rect x="282.5" y="179.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable$$Lambda$92/1728264261.apply (12 samples, 0.03%)</title><rect x="282.5" y="163.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.lambda$iterator$0 (12 samples, 0.03%)</title><rect x="282.5" y="147.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.5" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (12 samples, 0.03%)</title><rect x="282.5" y="131.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="285.5" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (79 samples, 0.18%)</title><rect x="282.9" y="243.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="285.9" y="254.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (21 samples, 0.05%)</title><rect x="282.9" y="227.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="285.9" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (10 samples, 0.02%)</title><rect x="283.4" y="227.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.4" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (10 samples, 0.02%)</title><rect x="283.4" y="211.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.4" y="222.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (39 samples, 0.09%)</title><rect x="283.9" y="227.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.9" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (39 samples, 0.09%)</title><rect x="283.9" y="211.0" width="1.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="286.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (704 samples, 1.59%)</title><rect x="285.0" y="323.0" width="18.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (696 samples, 1.58%)</title><rect x="285.2" y="307.0" width="18.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.2" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (696 samples, 1.58%)</title><rect x="285.2" y="291.0" width="18.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.2" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (272 samples, 0.62%)</title><rect x="285.2" y="275.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.2" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (272 samples, 0.62%)</title><rect x="285.2" y="259.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.2" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (272 samples, 0.62%)</title><rect x="285.2" y="243.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.2" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (272 samples, 0.62%)</title><rect x="285.2" y="227.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.2" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (272 samples, 0.62%)</title><rect x="285.2" y="211.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.2" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$100/821788979.compare (272 samples, 0.62%)</title><rect x="285.2" y="195.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="288.2" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (272 samples, 0.62%)</title><rect x="285.2" y="179.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.2" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (272 samples, 0.62%)</title><rect x="285.2" y="163.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.2" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (272 samples, 0.62%)</title><rect x="285.2" y="147.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="288.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$98/1732288223.apply (272 samples, 0.62%)</title><rect x="285.2" y="131.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (272 samples, 0.62%)</title><rect x="285.2" y="115.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.2" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (272 samples, 0.62%)</title><rect x="285.2" y="99.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.2" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (272 samples, 0.62%)</title><rect x="285.2" y="83.0" width="7.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="288.2" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (424 samples, 0.96%)</title><rect x="292.5" y="275.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.5" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (424 samples, 0.96%)</title><rect x="292.5" y="259.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.5" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (424 samples, 0.96%)</title><rect x="292.5" y="243.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.5" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (424 samples, 0.96%)</title><rect x="292.5" y="227.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (424 samples, 0.96%)</title><rect x="292.5" y="211.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="295.5" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (424 samples, 0.96%)</title><rect x="292.5" y="195.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.5" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (237 samples, 0.54%)</title><rect x="292.5" y="179.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (237 samples, 0.54%)</title><rect x="292.5" y="163.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (237 samples, 0.54%)</title><rect x="292.5" y="147.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (237 samples, 0.54%)</title><rect x="292.5" y="131.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="295.5" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (96 samples, 0.22%)</title><rect x="292.5" y="115.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.5" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (62 samples, 0.14%)</title><rect x="292.5" y="99.0" width="1.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="295.5" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (34 samples, 0.08%)</title><rect x="294.1" y="99.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.1" y="110.0"></text>
</g>
<g>
<title>byte[] (34 samples, 0.08%)</title><rect x="294.1" y="83.0" width="0.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="297.1" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (12 samples, 0.03%)</title><rect x="295.1" y="115.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="298.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (102 samples, 0.23%)</title><rect x="295.4" y="115.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (73 samples, 0.17%)</title><rect x="295.4" y="99.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="298.4" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (42 samples, 0.10%)</title><rect x="295.4" y="83.0" width="1.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="298.4" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (31 samples, 0.07%)</title><rect x="296.6" y="83.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.6" y="94.0"></text>
</g>
<g>
<title>byte[] (31 samples, 0.07%)</title><rect x="296.6" y="67.0" width="0.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="299.6" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (29 samples, 0.07%)</title><rect x="297.4" y="99.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.4" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (29 samples, 0.07%)</title><rect x="297.4" y="83.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (16 samples, 0.04%)</title><rect x="297.4" y="67.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="300.4" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.03%)</title><rect x="297.8" y="67.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.8" y="78.0"></text>
</g>
<g>
<title>byte[] (13 samples, 0.03%)</title><rect x="297.8" y="51.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="300.8" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (23 samples, 0.05%)</title><rect x="298.2" y="115.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.2" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (23 samples, 0.05%)</title><rect x="298.2" y="99.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="301.2" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (15 samples, 0.03%)</title><rect x="298.2" y="83.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="301.2" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$100/821788979.compare (187 samples, 0.42%)</title><rect x="298.8" y="179.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.8" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (187 samples, 0.42%)</title><rect x="298.8" y="163.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.8" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (187 samples, 0.42%)</title><rect x="298.8" y="147.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.8" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (187 samples, 0.42%)</title><rect x="298.8" y="131.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$98/1732288223.apply (187 samples, 0.42%)</title><rect x="298.8" y="115.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="301.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (187 samples, 0.42%)</title><rect x="298.8" y="99.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.8" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (187 samples, 0.42%)</title><rect x="298.8" y="83.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="301.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (187 samples, 0.42%)</title><rect x="298.8" y="67.0" width="5.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="301.8" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList (32,279 samples, 73.11%)</title><rect x="303.8" y="323.0" width="862.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.8" y="334.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList</text>
</g>
<g>
<title>java/lang/Iterable.forEach (32,233 samples, 73.01%)</title><rect x="303.8" y="307.0" width="861.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.8" y="318.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (33 samples, 0.07%)</title><rect x="303.8" y="291.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="306.8" y="302.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (12 samples, 0.03%)</title><rect x="303.8" y="275.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="306.8" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (21 samples, 0.05%)</title><rect x="304.1" y="275.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.1" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (12 samples, 0.03%)</title><rect x="304.1" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="307.1" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (12 samples, 0.03%)</title><rect x="304.1" y="243.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="307.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$105/1095861321.accept (32,200 samples, 72.93%)</title><rect x="304.7" y="291.0" width="860.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="307.7" y="302.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$105/1095861321.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$10 (32,200 samples, 72.93%)</title><rect x="304.7" y="275.0" width="860.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.7" y="286.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$10</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.iterator (32,200 samples, 72.93%)</title><rect x="304.7" y="259.0" width="860.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="307.7" y="270.0">ru/mail/polis/dao/zvladn7/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.SSTable$SSTableIter (229 samples, 0.52%)</title><rect x="304.7" y="243.0" width="6.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="307.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt; (31,971 samples, 72.41%)</title><rect x="310.8" y="243.0" width="854.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.8" y="254.0">ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getElementPosition (31,971 samples, 72.41%)</title><rect x="310.8" y="227.0" width="854.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="313.8" y="238.0">ru/mail/polis/dao/zvladn7/SSTable.getElementPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (31,971 samples, 72.41%)</title><rect x="310.8" y="211.0" width="854.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.8" y="222.0">ru/mail/polis/dao/zvladn7/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (22,937 samples, 51.95%)</title><rect x="310.8" y="195.0" width="613.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="313.8" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (12,295 samples, 27.85%)</title><rect x="310.8" y="179.0" width="328.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="313.8" y="190.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10,642 samples, 24.10%)</title><rect x="639.4" y="179.0" width="284.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="642.4" y="190.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (10,642 samples, 24.10%)</title><rect x="639.4" y="163.0" width="284.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="642.4" y="174.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (9,034 samples, 20.46%)</title><rect x="923.8" y="195.0" width="241.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="926.8" y="206.0">ru/mail/polis/dao/zvladn7/SSTabl..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (9,034 samples, 20.46%)</title><rect x="923.8" y="179.0" width="241.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="926.8" y="190.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,072 samples, 13.75%)</title><rect x="923.8" y="163.0" width="162.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="926.8" y="174.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,962 samples, 6.71%)</title><rect x="1086.1" y="163.0" width="79.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1089.1" y="174.0">java/nio/..</text>
</g>
<g>
<title>byte[] (2,962 samples, 6.71%)</title><rect x="1086.1" y="147.0" width="79.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1089.1" y="158.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (18 samples, 0.04%)</title><rect x="1165.3" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1168.3" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (18 samples, 0.04%)</title><rect x="1165.3" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1168.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$105/1095861321.get$Lambda (18 samples, 0.04%)</title><rect x="1165.3" y="275.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1168.3" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$105 (18 samples, 0.04%)</title><rect x="1165.3" y="259.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1168.3" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractMap.values (10 samples, 0.02%)</title><rect x="1165.8" y="307.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1168.8" y="318.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2 (10 samples, 0.02%)</title><rect x="1165.8" y="291.0" width="0.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1168.8" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.descendingMap (18 samples, 0.04%)</title><rect x="1166.0" y="307.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1169.0" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$DescendingSubMap (18 samples, 0.04%)</title><rect x="1166.0" y="291.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1169.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.iterator (123 samples, 0.28%)</title><rect x="1166.5" y="339.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1169.5" y="350.0"></text>
</g>
<g>
<title>java/util/Collection.stream (30 samples, 0.07%)</title><rect x="1166.5" y="323.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1169.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (15 samples, 0.03%)</title><rect x="1166.5" y="307.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1169.5" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (15 samples, 0.03%)</title><rect x="1166.5" y="291.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1169.5" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (15 samples, 0.03%)</title><rect x="1166.9" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1169.9" y="318.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (15 samples, 0.03%)</title><rect x="1166.9" y="291.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1169.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (20 samples, 0.05%)</title><rect x="1167.5" y="323.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1170.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (20 samples, 0.05%)</title><rect x="1167.5" y="307.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1170.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (20 samples, 0.05%)</title><rect x="1167.5" y="291.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1170.5" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (20 samples, 0.05%)</title><rect x="1167.5" y="275.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1170.5" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (40 samples, 0.09%)</title><rect x="1168.0" y="323.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1171.0" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (31 samples, 0.07%)</title><rect x="1168.3" y="307.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1171.3" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (24 samples, 0.05%)</title><rect x="1168.5" y="291.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1171.5" y="302.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (24 samples, 0.05%)</title><rect x="1168.5" y="275.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1171.5" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (26 samples, 0.06%)</title><rect x="1169.1" y="323.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1172.1" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (26 samples, 0.06%)</title><rect x="1169.1" y="307.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1172.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/TableSet.startIterating (442 samples, 1.00%)</title><rect x="1169.8" y="339.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1172.8" y="350.0"></text>
</g>
<g>
<title>java.util.TreeMap (16 samples, 0.04%)</title><rect x="1170.0" y="323.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1173.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (31 samples, 0.07%)</title><rect x="1170.4" y="323.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1173.4" y="334.0"></text>
</g>
<g>
<title>java.util.HashMap (12 samples, 0.03%)</title><rect x="1170.4" y="307.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1173.4" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (19 samples, 0.04%)</title><rect x="1170.7" y="307.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1173.7" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (19 samples, 0.04%)</title><rect x="1170.7" y="291.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1173.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (13 samples, 0.03%)</title><rect x="1170.7" y="275.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1173.7" y="286.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (13 samples, 0.03%)</title><rect x="1170.7" y="259.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1173.7" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.&lt;init&gt; (376 samples, 0.85%)</title><rect x="1171.2" y="323.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1174.2" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntrySet.iterator (17 samples, 0.04%)</title><rect x="1171.2" y="307.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1174.2" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$EntryIterator (17 samples, 0.04%)</title><rect x="1171.2" y="291.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1174.2" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.buildFromSorted (353 samples, 0.80%)</title><rect x="1171.7" y="307.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1174.7" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.buildFromSorted (353 samples, 0.80%)</title><rect x="1171.7" y="291.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1174.7" y="302.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (20 samples, 0.05%)</title><rect x="1171.7" y="275.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1174.7" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.buildFromSorted (333 samples, 0.75%)</title><rect x="1172.2" y="275.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1175.2" y="286.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (30 samples, 0.07%)</title><rect x="1172.2" y="259.0" width="0.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1175.2" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.buildFromSorted (303 samples, 0.69%)</title><rect x="1173.0" y="259.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1176.0" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (70 samples, 0.16%)</title><rect x="1173.0" y="243.0" width="1.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1176.0" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.buildFromSorted (233 samples, 0.53%)</title><rect x="1174.9" y="243.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1177.9" y="254.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (131 samples, 0.30%)</title><rect x="1174.9" y="227.0" width="3.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1177.9" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.buildFromSorted (102 samples, 0.23%)</title><rect x="1178.4" y="227.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1181.4" y="238.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (102 samples, 0.23%)</title><rect x="1178.4" y="211.0" width="2.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1181.4" y="222.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.TableSet (13 samples, 0.03%)</title><rect x="1181.3" y="323.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.wrapString (51 samples, 0.12%)</title><rect x="1181.8" y="371.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1184.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (31 samples, 0.07%)</title><rect x="1181.8" y="355.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1184.8" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (31 samples, 0.07%)</title><rect x="1181.8" y="339.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1184.8" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (31 samples, 0.07%)</title><rect x="1181.8" y="323.0" width="0.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1184.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.toBytes (20 samples, 0.05%)</title><rect x="1182.7" y="355.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1185.7" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (20 samples, 0.05%)</title><rect x="1182.7" y="339.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1185.7" y="350.0"></text>
</g>
<g>
<title>byte[] (20 samples, 0.05%)</title><rect x="1182.7" y="323.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1185.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (21 samples, 0.05%)</title><rect x="1183.2" y="403.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1186.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (21 samples, 0.05%)</title><rect x="1183.2" y="387.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1186.2" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (21 samples, 0.05%)</title><rect x="1183.2" y="371.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1186.2" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (12 samples, 0.03%)</title><rect x="1183.5" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1186.5" y="366.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.03%)</title><rect x="1183.5" y="339.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1186.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (191 samples, 0.43%)</title><rect x="1183.8" y="435.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1186.8" y="446.0"></text>
</g>
<g>
<title>one.nio.http.Request (13 samples, 0.03%)</title><rect x="1183.8" y="419.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1186.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (47 samples, 0.11%)</title><rect x="1184.1" y="419.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (47 samples, 0.11%)</title><rect x="1184.1" y="403.0" width="1.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (131 samples, 0.30%)</title><rect x="1185.4" y="419.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1188.4" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (131 samples, 0.30%)</title><rect x="1185.4" y="403.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1188.4" y="414.0"></text>
</g>
<g>
<title>char[] (108 samples, 0.24%)</title><rect x="1185.4" y="387.0" width="2.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1188.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.03%)</title><rect x="1188.5" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1191.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.03%)</title><rect x="1188.5" y="371.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1191.5" y="382.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (15 samples, 0.03%)</title><rect x="1188.5" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1191.5" y="366.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.03%)</title><rect x="1188.5" y="339.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1191.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (42 samples, 0.10%)</title><rect x="1188.9" y="435.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1191.9" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (42 samples, 0.10%)</title><rect x="1188.9" y="419.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1191.9" y="430.0"></text>
</g>
<g>
<title>char[] (26 samples, 0.06%)</title><rect x="1188.9" y="403.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1191.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.02%)</title><rect x="1189.7" y="403.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1192.7" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.02%)</title><rect x="1189.7" y="387.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1192.7" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (10 samples, 0.02%)</title><rect x="1189.7" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1192.7" y="382.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.02%)</title><rect x="1189.7" y="355.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1192.7" y="366.0"></text>
</g>
</g>
</svg>
