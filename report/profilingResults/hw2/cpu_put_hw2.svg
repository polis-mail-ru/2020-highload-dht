<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (3,787 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="10.0" y="915.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="10.0" y="899.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (1 samples, 0.03%)</title><rect x="10.0" y="883.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.03%)</title><rect x="10.3" y="915.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.3" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="10.3" y="899.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.3" y="910.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.03%)</title><rect x="10.6" y="915.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.6" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.05%)</title><rect x="10.9" y="915.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.9" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.05%)</title><rect x="10.9" y="899.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="13.9" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.05%)</title><rect x="10.9" y="883.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="13.9" y="894.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.05%)</title><rect x="10.9" y="867.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="13.9" y="878.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.05%)</title><rect x="10.9" y="851.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="13.9" y="862.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.05%)</title><rect x="10.9" y="835.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="13.9" y="846.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.05%)</title><rect x="10.9" y="819.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="13.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (649 samples, 17.14%)</title><rect x="11.6" y="915.0" width="202.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="14.6" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (649 samples, 17.14%)</title><rect x="11.6" y="899.0" width="202.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.6" y="910.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (649 samples, 17.14%)</title><rect x="11.6" y="883.0" width="202.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.6" y="894.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$93/950694683.run (649 samples, 17.14%)</title><rect x="11.6" y="867.0" width="202.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.6" y="878.0">ru/mail/polis/dao/zvladn7/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$flush$9 (649 samples, 17.14%)</title><rect x="11.6" y="851.0" width="202.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="14.6" y="862.0">ru/mail/polis/dao/zvladn7/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.serialize (649 samples, 17.14%)</title><rect x="11.6" y="835.0" width="202.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.6" y="846.0">ru/mail/polis/dao/zvladn7/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.serialize (649 samples, 17.14%)</title><rect x="11.6" y="819.0" width="202.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.6" y="830.0">ru/mail/polis/dao/zvladn7/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.05%)</title><rect x="12.5" y="803.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.5" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.8" y="787.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.8" y="771.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.8" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.8" y="755.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.8" y="739.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.8" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.03%)</title><rect x="13.1" y="803.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putIntUnaligned (1 samples, 0.03%)</title><rect x="13.1" y="787.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.03%)</title><rect x="13.4" y="803.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.4" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.03%)</title><rect x="13.4" y="787.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.4" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (9 samples, 0.24%)</title><rect x="13.7" y="803.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (8 samples, 0.21%)</title><rect x="14.1" y="787.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.1" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.accept (1 samples, 0.03%)</title><rect x="14.1" y="771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (7 samples, 0.18%)</title><rect x="14.4" y="771.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.clear (3 samples, 0.08%)</title><rect x="14.7" y="755.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.7" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (3 samples, 0.08%)</title><rect x="15.6" y="755.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$97/269091042.getAsBoolean (2 samples, 0.05%)</title><rect x="15.9" y="739.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (2 samples, 0.05%)</title><rect x="15.9" y="723.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (2 samples, 0.05%)</title><rect x="15.9" y="707.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.05%)</title><rect x="15.9" y="691.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.05%)</title><rect x="15.9" y="675.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.05%)</title><rect x="15.9" y="659.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (2 samples, 0.05%)</title><rect x="15.9" y="643.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (1 samples, 0.03%)</title><rect x="16.5" y="803.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.5" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="16.5" y="787.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.5" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (632 samples, 16.69%)</title><rect x="16.9" y="803.0" width="196.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.9" y="814.0">sun/nio/ch/FileChannelImpl..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (2 samples, 0.05%)</title><rect x="16.9" y="787.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (13 samples, 0.34%)</title><rect x="17.5" y="787.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.5" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (13 samples, 0.34%)</title><rect x="17.5" y="771.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (5 samples, 0.13%)</title><rect x="19.0" y="755.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.0" y="766.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.08%)</title><rect x="20.6" y="755.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.6" y="766.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.05%)</title><rect x="20.9" y="739.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.05%)</title><rect x="20.9" y="723.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.9" y="734.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.03%)</title><rect x="21.2" y="707.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.2" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (604 samples, 15.95%)</title><rect x="21.5" y="787.0" width="188.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.5" y="798.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (6 samples, 0.16%)</title><rect x="22.5" y="771.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.5" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="22.8" y="755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.8" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.11%)</title><rect x="23.1" y="755.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.1" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.03%)</title><rect x="23.1" y="739.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.1" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.03%)</title><rect x="23.1" y="723.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.1" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putByte (1 samples, 0.03%)</title><rect x="23.1" y="707.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.1" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.08%)</title><rect x="23.4" y="739.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.05%)</title><rect x="23.7" y="723.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.7" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.05%)</title><rect x="23.7" y="707.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.7" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.05%)</title><rect x="23.7" y="691.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.7" y="702.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.03%)</title><rect x="24.3" y="771.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.3" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.03%)</title><rect x="24.3" y="755.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.flip (1 samples, 0.03%)</title><rect x="24.3" y="739.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (575 samples, 15.18%)</title><rect x="24.6" y="771.0" width="179.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.6" y="782.0">sun/nio/ch/IOUtil.write..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (575 samples, 15.18%)</title><rect x="24.6" y="755.0" width="179.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.6" y="766.0">sun/nio/ch/FileDispatch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (575 samples, 15.18%)</title><rect x="24.6" y="739.0" width="179.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.6" y="750.0">sun/nio/ch/FileDispatch..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.05%)</title><rect x="26.2" y="723.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="29.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (562 samples, 14.84%)</title><rect x="26.8" y="723.0" width="175.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="29.8" y="734.0">[unknown]</text>
</g>
<g>
<title>__libc_write (559 samples, 14.76%)</title><rect x="26.8" y="707.0" width="174.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="29.8" y="718.0">__libc_write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (451 samples, 11.91%)</title><rect x="60.5" y="691.0" width="140.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="63.5" y="702.0">entry_SYSCALL_64_a..</text>
</g>
<g>
<title>__x64_sys_write (5 samples, 0.13%)</title><rect x="60.5" y="675.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="63.5" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (446 samples, 11.78%)</title><rect x="62.0" y="675.0" width="139.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="65.0" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (417 samples, 11.01%)</title><rect x="71.1" y="659.0" width="129.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="74.1" y="670.0">__x64_sys_write</text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.05%)</title><rect x="71.1" y="643.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="74.1" y="654.0"></text>
</g>
<g>
<title>ksys_write (415 samples, 10.96%)</title><rect x="71.7" y="643.0" width="129.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="74.7" y="654.0">ksys_write</text>
</g>
<g>
<title>__f_unlock_pos (4 samples, 0.11%)</title><rect x="72.3" y="627.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="75.3" y="638.0"></text>
</g>
<g>
<title>mutex_unlock (4 samples, 0.11%)</title><rect x="72.3" y="611.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="75.3" y="622.0"></text>
</g>
<g>
<title>__fdget_pos (15 samples, 0.40%)</title><rect x="73.6" y="627.0" width="4.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="76.6" y="638.0"></text>
</g>
<g>
<title>__fget_light (12 samples, 0.32%)</title><rect x="73.6" y="611.0" width="3.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="76.6" y="622.0"></text>
</g>
<g>
<title>__fget (11 samples, 0.29%)</title><rect x="73.9" y="595.0" width="3.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="76.9" y="606.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.08%)</title><rect x="77.3" y="611.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="80.3" y="622.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="78.2" y="627.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="81.2" y="638.0"></text>
</g>
<g>
<title>__sb_end_write (1 samples, 0.03%)</title><rect x="78.6" y="627.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="81.6" y="638.0"></text>
</g>
<g>
<title>fput (3 samples, 0.08%)</title><rect x="78.9" y="627.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="81.9" y="638.0"></text>
</g>
<g>
<title>fput_many (3 samples, 0.08%)</title><rect x="78.9" y="611.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="81.9" y="622.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.03%)</title><rect x="79.8" y="627.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="82.8" y="638.0"></text>
</g>
<g>
<title>vfs_write (388 samples, 10.25%)</title><rect x="80.1" y="627.0" width="120.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="83.1" y="638.0">vfs_write</text>
</g>
<g>
<title>__fsnotify_parent (2 samples, 0.05%)</title><rect x="81.7" y="611.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="84.7" y="622.0"></text>
</g>
<g>
<title>__sb_end_write (1 samples, 0.03%)</title><rect x="82.3" y="611.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="85.3" y="622.0"></text>
</g>
<g>
<title>__sb_start_write (7 samples, 0.18%)</title><rect x="82.6" y="611.0" width="2.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="85.6" y="622.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="84.2" y="595.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="87.2" y="606.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="84.5" y="595.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="87.5" y="606.0"></text>
</g>
<g>
<title>__vfs_write (353 samples, 9.32%)</title><rect x="84.8" y="611.0" width="110.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="87.8" y="622.0">__vfs_write</text>
</g>
<g>
<title>ext4_file_write_iter (2 samples, 0.05%)</title><rect x="84.8" y="595.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="87.8" y="606.0"></text>
</g>
<g>
<title>new_sync_write (351 samples, 9.27%)</title><rect x="85.4" y="595.0" width="109.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="88.4" y="606.0">new_sync_write</text>
</g>
<g>
<title>ext4_file_write_iter (348 samples, 9.19%)</title><rect x="85.7" y="579.0" width="108.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="88.7" y="590.0">ext4_file_wri..</text>
</g>
<g>
<title>__generic_file_write_iter (331 samples, 8.74%)</title><rect x="87.3" y="563.0" width="103.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="90.3" y="574.0">__generic_fi..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (2 samples, 0.05%)</title><rect x="89.1" y="547.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="92.1" y="558.0"></text>
</g>
<g>
<title>ext4_da_write_begin (1 samples, 0.03%)</title><rect x="89.8" y="547.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="92.8" y="558.0"></text>
</g>
<g>
<title>ext4_da_write_end (7 samples, 0.18%)</title><rect x="90.1" y="547.0" width="2.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="93.1" y="558.0"></text>
</g>
<g>
<title>file_remove_privs (2 samples, 0.05%)</title><rect x="92.3" y="547.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="95.3" y="558.0"></text>
</g>
<g>
<title>file_update_time (6 samples, 0.16%)</title><rect x="92.9" y="547.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="95.9" y="558.0"></text>
</g>
<g>
<title>current_time (5 samples, 0.13%)</title><rect x="93.2" y="531.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="96.2" y="542.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (5 samples, 0.13%)</title><rect x="93.2" y="515.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="96.2" y="526.0"></text>
</g>
<g>
<title>generic_perform_write (305 samples, 8.05%)</title><rect x="94.8" y="547.0" width="95.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="97.8" y="558.0">generic_per..</text>
</g>
<g>
<title>__ext4_journal_stop (1 samples, 0.03%)</title><rect x="95.1" y="531.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="98.1" y="542.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (2 samples, 0.05%)</title><rect x="95.4" y="531.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="98.4" y="542.0"></text>
</g>
<g>
<title>ext4_da_write_begin (76 samples, 2.01%)</title><rect x="96.0" y="531.0" width="23.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="99.0" y="542.0">e..</text>
</g>
<g>
<title>__ext4_journal_start_sb (28 samples, 0.74%)</title><rect x="98.8" y="515.0" width="8.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="101.8" y="526.0"></text>
</g>
<g>
<title>jbd2__journal_start (27 samples, 0.71%)</title><rect x="99.1" y="499.0" width="8.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="102.1" y="510.0"></text>
</g>
<g>
<title>kmem_cache_alloc (6 samples, 0.16%)</title><rect x="100.1" y="483.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="103.1" y="494.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.03%)</title><rect x="101.6" y="467.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="104.6" y="478.0"></text>
</g>
<g>
<title>memset_erms (3 samples, 0.08%)</title><rect x="101.9" y="483.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="104.9" y="494.0"></text>
</g>
<g>
<title>start_this_handle (15 samples, 0.40%)</title><rect x="102.9" y="483.0" width="4.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="105.9" y="494.0"></text>
</g>
<g>
<title>_raw_read_lock (1 samples, 0.03%)</title><rect x="105.0" y="467.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="108.0" y="478.0"></text>
</g>
<g>
<title>add_transaction_credits (7 samples, 0.18%)</title><rect x="105.3" y="467.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="108.3" y="478.0"></text>
</g>
<g>
<title>ext4_block_write_begin (7 samples, 0.18%)</title><rect x="107.5" y="515.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="110.5" y="526.0"></text>
</g>
<g>
<title>ext4_da_get_block_prep (2 samples, 0.05%)</title><rect x="109.1" y="499.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="112.1" y="510.0"></text>
</g>
<g>
<title>ext4_da_reserve_space (1 samples, 0.03%)</title><rect x="109.1" y="483.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="112.1" y="494.0"></text>
</g>
<g>
<title>__dquot_alloc_space (1 samples, 0.03%)</title><rect x="109.1" y="467.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="112.1" y="478.0"></text>
</g>
<g>
<title>inode_reserved_space (1 samples, 0.03%)</title><rect x="109.1" y="451.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="112.1" y="462.0"></text>
</g>
<g>
<title>ext4_es_insert_delayed_block (1 samples, 0.03%)</title><rect x="109.4" y="483.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="112.4" y="494.0"></text>
</g>
<g>
<title>__es_insert_extent (1 samples, 0.03%)</title><rect x="109.4" y="467.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="112.4" y="478.0"></text>
</g>
<g>
<title>ext4_nonda_switch (2 samples, 0.05%)</title><rect x="109.7" y="515.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="112.7" y="526.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (26 samples, 0.69%)</title><rect x="110.3" y="515.0" width="8.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="113.3" y="526.0"></text>
</g>
<g>
<title>pagecache_get_page (21 samples, 0.55%)</title><rect x="111.0" y="499.0" width="6.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="114.0" y="510.0"></text>
</g>
<g>
<title>__page_cache_alloc (1 samples, 0.03%)</title><rect x="112.2" y="483.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="115.2" y="494.0"></text>
</g>
<g>
<title>alloc_pages_current (1 samples, 0.03%)</title><rect x="112.2" y="467.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="115.2" y="478.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="112.2" y="451.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="115.2" y="462.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="112.2" y="435.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="115.2" y="446.0"></text>
</g>
<g>
<title>node_dirty_ok (1 samples, 0.03%)</title><rect x="112.2" y="419.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="115.2" y="430.0"></text>
</g>
<g>
<title>add_to_page_cache_lru (1 samples, 0.03%)</title><rect x="112.5" y="483.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="115.5" y="494.0"></text>
</g>
<g>
<title>__add_to_page_cache_locked (1 samples, 0.03%)</title><rect x="112.5" y="467.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="115.5" y="478.0"></text>
</g>
<g>
<title>mem_cgroup_commit_charge (1 samples, 0.03%)</title><rect x="112.5" y="451.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="115.5" y="462.0"></text>
</g>
<g>
<title>find_get_entry (14 samples, 0.37%)</title><rect x="112.8" y="483.0" width="4.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="115.8" y="494.0"></text>
</g>
<g>
<title>xas_load (9 samples, 0.24%)</title><rect x="114.4" y="467.0" width="2.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="117.4" y="478.0"></text>
</g>
<g>
<title>xas_start (2 samples, 0.05%)</title><rect x="116.6" y="451.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="119.6" y="462.0"></text>
</g>
<g>
<title>xas_load (1 samples, 0.03%)</title><rect x="117.2" y="483.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="120.2" y="494.0"></text>
</g>
<g>
<title>wait_for_stable_page (3 samples, 0.08%)</title><rect x="117.5" y="499.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="120.5" y="510.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="118.4" y="515.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="121.4" y="526.0"></text>
</g>
<g>
<title>unlock_page (2 samples, 0.05%)</title><rect x="118.7" y="515.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="121.7" y="526.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.03%)</title><rect x="119.4" y="515.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="122.4" y="526.0"></text>
</g>
<g>
<title>ext4_da_write_end (207 samples, 5.47%)</title><rect x="119.7" y="531.0" width="64.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="122.7" y="542.0">ext4_da..</text>
</g>
<g>
<title>__ext4_journal_stop (29 samples, 0.77%)</title><rect x="121.6" y="515.0" width="9.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="124.6" y="526.0"></text>
</g>
<g>
<title>jbd2_journal_stop (26 samples, 0.69%)</title><rect x="122.2" y="499.0" width="8.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="125.2" y="510.0"></text>
</g>
<g>
<title>__wake_up (9 samples, 0.24%)</title><rect x="125.3" y="483.0" width="2.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="128.3" y="494.0"></text>
</g>
<g>
<title>__wake_up_common_lock (8 samples, 0.21%)</title><rect x="125.3" y="467.0" width="2.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="128.3" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (7 samples, 0.18%)</title><rect x="125.6" y="451.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="128.6" y="462.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="127.8" y="467.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="130.8" y="478.0"></text>
</g>
<g>
<title>kmem_cache_free (7 samples, 0.18%)</title><rect x="128.1" y="483.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="131.1" y="494.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.03%)</title><rect x="130.3" y="499.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="133.3" y="510.0"></text>
</g>
<g>
<title>generic_write_end (172 samples, 4.54%)</title><rect x="130.6" y="515.0" width="53.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="133.6" y="526.0">gener..</text>
</g>
<g>
<title>__mark_inode_dirty (155 samples, 4.09%)</title><rect x="131.8" y="499.0" width="48.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="134.8" y="510.0">__ma..</text>
</g>
<g>
<title>ext4_dirty_inode (153 samples, 4.04%)</title><rect x="132.5" y="483.0" width="47.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="135.5" y="494.0">ext4..</text>
</g>
<g>
<title>__ext4_journal_start_sb (4 samples, 0.11%)</title><rect x="133.1" y="467.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="136.1" y="478.0"></text>
</g>
<g>
<title>ext4_journal_check_start (2 samples, 0.05%)</title><rect x="133.4" y="451.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="136.4" y="462.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="133.7" y="435.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="136.7" y="446.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="133.7" y="419.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="136.7" y="430.0"></text>
</g>
<g>
<title>jbd2__journal_start (1 samples, 0.03%)</title><rect x="134.0" y="451.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="137.0" y="462.0"></text>
</g>
<g>
<title>__ext4_journal_stop (3 samples, 0.08%)</title><rect x="134.3" y="467.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="137.3" y="478.0"></text>
</g>
<g>
<title>jbd2_journal_stop (2 samples, 0.05%)</title><rect x="134.6" y="451.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="137.6" y="462.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (1 samples, 0.03%)</title><rect x="135.3" y="467.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="138.3" y="478.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (143 samples, 3.78%)</title><rect x="135.6" y="467.0" width="44.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="138.6" y="478.0">ext4..</text>
</g>
<g>
<title>__brelse (1 samples, 0.03%)</title><rect x="136.5" y="451.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="139.5" y="462.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.03%)</title><rect x="136.8" y="451.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="139.8" y="462.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="137.1" y="451.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="140.1" y="462.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="137.1" y="435.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="140.1" y="446.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="137.4" y="451.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="140.4" y="462.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (2 samples, 0.05%)</title><rect x="137.8" y="451.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="140.8" y="462.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (99 samples, 2.61%)</title><rect x="138.4" y="451.0" width="30.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="141.4" y="462.0">ex..</text>
</g>
<g>
<title>__brelse (1 samples, 0.03%)</title><rect x="146.5" y="435.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="149.5" y="446.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (8 samples, 0.21%)</title><rect x="146.8" y="435.0" width="2.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="149.8" y="446.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (5 samples, 0.13%)</title><rect x="147.7" y="419.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="150.7" y="430.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.05%)</title><rect x="149.3" y="435.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="152.3" y="446.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (55 samples, 1.45%)</title><rect x="149.9" y="435.0" width="17.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="152.9" y="446.0"></text>
</g>
<g>
<title>crypto_shash_update (2 samples, 0.05%)</title><rect x="150.2" y="419.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="153.2" y="430.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.63 (52 samples, 1.37%)</title><rect x="150.8" y="419.0" width="16.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="153.8" y="430.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (16 samples, 0.42%)</title><rect x="153.0" y="403.0" width="5.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="156.0" y="414.0"></text>
</g>
<g>
<title>crypto_shash_update (29 samples, 0.77%)</title><rect x="158.0" y="403.0" width="9.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="161.0" y="414.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (25 samples, 0.66%)</title><rect x="159.3" y="387.0" width="7.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="162.3" y="398.0"></text>
</g>
<g>
<title>from_kprojid (3 samples, 0.08%)</title><rect x="167.0" y="435.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="170.0" y="446.0"></text>
</g>
<g>
<title>map_id_up (2 samples, 0.05%)</title><rect x="167.4" y="419.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="170.4" y="430.0"></text>
</g>
<g>
<title>from_kuid (3 samples, 0.08%)</title><rect x="168.0" y="435.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="171.0" y="446.0"></text>
</g>
<g>
<title>map_id_up (3 samples, 0.08%)</title><rect x="168.0" y="419.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="171.0" y="430.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.03%)</title><rect x="168.9" y="435.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="171.9" y="446.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (35 samples, 0.92%)</title><rect x="169.2" y="451.0" width="10.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="172.2" y="462.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (21 samples, 0.55%)</title><rect x="169.5" y="435.0" width="6.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="172.5" y="446.0"></text>
</g>
<g>
<title>__getblk_gfp (8 samples, 0.21%)</title><rect x="173.0" y="419.0" width="2.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="176.0" y="430.0"></text>
</g>
<g>
<title>__find_get_block (7 samples, 0.18%)</title><rect x="173.0" y="403.0" width="2.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="176.0" y="414.0"></text>
</g>
<g>
<title>mark_page_accessed (1 samples, 0.03%)</title><rect x="174.8" y="387.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="177.8" y="398.0"></text>
</g>
<g>
<title>mark_page_accessed (1 samples, 0.03%)</title><rect x="175.1" y="403.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="178.1" y="414.0"></text>
</g>
<g>
<title>ext4_get_group_desc (2 samples, 0.05%)</title><rect x="175.5" y="419.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="178.5" y="430.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (11 samples, 0.29%)</title><rect x="176.1" y="435.0" width="3.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="179.1" y="446.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (9 samples, 0.24%)</title><rect x="176.1" y="419.0" width="2.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="179.1" y="430.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (8 samples, 0.21%)</title><rect x="176.4" y="403.0" width="2.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="179.4" y="414.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (2 samples, 0.05%)</title><rect x="178.9" y="419.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="181.9" y="430.0"></text>
</g>
<g>
<title>__getblk_gfp (1 samples, 0.03%)</title><rect x="179.5" y="435.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="182.5" y="446.0"></text>
</g>
<g>
<title>ext4_inode_table (1 samples, 0.03%)</title><rect x="179.8" y="435.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="182.8" y="446.0"></text>
</g>
<g>
<title>block_write_end (7 samples, 0.18%)</title><rect x="180.1" y="499.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="183.1" y="510.0"></text>
</g>
<g>
<title>__block_commit_write.isra.41 (6 samples, 0.16%)</title><rect x="180.4" y="483.0" width="1.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="183.4" y="494.0"></text>
</g>
<g>
<title>mark_buffer_dirty (1 samples, 0.03%)</title><rect x="182.0" y="467.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="185.0" y="478.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.05%)</title><rect x="182.3" y="499.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="185.3" y="510.0"></text>
</g>
<g>
<title>unlock_page (4 samples, 0.11%)</title><rect x="182.9" y="499.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="185.9" y="510.0"></text>
</g>
<g>
<title>iov_iter_advance (2 samples, 0.05%)</title><rect x="184.2" y="531.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="187.2" y="542.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (9 samples, 0.24%)</title><rect x="184.8" y="531.0" width="2.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="187.8" y="542.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.05%)</title><rect x="185.7" y="515.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="188.7" y="526.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (4 samples, 0.11%)</title><rect x="186.4" y="515.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="189.4" y="526.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (6 samples, 0.16%)</title><rect x="187.6" y="531.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="190.6" y="542.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="189.5" y="531.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="192.5" y="542.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.03%)</title><rect x="189.8" y="547.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="192.8" y="558.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.03%)</title><rect x="190.1" y="547.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="193.1" y="558.0"></text>
</g>
<g>
<title>down_write_trylock (1 samples, 0.03%)</title><rect x="190.4" y="563.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="193.4" y="574.0"></text>
</g>
<g>
<title>ext4_write_checks (5 samples, 0.13%)</title><rect x="190.7" y="563.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="193.7" y="574.0"></text>
</g>
<g>
<title>generic_write_checks (3 samples, 0.08%)</title><rect x="191.3" y="547.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="194.3" y="558.0"></text>
</g>
<g>
<title>generic_write_checks (1 samples, 0.03%)</title><rect x="192.3" y="563.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="195.3" y="574.0"></text>
</g>
<g>
<title>up_write (5 samples, 0.13%)</title><rect x="192.6" y="563.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="195.6" y="574.0"></text>
</g>
<g>
<title>iov_iter_init (2 samples, 0.05%)</title><rect x="194.2" y="579.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="197.2" y="590.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.03%)</title><rect x="194.8" y="611.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="197.8" y="622.0"></text>
</g>
<g>
<title>rw_verify_area (18 samples, 0.48%)</title><rect x="195.1" y="611.0" width="5.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="198.1" y="622.0"></text>
</g>
<g>
<title>apparmor_file_permission (3 samples, 0.08%)</title><rect x="195.4" y="595.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="198.4" y="606.0"></text>
</g>
<g>
<title>security_file_permission (12 samples, 0.32%)</title><rect x="196.3" y="595.0" width="3.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="199.3" y="606.0"></text>
</g>
<g>
<title>apparmor_file_permission (3 samples, 0.08%)</title><rect x="196.6" y="579.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="199.6" y="590.0"></text>
</g>
<g>
<title>common_file_perm (3 samples, 0.08%)</title><rect x="196.6" y="563.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="199.6" y="574.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.05%)</title><rect x="197.6" y="579.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="200.6" y="590.0"></text>
</g>
<g>
<title>selinux_file_permission (6 samples, 0.16%)</title><rect x="198.2" y="579.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="201.2" y="590.0"></text>
</g>
<g>
<title>__inode_security_revalidate (3 samples, 0.08%)</title><rect x="198.5" y="563.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="201.5" y="574.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="199.4" y="563.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="202.4" y="574.0"></text>
</g>
<g>
<title>avc_policy_seqno (1 samples, 0.03%)</title><rect x="199.8" y="563.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="202.8" y="574.0"></text>
</g>
<g>
<title>selinux_file_permission (2 samples, 0.05%)</title><rect x="200.1" y="595.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="203.1" y="606.0"></text>
</g>
<g>
<title>security_file_permission (1 samples, 0.03%)</title><rect x="200.7" y="611.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="203.7" y="622.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="201.0" y="707.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="204.0" y="718.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.05%)</title><rect x="201.3" y="707.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="204.3" y="718.0"></text>
</g>
<g>
<title>__libc_write (1 samples, 0.03%)</title><rect x="201.9" y="723.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="204.9" y="734.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="202.3" y="723.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="205.3" y="734.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.11%)</title><rect x="202.6" y="723.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="205.6" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (12 samples, 0.32%)</title><rect x="203.8" y="771.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.21%)</title><rect x="203.8" y="755.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.8" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.05%)</title><rect x="204.4" y="739.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.4" y="750.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.11%)</title><rect x="205.1" y="739.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="208.1" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.11%)</title><rect x="206.3" y="755.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.3" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (7 samples, 0.18%)</title><rect x="207.5" y="771.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.11%)</title><rect x="207.5" y="755.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="210.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="208.5" y="739.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.5" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (3 samples, 0.08%)</title><rect x="208.8" y="755.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.8" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (13 samples, 0.34%)</title><rect x="209.7" y="787.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.7" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (6 samples, 0.16%)</title><rect x="211.9" y="771.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="214.9" y="782.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,954 samples, 78.00%)</title><rect x="213.8" y="915.0" width="920.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.8" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.03%)</title><rect x="216.9" y="899.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.9" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.05%)</title><rect x="217.2" y="899.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="220.2" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.05%)</title><rect x="217.2" y="883.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.2" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (377 samples, 9.96%)</title><rect x="217.8" y="899.0" width="117.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.8" y="910.0">one/nio/net/Na..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (8 samples, 0.21%)</title><rect x="220.6" y="883.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.6" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (4 samples, 0.11%)</title><rect x="221.6" y="867.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (1 samples, 0.03%)</title><rect x="222.8" y="867.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.8" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (360 samples, 9.51%)</title><rect x="223.1" y="883.0" width="112.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="226.1" y="894.0">one/nio/net/Na..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (2 samples, 0.05%)</title><rect x="225.3" y="867.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="228.3" y="878.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (2 samples, 0.05%)</title><rect x="225.3" y="851.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="228.3" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (2 samples, 0.05%)</title><rect x="225.3" y="835.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="228.3" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="225.6" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="228.6" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="225.6" y="803.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="228.6" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="225.6" y="787.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="228.6" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="225.6" y="771.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="228.6" y="782.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.08%)</title><rect x="225.9" y="867.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="228.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (332 samples, 8.77%)</title><rect x="226.9" y="867.0" width="103.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="229.9" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (8 samples, 0.21%)</title><rect x="226.9" y="851.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="229.9" y="862.0"></text>
</g>
<g>
<title>clock_gettime (8 samples, 0.21%)</title><rect x="226.9" y="835.0" width="2.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="229.9" y="846.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.13%)</title><rect x="227.8" y="819.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="230.8" y="830.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.11%)</title><rect x="228.1" y="803.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="231.1" y="814.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (5 samples, 0.13%)</title><rect x="229.4" y="851.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="232.4" y="862.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.08%)</title><rect x="230.9" y="851.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="233.9" y="862.0"></text>
</g>
<g>
<title>epoll_wait (315 samples, 8.32%)</title><rect x="231.9" y="851.0" width="98.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="234.9" y="862.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (244 samples, 6.44%)</title><rect x="254.0" y="835.0" width="76.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="257.0" y="846.0">entry_SY..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (5 samples, 0.13%)</title><rect x="254.0" y="819.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="257.0" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (239 samples, 6.31%)</title><rect x="255.5" y="819.0" width="74.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="258.5" y="830.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (219 samples, 5.78%)</title><rect x="261.5" y="803.0" width="68.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="264.5" y="814.0">__x64_s..</text>
</g>
<g>
<title>do_epoll_wait (219 samples, 5.78%)</title><rect x="261.5" y="787.0" width="68.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="264.5" y="798.0">do_epol..</text>
</g>
<g>
<title>__fdget (10 samples, 0.26%)</title><rect x="262.4" y="771.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="265.4" y="782.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.26%)</title><rect x="262.4" y="755.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="265.4" y="766.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.24%)</title><rect x="262.7" y="739.0" width="2.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="265.7" y="750.0"></text>
</g>
<g>
<title>_raw_spin_lock_irq (2 samples, 0.05%)</title><rect x="265.5" y="771.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="268.5" y="782.0"></text>
</g>
<g>
<title>ep_poll (195 samples, 5.15%)</title><rect x="266.1" y="771.0" width="60.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="269.1" y="782.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (167 samples, 4.41%)</title><rect x="271.4" y="755.0" width="52.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="274.4" y="766.0">ep_sc..</text>
</g>
<g>
<title>ep_item_poll.isra.16 (3 samples, 0.08%)</title><rect x="283.3" y="739.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="286.3" y="750.0"></text>
</g>
<g>
<title>ep_send_events_proc (114 samples, 3.01%)</title><rect x="284.2" y="739.0" width="35.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="287.2" y="750.0">ep_..</text>
</g>
<g>
<title>ep_item_poll.isra.16 (83 samples, 2.19%)</title><rect x="292.6" y="723.0" width="25.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="295.6" y="734.0">e..</text>
</g>
<g>
<title>__x86_indirect_thunk_rcx (1 samples, 0.03%)</title><rect x="295.1" y="707.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="298.1" y="718.0"></text>
</g>
<g>
<title>sock_poll (69 samples, 1.82%)</title><rect x="295.4" y="707.0" width="21.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="298.4" y="718.0">s..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.11%)</title><rect x="305.1" y="691.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="308.1" y="702.0"></text>
</g>
<g>
<title>tcp_poll (22 samples, 0.58%)</title><rect x="306.3" y="691.0" width="6.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="309.3" y="702.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.05%)</title><rect x="312.6" y="675.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="315.6" y="686.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (12 samples, 0.32%)</title><rect x="313.2" y="691.0" width="3.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="316.2" y="702.0"></text>
</g>
<g>
<title>tcp_poll (5 samples, 0.13%)</title><rect x="316.9" y="707.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="319.9" y="718.0"></text>
</g>
<g>
<title>sock_poll (4 samples, 0.11%)</title><rect x="318.5" y="723.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="321.5" y="734.0"></text>
</g>
<g>
<title>mutex_lock (9 samples, 0.24%)</title><rect x="319.7" y="739.0" width="2.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="322.7" y="750.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.08%)</title><rect x="322.5" y="739.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="325.5" y="750.0"></text>
</g>
<g>
<title>ep_send_events_proc (1 samples, 0.03%)</title><rect x="323.5" y="755.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="326.5" y="766.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.08%)</title><rect x="323.8" y="755.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="326.8" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (7 samples, 0.18%)</title><rect x="324.7" y="755.0" width="2.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="327.7" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (7 samples, 0.18%)</title><rect x="324.7" y="739.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="327.7" y="750.0"></text>
</g>
<g>
<title>schedule (7 samples, 0.18%)</title><rect x="324.7" y="723.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="327.7" y="734.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.13%)</title><rect x="325.3" y="707.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="328.3" y="718.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="326.6" y="691.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="329.6" y="702.0"></text>
</g>
<g>
<title>fput (8 samples, 0.21%)</title><rect x="326.9" y="771.0" width="2.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="329.9" y="782.0"></text>
</g>
<g>
<title>fput_many (8 samples, 0.21%)</title><rect x="326.9" y="755.0" width="2.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="329.9" y="766.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="329.4" y="771.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="332.4" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (1 samples, 0.03%)</title><rect x="329.7" y="803.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="332.7" y="814.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="330.0" y="851.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="333.0" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="330.3" y="867.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="333.3" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="330.3" y="851.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="333.3" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="330.3" y="835.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="333.3" y="846.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="330.3" y="819.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="333.3" y="830.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="330.3" y="803.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="333.3" y="814.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="330.3" y="787.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="333.3" y="798.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="330.3" y="771.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="333.3" y="782.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="330.3" y="755.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="333.3" y="766.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="330.3" y="739.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="333.3" y="750.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.11%)</title><rect x="330.6" y="867.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="333.6" y="878.0"></text>
</g>
<g>
<title>epoll_wait (10 samples, 0.26%)</title><rect x="331.9" y="867.0" width="3.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="334.9" y="878.0"></text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.03%)</title><rect x="335.0" y="867.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="338.0" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,564 samples, 67.71%)</title><rect x="335.3" y="899.0" width="798.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.3" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="341.2" y="883.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="344.2" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,538 samples, 67.02%)</title><rect x="341.5" y="883.0" width="790.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="344.5" y="894.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,216 samples, 58.52%)</title><rect x="341.8" y="867.0" width="690.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="344.8" y="878.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="364.3" y="851.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="367.3" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,009 samples, 53.05%)</title><rect x="364.6" y="851.0" width="626.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="367.6" y="862.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,009 samples, 53.05%)</title><rect x="364.6" y="835.0" width="626.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="367.6" y="846.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (1,985 samples, 52.42%)</title><rect x="364.6" y="819.0" width="618.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.6" y="830.0">RequestHandler3_upsert.handleRequest</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.11%)</title><rect x="367.1" y="803.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="370.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,306 samples, 34.49%)</title><rect x="368.3" y="803.0" width="407.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="371.3" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (9 samples, 0.24%)</title><rect x="372.7" y="787.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="375.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.24%)</title><rect x="372.7" y="771.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="375.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.24%)</title><rect x="372.7" y="755.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="375.7" y="766.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="374.9" y="739.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="377.9" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,270 samples, 33.54%)</title><rect x="375.5" y="787.0" width="395.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.5" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="376.4" y="771.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="379.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (75 samples, 1.98%)</title><rect x="376.7" y="771.0" width="23.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="379.7" y="782.0">o..</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="398.2" y="755.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="401.2" y="766.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="398.2" y="739.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="401.2" y="750.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="398.2" y="723.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="401.2" y="734.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="398.2" y="707.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="401.2" y="718.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="398.2" y="691.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="401.2" y="702.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="398.2" y="675.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="401.2" y="686.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="398.2" y="659.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="401.2" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="398.6" y="755.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="401.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.05%)</title><rect x="399.5" y="755.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="402.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.05%)</title><rect x="399.5" y="739.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="402.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.05%)</title><rect x="399.5" y="723.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="402.5" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,191 samples, 31.45%)</title><rect x="400.1" y="771.0" width="371.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="403.1" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,191 samples, 31.45%)</title><rect x="400.1" y="755.0" width="371.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.1" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.13%)</title><rect x="401.7" y="739.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="404.7" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.03%)</title><rect x="403.2" y="739.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.2" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,180 samples, 31.16%)</title><rect x="403.5" y="739.0" width="367.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.5" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,180 samples, 31.16%)</title><rect x="403.5" y="723.0" width="367.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="406.5" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (24 samples, 0.63%)</title><rect x="405.4" y="707.0" width="7.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="408.4" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="407.0" y="691.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="410.0" y="702.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.11%)</title><rect x="407.3" y="691.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="410.3" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (13 samples, 0.34%)</title><rect x="408.5" y="691.0" width="4.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="411.5" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="410.1" y="675.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="413.1" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (7 samples, 0.18%)</title><rect x="410.4" y="675.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="413.4" y="686.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.03%)</title><rect x="412.6" y="691.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="415.6" y="702.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="412.9" y="707.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="415.9" y="718.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.05%)</title><rect x="413.2" y="707.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="416.2" y="718.0"></text>
</g>
<g>
<title>__send (1,143 samples, 30.18%)</title><rect x="413.8" y="707.0" width="356.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="416.8" y="718.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,067 samples, 28.18%)</title><rect x="437.5" y="691.0" width="332.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="440.5" y="702.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (4 samples, 0.11%)</title><rect x="437.5" y="675.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="440.5" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (1,063 samples, 28.07%)</title><rect x="438.8" y="675.0" width="331.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="441.8" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__sys_sendto (1 samples, 0.03%)</title><rect x="450.3" y="659.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="453.3" y="670.0"></text>
</g>
<g>
<title>__x64_sys_sendto (1,025 samples, 27.07%)</title><rect x="450.6" y="659.0" width="319.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="453.6" y="670.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,022 samples, 26.99%)</title><rect x="450.6" y="643.0" width="318.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="453.6" y="654.0">__sys_sendto</text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="452.5" y="627.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="455.5" y="638.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="452.5" y="611.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="455.5" y="622.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.05%)</title><rect x="452.8" y="627.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="455.8" y="638.0"></text>
</g>
<g>
<title>sock_sendmsg (1,002 samples, 26.46%)</title><rect x="453.4" y="627.0" width="312.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="456.4" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.03%)</title><rect x="454.3" y="611.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="457.3" y="622.0"></text>
</g>
<g>
<title>inet6_sendmsg (973 samples, 25.69%)</title><rect x="454.6" y="611.0" width="303.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="457.6" y="622.0">inet6_sendmsg</text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.03%)</title><rect x="457.4" y="595.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="460.4" y="606.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="457.8" y="595.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="460.8" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg (961 samples, 25.38%)</title><rect x="458.1" y="595.0" width="299.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="461.1" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="458.7" y="579.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="461.7" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="459.0" y="579.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="462.0" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.03%)</title><rect x="459.3" y="579.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="462.3" y="590.0"></text>
</g>
<g>
<title>lock_sock_nested (5 samples, 0.13%)</title><rect x="459.6" y="579.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="462.6" y="590.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="459.9" y="563.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="462.9" y="574.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="459.9" y="547.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="462.9" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.08%)</title><rect x="460.3" y="563.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="463.3" y="574.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="461.2" y="579.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="464.2" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="461.2" y="563.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="464.2" y="574.0"></text>
</g>
<g>
<title>sock_zerocopy_put (1 samples, 0.03%)</title><rect x="461.5" y="579.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="464.5" y="590.0"></text>
</g>
<g>
<title>tcp_push (3 samples, 0.08%)</title><rect x="461.8" y="579.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="464.8" y="590.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.03%)</title><rect x="462.7" y="579.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="465.7" y="590.0"></text>
</g>
<g>
<title>tcp_release_cb (6 samples, 0.16%)</title><rect x="463.1" y="579.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="466.1" y="590.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.03%)</title><rect x="464.9" y="579.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="467.9" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (934 samples, 24.66%)</title><rect x="465.2" y="579.0" width="291.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="468.2" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (3 samples, 0.08%)</title><rect x="472.4" y="563.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="475.4" y="574.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.03%)</title><rect x="473.3" y="563.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="476.3" y="574.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.05%)</title><rect x="473.6" y="563.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="476.6" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (9 samples, 0.24%)</title><rect x="474.3" y="563.0" width="2.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="477.3" y="574.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (8 samples, 0.21%)</title><rect x="474.3" y="547.0" width="2.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="477.3" y="558.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.03%)</title><rect x="476.8" y="547.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="479.8" y="558.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.03%)</title><rect x="477.1" y="563.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="480.1" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.03%)</title><rect x="477.4" y="563.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="480.4" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.03%)</title><rect x="477.4" y="547.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="480.4" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (70 samples, 1.85%)</title><rect x="477.7" y="563.0" width="21.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="480.7" y="574.0">s..</text>
</g>
<g>
<title>__alloc_skb (66 samples, 1.74%)</title><rect x="478.3" y="547.0" width="20.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="481.3" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.03%)</title><rect x="480.2" y="531.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="483.2" y="542.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.56 (24 samples, 0.63%)</title><rect x="480.5" y="531.0" width="7.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="483.5" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (23 samples, 0.61%)</title><rect x="480.5" y="515.0" width="7.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="483.5" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.05%)</title><rect x="486.4" y="499.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="489.4" y="510.0"></text>
</g>
<g>
<title>kmalloc_slab (2 samples, 0.05%)</title><rect x="487.0" y="499.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="490.0" y="510.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="487.7" y="515.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="490.7" y="526.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.03%)</title><rect x="488.0" y="531.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="491.0" y="542.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="488.3" y="531.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="491.3" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (21 samples, 0.55%)</title><rect x="488.6" y="531.0" width="6.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="491.6" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.05%)</title><rect x="494.5" y="515.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="497.5" y="526.0"></text>
</g>
<g>
<title>ksize (11 samples, 0.29%)</title><rect x="495.1" y="531.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="498.1" y="542.0"></text>
</g>
<g>
<title>__ksize (10 samples, 0.26%)</title><rect x="495.5" y="515.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="498.5" y="526.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.03%)</title><rect x="498.6" y="531.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="501.6" y="542.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.56 (1 samples, 0.03%)</title><rect x="498.9" y="547.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="501.9" y="558.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.03%)</title><rect x="499.2" y="547.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="502.2" y="558.0"></text>
</g>
<g>
<title>skb_entail (7 samples, 0.18%)</title><rect x="499.5" y="563.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="502.5" y="574.0"></text>
</g>
<g>
<title>tcp_chrono_start (3 samples, 0.08%)</title><rect x="500.8" y="547.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="503.8" y="558.0"></text>
</g>
<g>
<title>tcp_chrono_start (2 samples, 0.05%)</title><rect x="501.7" y="563.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="504.7" y="574.0"></text>
</g>
<g>
<title>tcp_push (795 samples, 20.99%)</title><rect x="502.3" y="563.0" width="247.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="505.3" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (793 samples, 20.94%)</title><rect x="502.6" y="547.0" width="247.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="505.6" y="558.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="503.3" y="531.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="506.3" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (790 samples, 20.86%)</title><rect x="503.6" y="531.0" width="246.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="506.6" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="509.2" y="515.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="512.2" y="526.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (734 samples, 19.38%)</title><rect x="509.5" y="515.0" width="228.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="512.5" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (3 samples, 0.08%)</title><rect x="517.0" y="499.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="520.0" y="510.0"></text>
</g>
<g>
<title>__skb_clone (6 samples, 0.16%)</title><rect x="517.9" y="499.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="520.9" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (3 samples, 0.08%)</title><rect x="519.8" y="499.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="522.8" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.03%)</title><rect x="520.7" y="499.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="523.7" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (678 samples, 17.90%)</title><rect x="521.0" y="499.0" width="211.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="524.0" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (669 samples, 17.67%)</title><rect x="521.6" y="483.0" width="208.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="524.6" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.03%)</title><rect x="524.4" y="467.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="527.4" y="478.0"></text>
</g>
<g>
<title>ip_local_out (647 samples, 17.08%)</title><rect x="524.8" y="467.0" width="201.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="527.8" y="478.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (10 samples, 0.26%)</title><rect x="524.8" y="451.0" width="3.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="527.8" y="462.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.05%)</title><rect x="525.7" y="435.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="528.7" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (2 samples, 0.05%)</title><rect x="526.3" y="435.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="529.3" y="446.0"></text>
</g>
<g>
<title>netlbl_enabled (2 samples, 0.05%)</title><rect x="526.3" y="419.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="529.3" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_output (3 samples, 0.08%)</title><rect x="526.9" y="435.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="529.9" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.05%)</title><rect x="527.9" y="451.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="530.9" y="462.0"></text>
</g>
<g>
<title>ip_output (632 samples, 16.69%)</title><rect x="528.5" y="451.0" width="196.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="531.5" y="462.0">ip_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.05%)</title><rect x="532.5" y="435.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="535.5" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (583 samples, 15.39%)</title><rect x="533.2" y="435.0" width="181.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="536.2" y="446.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (8 samples, 0.21%)</title><rect x="533.2" y="419.0" width="2.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="536.2" y="430.0"></text>
</g>
<g>
<title>__ip_finish_output (570 samples, 15.05%)</title><rect x="535.7" y="419.0" width="177.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="538.7" y="430.0">__ip_finish_output</text>
</g>
<g>
<title>dev_queue_xmit (2 samples, 0.05%)</title><rect x="537.5" y="403.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="540.5" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (561 samples, 14.81%)</title><rect x="538.1" y="403.0" width="174.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="541.1" y="414.0">ip_finish_output2</text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.03%)</title><rect x="541.3" y="387.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="544.3" y="398.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (476 samples, 12.57%)</title><rect x="541.6" y="387.0" width="148.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="544.6" y="398.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.20 (474 samples, 12.52%)</title><rect x="542.2" y="371.0" width="147.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="545.2" y="382.0">do_softirq.part.20</text>
</g>
<g>
<title>do_softirq_own_stack (469 samples, 12.38%)</title><rect x="543.8" y="355.0" width="146.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="546.8" y="366.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (460 samples, 12.15%)</title><rect x="543.8" y="339.0" width="143.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="546.8" y="350.0">__softirqentry_tex..</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.03%)</title><rect x="547.2" y="323.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="550.2" y="334.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="547.5" y="323.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="550.5" y="334.0"></text>
</g>
<g>
<title>net_rx_action (446 samples, 11.78%)</title><rect x="547.8" y="323.0" width="139.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="550.8" y="334.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.05%)</title><rect x="550.0" y="307.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="553.0" y="318.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.03%)</title><rect x="550.6" y="307.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="553.6" y="318.0"></text>
</g>
<g>
<title>process_backlog (436 samples, 11.51%)</title><rect x="550.9" y="307.0" width="135.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="553.9" y="318.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (424 samples, 11.20%)</title><rect x="554.4" y="291.0" width="132.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="557.4" y="302.0">__netif_receive_..</text>
</g>
<g>
<title>__netif_receive_skb_core (2 samples, 0.05%)</title><rect x="554.4" y="275.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="557.4" y="286.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (422 samples, 11.14%)</title><rect x="555.0" y="275.0" width="131.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="558.0" y="286.0">__netif_receive_..</text>
</g>
<g>
<title>__netif_receive_skb_core (11 samples, 0.29%)</title><rect x="555.3" y="259.0" width="3.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="558.3" y="270.0"></text>
</g>
<g>
<title>ip_rcv (406 samples, 10.72%)</title><rect x="558.7" y="259.0" width="126.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="561.7" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.05%)</title><rect x="560.0" y="243.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="563.0" y="254.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.20 (1 samples, 0.03%)</title><rect x="560.6" y="243.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="563.6" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (397 samples, 10.48%)</title><rect x="560.9" y="243.0" width="123.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="563.9" y="254.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (392 samples, 10.35%)</title><rect x="561.2" y="227.0" width="122.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="564.2" y="238.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (387 samples, 10.22%)</title><rect x="562.1" y="211.0" width="120.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="565.1" y="222.0">ip_local_delive..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (384 samples, 10.14%)</title><rect x="562.8" y="195.0" width="119.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="565.8" y="206.0">ip_protocol_del..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.05%)</title><rect x="565.3" y="179.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="568.3" y="190.0"></text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.44 (1 samples, 0.03%)</title><rect x="565.9" y="179.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="568.9" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.05%)</title><rect x="566.2" y="179.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="569.2" y="190.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (4 samples, 0.11%)</title><rect x="566.8" y="179.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="569.8" y="190.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.03%)</title><rect x="568.1" y="179.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="571.1" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (366 samples, 9.66%)</title><rect x="568.4" y="179.0" width="114.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="571.4" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (13 samples, 0.34%)</title><rect x="574.0" y="163.0" width="4.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="577.0" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.05%)</title><rect x="577.4" y="147.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="580.4" y="158.0"></text>
</g>
<g>
<title>_raw_spin_lock (5 samples, 0.13%)</title><rect x="578.0" y="163.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="581.0" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (3 samples, 0.08%)</title><rect x="579.6" y="163.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="582.6" y="174.0"></text>
</g>
<g>
<title>ipv4_dst_check (4 samples, 0.11%)</title><rect x="580.5" y="163.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="583.5" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (53 samples, 1.40%)</title><rect x="581.8" y="163.0" width="16.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="584.8" y="174.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (8 samples, 0.21%)</title><rect x="583.3" y="147.0" width="2.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="586.3" y="158.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (2 samples, 0.05%)</title><rect x="585.8" y="147.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="588.8" y="158.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (34 samples, 0.90%)</title><rect x="586.4" y="147.0" width="10.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="589.4" y="158.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (27 samples, 0.71%)</title><rect x="588.6" y="131.0" width="8.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="591.6" y="142.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (1 samples, 0.03%)</title><rect x="590.8" y="115.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="593.8" y="126.0"></text>
</g>
<g>
<title>selinux_sock_rcv_skb_compat (18 samples, 0.48%)</title><rect x="591.1" y="115.0" width="5.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="594.1" y="126.0"></text>
</g>
<g>
<title>avc_has_perm (2 samples, 0.05%)</title><rect x="592.1" y="99.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="595.1" y="110.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (2 samples, 0.05%)</title><rect x="592.7" y="99.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="595.7" y="110.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.64 (5 samples, 0.13%)</title><rect x="593.3" y="99.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="596.3" y="110.0"></text>
</g>
<g>
<title>selinux_xfrm_sock_rcv_skb (6 samples, 0.16%)</title><rect x="594.9" y="99.0" width="1.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="597.9" y="110.0"></text>
</g>
<g>
<title>avc_has_perm (5 samples, 0.13%)</title><rect x="595.2" y="83.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="598.2" y="94.0"></text>
</g>
<g>
<title>selinux_xfrm_sock_rcv_skb (1 samples, 0.03%)</title><rect x="596.7" y="115.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="599.7" y="126.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (4 samples, 0.11%)</title><rect x="597.0" y="147.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="600.0" y="158.0"></text>
</g>
<g>
<title>sock_put (2 samples, 0.05%)</title><rect x="598.3" y="163.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="601.3" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (266 samples, 7.02%)</title><rect x="598.9" y="163.0" width="82.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="601.9" y="174.0">tcp_v4_do..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="598.9" y="147.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="601.9" y="158.0"></text>
</g>
<g>
<title>ktime_get_seconds (1 samples, 0.03%)</title><rect x="599.2" y="147.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="602.2" y="158.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.08%)</title><rect x="599.5" y="147.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="602.5" y="158.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.03%)</title><rect x="600.5" y="147.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="603.5" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (260 samples, 6.87%)</title><rect x="600.8" y="147.0" width="81.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="603.8" y="158.0">tcp_rcv_e..</text>
</g>
<g>
<title>__tcp_ack_snd_check (15 samples, 0.40%)</title><rect x="605.8" y="131.0" width="4.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="608.8" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="606.1" y="115.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="609.1" y="126.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (13 samples, 0.34%)</title><rect x="606.4" y="115.0" width="4.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="609.4" y="126.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="607.0" y="99.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="610.0" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (10 samples, 0.26%)</title><rect x="607.3" y="99.0" width="3.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="610.3" y="110.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.03%)</title><rect x="607.6" y="83.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="610.6" y="94.0"></text>
</g>
<g>
<title>mod_timer (8 samples, 0.21%)</title><rect x="607.9" y="83.0" width="2.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="610.9" y="94.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (7 samples, 0.18%)</title><rect x="608.3" y="67.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="611.3" y="78.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.05%)</title><rect x="610.4" y="131.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="613.4" y="142.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.03%)</title><rect x="611.1" y="131.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="614.1" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (4 samples, 0.11%)</title><rect x="611.4" y="131.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="614.4" y="142.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.05%)</title><rect x="612.6" y="131.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="615.6" y="142.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.03%)</title><rect x="613.2" y="131.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="616.2" y="142.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.03%)</title><rect x="613.6" y="131.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="616.6" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (78 samples, 2.06%)</title><rect x="613.9" y="131.0" width="24.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="616.9" y="142.0">s..</text>
</g>
<g>
<title>__wake_up_sync_key (76 samples, 2.01%)</title><rect x="614.5" y="115.0" width="23.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="617.5" y="126.0">_..</text>
</g>
<g>
<title>__wake_up_common_lock (75 samples, 1.98%)</title><rect x="614.5" y="99.0" width="23.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="617.5" y="110.0">_..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.05%)</title><rect x="614.5" y="83.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="617.5" y="94.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (73 samples, 1.93%)</title><rect x="615.1" y="83.0" width="22.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="618.1" y="94.0">_..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="637.9" y="99.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="640.9" y="110.0"></text>
</g>
<g>
<title>tcp_ack (106 samples, 2.80%)</title><rect x="638.2" y="131.0" width="33.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="641.2" y="142.0">tc..</text>
</g>
<g>
<title>__kfree_skb (48 samples, 1.27%)</title><rect x="647.2" y="115.0" width="15.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="650.2" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (17 samples, 0.45%)</title><rect x="647.2" y="99.0" width="5.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="650.2" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (17 samples, 0.45%)</title><rect x="647.2" y="83.0" width="5.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="650.2" y="94.0"></text>
</g>
<g>
<title>__slab_free (7 samples, 0.18%)</title><rect x="650.3" y="67.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="653.3" y="78.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.03%)</title><rect x="652.5" y="99.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="655.5" y="110.0"></text>
</g>
<g>
<title>skb_release_all (29 samples, 0.77%)</title><rect x="652.8" y="99.0" width="9.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="655.8" y="110.0"></text>
</g>
<g>
<title>skb_release_data (27 samples, 0.71%)</title><rect x="652.8" y="83.0" width="8.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="655.8" y="94.0"></text>
</g>
<g>
<title>skb_free_head (16 samples, 0.42%)</title><rect x="656.2" y="67.0" width="5.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="659.2" y="78.0"></text>
</g>
<g>
<title>kfree (16 samples, 0.42%)</title><rect x="656.2" y="51.0" width="5.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="659.2" y="62.0"></text>
</g>
<g>
<title>__slab_free (14 samples, 0.37%)</title><rect x="656.9" y="35.0" width="4.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="659.9" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.05%)</title><rect x="661.2" y="83.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="664.2" y="94.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="661.9" y="99.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="664.9" y="110.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="662.2" y="115.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="665.2" y="126.0"></text>
</g>
<g>
<title>bictcp_acked (5 samples, 0.13%)</title><rect x="662.5" y="115.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="665.5" y="126.0"></text>
</g>
<g>
<title>jiffies_to_usecs (1 samples, 0.03%)</title><rect x="664.0" y="115.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="667.0" y="126.0"></text>
</g>
<g>
<title>rb_erase (3 samples, 0.08%)</title><rect x="664.3" y="115.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="667.3" y="126.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.03%)</title><rect x="665.3" y="115.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="668.3" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.46 (6 samples, 0.16%)</title><rect x="665.6" y="115.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="668.6" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.03%)</title><rect x="667.5" y="115.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="670.5" y="126.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (3 samples, 0.08%)</title><rect x="667.8" y="115.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="670.8" y="126.0"></text>
</g>
<g>
<title>tcp_rate_gen (2 samples, 0.05%)</title><rect x="668.7" y="115.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="671.7" y="126.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (3 samples, 0.08%)</title><rect x="669.3" y="115.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="672.3" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.08%)</title><rect x="670.3" y="115.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="673.3" y="126.0"></text>
</g>
<g>
<title>tcp_check_space (6 samples, 0.16%)</title><rect x="671.2" y="131.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="674.2" y="142.0"></text>
</g>
<g>
<title>tcp_event_data_recv (5 samples, 0.13%)</title><rect x="673.1" y="131.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="676.1" y="142.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (11 samples, 0.29%)</title><rect x="674.6" y="131.0" width="3.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="677.6" y="142.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.05%)</title><rect x="674.6" y="115.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="677.6" y="126.0"></text>
</g>
<g>
<title>ktime_get (5 samples, 0.13%)</title><rect x="675.2" y="115.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="678.2" y="126.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.08%)</title><rect x="675.9" y="99.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="678.9" y="110.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.11%)</title><rect x="676.8" y="115.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="679.8" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.03%)</title><rect x="678.1" y="131.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="681.1" y="142.0"></text>
</g>
<g>
<title>tcp_queue_rcv (3 samples, 0.08%)</title><rect x="678.4" y="131.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="681.4" y="142.0"></text>
</g>
<g>
<title>tcp_rack_advance (1 samples, 0.03%)</title><rect x="679.3" y="131.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="682.3" y="142.0"></text>
</g>
<g>
<title>tcp_rearm_rto (5 samples, 0.13%)</title><rect x="679.6" y="131.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="682.6" y="142.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="681.2" y="131.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="684.2" y="142.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.03%)</title><rect x="681.5" y="131.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="684.5" y="142.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.03%)</title><rect x="681.8" y="163.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="684.8" y="174.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.03%)</title><rect x="682.1" y="163.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="685.1" y="174.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.03%)</title><rect x="682.4" y="195.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="685.4" y="206.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (2 samples, 0.05%)</title><rect x="682.7" y="211.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="685.7" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.03%)</title><rect x="683.4" y="227.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="686.4" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (3 samples, 0.08%)</title><rect x="683.7" y="227.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="686.7" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (2 samples, 0.05%)</title><rect x="684.6" y="243.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="687.6" y="254.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.20 (1 samples, 0.03%)</title><rect x="685.2" y="259.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="688.2" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (3 samples, 0.08%)</title><rect x="685.5" y="259.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="688.5" y="270.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.03%)</title><rect x="686.5" y="291.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="689.5" y="302.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.03%)</title><rect x="686.8" y="323.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="689.8" y="334.0"></text>
</g>
<g>
<title>net_rx_action (9 samples, 0.24%)</title><rect x="687.1" y="339.0" width="2.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="690.1" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (70 samples, 1.85%)</title><rect x="689.9" y="387.0" width="21.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="692.9" y="398.0">d..</text>
</g>
<g>
<title>__dev_queue_xmit (68 samples, 1.80%)</title><rect x="690.5" y="371.0" width="21.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="693.5" y="382.0">_..</text>
</g>
<g>
<title>dev_hard_start_xmit (44 samples, 1.16%)</title><rect x="692.7" y="355.0" width="13.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="695.7" y="366.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="693.3" y="339.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="696.3" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (34 samples, 0.90%)</title><rect x="693.6" y="339.0" width="10.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="696.6" y="350.0"></text>
</g>
<g>
<title>eth_type_trans (6 samples, 0.16%)</title><rect x="695.8" y="323.0" width="1.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="698.8" y="334.0"></text>
</g>
<g>
<title>netif_rx (11 samples, 0.29%)</title><rect x="697.7" y="323.0" width="3.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="700.7" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (11 samples, 0.29%)</title><rect x="697.7" y="307.0" width="3.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="700.7" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (11 samples, 0.29%)</title><rect x="697.7" y="291.0" width="3.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="700.7" y="302.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.03%)</title><rect x="701.1" y="323.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="704.1" y="334.0"></text>
</g>
<g>
<title>tcp_wfree (9 samples, 0.24%)</title><rect x="701.4" y="323.0" width="2.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="704.4" y="334.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.03%)</title><rect x="703.9" y="307.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="706.9" y="318.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.03%)</title><rect x="704.2" y="339.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="707.2" y="350.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (2 samples, 0.05%)</title><rect x="704.5" y="339.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="707.5" y="350.0"></text>
</g>
<g>
<title>tcp_wfree (4 samples, 0.11%)</title><rect x="705.2" y="339.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="708.2" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.05%)</title><rect x="706.4" y="355.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="709.4" y="366.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (4 samples, 0.11%)</title><rect x="707.0" y="355.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="710.0" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (10 samples, 0.26%)</title><rect x="708.3" y="355.0" width="3.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="711.3" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (4 samples, 0.11%)</title><rect x="709.5" y="339.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="712.5" y="350.0"></text>
</g>
<g>
<title>skb_network_protocol (1 samples, 0.03%)</title><rect x="710.5" y="323.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="713.5" y="334.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (2 samples, 0.05%)</title><rect x="710.8" y="339.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="713.8" y="350.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.03%)</title><rect x="711.4" y="355.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="714.4" y="366.0"></text>
</g>
<g>
<title>do_softirq.part.20 (4 samples, 0.11%)</title><rect x="711.7" y="387.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="714.7" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.03%)</title><rect x="713.0" y="403.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="716.0" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (5 samples, 0.13%)</title><rect x="713.3" y="419.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="716.3" y="430.0"></text>
</g>
<g>
<title>nf_hook_slow (32 samples, 0.84%)</title><rect x="714.8" y="435.0" width="10.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="717.8" y="446.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (31 samples, 0.82%)</title><rect x="715.1" y="419.0" width="9.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="718.1" y="430.0"></text>
</g>
<g>
<title>selinux_ip_postroute (29 samples, 0.77%)</title><rect x="715.1" y="403.0" width="9.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="718.1" y="414.0"></text>
</g>
<g>
<title>selinux_ip_postroute_compat (18 samples, 0.48%)</title><rect x="717.6" y="387.0" width="5.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="720.6" y="398.0"></text>
</g>
<g>
<title>avc_has_perm (1 samples, 0.03%)</title><rect x="720.4" y="371.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="723.4" y="382.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.64 (6 samples, 0.16%)</title><rect x="720.7" y="371.0" width="1.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="723.7" y="382.0"></text>
</g>
<g>
<title>selinux_xfrm_postroute_last (2 samples, 0.05%)</title><rect x="722.6" y="371.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="725.6" y="382.0"></text>
</g>
<g>
<title>avc_has_perm (2 samples, 0.05%)</title><rect x="722.6" y="355.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="725.6" y="366.0"></text>
</g>
<g>
<title>selinux_xfrm_postroute_last (3 samples, 0.08%)</title><rect x="723.2" y="387.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="726.2" y="398.0"></text>
</g>
<g>
<title>selinux_ip_postroute_compat (2 samples, 0.05%)</title><rect x="724.2" y="403.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="727.2" y="414.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (2 samples, 0.05%)</title><rect x="724.8" y="435.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="727.8" y="446.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.03%)</title><rect x="725.4" y="451.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="728.4" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (2 samples, 0.05%)</title><rect x="725.7" y="451.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="728.7" y="462.0"></text>
</g>
<g>
<title>ip_output (6 samples, 0.16%)</title><rect x="726.4" y="467.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="729.4" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (6 samples, 0.16%)</title><rect x="728.2" y="467.0" width="1.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="731.2" y="478.0"></text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.03%)</title><rect x="730.1" y="483.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="733.1" y="494.0"></text>
</g>
<g>
<title>ip_copy_addrs (4 samples, 0.11%)</title><rect x="730.4" y="483.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="733.4" y="494.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.05%)</title><rect x="731.6" y="483.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="734.6" y="494.0"></text>
</g>
<g>
<title>skb_clone (8 samples, 0.21%)</title><rect x="732.3" y="499.0" width="2.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="735.3" y="510.0"></text>
</g>
<g>
<title>__skb_clone (6 samples, 0.16%)</title><rect x="732.9" y="483.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="735.9" y="494.0"></text>
</g>
<g>
<title>__copy_skb_header (2 samples, 0.05%)</title><rect x="734.1" y="467.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="737.1" y="478.0"></text>
</g>
<g>
<title>tcp_established_options (4 samples, 0.11%)</title><rect x="734.8" y="499.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="737.8" y="510.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.05%)</title><rect x="736.0" y="499.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="739.0" y="510.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (2 samples, 0.05%)</title><rect x="736.6" y="499.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="739.6" y="510.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.05%)</title><rect x="737.3" y="499.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="740.3" y="510.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.03%)</title><rect x="737.9" y="499.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="740.9" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.03%)</title><rect x="737.9" y="483.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="740.9" y="494.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="738.2" y="515.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="741.2" y="526.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3 samples, 0.08%)</title><rect x="738.5" y="515.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="741.5" y="526.0"></text>
</g>
<g>
<title>jiffies_to_usecs (1 samples, 0.03%)</title><rect x="739.4" y="515.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="742.4" y="526.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.03%)</title><rect x="739.7" y="515.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="742.7" y="526.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.03%)</title><rect x="739.7" y="499.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="742.7" y="510.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.03%)</title><rect x="740.1" y="515.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="743.1" y="526.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.03%)</title><rect x="740.4" y="515.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="743.4" y="526.0"></text>
</g>
<g>
<title>skb_push (1 samples, 0.03%)</title><rect x="740.7" y="515.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="743.7" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (12 samples, 0.32%)</title><rect x="741.0" y="515.0" width="3.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="744.0" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="742.2" y="499.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="745.2" y="510.0"></text>
</g>
<g>
<title>tcp_rearm_rto (7 samples, 0.18%)</title><rect x="742.6" y="499.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="745.6" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (7 samples, 0.18%)</title><rect x="742.6" y="483.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="745.6" y="494.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="742.6" y="467.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="745.6" y="478.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.16%)</title><rect x="742.9" y="467.0" width="1.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="745.9" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.05%)</title><rect x="744.1" y="451.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="747.1" y="462.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.05%)</title><rect x="744.7" y="515.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="747.7" y="526.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (3 samples, 0.08%)</title><rect x="745.4" y="515.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="748.4" y="526.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.03%)</title><rect x="746.3" y="515.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="749.3" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.03%)</title><rect x="746.6" y="515.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="749.6" y="526.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (6 samples, 0.16%)</title><rect x="746.9" y="515.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="749.9" y="526.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="748.5" y="499.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="751.5" y="510.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.34 (2 samples, 0.05%)</title><rect x="748.8" y="515.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="751.8" y="526.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.03%)</title><rect x="749.4" y="515.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="752.4" y="526.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.03%)</title><rect x="749.7" y="547.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="752.7" y="558.0"></text>
</g>
<g>
<title>tcp_send_mss (16 samples, 0.42%)</title><rect x="750.0" y="563.0" width="5.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="753.0" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (8 samples, 0.21%)</title><rect x="750.0" y="547.0" width="2.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="753.0" y="558.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="752.2" y="531.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="755.2" y="542.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="752.2" y="515.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="755.2" y="526.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="752.2" y="499.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="755.2" y="510.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="752.2" y="483.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="755.2" y="494.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="752.2" y="467.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="755.2" y="478.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="752.2" y="451.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="755.2" y="462.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="752.2" y="435.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="755.2" y="446.0"></text>
</g>
<g>
<title>tcp_current_mss (8 samples, 0.21%)</title><rect x="752.5" y="547.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="755.5" y="558.0"></text>
</g>
<g>
<title>tcp_established_options (3 samples, 0.08%)</title><rect x="754.1" y="531.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="757.1" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.08%)</title><rect x="755.0" y="563.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="758.0" y="574.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.03%)</title><rect x="756.0" y="563.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="759.0" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.05%)</title><rect x="756.3" y="579.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="759.3" y="590.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (2 samples, 0.05%)</title><rect x="756.9" y="579.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="759.9" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.03%)</title><rect x="757.5" y="595.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="760.5" y="606.0"></text>
</g>
<g>
<title>security_socket_sendmsg (21 samples, 0.55%)</title><rect x="757.8" y="611.0" width="6.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="760.8" y="622.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.05%)</title><rect x="758.4" y="595.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="761.4" y="606.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (8 samples, 0.21%)</title><rect x="759.1" y="595.0" width="2.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="762.1" y="606.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.03%)</title><rect x="759.1" y="579.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="762.1" y="590.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (7 samples, 0.18%)</title><rect x="759.4" y="579.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="762.4" y="590.0"></text>
</g>
<g>
<title>aa_sk_perm (6 samples, 0.16%)</title><rect x="759.7" y="563.0" width="1.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="762.7" y="574.0"></text>
</g>
<g>
<title>selinux_socket_sendmsg (2 samples, 0.05%)</title><rect x="761.6" y="595.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="764.6" y="606.0"></text>
</g>
<g>
<title>sock_has_perm (2 samples, 0.05%)</title><rect x="761.6" y="579.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="764.6" y="590.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg (5 samples, 0.13%)</title><rect x="762.2" y="595.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="765.2" y="606.0"></text>
</g>
<g>
<title>tomoyo_sock_family.part.1 (3 samples, 0.08%)</title><rect x="762.2" y="579.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="765.2" y="590.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg_permission (2 samples, 0.05%)</title><rect x="763.1" y="579.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="766.1" y="590.0"></text>
</g>
<g>
<title>tomoyo_sock_family.part.1 (1 samples, 0.03%)</title><rect x="763.4" y="563.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="766.4" y="574.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg_permission (2 samples, 0.05%)</title><rect x="763.7" y="595.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="766.7" y="606.0"></text>
</g>
<g>
<title>selinux_socket_sendmsg (2 samples, 0.05%)</title><rect x="764.4" y="611.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="767.4" y="622.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg (2 samples, 0.05%)</title><rect x="765.0" y="611.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="768.0" y="622.0"></text>
</g>
<g>
<title>sockfd_lookup_light (11 samples, 0.29%)</title><rect x="765.6" y="627.0" width="3.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="768.6" y="638.0"></text>
</g>
<g>
<title>__fdget (8 samples, 0.21%)</title><rect x="765.9" y="611.0" width="2.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="768.9" y="622.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.21%)</title><rect x="765.9" y="595.0" width="2.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="768.9" y="606.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.21%)</title><rect x="765.9" y="579.0" width="2.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="768.9" y="590.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.05%)</title><rect x="768.4" y="611.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="771.4" y="622.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="769.0" y="643.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="772.0" y="654.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.03%)</title><rect x="769.4" y="643.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="772.4" y="654.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.03%)</title><rect x="769.7" y="643.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="772.7" y="654.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.08%)</title><rect x="770.0" y="707.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="773.0" y="718.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.03%)</title><rect x="770.9" y="707.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="773.9" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 0.34%)</title><rect x="771.2" y="787.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="774.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.18%)</title><rect x="773.1" y="771.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.18%)</title><rect x="773.1" y="755.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (41 samples, 1.08%)</title><rect x="775.3" y="803.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="778.3" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (41 samples, 1.08%)</title><rect x="775.3" y="787.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="778.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (23 samples, 0.61%)</title><rect x="776.8" y="771.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="779.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (23 samples, 0.61%)</title><rect x="776.8" y="755.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="779.8" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="783.7" y="739.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="786.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="784.0" y="771.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="787.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.05%)</title><rect x="784.0" y="755.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="787.0" y="766.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.03%)</title><rect x="784.0" y="739.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="787.0" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="784.3" y="739.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="787.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="784.3" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="787.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="784.3" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="787.3" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="784.3" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="787.3" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="784.3" y="675.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="787.3" y="686.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.03%)</title><rect x="784.3" y="659.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="787.3" y="670.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="784.3" y="643.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="787.3" y="654.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.05%)</title><rect x="784.6" y="771.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="787.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (9 samples, 0.24%)</title><rect x="785.2" y="771.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="788.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.16%)</title><rect x="786.2" y="755.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="789.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.16%)</title><rect x="786.2" y="739.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.16%)</title><rect x="786.2" y="723.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="789.2" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="788.0" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="791.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.upsert (625 samples, 16.50%)</title><rect x="788.4" y="803.0" width="194.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="791.4" y="814.0">ru/mail/polis/service/zvl..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.40%)</title><rect x="788.4" y="787.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.40%)</title><rect x="788.4" y="771.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="791.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (15 samples, 0.40%)</title><rect x="788.4" y="755.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="791.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (15 samples, 0.40%)</title><rect x="788.4" y="739.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="791.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (15 samples, 0.40%)</title><rect x="788.4" y="723.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="791.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.11%)</title><rect x="789.3" y="707.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="792.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (4 samples, 0.11%)</title><rect x="790.5" y="707.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="793.5" y="718.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.11%)</title><rect x="791.8" y="707.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="794.8" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="793.0" y="787.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="796.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="793.0" y="771.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="796.0" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="793.0" y="755.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="796.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="793.0" y="739.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="796.0" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="793.0" y="723.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="796.0" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="793.0" y="707.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="796.0" y="718.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="793.0" y="691.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="796.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.upsert (479 samples, 12.65%)</title><rect x="793.3" y="787.0" width="149.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="796.3" y="798.0">ru/mail/polis/dao/z..</text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.05%)</title><rect x="794.6" y="771.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.execute (473 samples, 12.49%)</title><rect x="795.2" y="771.0" width="147.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="798.2" y="782.0">ru/mail/polis/dao/z..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (29 samples, 0.77%)</title><rect x="796.1" y="755.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (25 samples, 0.66%)</title><rect x="797.4" y="739.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="800.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (25 samples, 0.66%)</title><rect x="797.4" y="723.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="800.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.11%)</title><rect x="799.9" y="707.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="802.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.03%)</title><rect x="799.9" y="691.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="802.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.03%)</title><rect x="799.9" y="675.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="802.9" y="686.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.08%)</title><rect x="800.2" y="691.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="803.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 0.26%)</title><rect x="801.1" y="707.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="804.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.26%)</title><rect x="801.1" y="691.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="804.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (9 samples, 0.24%)</title><rect x="801.4" y="675.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="804.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.05%)</title><rect x="804.2" y="707.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.2" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.05%)</title><rect x="804.2" y="691.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="807.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (1 samples, 0.03%)</title><rect x="804.9" y="707.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="807.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="804.9" y="691.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="807.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="804.9" y="675.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="807.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (6 samples, 0.16%)</title><rect x="805.2" y="755.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="808.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (6 samples, 0.16%)</title><rect x="805.2" y="739.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="808.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 0.03%)</title><rect x="805.5" y="723.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="808.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (4 samples, 0.11%)</title><rect x="805.8" y="723.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="808.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$91/1753024190.run (435 samples, 11.49%)</title><rect x="807.1" y="755.0" width="135.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.1" y="766.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$upsert$5 (434 samples, 11.46%)</title><rect x="807.4" y="739.0" width="135.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="810.4" y="750.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.upsert (434 samples, 11.46%)</title><rect x="807.4" y="723.0" width="135.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="810.4" y="734.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (11 samples, 0.29%)</title><rect x="807.4" y="707.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="810.4" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="810.5" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="813.5" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="810.5" y="675.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="813.5" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="810.5" y="659.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="813.5" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="810.5" y="643.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="813.5" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="810.5" y="627.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="813.5" y="638.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="810.5" y="611.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="813.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (417 samples, 11.01%)</title><rect x="810.8" y="707.0" width="129.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="813.8" y="718.0">java/util/concur..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="813.0" y="691.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="816.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (405 samples, 10.69%)</title><rect x="813.3" y="691.0" width="126.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.3" y="702.0">java/util/concur..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (11 samples, 0.29%)</title><rect x="872.5" y="675.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="875.5" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (11 samples, 0.29%)</title><rect x="872.5" y="659.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="875.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (3 samples, 0.08%)</title><rect x="875.9" y="675.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="878.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (3 samples, 0.08%)</title><rect x="875.9" y="659.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="878.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/Striped64$Cell.cas (3 samples, 0.08%)</title><rect x="875.9" y="643.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="878.9" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LJJ_Z (3 samples, 0.08%)</title><rect x="875.9" y="627.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="878.9" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.compareAndSet (3 samples, 0.08%)</title><rect x="875.9" y="611.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="878.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (14 samples, 0.37%)</title><rect x="876.8" y="675.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="879.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (3 samples, 0.08%)</title><rect x="878.1" y="659.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="881.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.05%)</title><rect x="878.4" y="643.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="881.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="878.7" y="627.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="881.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="878.7" y="611.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="881.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="878.7" y="595.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="881.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="878.7" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="881.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="878.7" y="563.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="881.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (7 samples, 0.18%)</title><rect x="879.0" y="659.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="882.0" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.16%)</title><rect x="879.3" y="643.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="882.3" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.16%)</title><rect x="879.3" y="627.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="882.3" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.16%)</title><rect x="879.3" y="611.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="882.3" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.16%)</title><rect x="879.3" y="595.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="882.3" y="606.0"></text>
</g>
<g>
<title>vectorizedMismatch (4 samples, 0.11%)</title><rect x="880.0" y="579.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="883.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (186 samples, 4.91%)</title><rect x="881.2" y="675.0" width="58.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="884.2" y="686.0">java/u..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (164 samples, 4.33%)</title><rect x="888.1" y="659.0" width="51.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="891.1" y="670.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (164 samples, 4.33%)</title><rect x="888.1" y="643.0" width="51.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="891.1" y="654.0">java/..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (40 samples, 1.06%)</title><rect x="888.1" y="627.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="891.1" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (124 samples, 3.27%)</title><rect x="900.5" y="627.0" width="38.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="903.5" y="638.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (124 samples, 3.27%)</title><rect x="900.5" y="611.0" width="38.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="903.5" y="622.0">jav..</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="925.8" y="595.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="928.8" y="606.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="925.8" y="579.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="928.8" y="590.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="925.8" y="563.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="928.8" y="574.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="925.8" y="547.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="928.8" y="558.0"></text>
</g>
<g>
<title>rcu_core_si (1 samples, 0.03%)</title><rect x="925.8" y="531.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="928.8" y="542.0"></text>
</g>
<g>
<title>rcu_core (1 samples, 0.03%)</title><rect x="925.8" y="515.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="928.8" y="526.0"></text>
</g>
<g>
<title>rcu_report_qs_rnp (1 samples, 0.03%)</title><rect x="925.8" y="499.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="928.8" y="510.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="925.8" y="483.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="928.8" y="494.0"></text>
</g>
<g>
<title>vectorizedMismatch (42 samples, 1.11%)</title><rect x="926.1" y="595.0" width="13.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="929.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSecondarySeed (1 samples, 0.03%)</title><rect x="939.2" y="675.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="942.2" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.11%)</title><rect x="939.5" y="691.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="942.5" y="702.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.08%)</title><rect x="939.8" y="675.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="942.8" y="686.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.08%)</title><rect x="939.8" y="659.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="942.8" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (6 samples, 0.16%)</title><rect x="940.7" y="707.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="943.7" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.16%)</title><rect x="940.7" y="691.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="943.7" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (6 samples, 0.16%)</title><rect x="940.7" y="675.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="943.7" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="940.7" y="659.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="943.7" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="940.7" y="643.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="943.7" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="940.7" y="627.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="943.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.16%)</title><rect x="940.7" y="611.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="943.7" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.16%)</title><rect x="940.7" y="595.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="943.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.03%)</title><rect x="942.3" y="579.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="945.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.wrapArray (11 samples, 0.29%)</title><rect x="942.6" y="787.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="945.6" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.29%)</title><rect x="942.6" y="771.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="945.6" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.29%)</title><rect x="942.6" y="755.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="945.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="942.6" y="739.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="945.6" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="942.6" y="723.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="945.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="942.6" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.6" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="942.6" y="691.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="945.6" y="702.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="942.6" y="675.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="945.6" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.26%)</title><rect x="942.9" y="739.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="945.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.26%)</title><rect x="942.9" y="723.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="945.9" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="943.5" y="707.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="946.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="943.5" y="691.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="946.5" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="943.8" y="691.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="946.8" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (6 samples, 0.16%)</title><rect x="944.2" y="707.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="947.2" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.wrapString (119 samples, 3.14%)</title><rect x="946.0" y="787.0" width="37.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="949.0" y="798.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (46 samples, 1.21%)</title><rect x="946.0" y="771.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="949.0" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (46 samples, 1.21%)</title><rect x="946.0" y="755.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="949.0" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (46 samples, 1.21%)</title><rect x="946.0" y="739.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="949.0" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (46 samples, 1.21%)</title><rect x="946.0" y="723.0" width="14.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="949.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (16 samples, 0.42%)</title><rect x="950.7" y="707.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="953.7" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (14 samples, 0.37%)</title><rect x="955.7" y="707.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="958.7" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.18%)</title><rect x="956.3" y="691.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="959.3" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.11%)</title><rect x="958.5" y="691.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="961.5" y="702.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="959.7" y="691.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="962.7" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="960.0" y="707.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="963.0" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="960.0" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="963.0" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="960.0" y="675.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="963.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.toBytes (73 samples, 1.93%)</title><rect x="960.4" y="771.0" width="22.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="963.4" y="782.0">r..</text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (73 samples, 1.93%)</title><rect x="960.4" y="755.0" width="22.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="963.4" y="766.0">o..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="960.4" y="739.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="963.4" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="960.4" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (39 samples, 1.03%)</title><rect x="960.7" y="739.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="963.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (27 samples, 0.71%)</title><rect x="960.7" y="723.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="963.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.05%)</title><rect x="965.0" y="707.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="968.0" y="718.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (11 samples, 0.29%)</title><rect x="965.7" y="707.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="968.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (12 samples, 0.32%)</title><rect x="969.1" y="723.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="972.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="972.2" y="707.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="975.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="972.5" y="707.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="975.5" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (33 samples, 0.87%)</title><rect x="972.8" y="739.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="975.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.length (14 samples, 0.37%)</title><rect x="972.8" y="723.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="975.8" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (4 samples, 0.11%)</title><rect x="975.9" y="707.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="978.9" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (19 samples, 0.50%)</title><rect x="977.2" y="723.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="980.2" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.11%)</title><rect x="981.5" y="707.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="984.5" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.03%)</title><rect x="982.8" y="707.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="985.8" y="718.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (24 samples, 0.63%)</title><rect x="983.1" y="819.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="986.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (24 samples, 0.63%)</title><rect x="983.1" y="803.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="986.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (22 samples, 0.58%)</title><rect x="983.1" y="787.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="986.1" y="798.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*) (1 samples, 0.03%)</title><rect x="989.0" y="771.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.05%)</title><rect x="989.3" y="771.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="992.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.05%)</title><rect x="990.0" y="787.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="993.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.05%)</title><rect x="990.0" y="771.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="993.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.05%)</title><rect x="990.0" y="755.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="993.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (40 samples, 1.06%)</title><rect x="990.6" y="851.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="993.6" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.18%)</title><rect x="991.8" y="835.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="994.8" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="991.8" y="819.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="994.8" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="991.8" y="803.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.16%)</title><rect x="992.1" y="819.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="995.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.16%)</title><rect x="992.1" y="803.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="995.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.16%)</title><rect x="992.1" y="787.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="995.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.05%)</title><rect x="993.4" y="771.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="996.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.58%)</title><rect x="994.0" y="835.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="997.0" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.58%)</title><rect x="994.0" y="819.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="997.0" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1000.6" y="803.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1003.6" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (7 samples, 0.18%)</title><rect x="1000.9" y="835.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1003.9" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.03%)</title><rect x="1003.0" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1006.0" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.08%)</title><rect x="1003.4" y="851.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1006.4" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1004.0" y="835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1007.0" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1004.0" y="819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1007.0" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1004.0" y="803.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1007.0" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="1004.0" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (45 samples, 1.19%)</title><rect x="1004.3" y="851.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1007.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (27 samples, 0.71%)</title><rect x="1009.3" y="835.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1012.3" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (27 samples, 0.71%)</title><rect x="1009.3" y="819.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1012.3" y="830.0"></text>
</g>
<g>
<title>jbyte_arraycopy (6 samples, 0.16%)</title><rect x="1013.6" y="803.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1016.6" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.18%)</title><rect x="1015.5" y="803.0" width="2.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1018.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="1017.7" y="835.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1020.7" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.05%)</title><rect x="1017.7" y="819.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1020.7" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1017.7" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1020.7" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1017.7" y="787.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1020.7" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1017.7" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1020.7" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1017.7" y="755.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1020.7" y="766.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="1017.7" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1020.7" y="750.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.03%)</title><rect x="1017.7" y="723.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1020.7" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="1018.0" y="803.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1021.0" y="814.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.03%)</title><rect x="1018.0" y="787.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1021.0" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (45 samples, 1.19%)</title><rect x="1018.3" y="851.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1021.3" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.11%)</title><rect x="1019.2" y="835.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1022.2" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (38 samples, 1.00%)</title><rect x="1020.5" y="835.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1023.5" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1031.1" y="819.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.1" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1031.1" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.1" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1031.1" y="787.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.1" y="798.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="1031.1" y="771.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="1031.4" y="819.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.4" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="1031.4" y="803.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="1031.4" y="787.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1034.4" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1031.7" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1032.0" y="819.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1035.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1032.0" y="803.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1035.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.03%)</title><rect x="1032.0" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1035.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1032.0" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1035.0" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1032.0" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1035.0" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1032.0" y="739.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.0" y="750.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="1032.0" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.0" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (321 samples, 8.48%)</title><rect x="1032.3" y="867.0" width="100.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1035.3" y="878.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (321 samples, 8.48%)</title><rect x="1032.3" y="851.0" width="100.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1035.3" y="862.0">one/nio/net/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (33 samples, 0.87%)</title><rect x="1034.2" y="835.0" width="10.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1037.2" y="846.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.08%)</title><rect x="1035.8" y="819.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1038.8" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (1 samples, 0.03%)</title><rect x="1036.7" y="819.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1039.7" y="830.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (6 samples, 0.16%)</title><rect x="1037.0" y="819.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1040.0" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (16 samples, 0.42%)</title><rect x="1038.9" y="819.0" width="5.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1041.9" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (4 samples, 0.11%)</title><rect x="1042.3" y="803.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1045.3" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1043.6" y="803.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1046.6" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1043.6" y="787.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1046.6" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1043.6" y="771.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1046.6" y="782.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.05%)</title><rect x="1043.9" y="819.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1046.9" y="830.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.11%)</title><rect x="1044.5" y="835.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1047.5" y="846.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.11%)</title><rect x="1045.7" y="835.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1048.7" y="846.0"></text>
</g>
<g>
<title>__recv (267 samples, 7.05%)</title><rect x="1047.0" y="835.0" width="83.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1050.0" y="846.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (200 samples, 5.28%)</title><rect x="1067.9" y="819.0" width="62.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1070.9" y="830.0">entry_..</text>
</g>
<g>
<title>__x64_sys_recvfrom (3 samples, 0.08%)</title><rect x="1067.9" y="803.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1070.9" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (197 samples, 5.20%)</title><rect x="1068.8" y="803.0" width="61.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1071.8" y="814.0">do_sys..</text>
</g>
<g>
<title>__sys_recvfrom (2 samples, 0.05%)</title><rect x="1077.5" y="787.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1080.5" y="798.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (167 samples, 4.41%)</title><rect x="1078.1" y="787.0" width="52.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1081.1" y="798.0">__x64..</text>
</g>
<g>
<title>__sys_recvfrom (164 samples, 4.33%)</title><rect x="1078.1" y="771.0" width="51.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1081.1" y="782.0">__sys..</text>
</g>
<g>
<title>fput (2 samples, 0.05%)</title><rect x="1080.0" y="755.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1083.0" y="766.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.05%)</title><rect x="1080.0" y="739.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1083.0" y="750.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="1080.6" y="755.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1083.6" y="766.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.03%)</title><rect x="1080.9" y="755.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1083.9" y="766.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.03%)</title><rect x="1080.9" y="739.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1083.9" y="750.0"></text>
</g>
<g>
<title>inet6_recvmsg (1 samples, 0.03%)</title><rect x="1081.3" y="755.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1084.3" y="766.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.03%)</title><rect x="1081.6" y="755.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1084.6" y="766.0"></text>
</g>
<g>
<title>sock_recvmsg (131 samples, 3.46%)</title><rect x="1081.9" y="755.0" width="40.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1084.9" y="766.0">soc..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (4 samples, 0.11%)</title><rect x="1081.9" y="739.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1084.9" y="750.0"></text>
</g>
<g>
<title>inet6_recvmsg (102 samples, 2.69%)</title><rect x="1083.1" y="739.0" width="31.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1086.1" y="750.0">in..</text>
</g>
<g>
<title>tcp_recvmsg (101 samples, 2.67%)</title><rect x="1083.4" y="723.0" width="31.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1086.4" y="734.0">tc..</text>
</g>
<g>
<title>__kfree_skb (21 samples, 0.55%)</title><rect x="1088.4" y="707.0" width="6.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1091.4" y="718.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.03%)</title><rect x="1088.4" y="691.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1091.4" y="702.0"></text>
</g>
<g>
<title>skb_release_all (19 samples, 0.50%)</title><rect x="1088.7" y="691.0" width="6.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1091.7" y="702.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.03%)</title><rect x="1088.7" y="675.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1091.7" y="686.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.03%)</title><rect x="1089.0" y="675.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1092.0" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (17 samples, 0.45%)</title><rect x="1089.4" y="675.0" width="5.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1092.4" y="686.0"></text>
</g>
<g>
<title>dst_release (14 samples, 0.37%)</title><rect x="1090.0" y="659.0" width="4.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1093.0" y="670.0"></text>
</g>
<g>
<title>sock_rfree (1 samples, 0.03%)</title><rect x="1094.3" y="659.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1097.3" y="670.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="1094.7" y="691.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1097.7" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.05%)</title><rect x="1095.0" y="707.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1098.0" y="718.0"></text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.11%)</title><rect x="1095.6" y="707.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1098.6" y="718.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="1095.6" y="691.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1098.6" y="702.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="1095.6" y="675.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1098.6" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.08%)</title><rect x="1095.9" y="691.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1098.9" y="702.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.13%)</title><rect x="1096.8" y="707.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1099.8" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="1096.8" y="691.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1099.8" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.08%)</title><rect x="1097.1" y="691.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1100.1" y="702.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="1098.1" y="691.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1101.1" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (34 samples, 0.90%)</title><rect x="1098.4" y="707.0" width="10.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1101.4" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (34 samples, 0.90%)</title><rect x="1098.4" y="691.0" width="10.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1101.4" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (25 samples, 0.66%)</title><rect x="1101.2" y="675.0" width="7.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1104.2" y="686.0"></text>
</g>
<g>
<title>__check_object_size (6 samples, 0.16%)</title><rect x="1101.2" y="659.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1104.2" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (6 samples, 0.16%)</title><rect x="1103.1" y="659.0" width="1.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1106.1" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (13 samples, 0.34%)</title><rect x="1104.9" y="659.0" width="4.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1107.9" y="670.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (11 samples, 0.29%)</title><rect x="1105.6" y="643.0" width="3.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1108.6" y="654.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (6 samples, 0.16%)</title><rect x="1109.0" y="707.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1112.0" y="718.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="1110.5" y="691.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1113.5" y="702.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (12 samples, 0.32%)</title><rect x="1110.9" y="707.0" width="3.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1113.9" y="718.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.08%)</title><rect x="1111.8" y="691.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1114.8" y="702.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (6 samples, 0.16%)</title><rect x="1112.7" y="691.0" width="1.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1115.7" y="702.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.05%)</title><rect x="1113.0" y="675.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1116.0" y="686.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.05%)</title><rect x="1113.0" y="659.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1116.0" y="670.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.08%)</title><rect x="1113.7" y="675.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1116.7" y="686.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="1114.6" y="707.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1117.6" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (23 samples, 0.61%)</title><rect x="1114.9" y="739.0" width="7.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1117.9" y="750.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.03%)</title><rect x="1114.9" y="723.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1117.9" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (14 samples, 0.37%)</title><rect x="1115.2" y="723.0" width="4.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1118.2" y="734.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (14 samples, 0.37%)</title><rect x="1115.2" y="707.0" width="4.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1118.2" y="718.0"></text>
</g>
<g>
<title>aa_sk_perm (13 samples, 0.34%)</title><rect x="1115.5" y="691.0" width="4.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1118.5" y="702.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="1119.3" y="675.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1122.3" y="686.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="1119.3" y="659.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1122.3" y="670.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (7 samples, 0.18%)</title><rect x="1119.6" y="723.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1122.6" y="734.0"></text>
</g>
<g>
<title>sock_has_perm (7 samples, 0.18%)</title><rect x="1119.6" y="707.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1122.6" y="718.0"></text>
</g>
<g>
<title>sock_has_perm (1 samples, 0.03%)</title><rect x="1121.8" y="723.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1124.8" y="734.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (2 samples, 0.05%)</title><rect x="1122.1" y="739.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1125.1" y="750.0"></text>
</g>
<g>
<title>sockfd_lookup_light (21 samples, 0.55%)</title><rect x="1122.7" y="755.0" width="6.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1125.7" y="766.0"></text>
</g>
<g>
<title>__fdget (19 samples, 0.50%)</title><rect x="1122.7" y="739.0" width="5.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1125.7" y="750.0"></text>
</g>
<g>
<title>__fget_light (19 samples, 0.50%)</title><rect x="1122.7" y="723.0" width="5.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1125.7" y="734.0"></text>
</g>
<g>
<title>__fget (17 samples, 0.45%)</title><rect x="1123.3" y="707.0" width="5.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1126.3" y="718.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.05%)</title><rect x="1128.6" y="739.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1131.6" y="750.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="1129.2" y="771.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1132.2" y="782.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.03%)</title><rect x="1129.6" y="771.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1132.6" y="782.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.03%)</title><rect x="1129.9" y="771.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1132.9" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.16%)</title><rect x="1130.2" y="835.0" width="1.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1133.2" y="846.0"></text>
</g>
<g>
<title>recv@plt (1 samples, 0.03%)</title><rect x="1132.0" y="835.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1135.0" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.16%)</title><rect x="1132.4" y="883.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.4" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="1132.4" y="867.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1135.4" y="878.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.13%)</title><rect x="1132.7" y="867.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1135.7" y="878.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.08%)</title><rect x="1133.3" y="851.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1136.3" y="862.0"></text>
</g>
<g>
<title>start_thread (179 samples, 4.73%)</title><rect x="1134.2" y="915.0" width="55.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1137.2" y="926.0">start..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (179 samples, 4.73%)</title><rect x="1134.2" y="899.0" width="55.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1137.2" y="910.0">threa..</text>
</g>
<g>
<title>Thread::call_run() (179 samples, 4.73%)</title><rect x="1134.2" y="883.0" width="55.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.2" y="894.0">Threa..</text>
</g>
<g>
<title>GangWorker::loop() (172 samples, 4.54%)</title><rect x="1134.2" y="867.0" width="53.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.2" y="878.0">GangW..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (19 samples, 0.50%)</title><rect x="1134.2" y="851.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.2" y="862.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (19 samples, 0.50%)</title><rect x="1134.2" y="835.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.2" y="846.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (6 samples, 0.16%)</title><rect x="1134.2" y="819.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.2" y="830.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.149] (5 samples, 0.13%)</title><rect x="1134.2" y="803.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.2" y="814.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (4 samples, 0.11%)</title><rect x="1134.2" y="787.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.2" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.08%)</title><rect x="1134.5" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.5" y="782.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (3 samples, 0.08%)</title><rect x="1134.5" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.5" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1135.5" y="787.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.5" y="798.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.03%)</title><rect x="1135.8" y="803.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.8" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1135.8" y="787.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.8" y="798.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.03%)</title><rect x="1135.8" y="771.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.8" y="782.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1135.8" y="755.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.8" y="766.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.149] (13 samples, 0.34%)</title><rect x="1136.1" y="819.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.1" y="830.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (12 samples, 0.32%)</title><rect x="1136.4" y="803.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.4" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (11 samples, 0.29%)</title><rect x="1136.7" y="787.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.7" y="798.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (7 samples, 0.18%)</title><rect x="1138.0" y="771.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.0" y="782.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1139.8" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.8" y="766.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (138 samples, 3.64%)</title><rect x="1140.1" y="851.0" width="43.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.1" y="862.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (66 samples, 1.74%)</title><rect x="1140.1" y="835.0" width="20.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.1" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.08%)</title><rect x="1142.6" y="819.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.6" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1143.3" y="803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.3" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (50 samples, 1.32%)</title><rect x="1143.6" y="819.0" width="15.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.6" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (34 samples, 0.90%)</title><rect x="1148.2" y="803.0" width="10.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.2" y="814.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (1 samples, 0.03%)</title><rect x="1156.0" y="787.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.0" y="798.0"></text>
</g>
<g>
<title>G1Allocator::survivor_attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="1156.0" y="771.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (8 samples, 0.21%)</title><rect x="1156.3" y="787.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.3" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1158.8" y="803.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.8" y="814.0"></text>
</g>
<g>
<title>GCId::current() (1 samples, 0.03%)</title><rect x="1159.2" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.2" y="830.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="1159.2" y="803.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1162.2" y="814.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="1159.2" y="787.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1162.2" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="1159.2" y="771.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1162.2" y="782.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.11%)</title><rect x="1159.5" y="819.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.5" y="830.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.11%)</title><rect x="1159.5" y="803.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1162.5" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::state_for_worker(unsigned int) (1 samples, 0.03%)</title><rect x="1160.7" y="835.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.7" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1160.7" y="819.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.7" y="830.0"></text>
</g>
<g>
<title>PLABStats::desired_plab_sz(unsigned int) (1 samples, 0.03%)</title><rect x="1160.7" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.7" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (64 samples, 1.69%)</title><rect x="1161.0" y="835.0" width="20.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.0" y="846.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (64 samples, 1.69%)</title><rect x="1161.0" y="819.0" width="20.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (64 samples, 1.69%)</title><rect x="1161.0" y="803.0" width="20.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.0" y="814.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (64 samples, 1.69%)</title><rect x="1161.0" y="787.0" width="20.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="798.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (64 samples, 1.69%)</title><rect x="1161.0" y="771.0" width="20.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.0" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (55 samples, 1.45%)</title><rect x="1161.0" y="755.0" width="17.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.0" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (34 samples, 0.90%)</title><rect x="1167.6" y="739.0" width="10.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.6" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (11 samples, 0.29%)</title><rect x="1174.7" y="723.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.7" y="734.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.03%)</title><rect x="1177.8" y="707.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (9 samples, 0.24%)</title><rect x="1178.2" y="755.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.2" y="766.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (8 samples, 0.21%)</title><rect x="1178.2" y="739.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.2" y="750.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.03%)</title><rect x="1178.5" y="723.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.5" y="734.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.03%)</title><rect x="1178.8" y="723.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="734.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.577] (1 samples, 0.03%)</title><rect x="1179.1" y="723.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBoundedDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate_bounded&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*, MemRegion) (1 samples, 0.03%)</title><rect x="1179.4" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="734.0"></text>
</g>
<g>
<title>void G1ScanClosureBase::handle_non_cset_obj_common&lt;unsigned int&gt;(InCSetState, unsigned int*, oopDesc*) [clone .isra.261] (1 samples, 0.03%)</title><rect x="1179.4" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (3 samples, 0.08%)</title><rect x="1179.7" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="734.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.03%)</title><rect x="1180.3" y="707.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;TypeArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1180.7" y="739.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (6 samples, 0.16%)</title><rect x="1181.0" y="835.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.08%)</title><rect x="1181.0" y="819.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.08%)</title><rect x="1181.0" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.08%)</title><rect x="1181.0" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="798.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.03%)</title><rect x="1181.0" y="771.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="782.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1181.0" y="755.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="766.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.03%)</title><rect x="1181.3" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="782.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1181.6" y="771.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="782.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.03%)</title><rect x="1181.6" y="755.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.6" y="766.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (2 samples, 0.05%)</title><rect x="1181.9" y="819.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="830.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="1182.2" y="803.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>SubTasksDone::all_tasks_completed(unsigned int) (1 samples, 0.03%)</title><rect x="1182.5" y="819.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.5" y="830.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.03%)</title><rect x="1182.8" y="835.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (13 samples, 0.34%)</title><rect x="1183.1" y="851.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="862.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (13 samples, 0.34%)</title><rect x="1183.1" y="835.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="846.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (13 samples, 0.34%)</title><rect x="1183.1" y="819.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="830.0"></text>
</g>
<g>
<title>MarkBitMap::get_next_marked_addr(HeapWord const*, HeapWord const*) const (1 samples, 0.03%)</title><rect x="1185.6" y="803.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.6" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (4 samples, 0.11%)</title><rect x="1185.9" y="803.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="814.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.03%)</title><rect x="1186.6" y="787.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="798.0"></text>
</g>
<g>
<title>BitMap::par_at_put(unsigned long, bool) (1 samples, 0.03%)</title><rect x="1186.6" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="782.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.233] (1 samples, 0.03%)</title><rect x="1186.9" y="787.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="798.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1187.2" y="851.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="862.0"></text>
</g>
<g>
<title>InlineCacheBuffer::update_inline_caches() (1 samples, 0.03%)</title><rect x="1187.2" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.2" y="846.0"></text>
</g>
<g>
<title>__new_sem_post (1 samples, 0.03%)</title><rect x="1187.5" y="851.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1190.5" y="862.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1187.5" y="835.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1190.5" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1187.5" y="819.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1190.5" y="830.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1187.5" y="803.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1190.5" y="814.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1187.5" y="787.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1190.5" y="798.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1187.5" y="771.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1190.5" y="782.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.03%)</title><rect x="1187.5" y="755.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1190.5" y="766.0"></text>
</g>
<g>
<title>VMThread::run() (7 samples, 0.18%)</title><rect x="1187.8" y="867.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.8" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (7 samples, 0.18%)</title><rect x="1187.8" y="851.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="862.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.63] (7 samples, 0.18%)</title><rect x="1187.8" y="835.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.8" y="846.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (7 samples, 0.18%)</title><rect x="1187.8" y="819.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="830.0"></text>
</g>
<g>
<title>PerfString::set_string(char const*) (1 samples, 0.03%)</title><rect x="1187.8" y="803.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="814.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (6 samples, 0.16%)</title><rect x="1188.1" y="803.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (6 samples, 0.16%)</title><rect x="1188.1" y="787.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.1" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::print_heap_before_gc() (1 samples, 0.03%)</title><rect x="1188.8" y="771.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.8" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::print_on(outputStream*) const (1 samples, 0.03%)</title><rect x="1188.8" y="755.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.8" y="766.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.03%)</title><rect x="1188.8" y="739.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.8" y="750.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool) (1 samples, 0.03%)</title><rect x="1188.8" y="723.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>stringStream::write(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1188.8" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.03%)</title><rect x="1189.1" y="771.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.1" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::flush() (1 samples, 0.03%)</title><rect x="1189.1" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.1" y="766.0"></text>
</g>
<g>
<title>PtrQueue::flush_impl() (1 samples, 0.03%)</title><rect x="1189.1" y="739.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.1" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::pre_evacuate_collection_set() (1 samples, 0.03%)</title><rect x="1189.4" y="771.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.4" y="782.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.03%)</title><rect x="1189.4" y="755.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.4" y="766.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.03%)</title><rect x="1189.4" y="739.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.4" y="750.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ResetScanTopClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1189.4" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.4" y="734.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (1 samples, 0.03%)</title><rect x="1189.7" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.7" y="782.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::note_gc_end() (1 samples, 0.03%)</title><rect x="1189.7" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.7" y="766.0"></text>
</g>
</g>
</svg>
