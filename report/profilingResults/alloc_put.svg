<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="437"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="437"> </text>
<g id="frames">
<g>
<title>all (7,315 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="414.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (7,315 samples, 100.00%)</title><rect x="10.0" y="387.0" width="1180.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="398.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (7,315 samples, 100.00%)</title><rect x="10.0" y="371.0" width="1180.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="382.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (7,315 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="366.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (7,315 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="350.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,634 samples, 63.35%)</title><rect x="10.0" y="323.0" width="747.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="334.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,634 samples, 63.35%)</title><rect x="10.0" y="307.0" width="747.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="318.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (4,419 samples, 60.41%)</title><rect x="10.0" y="291.0" width="712.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="302.0">RequestHandler3_upsert.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (445 samples, 6.08%)</title><rect x="10.0" y="275.0" width="71.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="286.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (445 samples, 6.08%)</title><rect x="10.0" y="259.0" width="71.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="270.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (319 samples, 4.36%)</title><rect x="10.0" y="243.0" width="51.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="254.0">one/n..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (319 samples, 4.36%)</title><rect x="10.0" y="227.0" width="51.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="238.0">one/n..</text>
</g>
<g>
<title>byte[] (319 samples, 4.36%)</title><rect x="10.0" y="211.0" width="51.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="13.0" y="222.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (126 samples, 1.72%)</title><rect x="61.5" y="243.0" width="20.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.5" y="254.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (126 samples, 1.72%)</title><rect x="61.5" y="227.0" width="20.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="64.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (290 samples, 3.96%)</title><rect x="81.8" y="275.0" width="46.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.8" y="286.0">one/..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (290 samples, 3.96%)</title><rect x="81.8" y="259.0" width="46.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.8" y="270.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (290 samples, 3.96%)</title><rect x="81.8" y="243.0" width="46.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.8" y="254.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (290 samples, 3.96%)</title><rect x="81.8" y="227.0" width="46.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.8" y="238.0">java..</text>
</g>
<g>
<title>java.lang.String (145 samples, 1.98%)</title><rect x="81.8" y="211.0" width="23.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="84.8" y="222.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (145 samples, 1.98%)</title><rect x="105.2" y="211.0" width="23.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.2" y="222.0">j..</text>
</g>
<g>
<title>byte[] (145 samples, 1.98%)</title><rect x="105.2" y="195.0" width="23.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="108.2" y="206.0">b..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.upsert (3,684 samples, 50.36%)</title><rect x="128.6" y="275.0" width="594.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.6" y="286.0">ru/mail/polis/service/zvladn7/BasicService.upsert</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (139 samples, 1.90%)</title><rect x="128.6" y="259.0" width="22.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="131.6" y="270.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (139 samples, 1.90%)</title><rect x="128.6" y="243.0" width="22.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="131.6" y="254.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.decode (139 samples, 1.90%)</title><rect x="128.6" y="227.0" width="22.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="131.6" y="238.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (139 samples, 1.90%)</title><rect x="128.6" y="211.0" width="22.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="131.6" y="222.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (139 samples, 1.90%)</title><rect x="128.6" y="195.0" width="22.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="131.6" y="206.0">j..</text>
</g>
<g>
<title>byte[] (139 samples, 1.90%)</title><rect x="128.6" y="179.0" width="22.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="131.6" y="190.0">b..</text>
</g>
<g>
<title>one.nio.http.Response (87 samples, 1.19%)</title><rect x="151.0" y="259.0" width="14.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="154.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (436 samples, 5.96%)</title><rect x="165.0" y="259.0" width="70.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="168.0" y="270.0">one/nio/..</text>
</g>
<g>
<title>byte[] (265 samples, 3.62%)</title><rect x="165.0" y="243.0" width="42.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="168.0" y="254.0">byte[]</text>
</g>
<g>
<title>java.lang.String[] (94 samples, 1.29%)</title><rect x="207.8" y="243.0" width="15.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="210.8" y="254.0"></text>
</g>
<g>
<title>java.lang.String (77 samples, 1.05%)</title><rect x="222.9" y="243.0" width="12.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="225.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.upsert (2,436 samples, 33.30%)</title><rect x="235.4" y="259.0" width="392.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.4" y="270.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.upsert</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.flush (1,755 samples, 23.99%)</title><rect x="235.4" y="243.0" width="283.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.4" y="254.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.f..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.serialize (1,755 samples, 23.99%)</title><rect x="235.4" y="227.0" width="283.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.4" y="238.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.s..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.serialize (1,755 samples, 23.99%)</title><rect x="235.4" y="211.0" width="283.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.4" y="222.0">ru/mail/polis/dao/zvladn7/SSTable.seri..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (52 samples, 0.71%)</title><rect x="235.4" y="195.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.4" y="206.0"></text>
</g>
<g>
<title>java.lang.Integer (52 samples, 0.71%)</title><rect x="235.4" y="179.0" width="8.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="238.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,343 samples, 18.36%)</title><rect x="243.7" y="195.0" width="216.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.7" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (977 samples, 13.36%)</title><rect x="243.7" y="179.0" width="157.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="246.7" y="190.0">java.nio.HeapByteBuf..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (366 samples, 5.00%)</title><rect x="401.3" y="179.0" width="59.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.3" y="190.0">java/n..</text>
</g>
<g>
<title>byte[] (366 samples, 5.00%)</title><rect x="401.3" y="163.0" width="59.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="404.3" y="174.0">byte[]</text>
</g>
<g>
<title>java/util/ArrayList.add (15 samples, 0.21%)</title><rect x="460.4" y="195.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="463.4" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (15 samples, 0.21%)</title><rect x="460.4" y="179.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="463.4" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (15 samples, 0.21%)</title><rect x="460.4" y="163.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="463.4" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (15 samples, 0.21%)</title><rect x="460.4" y="147.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="463.4" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 0.21%)</title><rect x="460.4" y="131.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.4" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (14 samples, 0.19%)</title><rect x="460.5" y="115.0" width="2.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="463.5" y="126.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (41 samples, 0.56%)</title><rect x="462.8" y="195.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="465.8" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (41 samples, 0.56%)</title><rect x="462.8" y="179.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.8" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (41 samples, 0.56%)</title><rect x="462.8" y="163.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="465.8" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (41 samples, 0.56%)</title><rect x="462.8" y="147.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="465.8" y="158.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$85/1806973363.getAsBoolean (41 samples, 0.56%)</title><rect x="462.8" y="131.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.8" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (41 samples, 0.56%)</title><rect x="462.8" y="115.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.8" y="126.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (41 samples, 0.56%)</title><rect x="462.8" y="99.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="465.8" y="110.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (41 samples, 0.56%)</title><rect x="462.8" y="83.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.8" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable$$Lambda$82/1331034892.apply (41 samples, 0.56%)</title><rect x="462.8" y="67.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="465.8" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.lambda$iterator$0 (41 samples, 0.56%)</title><rect x="462.8" y="51.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="465.8" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (41 samples, 0.56%)</title><rect x="462.8" y="35.0" width="6.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="465.8" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (172 samples, 2.35%)</title><rect x="469.4" y="195.0" width="27.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="472.4" y="206.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (172 samples, 2.35%)</title><rect x="469.4" y="179.0" width="27.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="472.4" y="190.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (172 samples, 2.35%)</title><rect x="469.4" y="163.0" width="27.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="472.4" y="174.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (132 samples, 1.80%)</title><rect x="497.2" y="195.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="500.2" y="206.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (132 samples, 1.80%)</title><rect x="497.2" y="179.0" width="21.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="500.2" y="190.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (132 samples, 1.80%)</title><rect x="497.2" y="163.0" width="21.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="500.2" y="174.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.upsert (681 samples, 9.31%)</title><rect x="518.5" y="243.0" width="109.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.5" y="254.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (424 samples, 5.80%)</title><rect x="518.5" y="227.0" width="68.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="521.5" y="238.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (424 samples, 5.80%)</title><rect x="518.5" y="211.0" width="68.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="521.5" y="222.0">java.ni..</text>
</g>
<g>
<title>java/util/TreeMap.put (160 samples, 2.19%)</title><rect x="586.9" y="227.0" width="25.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="589.9" y="238.0">j..</text>
</g>
<g>
<title>java.util.TreeMap$Entry (160 samples, 2.19%)</title><rect x="586.9" y="211.0" width="25.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="589.9" y="222.0">j..</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (97 samples, 1.33%)</title><rect x="612.7" y="227.0" width="15.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="615.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.wrapArray (156 samples, 2.13%)</title><rect x="628.3" y="259.0" width="25.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="631.3" y="270.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (156 samples, 2.13%)</title><rect x="628.3" y="243.0" width="25.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="631.3" y="254.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (156 samples, 2.13%)</title><rect x="628.3" y="227.0" width="25.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="631.3" y="238.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (156 samples, 2.13%)</title><rect x="628.3" y="211.0" width="25.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="631.3" y="222.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.wrapString (430 samples, 5.88%)</title><rect x="653.5" y="259.0" width="69.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.5" y="270.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (214 samples, 2.93%)</title><rect x="653.5" y="243.0" width="34.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.5" y="254.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (214 samples, 2.93%)</title><rect x="653.5" y="227.0" width="34.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="656.5" y="238.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (214 samples, 2.93%)</title><rect x="653.5" y="211.0" width="34.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="656.5" y="222.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.toBytes (216 samples, 2.95%)</title><rect x="688.0" y="243.0" width="34.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="691.0" y="254.0">ru..</text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (216 samples, 2.95%)</title><rect x="688.0" y="227.0" width="34.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="691.0" y="238.0">on..</text>
</g>
<g>
<title>byte[] (216 samples, 2.95%)</title><rect x="688.0" y="211.0" width="34.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="691.0" y="222.0">by..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (215 samples, 2.94%)</title><rect x="722.8" y="291.0" width="34.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="725.8" y="302.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (215 samples, 2.94%)</title><rect x="722.8" y="275.0" width="34.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="725.8" y="286.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (215 samples, 2.94%)</title><rect x="722.8" y="259.0" width="34.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="725.8" y="270.0">ja..</text>
</g>
<g>
<title>java.lang.String (95 samples, 1.30%)</title><rect x="722.8" y="243.0" width="15.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="725.8" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (120 samples, 1.64%)</title><rect x="738.2" y="243.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.2" y="254.0"></text>
</g>
<g>
<title>byte[] (120 samples, 1.64%)</title><rect x="738.2" y="227.0" width="19.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="741.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1,352 samples, 18.48%)</title><rect x="757.5" y="323.0" width="218.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="760.5" y="334.0">one/nio/http/HttpSession.pars..</text>
</g>
<g>
<title>one.nio.http.Request (153 samples, 2.09%)</title><rect x="757.5" y="307.0" width="24.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="760.5" y="318.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (475 samples, 6.49%)</title><rect x="782.2" y="307.0" width="76.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="785.2" y="318.0">one/nio/..</text>
</g>
<g>
<title>java.lang.String[] (475 samples, 6.49%)</title><rect x="782.2" y="291.0" width="76.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="785.2" y="302.0">java.lan..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (724 samples, 9.90%)</title><rect x="858.8" y="307.0" width="116.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="861.8" y="318.0">one/nio/util/U..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (724 samples, 9.90%)</title><rect x="858.8" y="291.0" width="116.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="861.8" y="302.0">one/nio/util/U..</text>
</g>
<g>
<title>char[] (414 samples, 5.66%)</title><rect x="858.8" y="275.0" width="66.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="861.8" y="286.0">char[]</text>
</g>
<g>
<title>java.lang.String (80 samples, 1.09%)</title><rect x="925.6" y="275.0" width="12.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="928.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (230 samples, 3.14%)</title><rect x="938.5" y="275.0" width="37.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="941.5" y="286.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (230 samples, 3.14%)</title><rect x="938.5" y="259.0" width="37.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="941.5" y="270.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (230 samples, 3.14%)</title><rect x="938.5" y="243.0" width="37.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="941.5" y="254.0">jav..</text>
</g>
<g>
<title>byte[] (230 samples, 3.14%)</title><rect x="938.5" y="227.0" width="37.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="941.5" y="238.0">byt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (107 samples, 1.46%)</title><rect x="975.6" y="323.0" width="17.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="978.6" y="334.0"></text>
</g>
<g>
<title>byte[] (107 samples, 1.46%)</title><rect x="975.6" y="307.0" width="17.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="978.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (247 samples, 3.38%)</title><rect x="992.9" y="323.0" width="39.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="995.9" y="334.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (247 samples, 3.38%)</title><rect x="992.9" y="307.0" width="39.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="995.9" y="318.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (247 samples, 3.38%)</title><rect x="992.9" y="291.0" width="39.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="995.9" y="302.0">jav..</text>
</g>
<g>
<title>java.lang.String (112 samples, 1.53%)</title><rect x="992.9" y="275.0" width="18.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="995.9" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (135 samples, 1.85%)</title><rect x="1010.9" y="275.0" width="21.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1013.9" y="286.0">j..</text>
</g>
<g>
<title>byte[] (135 samples, 1.85%)</title><rect x="1010.9" y="259.0" width="21.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1013.9" y="270.0">b..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (975 samples, 13.33%)</title><rect x="1032.7" y="323.0" width="157.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1035.7" y="334.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (975 samples, 13.33%)</title><rect x="1032.7" y="307.0" width="157.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1035.7" y="318.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (430 samples, 5.88%)</title><rect x="1032.7" y="291.0" width="69.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1035.7" y="302.0">char[]</text>
</g>
<g>
<title>java.lang.String (277 samples, 3.79%)</title><rect x="1102.1" y="291.0" width="44.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1105.1" y="302.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (268 samples, 3.66%)</title><rect x="1146.8" y="291.0" width="43.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1149.8" y="302.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (268 samples, 3.66%)</title><rect x="1146.8" y="275.0" width="43.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1149.8" y="286.0">java..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (268 samples, 3.66%)</title><rect x="1146.8" y="259.0" width="43.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1149.8" y="270.0">java..</text>
</g>
<g>
<title>byte[] (268 samples, 3.66%)</title><rect x="1146.8" y="243.0" width="43.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1149.8" y="254.0">byte[]</text>
</g>
</g>
</svg>
