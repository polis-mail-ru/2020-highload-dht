<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (94,361 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (48,445 samples, 51.34%)</title><rect x="10.0" y="307.0" width="605.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (48,445 samples, 51.34%)</title><rect x="10.0" y="291.0" width="605.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (48,445 samples, 51.34%)</title><rect x="10.0" y="275.0" width="605.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,028 samples, 1.09%)</title><rect x="10.0" y="259.0" width="12.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,028 samples, 1.09%)</title><rect x="10.0" y="243.0" width="12.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (939 samples, 1.00%)</title><rect x="10.0" y="227.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (939 samples, 1.00%)</title><rect x="10.0" y="211.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (939 samples, 1.00%)</title><rect x="10.0" y="195.0" width="11.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (89 samples, 0.09%)</title><rect x="21.7" y="227.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (89 samples, 0.09%)</title><rect x="21.7" y="211.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (89 samples, 0.09%)</title><rect x="21.7" y="195.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (89 samples, 0.09%)</title><rect x="21.7" y="179.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.7" y="190.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (89 samples, 0.09%)</title><rect x="21.7" y="163.0" width="1.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="24.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$112/1483067148.run (1,931 samples, 2.05%)</title><rect x="22.9" y="259.0" width="24.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.9" y="270.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$flush$9 (1,931 samples, 2.05%)</title><rect x="22.9" y="243.0" width="24.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.9" y="254.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.serialize (1,928 samples, 2.04%)</title><rect x="22.9" y="227.0" width="24.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.9" y="238.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.serialize (1,928 samples, 2.04%)</title><rect x="22.9" y="211.0" width="24.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.9" y="222.0">r..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (38 samples, 0.04%)</title><rect x="22.9" y="195.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.9" y="206.0"></text>
</g>
<g>
<title>java.lang.Integer (38 samples, 0.04%)</title><rect x="22.9" y="179.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="25.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,344 samples, 1.42%)</title><rect x="23.4" y="195.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.4" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (924 samples, 0.98%)</title><rect x="23.4" y="179.0" width="11.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="26.4" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (420 samples, 0.45%)</title><rect x="34.9" y="179.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.9" y="190.0"></text>
</g>
<g>
<title>byte[] (420 samples, 0.45%)</title><rect x="34.9" y="163.0" width="5.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="37.9" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (28 samples, 0.03%)</title><rect x="40.2" y="195.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.2" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (28 samples, 0.03%)</title><rect x="40.2" y="179.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.2" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (28 samples, 0.03%)</title><rect x="40.2" y="163.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="43.2" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (28 samples, 0.03%)</title><rect x="40.2" y="147.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.2" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (28 samples, 0.03%)</title><rect x="40.2" y="131.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.2" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (27 samples, 0.03%)</title><rect x="40.2" y="115.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="43.2" y="126.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (97 samples, 0.10%)</title><rect x="40.5" y="195.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.5" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (97 samples, 0.10%)</title><rect x="40.5" y="179.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.5" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (97 samples, 0.10%)</title><rect x="40.5" y="163.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.5" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (97 samples, 0.10%)</title><rect x="40.5" y="147.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.5" y="158.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$116/962164773.getAsBoolean (97 samples, 0.10%)</title><rect x="40.5" y="131.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.5" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (97 samples, 0.10%)</title><rect x="40.5" y="115.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="43.5" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (97 samples, 0.10%)</title><rect x="40.5" y="99.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="43.5" y="110.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (97 samples, 0.10%)</title><rect x="40.5" y="83.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.5" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable$$Lambda$113/337678801.apply (97 samples, 0.10%)</title><rect x="40.5" y="67.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.lambda$iterator$0 (97 samples, 0.10%)</title><rect x="40.5" y="51.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.5" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (97 samples, 0.10%)</title><rect x="40.5" y="35.0" width="1.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="43.5" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (216 samples, 0.23%)</title><rect x="41.7" y="195.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.7" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (216 samples, 0.23%)</title><rect x="41.7" y="179.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.7" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (216 samples, 0.23%)</title><rect x="41.7" y="163.0" width="2.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="44.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (205 samples, 0.22%)</title><rect x="44.4" y="195.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="47.4" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (205 samples, 0.22%)</title><rect x="44.4" y="179.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.4" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (205 samples, 0.22%)</title><rect x="44.4" y="163.0" width="2.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="47.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/763265542.run (45,486 samples, 48.20%)</title><rect x="47.0" y="259.0" width="568.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.0" y="270.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/763265542.run</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$1 (45,486 samples, 48.20%)</title><rect x="47.0" y="243.0" width="568.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.0" y="254.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$1</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.process (45,486 samples, 48.20%)</title><rect x="47.0" y="227.0" width="568.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.0" y="238.0">ru/mail/polis/service/zvladn7/AsyncService.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1426899866.process (45,486 samples, 48.20%)</title><rect x="47.0" y="211.0" width="568.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="50.0" y="222.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1426899866.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$upsert$9 (45,486 samples, 48.20%)</title><rect x="47.0" y="195.0" width="568.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.0" y="206.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$upsert$9</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,761 samples, 3.99%)</title><rect x="47.0" y="179.0" width="47.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.0" y="190.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,761 samples, 3.99%)</title><rect x="47.0" y="163.0" width="47.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.0" y="174.0">java..</text>
</g>
<g>
<title>java/lang/StringCoding.decode (3,761 samples, 3.99%)</title><rect x="47.0" y="147.0" width="47.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.0" y="158.0">java..</text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (3,761 samples, 3.99%)</title><rect x="47.0" y="131.0" width="47.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.0" y="142.0">java..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,761 samples, 3.99%)</title><rect x="47.0" y="115.0" width="47.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.0" y="126.0">java..</text>
</g>
<g>
<title>byte[] (3,761 samples, 3.99%)</title><rect x="47.0" y="99.0" width="47.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="50.0" y="110.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,693 samples, 1.79%)</title><rect x="94.0" y="179.0" width="21.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="97.0" y="190.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,693 samples, 1.79%)</title><rect x="94.0" y="163.0" width="21.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.0" y="174.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$108/409150694.get$Lambda (1,693 samples, 1.79%)</title><rect x="94.0" y="147.0" width="21.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="97.0" y="158.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$108 (1,693 samples, 1.79%)</title><rect x="94.0" y="131.0" width="21.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="97.0" y="142.0">r..</text>
</g>
<g>
<title>one.nio.http.Response (1,662 samples, 1.76%)</title><rect x="115.2" y="179.0" width="20.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="118.2" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (8,815 samples, 9.34%)</title><rect x="136.0" y="179.0" width="110.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="139.0" y="190.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8,815 samples, 9.34%)</title><rect x="136.0" y="163.0" width="110.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.0" y="174.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6,047 samples, 6.41%)</title><rect x="136.0" y="147.0" width="75.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="139.0" y="158.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (6,047 samples, 6.41%)</title><rect x="136.0" y="131.0" width="75.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.0" y="142.0">one/nio/..</text>
</g>
<g>
<title>byte[] (6,038 samples, 6.40%)</title><rect x="136.0" y="115.0" width="75.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="139.0" y="126.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (2,768 samples, 2.93%)</title><rect x="211.6" y="147.0" width="34.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.6" y="158.0">on..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (2,768 samples, 2.93%)</title><rect x="211.6" y="131.0" width="34.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="214.6" y="142.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6,688 samples, 7.09%)</title><rect x="246.2" y="179.0" width="83.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.2" y="190.0">one/nio/h..</text>
</g>
<g>
<title>byte[] (2,736 samples, 2.90%)</title><rect x="246.2" y="163.0" width="34.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="249.2" y="174.0">by..</text>
</g>
<g>
<title>java.lang.String[] (2,231 samples, 2.36%)</title><rect x="280.4" y="163.0" width="27.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="283.4" y="174.0">j..</text>
</g>
<g>
<title>java.lang.String (1,721 samples, 1.82%)</title><rect x="308.3" y="163.0" width="21.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="311.3" y="174.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.upsert (13,444 samples, 14.25%)</title><rect x="329.9" y="179.0" width="168.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="332.9" y="190.0">ru/mail/polis/dao/zvla..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,653 samples, 1.75%)</title><rect x="329.9" y="163.0" width="20.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="332.9" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,653 samples, 1.75%)</title><rect x="329.9" y="147.0" width="20.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="332.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$104/1396512699.get$Lambda (1,653 samples, 1.75%)</title><rect x="329.9" y="131.0" width="20.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="332.9" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$104 (1,653 samples, 1.75%)</title><rect x="329.9" y="115.0" width="20.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="332.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.execute (11,791 samples, 12.50%)</title><rect x="350.5" y="163.0" width="147.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="353.5" y="174.0">ru/mail/polis/dao/z..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (525 samples, 0.56%)</title><rect x="350.5" y="147.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (525 samples, 0.56%)</title><rect x="350.5" y="131.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="353.5" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (525 samples, 0.56%)</title><rect x="350.5" y="115.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.5" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (427 samples, 0.45%)</title><rect x="350.5" y="99.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="353.5" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (427 samples, 0.45%)</title><rect x="350.5" y="83.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="353.5" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (247 samples, 0.26%)</title><rect x="350.5" y="67.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.5" y="78.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (247 samples, 0.26%)</title><rect x="350.5" y="51.0" width="3.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="353.5" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (180 samples, 0.19%)</title><rect x="353.6" y="67.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.6" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (180 samples, 0.19%)</title><rect x="353.6" y="51.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="356.6" y="62.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (180 samples, 0.19%)</title><rect x="353.6" y="35.0" width="2.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="356.6" y="46.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (69 samples, 0.07%)</title><rect x="355.9" y="99.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="358.9" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (69 samples, 0.07%)</title><rect x="355.9" y="83.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="358.9" y="94.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (69 samples, 0.07%)</title><rect x="355.9" y="67.0" width="0.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="358.9" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (29 samples, 0.03%)</title><rect x="356.7" y="99.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="359.7" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (26 samples, 0.03%)</title><rect x="356.7" y="83.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="359.7" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (26 samples, 0.03%)</title><rect x="356.7" y="67.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="359.7" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$104/1396512699.run (11,266 samples, 11.94%)</title><rect x="357.1" y="147.0" width="140.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.1" y="158.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$upsert$5 (11,266 samples, 11.94%)</title><rect x="357.1" y="131.0" width="140.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.1" y="142.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.upsert (11,266 samples, 11.94%)</title><rect x="357.1" y="115.0" width="140.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.1" y="126.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6,465 samples, 6.85%)</title><rect x="357.1" y="99.0" width="80.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="360.1" y="110.0">java/nio/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,465 samples, 6.85%)</title><rect x="357.1" y="83.0" width="80.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="360.1" y="94.0">java.nio...</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (613 samples, 0.65%)</title><rect x="437.9" y="99.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.9" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (613 samples, 0.65%)</title><rect x="437.9" y="83.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="440.9" y="94.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Index (208 samples, 0.22%)</title><rect x="437.9" y="67.0" width="2.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="440.9" y="78.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Node (404 samples, 0.43%)</title><rect x="440.5" y="67.0" width="5.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="443.5" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (1,681 samples, 1.78%)</title><rect x="445.6" y="99.0" width="21.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="448.6" y="110.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (2,507 samples, 2.66%)</title><rect x="466.6" y="99.0" width="31.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="469.6" y="110.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2,507 samples, 2.66%)</title><rect x="466.6" y="83.0" width="31.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="469.6" y="94.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2,507 samples, 2.66%)</title><rect x="466.6" y="67.0" width="31.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="469.6" y="78.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.wrapArray (3,206 samples, 3.40%)</title><rect x="498.1" y="179.0" width="40.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="501.1" y="190.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,206 samples, 3.40%)</title><rect x="498.1" y="163.0" width="40.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="501.1" y="174.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,206 samples, 3.40%)</title><rect x="498.1" y="147.0" width="40.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="501.1" y="158.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,206 samples, 3.40%)</title><rect x="498.1" y="131.0" width="40.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="501.1" y="142.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.wrapString (6,209 samples, 6.58%)</title><rect x="538.2" y="179.0" width="77.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="541.2" y="190.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,197 samples, 3.39%)</title><rect x="538.2" y="163.0" width="39.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="541.2" y="174.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,197 samples, 3.39%)</title><rect x="538.2" y="147.0" width="39.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="541.2" y="158.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,197 samples, 3.39%)</title><rect x="538.2" y="131.0" width="39.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="541.2" y="142.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.toBytes (3,012 samples, 3.19%)</title><rect x="578.1" y="163.0" width="37.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.1" y="174.0">ru/..</text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (3,012 samples, 3.19%)</title><rect x="578.1" y="147.0" width="37.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="581.1" y="158.0">one..</text>
</g>
<g>
<title>byte[] (3,012 samples, 3.19%)</title><rect x="578.1" y="131.0" width="37.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="581.1" y="142.0">byt..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (45,916 samples, 48.66%)</title><rect x="615.8" y="307.0" width="574.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="618.8" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,629 samples, 1.73%)</title><rect x="615.8" y="291.0" width="20.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="618.8" y="302.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,629 samples, 1.73%)</title><rect x="615.8" y="275.0" width="20.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="618.8" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (44,287 samples, 46.93%)</title><rect x="636.2" y="291.0" width="553.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.2" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (44,287 samples, 46.93%)</title><rect x="636.2" y="275.0" width="553.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="639.2" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (44,287 samples, 46.93%)</title><rect x="636.2" y="259.0" width="553.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="639.2" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9,340 samples, 9.90%)</title><rect x="636.2" y="243.0" width="116.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.2" y="254.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9,340 samples, 9.90%)</title><rect x="636.2" y="227.0" width="116.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="639.2" y="238.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (6,242 samples, 6.62%)</title><rect x="636.2" y="211.0" width="78.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="639.2" y="222.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (3,586 samples, 3.80%)</title><rect x="636.2" y="195.0" width="44.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="639.2" y="206.0">one/..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3,586 samples, 3.80%)</title><rect x="636.2" y="179.0" width="44.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="639.2" y="190.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (3,586 samples, 3.80%)</title><rect x="636.2" y="163.0" width="44.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="639.2" y="174.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,586 samples, 3.80%)</title><rect x="636.2" y="147.0" width="44.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.2" y="158.0">java..</text>
</g>
<g>
<title>java.lang.String (1,228 samples, 1.30%)</title><rect x="636.2" y="131.0" width="15.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="639.2" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,358 samples, 2.50%)</title><rect x="651.5" y="131.0" width="29.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="654.5" y="142.0">ja..</text>
</g>
<g>
<title>byte[] (2,358 samples, 2.50%)</title><rect x="651.5" y="115.0" width="29.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="654.5" y="126.0">by..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.upsert (2,656 samples, 2.81%)</title><rect x="681.0" y="195.0" width="33.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="684.0" y="206.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,776 samples, 1.88%)</title><rect x="681.0" y="179.0" width="22.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="684.0" y="190.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,776 samples, 1.88%)</title><rect x="681.0" y="163.0" width="22.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="684.0" y="174.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1426899866.get$Lambda (1,776 samples, 1.88%)</title><rect x="681.0" y="147.0" width="22.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="684.0" y="158.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$94 (1,776 samples, 1.88%)</title><rect x="681.0" y="131.0" width="22.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="684.0" y="142.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.processRequest (880 samples, 0.93%)</title><rect x="703.2" y="179.0" width="11.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="706.2" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (837 samples, 0.89%)</title><rect x="703.2" y="163.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="706.2" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (837 samples, 0.89%)</title><rect x="703.2" y="147.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="706.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$100/763265542.get$Lambda (837 samples, 0.89%)</title><rect x="703.2" y="131.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="706.2" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$100 (837 samples, 0.89%)</title><rect x="703.2" y="115.0" width="10.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="706.2" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (43 samples, 0.05%)</title><rect x="713.7" y="163.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (43 samples, 0.05%)</title><rect x="713.7" y="147.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="716.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (43 samples, 0.05%)</title><rect x="713.7" y="131.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="716.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (43 samples, 0.05%)</title><rect x="713.7" y="115.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="716.7" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (43 samples, 0.05%)</title><rect x="713.7" y="99.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.7" y="110.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (43 samples, 0.05%)</title><rect x="713.7" y="83.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="716.7" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3,098 samples, 3.28%)</title><rect x="714.2" y="211.0" width="38.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.2" y="222.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (3,098 samples, 3.28%)</title><rect x="714.2" y="195.0" width="38.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="717.2" y="206.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,098 samples, 3.28%)</title><rect x="714.2" y="179.0" width="38.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.2" y="190.0">jav..</text>
</g>
<g>
<title>java.lang.String (1,358 samples, 1.44%)</title><rect x="714.2" y="163.0" width="17.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="717.2" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,740 samples, 1.84%)</title><rect x="731.2" y="163.0" width="21.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="734.2" y="174.0">j..</text>
</g>
<g>
<title>byte[] (1,740 samples, 1.84%)</title><rect x="731.2" y="147.0" width="21.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="734.2" y="158.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16,967 samples, 17.98%)</title><rect x="753.0" y="243.0" width="212.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.0" y="254.0">one/nio/http/HttpSession.par..</text>
</g>
<g>
<title>one.nio.http.Request (2,327 samples, 2.47%)</title><rect x="753.0" y="227.0" width="29.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="756.0" y="238.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4,415 samples, 4.68%)</title><rect x="782.1" y="227.0" width="55.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="785.1" y="238.0">one/n..</text>
</g>
<g>
<title>java.lang.String[] (4,415 samples, 4.68%)</title><rect x="782.1" y="211.0" width="55.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="785.1" y="222.0">java...</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10,225 samples, 10.84%)</title><rect x="837.3" y="227.0" width="127.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="840.3" y="238.0">one/nio/util/Utf..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10,225 samples, 10.84%)</title><rect x="837.3" y="211.0" width="127.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="840.3" y="222.0">one/nio/util/Utf..</text>
</g>
<g>
<title>char[] (6,055 samples, 6.42%)</title><rect x="837.3" y="195.0" width="75.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="840.3" y="206.0">char[]</text>
</g>
<g>
<title>java.lang.String (1,164 samples, 1.23%)</title><rect x="913.1" y="195.0" width="14.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="916.1" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,000 samples, 3.18%)</title><rect x="927.6" y="195.0" width="37.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="930.6" y="206.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,000 samples, 3.18%)</title><rect x="927.6" y="179.0" width="37.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="930.6" y="190.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3,000 samples, 3.18%)</title><rect x="927.6" y="163.0" width="37.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="930.6" y="174.0">jav..</text>
</g>
<g>
<title>byte[] (3,000 samples, 3.18%)</title><rect x="927.6" y="147.0" width="37.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="930.6" y="158.0">byt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2,496 samples, 2.65%)</title><rect x="965.2" y="243.0" width="31.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="968.2" y="254.0">on..</text>
</g>
<g>
<title>byte[] (2,496 samples, 2.65%)</title><rect x="965.2" y="227.0" width="31.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="968.2" y="238.0">by..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2,633 samples, 2.79%)</title><rect x="996.4" y="243.0" width="32.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="999.4" y="254.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (2,633 samples, 2.79%)</title><rect x="996.4" y="227.0" width="32.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="999.4" y="238.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,633 samples, 2.79%)</title><rect x="996.4" y="211.0" width="32.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="999.4" y="222.0">ja..</text>
</g>
<g>
<title>java.lang.String (1,259 samples, 1.33%)</title><rect x="996.4" y="195.0" width="15.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="999.4" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,374 samples, 1.46%)</title><rect x="1012.1" y="195.0" width="17.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1015.1" y="206.0"></text>
</g>
<g>
<title>byte[] (1,374 samples, 1.46%)</title><rect x="1012.1" y="179.0" width="17.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1015.1" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12,851 samples, 13.62%)</title><rect x="1029.3" y="243.0" width="160.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1032.3" y="254.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (12,851 samples, 13.62%)</title><rect x="1029.3" y="227.0" width="160.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1032.3" y="238.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (6,076 samples, 6.44%)</title><rect x="1029.3" y="211.0" width="76.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1032.3" y="222.0">char[]</text>
</g>
<g>
<title>java.lang.String (2,595 samples, 2.75%)</title><rect x="1105.3" y="211.0" width="32.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1108.3" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,180 samples, 4.43%)</title><rect x="1137.7" y="211.0" width="52.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1140.7" y="222.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,180 samples, 4.43%)</title><rect x="1137.7" y="195.0" width="52.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1140.7" y="206.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4,180 samples, 4.43%)</title><rect x="1137.7" y="179.0" width="52.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1140.7" y="190.0">java/..</text>
</g>
<g>
<title>byte[] (4,180 samples, 4.43%)</title><rect x="1137.7" y="163.0" width="52.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1140.7" y="174.0">byte[]</text>
</g>
</g>
</svg>
