<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (2,819 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.14%)</title><rect x="10.0" y="915.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.11%)</title><rect x="10.0" y="899.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.11%)</title><rect x="10.0" y="883.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.04%)</title><rect x="10.0" y="867.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="10.0" y="851.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="10.0" y="835.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.07%)</title><rect x="10.4" y="867.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.4" y="878.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.04%)</title><rect x="10.4" y="851.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.4" y="862.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.04%)</title><rect x="10.8" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.8" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.04%)</title><rect x="11.3" y="899.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.3" y="910.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.04%)</title><rect x="11.7" y="915.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="14.7" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.04%)</title><rect x="11.7" y="899.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (271 samples, 9.61%)</title><rect x="12.1" y="915.0" width="113.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.1" y="926.0">java/lang/Thre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (271 samples, 9.61%)</title><rect x="12.1" y="899.0" width="113.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.1" y="910.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (271 samples, 9.61%)</title><rect x="12.1" y="883.0" width="113.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="894.0">java/util/conc..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$92/10546432.run (271 samples, 9.61%)</title><rect x="12.1" y="867.0" width="113.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.1" y="878.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$flush$9 (271 samples, 9.61%)</title><rect x="12.1" y="851.0" width="113.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.1" y="862.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.serialize (271 samples, 9.61%)</title><rect x="12.1" y="835.0" width="113.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.1" y="846.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.serialize (271 samples, 9.61%)</title><rect x="12.1" y="819.0" width="113.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="830.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (4 samples, 0.14%)</title><rect x="12.5" y="803.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.5" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (4 samples, 0.14%)</title><rect x="12.5" y="787.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.5" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (4 samples, 0.14%)</title><rect x="12.5" y="771.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.5" y="782.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (4 samples, 0.14%)</title><rect x="12.5" y="755.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.5" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$96/1217167551.getAsBoolean (3 samples, 0.11%)</title><rect x="12.9" y="739.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (3 samples, 0.11%)</title><rect x="12.9" y="723.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (3 samples, 0.11%)</title><rect x="12.9" y="707.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (3 samples, 0.11%)</title><rect x="12.9" y="691.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (3 samples, 0.11%)</title><rect x="12.9" y="675.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (3 samples, 0.11%)</title><rect x="12.9" y="659.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (3 samples, 0.11%)</title><rect x="12.9" y="643.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (266 samples, 9.44%)</title><rect x="14.2" y="803.0" width="111.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.2" y="814.0">sun/nio/ch/Fi..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.11%)</title><rect x="14.2" y="787.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.11%)</title><rect x="14.2" y="771.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.11%)</title><rect x="14.2" y="755.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (258 samples, 9.15%)</title><rect x="15.4" y="787.0" width="108.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="798.0">sun/nio/ch/IO..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.07%)</title><rect x="15.9" y="771.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.9" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.07%)</title><rect x="15.9" y="755.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.9" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.04%)</title><rect x="16.3" y="739.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.3" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.11%)</title><rect x="16.7" y="771.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.07%)</title><rect x="16.7" y="755.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.07%)</title><rect x="16.7" y="739.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.04%)</title><rect x="17.5" y="755.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.04%)</title><rect x="17.5" y="739.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.5" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (241 samples, 8.55%)</title><rect x="18.0" y="771.0" width="100.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.0" y="782.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (241 samples, 8.55%)</title><rect x="18.0" y="755.0" width="100.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.0" y="766.0">sun/nio/ch/F..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (241 samples, 8.55%)</title><rect x="18.0" y="739.0" width="100.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.0" y="750.0">sun/nio/ch/F..</text>
</g>
<g>
<title>[unknown] (235 samples, 8.34%)</title><rect x="19.2" y="723.0" width="98.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="22.2" y="734.0">[unknown]</text>
</g>
<g>
<title>__libc_write (234 samples, 8.30%)</title><rect x="19.2" y="707.0" width="98.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="22.2" y="718.0">__libc_write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (175 samples, 6.21%)</title><rect x="43.9" y="691.0" width="73.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="46.9" y="702.0">entry_SY..</text>
</g>
<g>
<title>__x64_sys_write (2 samples, 0.07%)</title><rect x="43.9" y="675.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="46.9" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (173 samples, 6.14%)</title><rect x="44.7" y="675.0" width="72.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="47.7" y="686.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_write (162 samples, 5.75%)</title><rect x="49.3" y="659.0" width="67.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="52.3" y="670.0">__x64_s..</text>
</g>
<g>
<title>ksys_write (162 samples, 5.75%)</title><rect x="49.3" y="643.0" width="67.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="52.3" y="654.0">ksys_wr..</text>
</g>
<g>
<title>__fdget_pos (4 samples, 0.14%)</title><rect x="49.3" y="627.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="52.3" y="638.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.14%)</title><rect x="49.3" y="611.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="52.3" y="622.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.14%)</title><rect x="49.3" y="595.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="52.3" y="606.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.04%)</title><rect x="51.0" y="627.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="54.0" y="638.0"></text>
</g>
<g>
<title>fput (1 samples, 0.04%)</title><rect x="51.4" y="627.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="54.4" y="638.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.04%)</title><rect x="51.4" y="611.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="54.4" y="622.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.04%)</title><rect x="51.9" y="627.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="54.9" y="638.0"></text>
</g>
<g>
<title>vfs_write (155 samples, 5.50%)</title><rect x="52.3" y="627.0" width="64.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="55.3" y="638.0">vfs_write</text>
</g>
<g>
<title>__fsnotify_parent (1 samples, 0.04%)</title><rect x="52.7" y="611.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="55.7" y="622.0"></text>
</g>
<g>
<title>__sb_start_write (2 samples, 0.07%)</title><rect x="53.1" y="611.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="56.1" y="622.0"></text>
</g>
<g>
<title>__vfs_write (144 samples, 5.11%)</title><rect x="54.0" y="611.0" width="60.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="57.0" y="622.0">__vfs_..</text>
</g>
<g>
<title>ext4_file_write_iter (2 samples, 0.07%)</title><rect x="54.0" y="595.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="57.0" y="606.0"></text>
</g>
<g>
<title>new_sync_write (142 samples, 5.04%)</title><rect x="54.8" y="595.0" width="59.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="57.8" y="606.0">new_sy..</text>
</g>
<g>
<title>ext4_file_write_iter (137 samples, 4.86%)</title><rect x="55.6" y="579.0" width="57.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="58.6" y="590.0">ext4_f..</text>
</g>
<g>
<title>__generic_file_write_iter (134 samples, 4.75%)</title><rect x="56.0" y="563.0" width="56.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="59.0" y="574.0">__gene..</text>
</g>
<g>
<title>ext4_da_write_begin (1 samples, 0.04%)</title><rect x="56.0" y="547.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="59.0" y="558.0"></text>
</g>
<g>
<title>ext4_da_write_end (2 samples, 0.07%)</title><rect x="56.5" y="547.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="59.5" y="558.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.04%)</title><rect x="57.3" y="547.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="60.3" y="558.0"></text>
</g>
<g>
<title>generic_perform_write (129 samples, 4.58%)</title><rect x="57.7" y="547.0" width="54.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="60.7" y="558.0">gener..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.04%)</title><rect x="58.1" y="531.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="61.1" y="542.0"></text>
</g>
<g>
<title>ext4_da_write_begin (29 samples, 1.03%)</title><rect x="58.6" y="531.0" width="12.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="61.6" y="542.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (17 samples, 0.60%)</title><rect x="60.2" y="515.0" width="7.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="63.2" y="526.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.04%)</title><rect x="60.6" y="499.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="63.6" y="510.0"></text>
</g>
<g>
<title>jbd2__journal_start (15 samples, 0.53%)</title><rect x="61.1" y="499.0" width="6.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="64.1" y="510.0"></text>
</g>
<g>
<title>kmem_cache_alloc (2 samples, 0.07%)</title><rect x="62.3" y="483.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="65.3" y="494.0"></text>
</g>
<g>
<title>memset_erms (2 samples, 0.07%)</title><rect x="63.2" y="483.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="66.2" y="494.0"></text>
</g>
<g>
<title>start_this_handle (8 samples, 0.28%)</title><rect x="64.0" y="483.0" width="3.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="67.0" y="494.0"></text>
</g>
<g>
<title>_raw_read_lock (1 samples, 0.04%)</title><rect x="66.1" y="467.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="69.1" y="478.0"></text>
</g>
<g>
<title>add_transaction_credits (2 samples, 0.07%)</title><rect x="66.5" y="467.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="69.5" y="478.0"></text>
</g>
<g>
<title>ext4_block_write_begin (1 samples, 0.04%)</title><rect x="67.3" y="515.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="70.3" y="526.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (6 samples, 0.21%)</title><rect x="67.8" y="515.0" width="2.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="70.8" y="526.0"></text>
</g>
<g>
<title>pagecache_get_page (5 samples, 0.18%)</title><rect x="68.2" y="499.0" width="2.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="71.2" y="510.0"></text>
</g>
<g>
<title>find_get_entry (2 samples, 0.07%)</title><rect x="69.4" y="483.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="72.4" y="494.0"></text>
</g>
<g>
<title>xas_load (2 samples, 0.07%)</title><rect x="69.4" y="467.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="72.4" y="478.0"></text>
</g>
<g>
<title>xas_start (1 samples, 0.04%)</title><rect x="69.9" y="451.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="72.9" y="462.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="70.3" y="515.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="73.3" y="526.0"></text>
</g>
<g>
<title>ext4_da_write_end (85 samples, 3.02%)</title><rect x="70.7" y="531.0" width="35.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="73.7" y="542.0">ext..</text>
</g>
<g>
<title>__ext4_journal_stop (11 samples, 0.39%)</title><rect x="71.5" y="515.0" width="4.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="74.5" y="526.0"></text>
</g>
<g>
<title>jbd2_journal_stop (10 samples, 0.35%)</title><rect x="72.0" y="499.0" width="4.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="75.0" y="510.0"></text>
</g>
<g>
<title>__wake_up (6 samples, 0.21%)</title><rect x="73.2" y="483.0" width="2.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="76.2" y="494.0"></text>
</g>
<g>
<title>__wake_up_common_lock (6 samples, 0.21%)</title><rect x="73.2" y="467.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="76.2" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4 samples, 0.14%)</title><rect x="74.0" y="451.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="77.0" y="462.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.04%)</title><rect x="75.7" y="483.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="78.7" y="494.0"></text>
</g>
<g>
<title>generic_write_end (72 samples, 2.55%)</title><rect x="76.1" y="515.0" width="30.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="79.1" y="526.0">ge..</text>
</g>
<g>
<title>__mark_inode_dirty (66 samples, 2.34%)</title><rect x="76.1" y="499.0" width="27.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="79.1" y="510.0">_..</text>
</g>
<g>
<title>__ext4_journal_stop (1 samples, 0.04%)</title><rect x="76.6" y="483.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="79.6" y="494.0"></text>
</g>
<g>
<title>ext4_dirty_inode (64 samples, 2.27%)</title><rect x="77.0" y="483.0" width="26.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="80.0" y="494.0">e..</text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.04%)</title><rect x="77.4" y="467.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="80.4" y="478.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.04%)</title><rect x="77.4" y="451.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="80.4" y="462.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="77.4" y="435.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="80.4" y="446.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="77.4" y="419.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="80.4" y="430.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (62 samples, 2.20%)</title><rect x="77.8" y="467.0" width="26.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="80.8" y="478.0">e..</text>
</g>
<g>
<title>ext4_mark_iloc_dirty (44 samples, 1.56%)</title><rect x="78.2" y="451.0" width="18.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="81.2" y="462.0"></text>
</g>
<g>
<title>__brelse (1 samples, 0.04%)</title><rect x="82.8" y="435.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="85.8" y="446.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (1 samples, 0.04%)</title><rect x="83.3" y="435.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="86.3" y="446.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.04%)</title><rect x="83.3" y="419.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="86.3" y="430.0"></text>
</g>
<g>
<title>_raw_spin_lock (3 samples, 0.11%)</title><rect x="83.7" y="435.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="86.7" y="446.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (26 samples, 0.92%)</title><rect x="84.9" y="435.0" width="10.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="87.9" y="446.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.04%)</title><rect x="84.9" y="419.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="87.9" y="430.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.63 (25 samples, 0.89%)</title><rect x="85.3" y="419.0" width="10.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="88.3" y="430.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (7 samples, 0.25%)</title><rect x="86.2" y="403.0" width="2.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="89.2" y="414.0"></text>
</g>
<g>
<title>crypto_shash_update (16 samples, 0.57%)</title><rect x="89.1" y="403.0" width="6.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="92.1" y="414.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (13 samples, 0.46%)</title><rect x="90.4" y="387.0" width="5.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="93.4" y="398.0"></text>
</g>
<g>
<title>from_kuid (2 samples, 0.07%)</title><rect x="95.8" y="435.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="98.8" y="446.0"></text>
</g>
<g>
<title>map_id_up (2 samples, 0.07%)</title><rect x="95.8" y="419.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="98.8" y="430.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (17 samples, 0.60%)</title><rect x="96.6" y="451.0" width="7.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="99.6" y="462.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (14 samples, 0.50%)</title><rect x="96.6" y="435.0" width="5.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="99.6" y="446.0"></text>
</g>
<g>
<title>__find_get_block (1 samples, 0.04%)</title><rect x="99.6" y="419.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="102.6" y="430.0"></text>
</g>
<g>
<title>__getblk_gfp (2 samples, 0.07%)</title><rect x="100.0" y="419.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="103.0" y="430.0"></text>
</g>
<g>
<title>__find_get_block (2 samples, 0.07%)</title><rect x="100.0" y="403.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="103.0" y="414.0"></text>
</g>
<g>
<title>mark_page_accessed (1 samples, 0.04%)</title><rect x="100.4" y="387.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="103.4" y="398.0"></text>
</g>
<g>
<title>ext4_get_group_desc (4 samples, 0.14%)</title><rect x="100.8" y="419.0" width="1.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="103.8" y="430.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (3 samples, 0.11%)</title><rect x="102.5" y="435.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="105.5" y="446.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (2 samples, 0.07%)</title><rect x="102.5" y="419.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="105.5" y="430.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (2 samples, 0.07%)</title><rect x="102.5" y="403.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="105.5" y="414.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="103.3" y="419.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="106.3" y="430.0"></text>
</g>
<g>
<title>block_write_end (5 samples, 0.18%)</title><rect x="103.8" y="499.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="106.8" y="510.0"></text>
</g>
<g>
<title>__block_commit_write.isra.41 (4 samples, 0.14%)</title><rect x="104.2" y="483.0" width="1.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="107.2" y="494.0"></text>
</g>
<g>
<title>mark_buffer_dirty (2 samples, 0.07%)</title><rect x="105.0" y="467.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="108.0" y="478.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.04%)</title><rect x="105.9" y="499.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="108.9" y="510.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.04%)</title><rect x="106.3" y="531.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="109.3" y="542.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (7 samples, 0.25%)</title><rect x="106.7" y="531.0" width="2.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="109.7" y="542.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.07%)</title><rect x="107.1" y="515.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="110.1" y="526.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (3 samples, 0.11%)</title><rect x="107.9" y="515.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="110.9" y="526.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.04%)</title><rect x="109.2" y="515.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="112.2" y="526.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (5 samples, 0.18%)</title><rect x="109.6" y="531.0" width="2.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="112.6" y="542.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (1 samples, 0.04%)</title><rect x="111.7" y="547.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="114.7" y="558.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.04%)</title><rect x="112.1" y="563.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="115.1" y="574.0"></text>
</g>
<g>
<title>generic_perform_write (1 samples, 0.04%)</title><rect x="112.6" y="563.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="115.6" y="574.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.04%)</title><rect x="113.0" y="579.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="116.0" y="590.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.04%)</title><rect x="113.4" y="579.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="116.4" y="590.0"></text>
</g>
<g>
<title>up_write (1 samples, 0.04%)</title><rect x="113.8" y="579.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="116.8" y="590.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="114.2" y="611.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="117.2" y="622.0"></text>
</g>
<g>
<title>rw_verify_area (6 samples, 0.21%)</title><rect x="114.6" y="611.0" width="2.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="117.6" y="622.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.04%)</title><rect x="114.6" y="595.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="117.6" y="606.0"></text>
</g>
<g>
<title>security_file_permission (5 samples, 0.18%)</title><rect x="115.1" y="595.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="118.1" y="606.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.04%)</title><rect x="115.1" y="579.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="118.1" y="590.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.04%)</title><rect x="115.1" y="563.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="118.1" y="574.0"></text>
</g>
<g>
<title>selinux_file_permission (4 samples, 0.14%)</title><rect x="115.5" y="579.0" width="1.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="118.5" y="590.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.04%)</title><rect x="117.2" y="707.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="120.2" y="718.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.11%)</title><rect x="117.6" y="723.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="120.6" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.32%)</title><rect x="118.8" y="771.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="121.3" y="755.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="121.3" y="739.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.04%)</title><rect x="121.3" y="723.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.3" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="121.8" y="755.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.8" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.removeFirst (1 samples, 0.04%)</title><rect x="122.2" y="755.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="125.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.07%)</title><rect x="122.6" y="771.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="123.0" y="755.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="126.0" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="123.0" y="739.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="126.0" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (5 samples, 0.18%)</title><rect x="123.4" y="787.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="126.4" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="125.1" y="771.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="128.1" y="782.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,390 samples, 84.78%)</title><rect x="125.5" y="915.0" width="1000.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.5" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.11%)</title><rect x="131.4" y="899.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.4" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (2 samples, 0.07%)</title><rect x="132.6" y="899.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.6" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (358 samples, 12.70%)</title><rect x="133.5" y="899.0" width="149.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.5" y="910.0">one/nio/net/NativeS..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (352 samples, 12.49%)</title><rect x="136.0" y="883.0" width="147.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.0" y="894.0">one/nio/net/NativeS..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.04%)</title><rect x="140.2" y="867.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="143.2" y="878.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.04%)</title><rect x="140.2" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="143.2" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="140.2" y="835.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="143.2" y="846.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.04%)</title><rect x="140.2" y="819.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="143.2" y="830.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.04%)</title><rect x="140.6" y="867.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="143.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (330 samples, 11.71%)</title><rect x="141.0" y="867.0" width="138.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="144.0" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (4 samples, 0.14%)</title><rect x="141.0" y="851.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="144.0" y="862.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.14%)</title><rect x="141.0" y="835.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="144.0" y="846.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.04%)</title><rect x="142.7" y="851.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="145.7" y="862.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.11%)</title><rect x="143.1" y="851.0" width="1.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="146.1" y="862.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.11%)</title><rect x="144.4" y="851.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="147.4" y="862.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.11%)</title><rect x="144.4" y="835.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="147.4" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="145.2" y="819.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="148.2" y="830.0"></text>
</g>
<g>
<title>epoll_wait (319 samples, 11.32%)</title><rect x="145.6" y="851.0" width="133.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="148.6" y="862.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (252 samples, 8.94%)</title><rect x="173.7" y="835.0" width="105.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="176.7" y="846.0">entry_SYSCALL..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (3 samples, 0.11%)</title><rect x="173.7" y="819.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="176.7" y="830.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="174.9" y="819.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="177.9" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (248 samples, 8.80%)</title><rect x="175.3" y="819.0" width="103.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="178.3" y="830.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_epoll_wait (233 samples, 8.27%)</title><rect x="181.2" y="803.0" width="97.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="184.2" y="814.0">__x64_sys_e..</text>
</g>
<g>
<title>do_epoll_wait (232 samples, 8.23%)</title><rect x="181.2" y="787.0" width="97.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="184.2" y="798.0">do_epoll_wait</text>
</g>
<g>
<title>__fdget (9 samples, 0.32%)</title><rect x="181.6" y="771.0" width="3.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="184.6" y="782.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.32%)</title><rect x="181.6" y="755.0" width="3.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="184.6" y="766.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.25%)</title><rect x="182.5" y="739.0" width="2.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="185.5" y="750.0"></text>
</g>
<g>
<title>_raw_spin_lock_irq (1 samples, 0.04%)</title><rect x="185.4" y="771.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="188.4" y="782.0"></text>
</g>
<g>
<title>ep_poll (216 samples, 7.66%)</title><rect x="185.8" y="771.0" width="90.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="188.8" y="782.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (133 samples, 4.72%)</title><rect x="201.3" y="755.0" width="55.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="204.3" y="766.0">ep_sc..</text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.04%)</title><rect x="208.4" y="739.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="211.4" y="750.0"></text>
</g>
<g>
<title>ep_send_events_proc (100 samples, 3.55%)</title><rect x="208.8" y="739.0" width="41.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="211.8" y="750.0">ep_..</text>
</g>
<g>
<title>ep_item_poll.isra.16 (70 samples, 2.48%)</title><rect x="218.9" y="723.0" width="29.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="221.9" y="734.0">ep..</text>
</g>
<g>
<title>sock_poll (57 samples, 2.02%)</title><rect x="223.9" y="707.0" width="23.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="226.9" y="718.0">s..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="233.5" y="691.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="236.5" y="702.0"></text>
</g>
<g>
<title>tcp_poll (21 samples, 0.74%)</title><rect x="233.9" y="691.0" width="8.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="236.9" y="702.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.14%)</title><rect x="241.1" y="675.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="244.1" y="686.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (12 samples, 0.43%)</title><rect x="242.7" y="691.0" width="5.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="245.7" y="702.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.04%)</title><rect x="247.8" y="707.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="250.8" y="718.0"></text>
</g>
<g>
<title>sock_poll (6 samples, 0.21%)</title><rect x="248.2" y="723.0" width="2.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="251.2" y="734.0"></text>
</g>
<g>
<title>mutex_lock (13 samples, 0.46%)</title><rect x="250.7" y="739.0" width="5.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="253.7" y="750.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.07%)</title><rect x="255.3" y="723.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="258.3" y="734.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.07%)</title><rect x="255.3" y="707.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="258.3" y="718.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.07%)</title><rect x="256.1" y="739.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="259.1" y="750.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.07%)</title><rect x="257.0" y="755.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="260.0" y="766.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.07%)</title><rect x="257.8" y="755.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="260.8" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (39 samples, 1.38%)</title><rect x="258.6" y="755.0" width="16.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="261.6" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (39 samples, 1.38%)</title><rect x="258.6" y="739.0" width="16.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="261.6" y="750.0"></text>
</g>
<g>
<title>schedule (29 samples, 1.03%)</title><rect x="262.8" y="723.0" width="12.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="265.8" y="734.0"></text>
</g>
<g>
<title>__sched_text_start (26 samples, 0.92%)</title><rect x="264.1" y="707.0" width="10.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="267.1" y="718.0"></text>
</g>
<g>
<title>finish_task_switch (18 samples, 0.64%)</title><rect x="267.4" y="691.0" width="7.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="270.4" y="702.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (3 samples, 0.11%)</title><rect x="275.0" y="755.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="278.0" y="766.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (2 samples, 0.07%)</title><rect x="276.2" y="771.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="279.2" y="782.0"></text>
</g>
<g>
<title>fput (3 samples, 0.11%)</title><rect x="277.1" y="771.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="280.1" y="782.0"></text>
</g>
<g>
<title>fput_many (3 samples, 0.11%)</title><rect x="277.1" y="755.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="280.1" y="766.0"></text>
</g>
<g>
<title>fput (1 samples, 0.04%)</title><rect x="278.3" y="787.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="281.3" y="798.0"></text>
</g>
<g>
<title>do_epoll_wait (1 samples, 0.04%)</title><rect x="278.7" y="803.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="281.7" y="814.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.14%)</title><rect x="279.2" y="867.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="282.2" y="878.0"></text>
</g>
<g>
<title>clock_gettime@plt (3 samples, 0.11%)</title><rect x="280.8" y="867.0" width="1.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="283.8" y="878.0"></text>
</g>
<g>
<title>epoll_wait (3 samples, 0.11%)</title><rect x="282.1" y="867.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="285.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,012 samples, 71.37%)</title><rect x="283.3" y="899.0" width="842.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.3" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,006 samples, 71.16%)</title><rect x="285.8" y="883.0" width="839.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.8" y="894.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,704 samples, 60.45%)</title><rect x="285.8" y="867.0" width="713.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.8" y="878.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,510 samples, 53.57%)</title><rect x="301.3" y="851.0" width="632.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="304.3" y="862.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,502 samples, 53.28%)</title><rect x="301.8" y="835.0" width="628.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.8" y="846.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (1,472 samples, 52.22%)</title><rect x="309.3" y="819.0" width="616.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.3" y="830.0">RequestHandler3_upsert.handleRequest</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="310.1" y="803.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="313.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,036 samples, 36.75%)</title><rect x="310.5" y="803.0" width="433.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.5" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (11 samples, 0.39%)</title><rect x="316.4" y="787.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.39%)</title><rect x="316.4" y="771.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.39%)</title><rect x="316.4" y="755.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.4" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.18%)</title><rect x="318.9" y="739.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="321.9" y="750.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.18%)</title><rect x="318.9" y="723.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="321.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.11%)</title><rect x="319.8" y="707.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="322.8" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (998 samples, 35.40%)</title><rect x="321.0" y="787.0" width="417.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.0" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (58 samples, 2.06%)</title><rect x="321.0" y="771.0" width="24.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.0" y="782.0">o..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.11%)</title><rect x="342.4" y="755.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="345.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (4 samples, 0.14%)</title><rect x="343.6" y="755.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.14%)</title><rect x="343.6" y="739.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="346.6" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.11%)</title><rect x="344.0" y="723.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="347.0" y="734.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="344.0" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="347.0" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="344.5" y="707.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="347.5" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="344.5" y="691.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="347.5" y="702.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.04%)</title><rect x="344.5" y="675.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="347.5" y="686.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.04%)</title><rect x="344.9" y="691.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="347.9" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (940 samples, 33.35%)</title><rect x="345.3" y="771.0" width="393.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="348.3" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="345.3" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="348.3" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="345.3" y="739.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="348.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="345.3" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="348.3" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="345.3" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="348.3" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="345.3" y="691.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="348.3" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="345.3" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="348.3" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="345.3" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="348.3" y="670.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.04%)</title><rect x="345.3" y="643.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="348.3" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.04%)</title><rect x="345.3" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="348.3" y="638.0"></text>
</g>
<g>
<title>HeapRegion::report_region_type_change(G1HeapRegionTraceType::Type) (1 samples, 0.04%)</title><rect x="345.3" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="348.3" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (939 samples, 33.31%)</title><rect x="345.7" y="755.0" width="393.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="348.7" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.07%)</title><rect x="347.8" y="739.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.8" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (932 samples, 33.06%)</title><rect x="348.6" y="739.0" width="390.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.6" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (932 samples, 33.06%)</title><rect x="348.6" y="723.0" width="390.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="351.6" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (21 samples, 0.74%)</title><rect x="350.3" y="707.0" width="8.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="353.3" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="352.4" y="691.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="355.4" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.07%)</title><rect x="352.8" y="691.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="355.8" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (1 samples, 0.04%)</title><rect x="353.7" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="356.7" y="702.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.11%)</title><rect x="354.1" y="691.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="357.1" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.32%)</title><rect x="355.3" y="691.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="358.3" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.11%)</title><rect x="356.6" y="675.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="359.6" y="686.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="357.4" y="659.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="360.4" y="670.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="357.4" y="643.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="360.4" y="654.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="357.4" y="627.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="360.4" y="638.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="357.4" y="611.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="360.4" y="622.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="357.4" y="595.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="360.4" y="606.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.04%)</title><rect x="357.4" y="579.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="360.4" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.04%)</title><rect x="357.4" y="563.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="360.4" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (3 samples, 0.11%)</title><rect x="357.8" y="675.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="360.8" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.14%)</title><rect x="359.1" y="707.0" width="1.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="362.1" y="718.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.11%)</title><rect x="360.8" y="707.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="363.8" y="718.0"></text>
</g>
<g>
<title>__send (899 samples, 31.89%)</title><rect x="362.0" y="707.0" width="376.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="365.0" y="718.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (824 samples, 29.23%)</title><rect x="393.4" y="691.0" width="344.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="396.4" y="702.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (4 samples, 0.14%)</title><rect x="393.4" y="675.0" width="1.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="396.4" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (820 samples, 29.09%)</title><rect x="395.1" y="675.0" width="343.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="398.1" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__sys_sendto (1 samples, 0.04%)</title><rect x="403.9" y="659.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="406.9" y="670.0"></text>
</g>
<g>
<title>__x64_sys_sendto (798 samples, 28.31%)</title><rect x="404.3" y="659.0" width="334.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="407.3" y="670.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (797 samples, 28.27%)</title><rect x="404.7" y="643.0" width="333.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="407.7" y="654.0">__sys_sendto</text>
</g>
<g>
<title>fput (3 samples, 0.11%)</title><rect x="406.0" y="627.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="409.0" y="638.0"></text>
</g>
<g>
<title>fput_many (3 samples, 0.11%)</title><rect x="406.0" y="611.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="409.0" y="622.0"></text>
</g>
<g>
<title>inet6_sendmsg (1 samples, 0.04%)</title><rect x="407.2" y="627.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="410.2" y="638.0"></text>
</g>
<g>
<title>sock_sendmsg (780 samples, 27.67%)</title><rect x="407.7" y="627.0" width="326.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="410.7" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.04%)</title><rect x="408.1" y="611.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="411.1" y="622.0"></text>
</g>
<g>
<title>inet6_sendmsg (753 samples, 26.71%)</title><rect x="408.5" y="611.0" width="315.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="411.5" y="622.0">inet6_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.04%)</title><rect x="409.8" y="595.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="412.8" y="606.0"></text>
</g>
<g>
<title>release_sock (6 samples, 0.21%)</title><rect x="410.2" y="595.0" width="2.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="413.2" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg (741 samples, 26.29%)</title><rect x="412.7" y="595.0" width="310.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="415.7" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.04%)</title><rect x="412.7" y="579.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="415.7" y="590.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="413.1" y="579.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="416.1" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.04%)</title><rect x="413.5" y="579.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="416.5" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.04%)</title><rect x="413.9" y="579.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="416.9" y="590.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.07%)</title><rect x="414.4" y="579.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="417.4" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.07%)</title><rect x="414.4" y="563.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="417.4" y="574.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.11%)</title><rect x="415.2" y="579.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="418.2" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.04%)</title><rect x="415.6" y="563.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="418.6" y="574.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.04%)</title><rect x="416.0" y="563.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="419.0" y="574.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="416.0" y="547.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="419.0" y="558.0"></text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.04%)</title><rect x="416.4" y="579.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="419.4" y="590.0"></text>
</g>
<g>
<title>sock_zerocopy_put (2 samples, 0.07%)</title><rect x="416.9" y="579.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="419.9" y="590.0"></text>
</g>
<g>
<title>tcp_push (1 samples, 0.04%)</title><rect x="417.7" y="579.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="420.7" y="590.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.07%)</title><rect x="418.1" y="579.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="421.1" y="590.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.07%)</title><rect x="419.0" y="579.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="422.0" y="590.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.04%)</title><rect x="419.8" y="579.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="422.8" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (721 samples, 25.58%)</title><rect x="420.2" y="579.0" width="301.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="423.2" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (3 samples, 0.11%)</title><rect x="429.0" y="563.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="432.0" y="574.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.04%)</title><rect x="429.8" y="547.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="432.8" y="558.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.04%)</title><rect x="430.3" y="563.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="433.3" y="574.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.07%)</title><rect x="430.7" y="563.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="433.7" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (11 samples, 0.39%)</title><rect x="431.5" y="563.0" width="4.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="434.5" y="574.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (8 samples, 0.28%)</title><rect x="432.4" y="547.0" width="3.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="435.4" y="558.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.04%)</title><rect x="435.7" y="547.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="438.7" y="558.0"></text>
</g>
<g>
<title>sk_page_frag_refill (4 samples, 0.14%)</title><rect x="436.1" y="563.0" width="1.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="439.1" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (3 samples, 0.11%)</title><rect x="436.5" y="547.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="439.5" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (45 samples, 1.60%)</title><rect x="437.8" y="563.0" width="18.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="440.8" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (41 samples, 1.45%)</title><rect x="439.1" y="547.0" width="17.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="442.1" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.56 (20 samples, 0.71%)</title><rect x="442.0" y="531.0" width="8.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="445.0" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (17 samples, 0.60%)</title><rect x="442.0" y="515.0" width="7.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="445.0" y="526.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.07%)</title><rect x="447.8" y="499.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="450.8" y="510.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="448.3" y="483.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="451.3" y="494.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.04%)</title><rect x="448.7" y="499.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="451.7" y="510.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="449.1" y="515.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="452.1" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (2 samples, 0.07%)</title><rect x="449.5" y="515.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="452.5" y="526.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.04%)</title><rect x="450.4" y="531.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="453.4" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.04%)</title><rect x="450.8" y="531.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="453.8" y="542.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="451.2" y="531.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="454.2" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (6 samples, 0.21%)</title><rect x="451.6" y="531.0" width="2.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="454.6" y="542.0"></text>
</g>
<g>
<title>ksize (5 samples, 0.18%)</title><rect x="454.1" y="531.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="457.1" y="542.0"></text>
</g>
<g>
<title>__ksize (5 samples, 0.18%)</title><rect x="454.1" y="515.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="457.1" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.56 (1 samples, 0.04%)</title><rect x="456.2" y="547.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="459.2" y="558.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.07%)</title><rect x="456.6" y="563.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="459.6" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.04%)</title><rect x="457.5" y="563.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="460.5" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (2 samples, 0.07%)</title><rect x="457.9" y="563.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="460.9" y="574.0"></text>
</g>
<g>
<title>tcp_push (618 samples, 21.92%)</title><rect x="458.7" y="563.0" width="258.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="461.7" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (614 samples, 21.78%)</title><rect x="458.7" y="547.0" width="257.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="461.7" y="558.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>ktime_get (1 samples, 0.04%)</title><rect x="458.7" y="531.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="461.7" y="542.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.34 (1 samples, 0.04%)</title><rect x="459.1" y="531.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="462.1" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (612 samples, 21.71%)</title><rect x="459.6" y="531.0" width="256.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="462.6" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.04%)</title><rect x="465.4" y="515.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="468.4" y="526.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (562 samples, 19.94%)</title><rect x="465.8" y="515.0" width="235.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="468.8" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (1 samples, 0.04%)</title><rect x="478.4" y="499.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="481.4" y="510.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.04%)</title><rect x="478.8" y="499.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="481.8" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.04%)</title><rect x="479.2" y="499.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="482.2" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (520 samples, 18.45%)</title><rect x="479.7" y="499.0" width="217.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="482.7" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (517 samples, 18.34%)</title><rect x="479.7" y="483.0" width="216.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="482.7" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>__ip_local_out (3 samples, 0.11%)</title><rect x="482.6" y="467.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="485.6" y="478.0"></text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.04%)</title><rect x="483.8" y="467.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="486.8" y="478.0"></text>
</g>
<g>
<title>ip_local_out (496 samples, 17.59%)</title><rect x="484.3" y="467.0" width="207.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="487.3" y="478.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (8 samples, 0.28%)</title><rect x="484.7" y="451.0" width="3.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="487.7" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (4 samples, 0.14%)</title><rect x="485.9" y="435.0" width="1.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="488.9" y="446.0"></text>
</g>
<g>
<title>netlbl_enabled (2 samples, 0.07%)</title><rect x="486.8" y="419.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="489.8" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_output (1 samples, 0.04%)</title><rect x="487.6" y="435.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="490.6" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.04%)</title><rect x="488.0" y="451.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="491.0" y="462.0"></text>
</g>
<g>
<title>ip_output (480 samples, 17.03%)</title><rect x="488.4" y="451.0" width="201.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="491.4" y="462.0">ip_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.04%)</title><rect x="490.5" y="435.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="493.5" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (448 samples, 15.89%)</title><rect x="491.0" y="435.0" width="187.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="494.0" y="446.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (5 samples, 0.18%)</title><rect x="491.0" y="419.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="494.0" y="430.0"></text>
</g>
<g>
<title>__ip_finish_output (438 samples, 15.54%)</title><rect x="493.1" y="419.0" width="183.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="496.1" y="430.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (433 samples, 15.36%)</title><rect x="494.7" y="403.0" width="181.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="497.7" y="414.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (362 samples, 12.84%)</title><rect x="502.7" y="387.0" width="151.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="505.7" y="398.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.20 (357 samples, 12.66%)</title><rect x="504.8" y="371.0" width="149.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="507.8" y="382.0">do_softirq.part.20</text>
</g>
<g>
<title>do_softirq_own_stack (351 samples, 12.45%)</title><rect x="507.3" y="355.0" width="146.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="510.3" y="366.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (349 samples, 12.38%)</title><rect x="507.3" y="339.0" width="146.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="510.3" y="350.0">__softirqentry_tex..</text>
</g>
<g>
<title>__kfree_skb_flush (3 samples, 0.11%)</title><rect x="511.5" y="323.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="514.5" y="334.0"></text>
</g>
<g>
<title>net_rx_action (332 samples, 11.78%)</title><rect x="512.7" y="323.0" width="139.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="515.7" y="334.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.04%)</title><rect x="514.4" y="307.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="517.4" y="318.0"></text>
</g>
<g>
<title>process_backlog (327 samples, 11.60%)</title><rect x="514.8" y="307.0" width="136.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="517.8" y="318.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (327 samples, 11.60%)</title><rect x="514.8" y="291.0" width="136.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="517.8" y="302.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.04%)</title><rect x="515.2" y="275.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="518.2" y="286.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (325 samples, 11.53%)</title><rect x="515.7" y="275.0" width="136.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="518.7" y="286.0">__netif_receive_s..</text>
</g>
<g>
<title>__netif_receive_skb_core (8 samples, 0.28%)</title><rect x="516.5" y="259.0" width="3.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="519.5" y="270.0"></text>
</g>
<g>
<title>ip_rcv (315 samples, 11.17%)</title><rect x="519.8" y="259.0" width="131.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="522.8" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (4 samples, 0.14%)</title><rect x="522.4" y="243.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="525.4" y="254.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.20 (8 samples, 0.28%)</title><rect x="524.0" y="243.0" width="3.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="527.0" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (296 samples, 10.50%)</title><rect x="527.4" y="243.0" width="123.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="530.4" y="254.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (289 samples, 10.25%)</title><rect x="528.6" y="227.0" width="121.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="531.6" y="238.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (284 samples, 10.07%)</title><rect x="529.9" y="211.0" width="118.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="532.9" y="222.0">ip_local_deliv..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (283 samples, 10.04%)</title><rect x="530.3" y="195.0" width="118.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="533.3" y="206.0">ip_protocol_de..</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.07%)</title><rect x="531.6" y="179.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="534.6" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (2 samples, 0.07%)</title><rect x="532.4" y="179.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="535.4" y="190.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (3 samples, 0.11%)</title><rect x="533.2" y="179.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="536.2" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (273 samples, 9.68%)</title><rect x="534.5" y="179.0" width="114.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="537.5" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (15 samples, 0.53%)</title><rect x="541.2" y="163.0" width="6.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="544.2" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (3 samples, 0.11%)</title><rect x="546.2" y="147.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="549.2" y="158.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.07%)</title><rect x="547.5" y="163.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="550.5" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.04%)</title><rect x="548.3" y="163.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="551.3" y="174.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.11%)</title><rect x="548.7" y="163.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="551.7" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (37 samples, 1.31%)</title><rect x="550.0" y="163.0" width="15.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="553.0" y="174.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.14%)</title><rect x="551.2" y="147.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="554.2" y="158.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="552.9" y="147.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="555.9" y="158.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (24 samples, 0.85%)</title><rect x="553.3" y="147.0" width="10.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="556.3" y="158.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (21 samples, 0.74%)</title><rect x="554.6" y="131.0" width="8.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="557.6" y="142.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (1 samples, 0.04%)</title><rect x="556.3" y="115.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="559.3" y="126.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.64 (1 samples, 0.04%)</title><rect x="556.7" y="115.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="559.7" y="126.0"></text>
</g>
<g>
<title>selinux_sock_rcv_skb_compat (14 samples, 0.50%)</title><rect x="557.1" y="115.0" width="5.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="560.1" y="126.0"></text>
</g>
<g>
<title>avc_has_perm (1 samples, 0.04%)</title><rect x="558.4" y="99.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="561.4" y="110.0"></text>
</g>
<g>
<title>netlbl_enabled (2 samples, 0.07%)</title><rect x="558.8" y="99.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="561.8" y="110.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (1 samples, 0.04%)</title><rect x="559.6" y="99.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="562.6" y="110.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.64 (5 samples, 0.18%)</title><rect x="560.0" y="99.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="563.0" y="110.0"></text>
</g>
<g>
<title>selinux_xfrm_sock_rcv_skb (2 samples, 0.07%)</title><rect x="562.1" y="99.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="565.1" y="110.0"></text>
</g>
<g>
<title>avc_has_perm (2 samples, 0.07%)</title><rect x="562.1" y="83.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="565.1" y="94.0"></text>
</g>
<g>
<title>selinux_xfrm_sock_rcv_skb (1 samples, 0.04%)</title><rect x="563.0" y="115.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="566.0" y="126.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (5 samples, 0.18%)</title><rect x="563.4" y="147.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="566.4" y="158.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (196 samples, 6.95%)</title><rect x="565.5" y="163.0" width="82.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="568.5" y="174.0">tcp_v4_do..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="565.9" y="147.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="568.9" y="158.0"></text>
</g>
<g>
<title>ktime_get_seconds (2 samples, 0.07%)</title><rect x="566.3" y="147.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="569.3" y="158.0"></text>
</g>
<g>
<title>sock_def_readable (4 samples, 0.14%)</title><rect x="567.1" y="147.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="570.1" y="158.0"></text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.04%)</title><rect x="568.8" y="147.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="571.8" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (187 samples, 6.63%)</title><rect x="569.2" y="147.0" width="78.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="572.2" y="158.0">tcp_rcv_e..</text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.07%)</title><rect x="571.3" y="131.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="574.3" y="142.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (6 samples, 0.21%)</title><rect x="572.2" y="131.0" width="2.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="575.2" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.04%)</title><rect x="573.0" y="115.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="576.0" y="126.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.11%)</title><rect x="573.4" y="115.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="576.4" y="126.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.04%)</title><rect x="573.4" y="99.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="576.4" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.07%)</title><rect x="573.8" y="99.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="576.8" y="110.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.07%)</title><rect x="573.8" y="83.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="576.8" y="94.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.04%)</title><rect x="574.3" y="67.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="577.3" y="78.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.07%)</title><rect x="574.7" y="131.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="577.7" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.07%)</title><rect x="575.5" y="131.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="578.5" y="142.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.04%)</title><rect x="576.3" y="131.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="579.3" y="142.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.04%)</title><rect x="576.8" y="131.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="579.8" y="142.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.04%)</title><rect x="577.2" y="131.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="580.2" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (71 samples, 2.52%)</title><rect x="577.6" y="131.0" width="29.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="580.6" y="142.0">so..</text>
</g>
<g>
<title>__wake_up_common_lock (4 samples, 0.14%)</title><rect x="577.6" y="115.0" width="1.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="580.6" y="126.0"></text>
</g>
<g>
<title>__wake_up_sync_key (67 samples, 2.38%)</title><rect x="579.3" y="115.0" width="28.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="582.3" y="126.0">__..</text>
</g>
<g>
<title>__wake_up_common_lock (65 samples, 2.31%)</title><rect x="579.7" y="99.0" width="27.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="582.7" y="110.0">_..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (62 samples, 2.20%)</title><rect x="581.0" y="83.0" width="25.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="584.0" y="94.0">_..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.04%)</title><rect x="606.9" y="99.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="609.9" y="110.0"></text>
</g>
<g>
<title>tcp_ack (66 samples, 2.34%)</title><rect x="607.3" y="131.0" width="27.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="610.3" y="142.0">t..</text>
</g>
<g>
<title>__kfree_skb (29 samples, 1.03%)</title><rect x="616.1" y="115.0" width="12.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="619.1" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (9 samples, 0.32%)</title><rect x="616.1" y="99.0" width="3.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="619.1" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (9 samples, 0.32%)</title><rect x="616.1" y="83.0" width="3.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="619.1" y="94.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.07%)</title><rect x="619.0" y="67.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="622.0" y="78.0"></text>
</g>
<g>
<title>skb_release_all (20 samples, 0.71%)</title><rect x="619.9" y="99.0" width="8.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="622.9" y="110.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.04%)</title><rect x="619.9" y="83.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="622.9" y="94.0"></text>
</g>
<g>
<title>skb_release_data (18 samples, 0.64%)</title><rect x="620.3" y="83.0" width="7.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="623.3" y="94.0"></text>
</g>
<g>
<title>skb_free_head (11 samples, 0.39%)</title><rect x="623.2" y="67.0" width="4.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="626.2" y="78.0"></text>
</g>
<g>
<title>kfree (11 samples, 0.39%)</title><rect x="623.2" y="51.0" width="4.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="626.2" y="62.0"></text>
</g>
<g>
<title>__slab_free (8 samples, 0.28%)</title><rect x="624.5" y="35.0" width="3.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="627.5" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.04%)</title><rect x="627.8" y="83.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="630.8" y="94.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.07%)</title><rect x="628.3" y="115.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="631.3" y="126.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.11%)</title><rect x="629.1" y="115.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="632.1" y="126.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.04%)</title><rect x="630.3" y="115.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="633.3" y="126.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.04%)</title><rect x="630.8" y="115.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="633.8" y="126.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.04%)</title><rect x="631.2" y="115.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="634.2" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.46 (5 samples, 0.18%)</title><rect x="631.6" y="115.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="634.6" y="126.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.04%)</title><rect x="633.7" y="115.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="636.7" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.07%)</title><rect x="634.1" y="115.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="637.1" y="126.0"></text>
</g>
<g>
<title>tcp_check_space (5 samples, 0.18%)</title><rect x="635.0" y="131.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="638.0" y="142.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.07%)</title><rect x="637.0" y="131.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="640.0" y="142.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.14%)</title><rect x="637.9" y="131.0" width="1.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="640.9" y="142.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.11%)</title><rect x="637.9" y="115.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="640.9" y="126.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.11%)</title><rect x="637.9" y="99.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="640.9" y="110.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.04%)</title><rect x="639.1" y="115.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="642.1" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (2 samples, 0.07%)</title><rect x="639.6" y="131.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="642.6" y="142.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.07%)</title><rect x="640.4" y="131.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="643.4" y="142.0"></text>
</g>
<g>
<title>tcp_rack_advance (3 samples, 0.11%)</title><rect x="641.2" y="131.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="644.2" y="142.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.04%)</title><rect x="642.5" y="131.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="645.5" y="142.0"></text>
</g>
<g>
<title>tcp_rate_gen (3 samples, 0.11%)</title><rect x="642.9" y="131.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="645.9" y="142.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.04%)</title><rect x="644.2" y="131.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="647.2" y="142.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.07%)</title><rect x="644.6" y="131.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="647.6" y="142.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.14%)</title><rect x="645.4" y="131.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="648.4" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.04%)</title><rect x="647.1" y="131.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="650.1" y="142.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.07%)</title><rect x="647.5" y="163.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="650.5" y="174.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.04%)</title><rect x="648.3" y="163.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="651.3" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (2 samples, 0.07%)</title><rect x="648.8" y="211.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="651.8" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.04%)</title><rect x="649.6" y="227.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="652.6" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (3 samples, 0.11%)</title><rect x="650.0" y="227.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="653.0" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (1 samples, 0.04%)</title><rect x="651.3" y="243.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="654.3" y="254.0"></text>
</g>
<g>
<title>process_backlog (4 samples, 0.14%)</title><rect x="651.7" y="323.0" width="1.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="654.7" y="334.0"></text>
</g>
<g>
<title>net_rx_action (2 samples, 0.07%)</title><rect x="653.4" y="339.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="656.4" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (51 samples, 1.81%)</title><rect x="654.2" y="387.0" width="21.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="657.2" y="398.0">d..</text>
</g>
<g>
<title>__dev_queue_xmit (50 samples, 1.77%)</title><rect x="654.2" y="371.0" width="20.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="657.2" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (25 samples, 0.89%)</title><rect x="657.1" y="355.0" width="10.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="660.1" y="366.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="657.6" y="339.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="660.6" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (16 samples, 0.57%)</title><rect x="658.0" y="339.0" width="6.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="661.0" y="350.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.04%)</title><rect x="658.8" y="323.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="661.8" y="334.0"></text>
</g>
<g>
<title>netif_rx (9 samples, 0.32%)</title><rect x="659.2" y="323.0" width="3.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="662.2" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (9 samples, 0.32%)</title><rect x="659.2" y="307.0" width="3.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="662.2" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (8 samples, 0.28%)</title><rect x="659.6" y="291.0" width="3.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="662.6" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (2 samples, 0.07%)</title><rect x="663.0" y="323.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="666.0" y="334.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.04%)</title><rect x="663.8" y="323.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="666.8" y="334.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.04%)</title><rect x="664.3" y="323.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="667.3" y="334.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.04%)</title><rect x="664.3" y="307.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="667.3" y="318.0"></text>
</g>
<g>
<title>netif_rx (2 samples, 0.07%)</title><rect x="664.7" y="339.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="667.7" y="350.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (4 samples, 0.14%)</title><rect x="665.5" y="339.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="668.5" y="350.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.04%)</title><rect x="667.2" y="339.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="670.2" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.14%)</title><rect x="667.6" y="355.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="670.6" y="366.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (4 samples, 0.14%)</title><rect x="669.3" y="355.0" width="1.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="672.3" y="366.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (4 samples, 0.14%)</title><rect x="671.0" y="355.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="674.0" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (6 samples, 0.21%)</title><rect x="672.6" y="355.0" width="2.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="675.6" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (3 samples, 0.11%)</title><rect x="672.6" y="339.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="675.6" y="350.0"></text>
</g>
<g>
<title>skb_network_protocol (3 samples, 0.11%)</title><rect x="673.9" y="339.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="676.9" y="350.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="675.1" y="371.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="678.1" y="382.0"></text>
</g>
<g>
<title>do_softirq.part.20 (1 samples, 0.04%)</title><rect x="675.6" y="387.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="678.6" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.04%)</title><rect x="676.0" y="403.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="679.0" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (3 samples, 0.11%)</title><rect x="676.4" y="419.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="679.4" y="430.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.07%)</title><rect x="677.6" y="419.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="680.6" y="430.0"></text>
</g>
<g>
<title>nf_hook_slow (24 samples, 0.85%)</title><rect x="678.5" y="435.0" width="10.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="681.5" y="446.0"></text>
</g>
<g>
<title>selinux_ip_postroute (2 samples, 0.07%)</title><rect x="678.9" y="419.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="681.9" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (21 samples, 0.74%)</title><rect x="679.7" y="419.0" width="8.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="682.7" y="430.0"></text>
</g>
<g>
<title>selinux_ip_postroute (21 samples, 0.74%)</title><rect x="679.7" y="403.0" width="8.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="682.7" y="414.0"></text>
</g>
<g>
<title>selinux_ip_postroute_compat (17 samples, 0.60%)</title><rect x="680.6" y="387.0" width="7.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="683.6" y="398.0"></text>
</g>
<g>
<title>avc_has_perm (4 samples, 0.14%)</title><rect x="683.5" y="371.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="686.5" y="382.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.64 (3 samples, 0.11%)</title><rect x="685.2" y="371.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="688.2" y="382.0"></text>
</g>
<g>
<title>selinux_xfrm_postroute_last (3 samples, 0.11%)</title><rect x="686.4" y="371.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="689.4" y="382.0"></text>
</g>
<g>
<title>avc_has_perm (3 samples, 0.11%)</title><rect x="686.4" y="355.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="689.4" y="366.0"></text>
</g>
<g>
<title>selinux_xfrm_postroute_last (2 samples, 0.07%)</title><rect x="687.7" y="387.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="690.7" y="398.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (2 samples, 0.07%)</title><rect x="688.5" y="435.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="691.5" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (6 samples, 0.21%)</title><rect x="689.4" y="451.0" width="2.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="692.4" y="462.0"></text>
</g>
<g>
<title>ip_output (4 samples, 0.14%)</title><rect x="691.9" y="467.0" width="1.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="694.9" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (6 samples, 0.21%)</title><rect x="693.6" y="467.0" width="2.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="696.6" y="478.0"></text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.04%)</title><rect x="696.1" y="483.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="699.1" y="494.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.04%)</title><rect x="696.5" y="483.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="699.5" y="494.0"></text>
</g>
<g>
<title>skb_push (1 samples, 0.04%)</title><rect x="696.9" y="483.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="699.9" y="494.0"></text>
</g>
<g>
<title>skb_clone (7 samples, 0.25%)</title><rect x="697.3" y="499.0" width="3.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="700.3" y="510.0"></text>
</g>
<g>
<title>__skb_clone (4 samples, 0.14%)</title><rect x="698.6" y="483.0" width="1.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="701.6" y="494.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.04%)</title><rect x="699.8" y="467.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="702.8" y="478.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.04%)</title><rect x="700.3" y="499.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="703.3" y="510.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.04%)</title><rect x="700.7" y="499.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="703.7" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.04%)</title><rect x="700.7" y="483.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="703.7" y="494.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.07%)</title><rect x="701.1" y="515.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="704.1" y="526.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.04%)</title><rect x="701.9" y="515.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="704.9" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.04%)</title><rect x="702.3" y="515.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="705.3" y="526.0"></text>
</g>
<g>
<title>jiffies_to_usecs (1 samples, 0.04%)</title><rect x="702.8" y="515.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="705.8" y="526.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.11%)</title><rect x="703.2" y="515.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="706.2" y="526.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.07%)</title><rect x="703.6" y="499.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="706.6" y="510.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.04%)</title><rect x="704.4" y="515.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="707.4" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (15 samples, 0.53%)</title><rect x="704.9" y="515.0" width="6.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="707.9" y="526.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.04%)</title><rect x="704.9" y="499.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="707.9" y="510.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.04%)</title><rect x="705.3" y="499.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="708.3" y="510.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.04%)</title><rect x="705.3" y="483.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="708.3" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto (13 samples, 0.46%)</title><rect x="705.7" y="499.0" width="5.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="708.7" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.21%)</title><rect x="708.6" y="483.0" width="2.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="711.6" y="494.0"></text>
</g>
<g>
<title>mod_timer (5 samples, 0.18%)</title><rect x="709.0" y="467.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="712.0" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.11%)</title><rect x="709.9" y="451.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="712.9" y="462.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.04%)</title><rect x="711.1" y="515.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="714.1" y="526.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (2 samples, 0.07%)</title><rect x="711.6" y="515.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="714.6" y="526.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.04%)</title><rect x="712.4" y="515.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="715.4" y="526.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.07%)</title><rect x="712.8" y="515.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="715.8" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.04%)</title><rect x="713.2" y="499.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="716.2" y="510.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.04%)</title><rect x="713.2" y="483.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="716.2" y="494.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.34 (1 samples, 0.04%)</title><rect x="713.6" y="515.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="716.6" y="526.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (3 samples, 0.11%)</title><rect x="714.1" y="515.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="717.1" y="526.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.04%)</title><rect x="715.3" y="515.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="718.3" y="526.0"></text>
</g>
<g>
<title>tcp_write_xmit (4 samples, 0.14%)</title><rect x="715.7" y="547.0" width="1.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="718.7" y="558.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.04%)</title><rect x="717.4" y="563.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="720.4" y="574.0"></text>
</g>
<g>
<title>tcp_send_mss (8 samples, 0.28%)</title><rect x="717.8" y="563.0" width="3.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="720.8" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (4 samples, 0.14%)</title><rect x="717.8" y="547.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="720.8" y="558.0"></text>
</g>
<g>
<title>tcp_current_mss (4 samples, 0.14%)</title><rect x="719.5" y="547.0" width="1.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="722.5" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.11%)</title><rect x="719.9" y="531.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="722.9" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.07%)</title><rect x="721.2" y="563.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="724.2" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.04%)</title><rect x="722.0" y="579.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="725.0" y="590.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.04%)</title><rect x="722.4" y="579.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="725.4" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2 samples, 0.07%)</title><rect x="722.9" y="595.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="725.9" y="606.0"></text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.04%)</title><rect x="723.7" y="611.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="726.7" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (17 samples, 0.60%)</title><rect x="724.1" y="611.0" width="7.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="727.1" y="622.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (5 samples, 0.18%)</title><rect x="725.8" y="595.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="728.8" y="606.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (5 samples, 0.18%)</title><rect x="725.8" y="579.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="728.8" y="590.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="725.8" y="563.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="728.8" y="574.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.14%)</title><rect x="726.2" y="563.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="729.2" y="574.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg (5 samples, 0.18%)</title><rect x="727.9" y="595.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="730.9" y="606.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg_permission (5 samples, 0.18%)</title><rect x="727.9" y="579.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="730.9" y="590.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg_permission (3 samples, 0.11%)</title><rect x="730.0" y="595.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="733.0" y="606.0"></text>
</g>
<g>
<title>selinux_socket_sendmsg (1 samples, 0.04%)</title><rect x="731.2" y="611.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="734.2" y="622.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg (6 samples, 0.21%)</title><rect x="731.6" y="611.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="734.6" y="622.0"></text>
</g>
<g>
<title>sockfd_lookup_light (10 samples, 0.35%)</title><rect x="734.2" y="627.0" width="4.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="737.2" y="638.0"></text>
</g>
<g>
<title>__fdget (7 samples, 0.25%)</title><rect x="734.2" y="611.0" width="2.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="737.2" y="622.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.25%)</title><rect x="734.2" y="595.0" width="2.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="737.2" y="606.0"></text>
</g>
<g>
<title>__fget (5 samples, 0.18%)</title><rect x="735.0" y="579.0" width="2.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="738.0" y="590.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.11%)</title><rect x="737.1" y="611.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="740.1" y="622.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.04%)</title><rect x="738.3" y="707.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="741.3" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 0.46%)</title><rect x="738.8" y="787.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="741.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.07%)</title><rect x="743.4" y="771.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="746.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.07%)</title><rect x="743.4" y="755.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="746.4" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (24 samples, 0.85%)</title><rect x="744.2" y="803.0" width="10.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="747.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (23 samples, 0.82%)</title><rect x="744.6" y="787.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.18%)</title><rect x="748.4" y="771.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="751.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.18%)</title><rect x="748.4" y="755.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="751.4" y="766.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.04%)</title><rect x="750.5" y="771.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="753.5" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="750.9" y="771.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="753.9" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (7 samples, 0.25%)</title><rect x="751.3" y="771.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="754.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.14%)</title><rect x="752.6" y="755.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.14%)</title><rect x="752.6" y="739.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="755.6" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.14%)</title><rect x="752.6" y="723.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="755.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.upsert (409 samples, 14.51%)</title><rect x="754.2" y="803.0" width="171.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="757.2" y="814.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.04%)</title><rect x="755.9" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.9" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_2 (1 samples, 0.04%)</title><rect x="755.9" y="771.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="758.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (23 samples, 0.82%)</title><rect x="756.3" y="787.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="759.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (23 samples, 0.82%)</title><rect x="756.3" y="771.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="759.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (22 samples, 0.78%)</title><rect x="756.8" y="755.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (20 samples, 0.71%)</title><rect x="757.2" y="739.0" width="8.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="760.2" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (19 samples, 0.67%)</title><rect x="757.2" y="723.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (19 samples, 0.67%)</title><rect x="757.2" y="707.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringCoding$1.initialValue (19 samples, 0.67%)</title><rect x="757.2" y="691.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.2" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="765.1" y="723.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="768.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="765.1" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="768.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="765.1" y="691.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="768.1" y="702.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="765.1" y="675.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="768.1" y="686.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="765.6" y="739.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="768.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfPresent (2 samples, 0.07%)</title><rect x="766.0" y="787.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="769.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.07%)</title><rect x="766.0" y="771.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="769.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.11%)</title><rect x="766.8" y="787.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="769.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.11%)</title><rect x="766.8" y="771.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="769.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.07%)</title><rect x="766.8" y="755.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="769.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.04%)</title><rect x="766.8" y="739.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="769.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.04%)</title><rect x="766.8" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.04%)</title><rect x="766.8" y="707.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.04%)</title><rect x="767.2" y="739.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="770.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.04%)</title><rect x="767.6" y="755.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="770.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.04%)</title><rect x="767.6" y="739.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="770.6" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.04%)</title><rect x="767.6" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="770.6" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (1 samples, 0.04%)</title><rect x="767.6" y="707.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="770.6" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.07%)</title><rect x="768.1" y="787.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="771.1" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.07%)</title><rect x="768.9" y="787.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="771.9" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="768.9" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="771.9" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="768.9" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="771.9" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="768.9" y="739.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="771.9" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="768.9" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="771.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="769.3" y="771.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="772.3" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="769.3" y="755.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="772.3" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="769.3" y="739.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="772.3" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="769.3" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="772.3" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.04%)</title><rect x="769.3" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="772.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.upsert (352 samples, 12.49%)</title><rect x="769.7" y="787.0" width="147.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="772.7" y="798.0">ru/mail/polis/dao/z..</text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.04%)</title><rect x="769.7" y="771.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="772.7" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.execute (351 samples, 12.45%)</title><rect x="770.2" y="771.0" width="146.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.2" y="782.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (38 samples, 1.35%)</title><rect x="770.2" y="755.0" width="15.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="773.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (38 samples, 1.35%)</title><rect x="770.2" y="739.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (38 samples, 1.35%)</title><rect x="770.2" y="723.0" width="15.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.28%)</title><rect x="771.0" y="707.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="774.0" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (6 samples, 0.21%)</title><rect x="771.8" y="691.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="774.8" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.07%)</title><rect x="771.8" y="675.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="774.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (1 samples, 0.04%)</title><rect x="772.7" y="675.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="775.7" y="686.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.11%)</title><rect x="773.1" y="675.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="776.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.04%)</title><rect x="774.3" y="707.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="777.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.04%)</title><rect x="774.3" y="691.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="777.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.04%)</title><rect x="774.3" y="675.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="777.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.11%)</title><rect x="774.8" y="707.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="777.8" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.11%)</title><rect x="774.8" y="691.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="777.8" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.11%)</title><rect x="774.8" y="675.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="777.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (3 samples, 0.11%)</title><rect x="776.0" y="707.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="779.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (18 samples, 0.64%)</title><rect x="777.3" y="707.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="780.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (18 samples, 0.64%)</title><rect x="777.3" y="691.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="780.3" y="702.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (1 samples, 0.04%)</title><rect x="784.4" y="675.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="787.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (2 samples, 0.07%)</title><rect x="784.8" y="707.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="787.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="784.8" y="691.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="787.8" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="784.8" y="675.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="787.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (1 samples, 0.04%)</title><rect x="784.8" y="659.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="787.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (1 samples, 0.04%)</title><rect x="785.2" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="788.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (1 samples, 0.04%)</title><rect x="785.2" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="788.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.04%)</title><rect x="785.2" y="659.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="788.2" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.04%)</title><rect x="785.6" y="707.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (9 samples, 0.32%)</title><rect x="786.1" y="755.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="789.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (9 samples, 0.32%)</title><rect x="786.1" y="739.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="789.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (9 samples, 0.32%)</title><rect x="786.1" y="723.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="789.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$86/1441736750.run (304 samples, 10.78%)</title><rect x="789.8" y="755.0" width="127.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="792.8" y="766.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$upsert$5 (304 samples, 10.78%)</title><rect x="789.8" y="739.0" width="127.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="792.8" y="750.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.upsert (302 samples, 10.71%)</title><rect x="790.7" y="723.0" width="126.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="793.7" y="734.0">ru/mail/polis/da..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.07%)</title><rect x="790.7" y="707.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="793.7" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1196148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1196148ul&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="790.7" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="793.7" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="791.1" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="791.1" y="675.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="794.1" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="791.1" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="794.1" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.04%)</title><rect x="791.1" y="643.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="794.1" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (13 samples, 0.46%)</title><rect x="791.5" y="707.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="794.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.07%)</title><rect x="794.0" y="691.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="797.0" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.07%)</title><rect x="794.0" y="675.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="797.0" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.07%)</title><rect x="794.0" y="659.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="797.0" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="794.0" y="643.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="797.0" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.07%)</title><rect x="794.0" y="627.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="797.0" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::tlab_alloc_reserve() const (1 samples, 0.04%)</title><rect x="794.0" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="797.0" y="622.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.04%)</title><rect x="794.4" y="611.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="797.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (5 samples, 0.18%)</title><rect x="794.9" y="691.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="797.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (287 samples, 10.18%)</title><rect x="796.9" y="707.0" width="120.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="799.9" y="718.0">java/util/concu..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.11%)</title><rect x="800.3" y="691.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="803.3" y="702.0"></text>
</g>
<g>
<title>gettimeofday@plt (1 samples, 0.04%)</title><rect x="801.6" y="691.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="804.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (271 samples, 9.61%)</title><rect x="802.0" y="691.0" width="113.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.0" y="702.0">java/util/conc..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.14%)</title><rect x="812.4" y="675.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="815.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (1 samples, 0.04%)</title><rect x="814.1" y="675.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (1 samples, 0.04%)</title><rect x="814.1" y="659.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (11 samples, 0.39%)</title><rect x="814.5" y="675.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.04%)</title><rect x="815.4" y="659.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="818.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 0.28%)</title><rect x="815.8" y="659.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="818.8" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.28%)</title><rect x="815.8" y="643.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="818.8" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.28%)</title><rect x="815.8" y="627.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="818.8" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.18%)</title><rect x="817.0" y="611.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="820.0" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.18%)</title><rect x="817.0" y="595.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="820.0" y="606.0"></text>
</g>
<g>
<title>vectorizedMismatch (5 samples, 0.18%)</title><rect x="817.0" y="579.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="820.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (230 samples, 8.16%)</title><rect x="819.1" y="675.0" width="96.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="822.1" y="686.0">java/util/c..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (230 samples, 8.16%)</title><rect x="819.1" y="659.0" width="96.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="822.1" y="670.0">java/nio/By..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (230 samples, 8.16%)</title><rect x="819.1" y="643.0" width="96.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="822.1" y="654.0">java/nio/By..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (73 samples, 2.59%)</title><rect x="884.8" y="627.0" width="30.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="887.8" y="638.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (70 samples, 2.48%)</title><rect x="886.1" y="611.0" width="29.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="889.1" y="622.0">ja..</text>
</g>
<g>
<title>vectorizedMismatch (31 samples, 1.10%)</title><rect x="902.4" y="595.0" width="13.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="905.4" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.14%)</title><rect x="915.4" y="691.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="918.4" y="702.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.11%)</title><rect x="915.8" y="675.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="918.8" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.07%)</title><rect x="916.2" y="659.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="919.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.wrapArray (2 samples, 0.07%)</title><rect x="917.1" y="787.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="920.1" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.07%)</title><rect x="917.1" y="771.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.07%)</title><rect x="917.1" y="755.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.1" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="917.1" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="920.1" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="917.1" y="723.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.1" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="917.1" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="920.1" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="917.1" y="691.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="920.1" y="702.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="917.1" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="920.1" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="917.5" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="920.5" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="917.5" y="723.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="920.5" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.wrapString (18 samples, 0.64%)</title><rect x="917.9" y="787.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.9" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.21%)</title><rect x="917.9" y="771.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="920.9" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.21%)</title><rect x="917.9" y="755.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.9" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.21%)</title><rect x="917.9" y="739.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="920.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.21%)</title><rect x="917.9" y="723.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="920.9" y="734.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (4 samples, 0.14%)</title><rect x="917.9" y="707.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.9" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="919.6" y="707.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="922.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (2 samples, 0.07%)</title><rect x="919.6" y="691.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.toBytes (12 samples, 0.43%)</title><rect x="920.4" y="771.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="923.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (12 samples, 0.43%)</title><rect x="920.4" y="755.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="923.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.07%)</title><rect x="920.8" y="739.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="923.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="921.3" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="924.3" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.32%)</title><rect x="921.7" y="739.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="924.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.32%)</title><rect x="921.7" y="723.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="924.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="924.6" y="707.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="927.6" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="925.0" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="928.0" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="925.5" y="819.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="928.5" y="830.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (10 samples, 0.35%)</title><rect x="925.9" y="819.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="928.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.35%)</title><rect x="925.9" y="803.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="928.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.18%)</title><rect x="925.9" y="787.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="928.9" y="798.0"></text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (5 samples, 0.18%)</title><rect x="925.9" y="771.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="928.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.18%)</title><rect x="928.0" y="787.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="931.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.18%)</title><rect x="928.0" y="771.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="931.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.18%)</title><rect x="928.0" y="755.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="931.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.04%)</title><rect x="930.1" y="819.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="933.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="930.1" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="933.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="930.1" y="787.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="933.1" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="930.1" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="933.1" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="930.1" y="755.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="930.1" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="933.1" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="930.1" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="933.1" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="930.1" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="933.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (7 samples, 0.25%)</title><rect x="930.5" y="835.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="933.5" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (67 samples, 2.38%)</title><rect x="933.4" y="851.0" width="28.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="936.4" y="862.0">on..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="937.2" y="835.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="940.2" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="937.2" y="819.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="940.2" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="937.2" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="940.2" y="814.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="937.2" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="940.2" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.11%)</title><rect x="937.6" y="835.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="940.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.11%)</title><rect x="937.6" y="819.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="940.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.11%)</title><rect x="937.6" y="803.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="940.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.11%)</title><rect x="937.6" y="787.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="940.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (37 samples, 1.31%)</title><rect x="938.8" y="835.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="941.8" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (32 samples, 1.14%)</title><rect x="940.9" y="819.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="943.9" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.07%)</title><rect x="952.2" y="803.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="955.2" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.07%)</title><rect x="952.2" y="787.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="955.2" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="952.2" y="771.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="955.2" y="782.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="952.2" y="755.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="955.2" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="952.7" y="755.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="955.7" y="766.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.04%)</title><rect x="952.7" y="739.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="955.7" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="953.1" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="956.1" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="953.1" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.1" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="953.1" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.1" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="953.1" y="755.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="956.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.07%)</title><rect x="953.5" y="803.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.07%)</title><rect x="953.5" y="787.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="956.5" y="798.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.07%)</title><rect x="953.5" y="771.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="956.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.07%)</title><rect x="953.5" y="755.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.5" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="953.9" y="739.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="956.9" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="953.9" y="723.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="956.9" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (17 samples, 0.60%)</title><rect x="954.3" y="835.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="957.3" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (14 samples, 0.50%)</title><rect x="961.5" y="851.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="964.5" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.07%)</title><rect x="966.5" y="835.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="969.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.07%)</title><rect x="966.5" y="819.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="969.5" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="966.5" y="803.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="969.5" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="966.5" y="787.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="969.5" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="966.5" y="771.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="969.5" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="966.5" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.5" y="766.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.04%)</title><rect x="966.5" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="969.5" y="750.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*) (1 samples, 0.04%)</title><rect x="966.5" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="969.5" y="734.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="966.9" y="787.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="969.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (34 samples, 1.21%)</title><rect x="967.3" y="851.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="970.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (17 samples, 0.60%)</title><rect x="972.3" y="835.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="975.3" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (17 samples, 0.60%)</title><rect x="972.3" y="819.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="975.3" y="830.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.07%)</title><rect x="976.9" y="803.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="979.9" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.14%)</title><rect x="977.8" y="803.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="980.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.18%)</title><rect x="979.5" y="835.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="982.5" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.18%)</title><rect x="979.5" y="819.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="982.5" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (42 samples, 1.49%)</title><rect x="981.5" y="851.0" width="17.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="984.5" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4 samples, 0.14%)</title><rect x="983.2" y="835.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="986.2" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (34 samples, 1.21%)</title><rect x="984.9" y="835.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="987.9" y="846.0"></text>
</g>
<g>
<title>ClassLoaderData::holder_phantom() const (1 samples, 0.04%)</title><rect x="996.6" y="819.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.07%)</title><rect x="997.0" y="819.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1000.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.07%)</title><rect x="997.0" y="803.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.0" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="997.0" y="787.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1000.0" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.04%)</title><rect x="997.0" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1000.0" y="782.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="997.4" y="771.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.4" y="782.0"></text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.04%)</title><rect x="997.9" y="819.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1000.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.07%)</title><rect x="998.3" y="819.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1001.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.07%)</title><rect x="998.3" y="803.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1001.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.07%)</title><rect x="998.3" y="787.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1001.3" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.07%)</title><rect x="998.3" y="771.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="998.3" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.3" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="998.3" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.3" y="750.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="998.3" y="723.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.3" y="734.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.04%)</title><rect x="998.3" y="707.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1001.3" y="718.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.04%)</title><rect x="998.3" y="691.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1001.3" y="702.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.04%)</title><rect x="998.3" y="675.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1001.3" y="686.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.04%)</title><rect x="998.3" y="659.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1001.3" y="670.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.04%)</title><rect x="998.3" y="643.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1001.3" y="654.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.04%)</title><rect x="998.3" y="627.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1001.3" y="638.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.04%)</title><rect x="998.3" y="611.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1001.3" y="622.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.04%)</title><rect x="998.3" y="595.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1001.3" y="606.0"></text>
</g>
<g>
<title>clear_page_erms (1 samples, 0.04%)</title><rect x="998.3" y="579.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1001.3" y="590.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (1 samples, 0.04%)</title><rect x="998.7" y="755.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.7" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.07%)</title><rect x="999.1" y="867.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1002.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (300 samples, 10.64%)</title><rect x="1000.0" y="867.0" width="125.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1003.0" y="878.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (283 samples, 10.04%)</title><rect x="1001.6" y="851.0" width="118.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1004.6" y="862.0">one/nio/net/Na..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (49 samples, 1.74%)</title><rect x="1006.2" y="835.0" width="20.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1009.2" y="846.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (7 samples, 0.25%)</title><rect x="1007.1" y="819.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1010.1" y="830.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (7 samples, 0.25%)</title><rect x="1010.0" y="819.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.0" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (2 samples, 0.07%)</title><rect x="1012.9" y="819.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1015.9" y="830.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (12 samples, 0.43%)</title><rect x="1013.8" y="819.0" width="5.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1016.8" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (15 samples, 0.53%)</title><rect x="1018.8" y="819.0" width="6.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1021.8" y="830.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.11%)</title><rect x="1020.5" y="803.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1023.5" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (8 samples, 0.28%)</title><rect x="1021.7" y="803.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1024.7" y="814.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.14%)</title><rect x="1025.1" y="819.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.1" y="830.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.11%)</title><rect x="1026.8" y="835.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1029.8" y="846.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.07%)</title><rect x="1028.0" y="835.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1031.0" y="846.0"></text>
</g>
<g>
<title>__recv (212 samples, 7.52%)</title><rect x="1028.8" y="835.0" width="88.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1031.8" y="846.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (161 samples, 5.71%)</title><rect x="1050.2" y="819.0" width="67.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1053.2" y="830.0">entry_S..</text>
</g>
<g>
<title>__x64_sys_recvfrom (3 samples, 0.11%)</title><rect x="1050.2" y="803.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1053.2" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (158 samples, 5.60%)</title><rect x="1051.4" y="803.0" width="66.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1054.4" y="814.0">do_sysc..</text>
</g>
<g>
<title>__sys_recvfrom (3 samples, 0.11%)</title><rect x="1057.7" y="787.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1060.7" y="798.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (140 samples, 4.97%)</title><rect x="1059.0" y="787.0" width="58.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1062.0" y="798.0">__x64_..</text>
</g>
<g>
<title>__sys_recvfrom (138 samples, 4.90%)</title><rect x="1059.0" y="771.0" width="57.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1062.0" y="782.0">__sys_..</text>
</g>
<g>
<title>import_single_range (1 samples, 0.04%)</title><rect x="1060.7" y="755.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1063.7" y="766.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.04%)</title><rect x="1060.7" y="739.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1063.7" y="750.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.04%)</title><rect x="1061.1" y="755.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1064.1" y="766.0"></text>
</g>
<g>
<title>sock_recvmsg (114 samples, 4.04%)</title><rect x="1061.5" y="755.0" width="47.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1064.5" y="766.0">sock..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.04%)</title><rect x="1061.5" y="739.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1064.5" y="750.0"></text>
</g>
<g>
<title>inet6_recvmsg (96 samples, 3.41%)</title><rect x="1061.9" y="739.0" width="40.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1064.9" y="750.0">ine..</text>
</g>
<g>
<title>tcp_recvmsg (95 samples, 3.37%)</title><rect x="1062.3" y="723.0" width="39.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1065.3" y="734.0">tcp..</text>
</g>
<g>
<title>__kfree_skb (23 samples, 0.82%)</title><rect x="1067.4" y="707.0" width="9.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1070.4" y="718.0"></text>
</g>
<g>
<title>kfree_skbmem (4 samples, 0.14%)</title><rect x="1067.4" y="691.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1070.4" y="702.0"></text>
</g>
<g>
<title>skb_release_all (19 samples, 0.67%)</title><rect x="1069.0" y="691.0" width="8.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1072.0" y="702.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.07%)</title><rect x="1069.0" y="675.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1072.0" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (17 samples, 0.60%)</title><rect x="1069.9" y="675.0" width="7.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1072.9" y="686.0"></text>
</g>
<g>
<title>dst_release (11 samples, 0.39%)</title><rect x="1070.3" y="659.0" width="4.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1073.3" y="670.0"></text>
</g>
<g>
<title>sock_rfree (5 samples, 0.18%)</title><rect x="1074.9" y="659.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1077.9" y="670.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.07%)</title><rect x="1077.0" y="707.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1080.0" y="718.0"></text>
</g>
<g>
<title>lock_sock_nested (7 samples, 0.25%)</title><rect x="1077.8" y="707.0" width="2.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1080.8" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="1077.8" y="691.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1080.8" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.18%)</title><rect x="1078.2" y="691.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1081.2" y="702.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="1080.3" y="691.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1083.3" y="702.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.07%)</title><rect x="1080.7" y="707.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1083.7" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="1080.7" y="691.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1083.7" y="702.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.04%)</title><rect x="1081.2" y="691.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1084.2" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (36 samples, 1.28%)</title><rect x="1081.6" y="707.0" width="15.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1084.6" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (33 samples, 1.17%)</title><rect x="1082.0" y="691.0" width="13.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1085.0" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (23 samples, 0.82%)</title><rect x="1086.2" y="675.0" width="9.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1089.2" y="686.0"></text>
</g>
<g>
<title>__check_object_size (4 samples, 0.14%)</title><rect x="1086.2" y="659.0" width="1.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1089.2" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (6 samples, 0.21%)</title><rect x="1087.9" y="659.0" width="2.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1090.9" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (12 samples, 0.43%)</title><rect x="1090.4" y="659.0" width="5.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1093.4" y="670.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (10 samples, 0.35%)</title><rect x="1090.8" y="643.0" width="4.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1093.8" y="654.0"></text>
</g>
<g>
<title>copyout (1 samples, 0.04%)</title><rect x="1095.0" y="643.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1098.0" y="654.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.04%)</title><rect x="1095.4" y="659.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1098.4" y="670.0"></text>
</g>
<g>
<title>simple_copy_to_iter (2 samples, 0.07%)</title><rect x="1095.8" y="691.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1098.8" y="702.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (5 samples, 0.18%)</title><rect x="1096.7" y="707.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1099.7" y="718.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.04%)</title><rect x="1098.3" y="691.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1101.3" y="702.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.04%)</title><rect x="1098.7" y="707.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1101.7" y="718.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (6 samples, 0.21%)</title><rect x="1099.2" y="707.0" width="2.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1102.2" y="718.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.04%)</title><rect x="1099.6" y="691.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1102.6" y="702.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.14%)</title><rect x="1100.0" y="691.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1103.0" y="702.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.04%)</title><rect x="1100.4" y="675.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1103.4" y="686.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.04%)</title><rect x="1100.4" y="659.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1103.4" y="670.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.07%)</title><rect x="1100.8" y="675.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1103.8" y="686.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.04%)</title><rect x="1101.7" y="707.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1104.7" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (14 samples, 0.50%)</title><rect x="1102.1" y="739.0" width="5.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1105.1" y="750.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.07%)</title><rect x="1102.1" y="723.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1105.1" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (7 samples, 0.25%)</title><rect x="1102.9" y="723.0" width="3.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1105.9" y="734.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.04%)</title><rect x="1102.9" y="707.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1105.9" y="718.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (6 samples, 0.21%)</title><rect x="1103.4" y="707.0" width="2.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1106.4" y="718.0"></text>
</g>
<g>
<title>aa_sk_perm (6 samples, 0.21%)</title><rect x="1103.4" y="691.0" width="2.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1106.4" y="702.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="1105.4" y="675.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1108.4" y="686.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (4 samples, 0.14%)</title><rect x="1105.9" y="723.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1108.9" y="734.0"></text>
</g>
<g>
<title>sock_has_perm (4 samples, 0.14%)</title><rect x="1105.9" y="707.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1108.9" y="718.0"></text>
</g>
<g>
<title>sock_has_perm (1 samples, 0.04%)</title><rect x="1107.5" y="723.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1110.5" y="734.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (3 samples, 0.11%)</title><rect x="1108.0" y="739.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1111.0" y="750.0"></text>
</g>
<g>
<title>sockfd_lookup_light (18 samples, 0.64%)</title><rect x="1109.2" y="755.0" width="7.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1112.2" y="766.0"></text>
</g>
<g>
<title>__fdget (13 samples, 0.46%)</title><rect x="1110.0" y="739.0" width="5.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1113.0" y="750.0"></text>
</g>
<g>
<title>__fget_light (13 samples, 0.46%)</title><rect x="1110.0" y="723.0" width="5.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1113.0" y="734.0"></text>
</g>
<g>
<title>__fget (11 samples, 0.39%)</title><rect x="1110.9" y="707.0" width="4.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1113.9" y="718.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.11%)</title><rect x="1115.5" y="739.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1118.5" y="750.0"></text>
</g>
<g>
<title>fput (1 samples, 0.04%)</title><rect x="1116.7" y="771.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1119.7" y="782.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.04%)</title><rect x="1117.2" y="771.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1120.2" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.21%)</title><rect x="1117.6" y="835.0" width="2.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1120.6" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (13 samples, 0.46%)</title><rect x="1120.1" y="851.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1123.1" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.04%)</title><rect x="1123.9" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1126.9" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.11%)</title><rect x="1124.3" y="835.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.3" y="846.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.11%)</title><rect x="1124.3" y="819.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1127.3" y="830.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.07%)</title><rect x="1124.7" y="803.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1127.7" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="1125.5" y="899.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.5" y="910.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="1125.5" y="883.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1128.5" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="1125.5" y="867.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1128.5" y="878.0"></text>
</g>
<g>
<title>start_thread (153 samples, 5.43%)</title><rect x="1126.0" y="915.0" width="64.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1129.0" y="926.0">start_t..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (153 samples, 5.43%)</title><rect x="1126.0" y="899.0" width="64.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1129.0" y="910.0">thread_..</text>
</g>
<g>
<title>Thread::call_run() (153 samples, 5.43%)</title><rect x="1126.0" y="883.0" width="64.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.0" y="894.0">Thread:..</text>
</g>
<g>
<title>GangWorker::loop() (121 samples, 4.29%)</title><rect x="1126.0" y="867.0" width="50.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.0" y="878.0">GangW..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (14 samples, 0.50%)</title><rect x="1126.4" y="851.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.4" y="862.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (14 samples, 0.50%)</title><rect x="1126.4" y="835.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.4" y="846.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (4 samples, 0.14%)</title><rect x="1126.4" y="819.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.4" y="830.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.149] (2 samples, 0.07%)</title><rect x="1126.8" y="803.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.8" y="814.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.04%)</title><rect x="1127.2" y="787.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.2" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1127.2" y="771.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.2" y="782.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.04%)</title><rect x="1127.2" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.2" y="766.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.04%)</title><rect x="1127.6" y="803.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.6" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1127.6" y="787.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.6" y="798.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.04%)</title><rect x="1127.6" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.6" y="782.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.149] (10 samples, 0.35%)</title><rect x="1128.0" y="819.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.0" y="830.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (9 samples, 0.32%)</title><rect x="1128.5" y="803.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.5" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (7 samples, 0.25%)</title><rect x="1129.3" y="787.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.3" y="798.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (7 samples, 0.25%)</title><rect x="1129.3" y="771.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.3" y="782.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.04%)</title><rect x="1131.8" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.8" y="766.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (98 samples, 3.48%)</title><rect x="1132.2" y="851.0" width="41.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.2" y="862.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (57 samples, 2.02%)</title><rect x="1132.2" y="835.0" width="23.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.2" y="846.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.07%)</title><rect x="1135.6" y="819.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.6" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (46 samples, 1.63%)</title><rect x="1136.4" y="819.0" width="19.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.4" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (34 samples, 1.21%)</title><rect x="1141.4" y="803.0" width="14.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.4" y="814.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.04%)</title><rect x="1150.2" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.2" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (12 samples, 0.43%)</title><rect x="1150.7" y="787.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.7" y="798.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.04%)</title><rect x="1155.7" y="819.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.7" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="1155.7" y="803.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1158.7" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (37 samples, 1.31%)</title><rect x="1156.1" y="835.0" width="15.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.1" y="846.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (37 samples, 1.31%)</title><rect x="1156.1" y="819.0" width="15.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.1" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (37 samples, 1.31%)</title><rect x="1156.1" y="803.0" width="15.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.1" y="814.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (37 samples, 1.31%)</title><rect x="1156.1" y="787.0" width="15.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.1" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.04%)</title><rect x="1156.1" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.1" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (36 samples, 1.28%)</title><rect x="1156.5" y="771.0" width="15.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.5" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="1156.5" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.5" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (24 samples, 0.85%)</title><rect x="1156.9" y="755.0" width="10.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.9" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (17 samples, 0.60%)</title><rect x="1159.9" y="739.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.9" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.14%)</title><rect x="1165.3" y="723.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.3" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (11 samples, 0.39%)</title><rect x="1167.0" y="755.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.0" y="766.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (10 samples, 0.35%)</title><rect x="1167.0" y="739.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.0" y="750.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (4 samples, 0.14%)</title><rect x="1167.4" y="723.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.4" y="734.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.07%)</title><rect x="1167.4" y="707.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.4" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.04%)</title><rect x="1167.8" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.8" y="702.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.07%)</title><rect x="1168.2" y="707.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.2" y="718.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.577] (2 samples, 0.07%)</title><rect x="1169.1" y="723.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.1" y="734.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.04%)</title><rect x="1169.5" y="707.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1172.5" y="718.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.04%)</title><rect x="1169.5" y="691.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1172.5" y="702.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.04%)</title><rect x="1169.5" y="675.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1172.5" y="686.0"></text>
</g>
<g>
<title>void OopOopIterateBoundedDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate_bounded&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*, MemRegion) (1 samples, 0.04%)</title><rect x="1169.9" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="734.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="1169.9" y="707.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1170.3" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.3" y="734.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="1170.3" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.3" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1170.7" y="723.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="734.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="1170.7" y="707.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.7" y="718.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.04%)</title><rect x="1171.2" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.2" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.14%)</title><rect x="1171.6" y="835.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.6" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.11%)</title><rect x="1171.6" y="819.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.6" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.11%)</title><rect x="1171.6" y="803.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.6" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.07%)</title><rect x="1171.6" y="787.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.6" y="798.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.04%)</title><rect x="1171.6" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.6" y="782.0"></text>
</g>
<g>
<title>nmethod::test_set_oops_do_mark() (1 samples, 0.04%)</title><rect x="1171.6" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.6" y="766.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.04%)</title><rect x="1172.0" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.0" y="782.0"></text>
</g>
<g>
<title>frame::entry_frame_is_first() const (1 samples, 0.04%)</title><rect x="1172.4" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.4" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.04%)</title><rect x="1172.8" y="819.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.8" y="830.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.04%)</title><rect x="1172.8" y="803.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.8" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (6 samples, 0.21%)</title><rect x="1173.3" y="851.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="862.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (6 samples, 0.21%)</title><rect x="1173.3" y="835.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="846.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (5 samples, 0.18%)</title><rect x="1173.3" y="819.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.3" y="830.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.233] (1 samples, 0.04%)</title><rect x="1173.3" y="803.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.3" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (4 samples, 0.14%)</title><rect x="1173.7" y="803.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.7" y="814.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.04%)</title><rect x="1174.9" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.9" y="798.0"></text>
</g>
<g>
<title>MarkBitMap::get_next_marked_addr(HeapWord const*, HeapWord const*) const (1 samples, 0.04%)</title><rect x="1175.3" y="819.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.3" y="830.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_done_with_task() (1 samples, 0.04%)</title><rect x="1175.8" y="851.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="862.0"></text>
</g>
<g>
<title>__new_sem_post (1 samples, 0.04%)</title><rect x="1176.2" y="851.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1179.2" y="862.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1176.2" y="835.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1179.2" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1176.2" y="819.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1179.2" y="830.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.04%)</title><rect x="1176.2" y="803.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1179.2" y="814.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.04%)</title><rect x="1176.2" y="787.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1179.2" y="798.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.04%)</title><rect x="1176.2" y="771.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1179.2" y="782.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.04%)</title><rect x="1176.2" y="755.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1179.2" y="766.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.04%)</title><rect x="1176.2" y="739.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1179.2" y="750.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.04%)</title><rect x="1176.2" y="723.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1179.2" y="734.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (27 samples, 0.96%)</title><rect x="1176.6" y="867.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.6" y="878.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (27 samples, 0.96%)</title><rect x="1176.6" y="851.0" width="11.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.6" y="862.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (27 samples, 0.96%)</title><rect x="1176.6" y="835.0" width="11.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.6" y="846.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (26 samples, 0.92%)</title><rect x="1176.6" y="819.0" width="10.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="830.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (26 samples, 0.92%)</title><rect x="1176.6" y="803.0" width="10.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="814.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 0.50%)</title><rect x="1176.6" y="787.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.6" y="798.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.04%)</title><rect x="1176.6" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="782.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.04%)</title><rect x="1176.6" y="755.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.6" y="766.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.04%)</title><rect x="1177.0" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.0" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.04%)</title><rect x="1177.0" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="766.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.04%)</title><rect x="1177.0" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.04%)</title><rect x="1177.0" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="734.0"></text>
</g>
<g>
<title>decodeHeapOopNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.04%)</title><rect x="1177.0" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.11%)</title><rect x="1177.4" y="771.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.11%)</title><rect x="1177.4" y="755.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.04%)</title><rect x="1177.4" y="739.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.04%)</title><rect x="1177.4" y="723.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.07%)</title><rect x="1177.9" y="739.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.04%)</title><rect x="1178.3" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 0.32%)</title><rect x="1178.7" y="771.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.07%)</title><rect x="1178.7" y="755.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.07%)</title><rect x="1178.7" y="739.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.07%)</title><rect x="1178.7" y="723.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.07%)</title><rect x="1179.5" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.07%)</title><rect x="1179.5" y="739.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.5" y="750.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.07%)</title><rect x="1179.5" y="723.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.04%)</title><rect x="1180.4" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.04%)</title><rect x="1180.8" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.04%)</title><rect x="1181.2" y="755.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.04%)</title><rect x="1181.2" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.04%)</title><rect x="1181.6" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.6" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1181.6" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="750.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.04%)</title><rect x="1182.0" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="766.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 0.28%)</title><rect x="1182.5" y="787.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="798.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) [clone .part.338] (3 samples, 0.11%)</title><rect x="1182.5" y="771.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (3 samples, 0.11%)</title><rect x="1182.5" y="755.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.04%)</title><rect x="1182.5" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.04%)</title><rect x="1182.9" y="739.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.04%)</title><rect x="1183.3" y="739.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.3" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.04%)</title><rect x="1183.3" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="734.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1183.3" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="718.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.04%)</title><rect x="1183.3" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="702.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.254] (1 samples, 0.04%)</title><rect x="1183.7" y="771.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.04%)</title><rect x="1183.7" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.7" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.04%)</title><rect x="1184.1" y="771.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (2 samples, 0.07%)</title><rect x="1184.6" y="771.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.6" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.04%)</title><rect x="1184.6" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.6" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (1 samples, 0.04%)</title><rect x="1184.6" y="739.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.04%)</title><rect x="1185.0" y="755.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.0" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.04%)</title><rect x="1185.4" y="771.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.04%)</title><rect x="1185.4" y="755.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.4" y="766.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1185.4" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.4" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.04%)</title><rect x="1185.4" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.4" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.128] (1 samples, 0.04%)</title><rect x="1185.4" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.14%)</title><rect x="1185.8" y="787.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.14%)</title><rect x="1185.8" y="771.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.14%)</title><rect x="1185.8" y="755.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.14%)</title><rect x="1185.8" y="739.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.14%)</title><rect x="1185.8" y="723.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.14%)</title><rect x="1185.8" y="707.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.8" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1185.8" y="691.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.8" y="702.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.04%)</title><rect x="1185.8" y="675.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="686.0"></text>
</g>
<g>
<title>CounterData::cell_count() const (1 samples, 0.04%)</title><rect x="1185.8" y="659.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.8" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.11%)</title><rect x="1186.2" y="691.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.11%)</title><rect x="1186.2" y="675.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.11%)</title><rect x="1186.2" y="659.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.11%)</title><rect x="1186.2" y="643.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.11%)</title><rect x="1186.2" y="627.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.11%)</title><rect x="1186.2" y="611.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.11%)</title><rect x="1186.2" y="595.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.11%)</title><rect x="1186.2" y="579.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.11%)</title><rect x="1186.2" y="563.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.11%)</title><rect x="1186.2" y="547.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.11%)</title><rect x="1186.2" y="531.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.11%)</title><rect x="1186.2" y="515.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.11%)</title><rect x="1186.2" y="499.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.11%)</title><rect x="1186.2" y="483.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.11%)</title><rect x="1186.2" y="467.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.11%)</title><rect x="1186.2" y="451.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.11%)</title><rect x="1186.2" y="435.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="446.0"></text>
</g>
<g>
<title>CmpPNode::sub(Type const*, Type const*) const (1 samples, 0.04%)</title><rect x="1186.2" y="419.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1186.7" y="419.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1186.7" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1186.7" y="387.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1186.7" y="371.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1186.7" y="355.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.07%)</title><rect x="1186.7" y="339.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1186.7" y="323.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1186.7" y="307.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.7" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1186.7" y="291.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1186.7" y="275.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1186.7" y="259.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.07%)</title><rect x="1186.7" y="243.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1186.7" y="227.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.7" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1186.7" y="211.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1186.7" y="195.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1186.7" y="179.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1186.7" y="163.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1186.7" y="147.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="158.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.04%)</title><rect x="1186.7" y="131.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="142.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.04%)</title><rect x="1186.7" y="115.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1186.7" y="99.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="110.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1186.7" y="83.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1187.1" y="227.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1187.1" y="211.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.1" y="222.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.04%)</title><rect x="1187.1" y="195.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.1" y="206.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1187.1" y="179.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="190.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1187.1" y="163.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="174.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.04%)</title><rect x="1187.1" y="147.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="158.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1187.1" y="131.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="142.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.04%)</title><rect x="1187.5" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.5" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.04%)</title><rect x="1187.5" y="803.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.5" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.04%)</title><rect x="1187.5" y="787.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.5" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.04%)</title><rect x="1187.5" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.5" y="782.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.04%)</title><rect x="1187.5" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.5" y="766.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.04%)</title><rect x="1187.5" y="739.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.5" y="750.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.04%)</title><rect x="1187.5" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.5" y="734.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.04%)</title><rect x="1187.5" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.5" y="718.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.04%)</title><rect x="1187.5" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.5" y="702.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.04%)</title><rect x="1187.5" y="675.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.5" y="686.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.04%)</title><rect x="1187.5" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.5" y="670.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.04%)</title><rect x="1187.5" y="643.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.5" y="654.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value(int, Instruction*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.04%)</title><rect x="1187.5" y="627.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.5" y="638.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value_for_operand(LIR_OprDesc*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.04%)</title><rect x="1187.5" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="622.0"></text>
</g>
<g>
<title>VMThread::run() (5 samples, 0.18%)</title><rect x="1187.9" y="867.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (5 samples, 0.18%)</title><rect x="1187.9" y="851.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.9" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.04%)</title><rect x="1187.9" y="835.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="846.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.63] (4 samples, 0.14%)</title><rect x="1188.3" y="835.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="846.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (4 samples, 0.14%)</title><rect x="1188.3" y="819.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.3" y="830.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (3 samples, 0.11%)</title><rect x="1188.3" y="803.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.3" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.11%)</title><rect x="1188.3" y="787.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.3" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (2 samples, 0.07%)</title><rect x="1188.3" y="771.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="782.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (2 samples, 0.07%)</title><rect x="1188.3" y="755.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="766.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.07%)</title><rect x="1188.3" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.3" y="750.0"></text>
</g>
<g>
<title>__new_sem_post (2 samples, 0.07%)</title><rect x="1188.3" y="723.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1191.3" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1188.7" y="707.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1191.7" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.04%)</title><rect x="1188.7" y="691.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1191.7" y="702.0"></text>
</g>
<g>
<title>G1Policy::finalize_collection_set(double, G1SurvivorRegions*) (1 samples, 0.04%)</title><rect x="1189.2" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.2" y="782.0"></text>
</g>
<g>
<title>G1CollectionSet::finalize_young_part(double, G1SurvivorRegions*) (1 samples, 0.04%)</title><rect x="1189.2" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.2" y="766.0"></text>
</g>
<g>
<title>G1Policy::predict_base_elapsed_time_ms(unsigned long) const (1 samples, 0.04%)</title><rect x="1189.2" y="739.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.2" y="750.0"></text>
</g>
<g>
<title>G1Analytics::predict_rs_scan_time_ms(unsigned long, bool) const (1 samples, 0.04%)</title><rect x="1189.2" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.2" y="734.0"></text>
</g>
<g>
<title>VM_HandshakeAllThreads::doit() (1 samples, 0.04%)</title><rect x="1189.6" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.6" y="814.0"></text>
</g>
<g>
<title>__errno_location@plt (1 samples, 0.04%)</title><rect x="1189.6" y="787.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1192.6" y="798.0"></text>
</g>
</g>
</svg>
