<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (3,626 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.06%)</title><rect x="10.0" y="915.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="899.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="883.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="10.0" y="867.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="10.0" y="851.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="10.0" y="835.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="10.0" y="819.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="10.0" y="803.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="10.0" y="787.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="10.0" y="771.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="10.0" y="755.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.3" y="899.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.3" y="910.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.03%)</title><rect x="10.3" y="883.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.3" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="10.7" y="915.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.7" y="926.0"></text>
</g>
<g>
<title>__new_sem_wait_slow.constprop.0 (1 samples, 0.03%)</title><rect x="10.7" y="899.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="13.7" y="910.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.03%)</title><rect x="11.0" y="915.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="11.0" y="899.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.0" y="910.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.03%)</title><rect x="11.0" y="883.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.0" y="894.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.03%)</title><rect x="11.3" y="915.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.3" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="11.6" y="915.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="14.6" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="11.6" y="899.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="14.6" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="11.6" y="883.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="14.6" y="894.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="11.6" y="867.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="14.6" y="878.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="11.6" y="851.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="14.6" y="862.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="11.6" y="835.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="14.6" y="846.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="11.6" y="819.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="14.6" y="830.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="11.6" y="803.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="14.6" y="814.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="11.6" y="787.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="14.6" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (3 samples, 0.08%)</title><rect x="12.0" y="915.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="15.0" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="12.6" y="899.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="15.6" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="12.6" y="883.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="15.6" y="894.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="12.6" y="867.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="15.6" y="878.0"></text>
</g>
<g>
<title>get_timespec64 (1 samples, 0.03%)</title><rect x="12.6" y="851.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="15.6" y="862.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.03%)</title><rect x="12.6" y="835.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="15.6" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (269 samples, 7.42%)</title><rect x="12.9" y="915.0" width="87.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="926.0">java/lang/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (269 samples, 7.42%)</title><rect x="12.9" y="899.0" width="87.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.9" y="910.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (269 samples, 7.42%)</title><rect x="12.9" y="883.0" width="87.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.9" y="894.0">java/util/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$89/677691979.run (269 samples, 7.42%)</title><rect x="12.9" y="867.0" width="87.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.9" y="878.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$flush$9 (269 samples, 7.42%)</title><rect x="12.9" y="851.0" width="87.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.9" y="862.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.serialize (269 samples, 7.42%)</title><rect x="12.9" y="835.0" width="87.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="846.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.serialize (269 samples, 7.42%)</title><rect x="12.9" y="819.0" width="87.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.9" y="830.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="13.3" y="803.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.3" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.3" y="787.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.3" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.3" y="771.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.3" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.3" y="755.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="13.3" y="739.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.3" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="13.3" y="723.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.3" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="13.3" y="707.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.3" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (267 samples, 7.36%)</title><rect x="13.6" y="803.0" width="86.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.6" y="814.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (4 samples, 0.11%)</title><rect x="14.2" y="787.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.2" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (4 samples, 0.11%)</title><rect x="14.2" y="771.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (3 samples, 0.08%)</title><rect x="15.5" y="787.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.5" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.08%)</title><rect x="15.5" y="771.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.5" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (254 samples, 7.00%)</title><rect x="16.5" y="787.0" width="82.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.5" y="798.0">sun/nio/c..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.03%)</title><rect x="16.5" y="771.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.5" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.03%)</title><rect x="16.5" y="755.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.5" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="16.5" y="739.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="16.5" y="723.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.5" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="16.5" y="707.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.5" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (237 samples, 6.54%)</title><rect x="16.8" y="771.0" width="77.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.8" y="782.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (237 samples, 6.54%)</title><rect x="16.8" y="755.0" width="77.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.8" y="766.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (237 samples, 6.54%)</title><rect x="16.8" y="739.0" width="77.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.8" y="750.0">sun/nio/c..</text>
</g>
<g>
<title>[unknown] (234 samples, 6.45%)</title><rect x="17.5" y="723.0" width="76.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="20.5" y="734.0">[unknown]</text>
</g>
<g>
<title>__libc_write (234 samples, 6.45%)</title><rect x="17.5" y="707.0" width="76.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="20.5" y="718.0">__libc_w..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (185 samples, 5.10%)</title><rect x="33.4" y="691.0" width="60.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="36.4" y="702.0">entry_..</text>
</g>
<g>
<title>do_syscall_64 (185 samples, 5.10%)</title><rect x="33.4" y="675.0" width="60.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="36.4" y="686.0">do_sys..</text>
</g>
<g>
<title>__x64_sys_write (166 samples, 4.58%)</title><rect x="39.6" y="659.0" width="54.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="42.6" y="670.0">__x64..</text>
</g>
<g>
<title>ksys_write (166 samples, 4.58%)</title><rect x="39.6" y="643.0" width="54.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="42.6" y="654.0">ksys_..</text>
</g>
<g>
<title>__f_unlock_pos (1 samples, 0.03%)</title><rect x="39.9" y="627.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="42.9" y="638.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.03%)</title><rect x="39.9" y="611.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="42.9" y="622.0"></text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.06%)</title><rect x="40.3" y="627.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="43.3" y="638.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="40.6" y="611.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="43.6" y="622.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.03%)</title><rect x="40.6" y="595.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="43.6" y="606.0"></text>
</g>
<g>
<title>__sb_start_write (1 samples, 0.03%)</title><rect x="40.9" y="627.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="43.9" y="638.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="41.2" y="627.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="44.2" y="638.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="41.2" y="611.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="44.2" y="622.0"></text>
</g>
<g>
<title>rw_verify_area (1 samples, 0.03%)</title><rect x="41.6" y="627.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="44.6" y="638.0"></text>
</g>
<g>
<title>vfs_write (159 samples, 4.38%)</title><rect x="41.9" y="627.0" width="51.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="44.9" y="638.0">vfs_w..</text>
</g>
<g>
<title>__fsnotify_parent (2 samples, 0.06%)</title><rect x="41.9" y="611.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="44.9" y="622.0"></text>
</g>
<g>
<title>__sb_end_write (1 samples, 0.03%)</title><rect x="42.5" y="611.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="45.5" y="622.0"></text>
</g>
<g>
<title>__sb_start_write (2 samples, 0.06%)</title><rect x="42.9" y="611.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="45.9" y="622.0"></text>
</g>
<g>
<title>__vfs_write (145 samples, 4.00%)</title><rect x="43.5" y="611.0" width="47.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="46.5" y="622.0">__vf..</text>
</g>
<g>
<title>ext4_file_write_iter (1 samples, 0.03%)</title><rect x="43.5" y="595.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="46.5" y="606.0"></text>
</g>
<g>
<title>new_sync_write (144 samples, 3.97%)</title><rect x="43.8" y="595.0" width="46.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="46.8" y="606.0">new_..</text>
</g>
<g>
<title>ext4_file_write_iter (140 samples, 3.86%)</title><rect x="44.5" y="579.0" width="45.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="47.5" y="590.0">ext4..</text>
</g>
<g>
<title>__generic_file_write_iter (134 samples, 3.70%)</title><rect x="45.1" y="563.0" width="43.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="48.1" y="574.0">__ge..</text>
</g>
<g>
<title>ext4_da_write_begin (2 samples, 0.06%)</title><rect x="45.5" y="547.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="48.5" y="558.0"></text>
</g>
<g>
<title>ext4_da_write_end (2 samples, 0.06%)</title><rect x="46.1" y="547.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="49.1" y="558.0"></text>
</g>
<g>
<title>file_update_time (4 samples, 0.11%)</title><rect x="46.8" y="547.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="49.8" y="558.0"></text>
</g>
<g>
<title>current_time (3 samples, 0.08%)</title><rect x="47.1" y="531.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="50.1" y="542.0"></text>
</g>
<g>
<title>timespec64_trunc (2 samples, 0.06%)</title><rect x="47.4" y="515.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="50.4" y="526.0"></text>
</g>
<g>
<title>generic_perform_write (125 samples, 3.45%)</title><rect x="48.1" y="547.0" width="40.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="51.1" y="558.0">gen..</text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="48.4" y="531.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="51.4" y="542.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="48.4" y="515.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="51.4" y="526.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.03%)</title><rect x="48.7" y="531.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="51.7" y="542.0"></text>
</g>
<g>
<title>ext4_da_write_begin (31 samples, 0.85%)</title><rect x="49.1" y="531.0" width="10.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="52.1" y="542.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (12 samples, 0.33%)</title><rect x="51.7" y="515.0" width="3.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="54.7" y="526.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="51.7" y="499.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="54.7" y="510.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.03%)</title><rect x="52.0" y="499.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="55.0" y="510.0"></text>
</g>
<g>
<title>jbd2__journal_start (10 samples, 0.28%)</title><rect x="52.3" y="499.0" width="3.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="55.3" y="510.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="53.3" y="483.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="56.3" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.03%)</title><rect x="53.6" y="483.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="56.6" y="494.0"></text>
</g>
<g>
<title>memset_erms (1 samples, 0.03%)</title><rect x="53.9" y="483.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="56.9" y="494.0"></text>
</g>
<g>
<title>start_this_handle (4 samples, 0.11%)</title><rect x="54.3" y="483.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="57.3" y="494.0"></text>
</g>
<g>
<title>add_transaction_credits (1 samples, 0.03%)</title><rect x="55.2" y="467.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="58.2" y="478.0"></text>
</g>
<g>
<title>ext4_nonda_switch (2 samples, 0.06%)</title><rect x="55.6" y="515.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="58.6" y="526.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (8 samples, 0.22%)</title><rect x="56.2" y="515.0" width="2.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="59.2" y="526.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.03%)</title><rect x="56.2" y="499.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="59.2" y="510.0"></text>
</g>
<g>
<title>pagecache_get_page (7 samples, 0.19%)</title><rect x="56.5" y="499.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="59.5" y="510.0"></text>
</g>
<g>
<title>find_get_entry (6 samples, 0.17%)</title><rect x="56.9" y="483.0" width="1.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="59.9" y="494.0"></text>
</g>
<g>
<title>xas_load (3 samples, 0.08%)</title><rect x="57.5" y="467.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="60.5" y="478.0"></text>
</g>
<g>
<title>xas_start (2 samples, 0.06%)</title><rect x="57.8" y="451.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="60.8" y="462.0"></text>
</g>
<g>
<title>xas_start (1 samples, 0.03%)</title><rect x="58.5" y="467.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="61.5" y="478.0"></text>
</g>
<g>
<title>unlock_page (1 samples, 0.03%)</title><rect x="58.8" y="515.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="61.8" y="526.0"></text>
</g>
<g>
<title>ext4_da_write_end (84 samples, 2.32%)</title><rect x="59.1" y="531.0" width="27.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="62.1" y="542.0">e..</text>
</g>
<g>
<title>__ext4_journal_stop (12 samples, 0.33%)</title><rect x="60.1" y="515.0" width="3.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="63.1" y="526.0"></text>
</g>
<g>
<title>jbd2_journal_stop (12 samples, 0.33%)</title><rect x="60.1" y="499.0" width="3.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="63.1" y="510.0"></text>
</g>
<g>
<title>__wake_up (6 samples, 0.17%)</title><rect x="60.8" y="483.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="63.8" y="494.0"></text>
</g>
<g>
<title>__wake_up_common_lock (6 samples, 0.17%)</title><rect x="60.8" y="467.0" width="1.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="63.8" y="478.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.06%)</title><rect x="61.1" y="451.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="64.1" y="462.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.08%)</title><rect x="61.7" y="451.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="64.7" y="462.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.03%)</title><rect x="62.7" y="483.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="65.7" y="494.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.08%)</title><rect x="63.0" y="483.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="66.0" y="494.0"></text>
</g>
<g>
<title>generic_write_end (69 samples, 1.90%)</title><rect x="64.0" y="515.0" width="22.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="67.0" y="526.0">g..</text>
</g>
<g>
<title>__mark_inode_dirty (62 samples, 1.71%)</title><rect x="64.0" y="499.0" width="20.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="67.0" y="510.0"></text>
</g>
<g>
<title>ext4_dirty_inode (62 samples, 1.71%)</title><rect x="64.0" y="483.0" width="20.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="67.0" y="494.0"></text>
</g>
<g>
<title>__ext4_journal_stop (1 samples, 0.03%)</title><rect x="64.0" y="467.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="67.0" y="478.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (61 samples, 1.68%)</title><rect x="64.3" y="467.0" width="19.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="67.3" y="478.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (1 samples, 0.03%)</title><rect x="64.3" y="451.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="67.3" y="462.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (48 samples, 1.32%)</title><rect x="64.7" y="451.0" width="15.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="67.7" y="462.0"></text>
</g>
<g>
<title>__brelse (1 samples, 0.03%)</title><rect x="67.3" y="435.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="70.3" y="446.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (5 samples, 0.14%)</title><rect x="67.6" y="435.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="70.6" y="446.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (3 samples, 0.08%)</title><rect x="68.3" y="419.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="71.3" y="430.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="69.2" y="435.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="72.2" y="446.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (32 samples, 0.88%)</title><rect x="69.6" y="435.0" width="10.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="72.6" y="446.0"></text>
</g>
<g>
<title>crypto_shash_update (3 samples, 0.08%)</title><rect x="69.6" y="419.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="72.6" y="430.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.63 (29 samples, 0.80%)</title><rect x="70.5" y="419.0" width="9.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="73.5" y="430.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (15 samples, 0.41%)</title><rect x="71.2" y="403.0" width="4.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="74.2" y="414.0"></text>
</g>
<g>
<title>crypto_shash_update (12 samples, 0.33%)</title><rect x="76.1" y="403.0" width="3.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="79.1" y="414.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (10 samples, 0.28%)</title><rect x="76.7" y="387.0" width="3.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="79.7" y="398.0"></text>
</g>
<g>
<title>from_kuid (1 samples, 0.03%)</title><rect x="80.0" y="435.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="83.0" y="446.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.03%)</title><rect x="80.0" y="419.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="83.0" y="430.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (12 samples, 0.33%)</title><rect x="80.3" y="451.0" width="3.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="83.3" y="462.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (8 samples, 0.22%)</title><rect x="80.3" y="435.0" width="2.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="83.3" y="446.0"></text>
</g>
<g>
<title>__getblk_gfp (1 samples, 0.03%)</title><rect x="81.9" y="419.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="84.9" y="430.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="81.9" y="403.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="84.9" y="414.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="81.9" y="387.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="84.9" y="398.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.03%)</title><rect x="82.2" y="419.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="85.2" y="430.0"></text>
</g>
<g>
<title>ext4_inode_table (1 samples, 0.03%)</title><rect x="82.6" y="419.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="85.6" y="430.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (2 samples, 0.06%)</title><rect x="82.9" y="435.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="85.9" y="446.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="82.9" y="419.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="85.9" y="430.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="82.9" y="403.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="85.9" y="414.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (1 samples, 0.03%)</title><rect x="83.2" y="419.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="86.2" y="430.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (1 samples, 0.03%)</title><rect x="83.2" y="403.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="86.2" y="414.0"></text>
</g>
<g>
<title>__getblk_gfp (1 samples, 0.03%)</title><rect x="83.5" y="435.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="86.5" y="446.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.03%)</title><rect x="83.9" y="435.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="86.9" y="446.0"></text>
</g>
<g>
<title>block_write_end (5 samples, 0.14%)</title><rect x="84.2" y="499.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="87.2" y="510.0"></text>
</g>
<g>
<title>__block_commit_write.isra.41 (5 samples, 0.14%)</title><rect x="84.2" y="483.0" width="1.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="87.2" y="494.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.03%)</title><rect x="85.8" y="499.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="88.8" y="510.0"></text>
</g>
<g>
<title>unlock_page (1 samples, 0.03%)</title><rect x="86.2" y="499.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="89.2" y="510.0"></text>
</g>
<g>
<title>ext4_nonda_switch (1 samples, 0.03%)</title><rect x="86.5" y="531.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="89.5" y="542.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (2 samples, 0.06%)</title><rect x="86.8" y="531.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="89.8" y="542.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.03%)</title><rect x="87.1" y="515.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="90.1" y="526.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (4 samples, 0.11%)</title><rect x="87.5" y="531.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="90.5" y="542.0"></text>
</g>
<g>
<title>down_write_trylock (2 samples, 0.06%)</title><rect x="88.8" y="563.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="91.8" y="574.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.03%)</title><rect x="89.4" y="563.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="92.4" y="574.0"></text>
</g>
<g>
<title>up_write (1 samples, 0.03%)</title><rect x="89.7" y="563.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="92.7" y="574.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.03%)</title><rect x="90.1" y="579.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="93.1" y="590.0"></text>
</g>
<g>
<title>up_write (1 samples, 0.03%)</title><rect x="90.4" y="579.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="93.4" y="590.0"></text>
</g>
<g>
<title>fsnotify (2 samples, 0.06%)</title><rect x="90.7" y="611.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="93.7" y="622.0"></text>
</g>
<g>
<title>rw_verify_area (7 samples, 0.19%)</title><rect x="91.4" y="611.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="94.4" y="622.0"></text>
</g>
<g>
<title>security_file_permission (5 samples, 0.14%)</title><rect x="91.7" y="595.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="94.7" y="606.0"></text>
</g>
<g>
<title>apparmor_file_permission (3 samples, 0.08%)</title><rect x="91.7" y="579.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="94.7" y="590.0"></text>
</g>
<g>
<title>aa_file_perm (1 samples, 0.03%)</title><rect x="91.7" y="563.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="94.7" y="574.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.06%)</title><rect x="92.0" y="563.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="95.0" y="574.0"></text>
</g>
<g>
<title>selinux_file_permission (2 samples, 0.06%)</title><rect x="92.7" y="579.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="95.7" y="590.0"></text>
</g>
<g>
<title>avc_policy_seqno (1 samples, 0.03%)</title><rect x="93.0" y="563.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="96.0" y="574.0"></text>
</g>
<g>
<title>selinux_file_permission (1 samples, 0.03%)</title><rect x="93.3" y="595.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="96.3" y="606.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="93.6" y="723.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="96.6" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (11 samples, 0.30%)</title><rect x="94.0" y="771.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.0" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.08%)</title><rect x="94.6" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="97.6" y="766.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.06%)</title><rect x="94.9" y="739.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="97.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (6 samples, 0.17%)</title><rect x="95.6" y="755.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="96.9" y="739.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.9" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="97.2" y="739.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="100.2" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (5 samples, 0.14%)</title><rect x="97.5" y="771.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.06%)</title><rect x="97.5" y="755.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (3 samples, 0.08%)</title><rect x="98.2" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (4 samples, 0.11%)</title><rect x="99.2" y="787.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.2" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.08%)</title><rect x="99.5" y="771.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.5" y="782.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.03%)</title><rect x="100.1" y="755.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="103.1" y="766.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,213 samples, 88.61%)</title><rect x="100.5" y="915.0" width="1045.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="103.5" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.03%)</title><rect x="103.7" y="899.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="106.7" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (11 samples, 0.30%)</title><rect x="104.0" y="899.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.0" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (11 samples, 0.30%)</title><rect x="104.0" y="883.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="107.0" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1 samples, 0.03%)</title><rect x="107.3" y="867.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="110.3" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (493 samples, 13.60%)</title><rect x="107.6" y="899.0" width="160.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="110.6" y="910.0">one/nio/net/NativeSe..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="111.9" y="883.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="114.9" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="111.9" y="867.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="114.9" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="111.9" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="114.9" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="111.9" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="114.9" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (1 samples, 0.03%)</title><rect x="112.2" y="883.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.2" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.03%)</title><rect x="112.2" y="867.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.2" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (478 samples, 13.18%)</title><rect x="112.5" y="883.0" width="155.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="115.5" y="894.0">one/nio/net/NativeSe..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.03%)</title><rect x="116.7" y="867.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="119.7" y="878.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.03%)</title><rect x="116.7" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="119.7" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="116.7" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="119.7" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="116.7" y="819.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="119.7" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="116.7" y="803.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="119.7" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="116.7" y="787.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="119.7" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="116.7" y="771.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="119.7" y="782.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="116.7" y="755.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="119.7" y="766.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="116.7" y="739.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="119.7" y="750.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="116.7" y="723.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="119.7" y="734.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (4 samples, 0.11%)</title><rect x="117.1" y="867.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="120.1" y="878.0"></text>
</g>
<g>
<title>[unknown] (443 samples, 12.22%)</title><rect x="118.4" y="867.0" width="144.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="121.4" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (7 samples, 0.19%)</title><rect x="118.4" y="851.0" width="2.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="121.4" y="862.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.19%)</title><rect x="118.4" y="835.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="121.4" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.06%)</title><rect x="119.0" y="819.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="122.0" y="830.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.08%)</title><rect x="119.7" y="819.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="122.7" y="830.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.08%)</title><rect x="119.7" y="803.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="122.7" y="814.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (11 samples, 0.30%)</title><rect x="120.6" y="851.0" width="3.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="123.6" y="862.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.06%)</title><rect x="124.2" y="851.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="127.2" y="862.0"></text>
</g>
<g>
<title>clock_gettime (12 samples, 0.33%)</title><rect x="124.9" y="851.0" width="3.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="127.9" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.06%)</title><rect x="126.8" y="835.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="129.8" y="846.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.11%)</title><rect x="127.5" y="835.0" width="1.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="130.5" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.06%)</title><rect x="128.1" y="819.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="131.1" y="830.0"></text>
</g>
<g>
<title>epoll_wait (410 samples, 11.31%)</title><rect x="128.8" y="851.0" width="133.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="131.8" y="862.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (316 samples, 8.71%)</title><rect x="159.4" y="835.0" width="102.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="162.4" y="846.0">entry_SYSCAL..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (1 samples, 0.03%)</title><rect x="159.4" y="819.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="162.4" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (315 samples, 8.69%)</title><rect x="159.7" y="819.0" width="102.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="162.7" y="830.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_epoll_wait (287 samples, 7.92%)</title><rect x="167.8" y="803.0" width="93.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="170.8" y="814.0">__x64_sys_e..</text>
</g>
<g>
<title>do_epoll_wait (287 samples, 7.92%)</title><rect x="167.8" y="787.0" width="93.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="170.8" y="798.0">do_epoll_wait</text>
</g>
<g>
<title>__fdget (6 samples, 0.17%)</title><rect x="169.5" y="771.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="172.5" y="782.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.17%)</title><rect x="169.5" y="755.0" width="1.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="172.5" y="766.0"></text>
</g>
<g>
<title>__fget (5 samples, 0.14%)</title><rect x="169.8" y="739.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="172.8" y="750.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="171.4" y="771.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="174.4" y="782.0"></text>
</g>
<g>
<title>ep_poll (266 samples, 7.34%)</title><rect x="171.7" y="771.0" width="86.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="174.7" y="782.0">ep_poll</text>
</g>
<g>
<title>_raw_spin_lock_irq (1 samples, 0.03%)</title><rect x="180.8" y="755.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="183.8" y="766.0"></text>
</g>
<g>
<title>_raw_write_lock_irq (1 samples, 0.03%)</title><rect x="181.2" y="755.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="184.2" y="766.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (139 samples, 3.83%)</title><rect x="181.5" y="755.0" width="45.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="184.5" y="766.0">ep_s..</text>
</g>
<g>
<title>_cond_resched (3 samples, 0.08%)</title><rect x="193.9" y="739.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="196.9" y="750.0"></text>
</g>
<g>
<title>ep_send_events_proc (89 samples, 2.45%)</title><rect x="194.8" y="739.0" width="29.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="197.8" y="750.0">ep..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="201.4" y="723.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="204.4" y="734.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (63 samples, 1.74%)</title><rect x="201.7" y="723.0" width="20.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="204.7" y="734.0"></text>
</g>
<g>
<title>sock_poll (53 samples, 1.46%)</title><rect x="204.0" y="707.0" width="17.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="207.0" y="718.0"></text>
</g>
<g>
<title>tcp_poll (17 samples, 0.47%)</title><rect x="211.8" y="691.0" width="5.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="214.8" y="702.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.06%)</title><rect x="216.6" y="675.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="219.6" y="686.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (12 samples, 0.33%)</title><rect x="217.3" y="691.0" width="3.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="220.3" y="702.0"></text>
</g>
<g>
<title>tcp_poll (3 samples, 0.08%)</title><rect x="221.2" y="707.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="224.2" y="718.0"></text>
</g>
<g>
<title>sock_poll (5 samples, 0.14%)</title><rect x="222.2" y="723.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="225.2" y="734.0"></text>
</g>
<g>
<title>mutex_lock (6 samples, 0.17%)</title><rect x="223.8" y="739.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="226.8" y="750.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.08%)</title><rect x="225.8" y="739.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="228.8" y="750.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.03%)</title><rect x="226.7" y="755.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="229.7" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (96 samples, 2.65%)</title><rect x="227.1" y="755.0" width="31.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="230.1" y="766.0">sc..</text>
</g>
<g>
<title>schedule (4 samples, 0.11%)</title><rect x="227.1" y="739.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="230.1" y="750.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (92 samples, 2.54%)</title><rect x="228.4" y="739.0" width="29.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="231.4" y="750.0">sc..</text>
</g>
<g>
<title>schedule (87 samples, 2.40%)</title><rect x="230.0" y="723.0" width="28.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="233.0" y="734.0">sc..</text>
</g>
<g>
<title>__sched_text_start (85 samples, 2.34%)</title><rect x="230.6" y="707.0" width="27.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="233.6" y="718.0">_..</text>
</g>
<g>
<title>finish_task_switch (75 samples, 2.07%)</title><rect x="233.9" y="691.0" width="24.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="236.9" y="702.0">f..</text>
</g>
<g>
<title>fput (6 samples, 0.17%)</title><rect x="258.3" y="771.0" width="2.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="261.3" y="782.0"></text>
</g>
<g>
<title>fput_many (6 samples, 0.17%)</title><rect x="258.3" y="755.0" width="2.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="261.3" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (3 samples, 0.08%)</title><rect x="260.3" y="771.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="263.3" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (3 samples, 0.08%)</title><rect x="261.2" y="803.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="264.2" y="814.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="262.2" y="851.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="265.2" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.06%)</title><rect x="262.5" y="867.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="265.5" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.06%)</title><rect x="262.5" y="851.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="265.5" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.06%)</title><rect x="262.5" y="835.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="265.5" y="846.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.06%)</title><rect x="262.5" y="819.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="265.5" y="830.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.06%)</title><rect x="262.5" y="803.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="265.5" y="814.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.06%)</title><rect x="262.5" y="787.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="265.5" y="798.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.06%)</title><rect x="262.5" y="771.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="265.5" y="782.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.06%)</title><rect x="262.5" y="755.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="265.5" y="766.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.06%)</title><rect x="262.5" y="739.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="265.5" y="750.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.17%)</title><rect x="263.2" y="867.0" width="1.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="266.2" y="878.0"></text>
</g>
<g>
<title>clock_gettime@plt (2 samples, 0.06%)</title><rect x="265.1" y="867.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="268.1" y="878.0"></text>
</g>
<g>
<title>epoll_wait (6 samples, 0.17%)</title><rect x="265.8" y="867.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="268.8" y="878.0"></text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.03%)</title><rect x="267.7" y="867.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="270.7" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,698 samples, 74.41%)</title><rect x="268.1" y="899.0" width="878.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.1" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,681 samples, 73.94%)</title><rect x="272.0" y="883.0" width="872.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.0" y="894.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.03%)</title><rect x="273.6" y="867.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.6" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.03%)</title><rect x="273.6" y="851.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.6" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,191 samples, 60.42%)</title><rect x="273.9" y="867.0" width="713.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.9" y="878.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,951 samples, 53.81%)</title><rect x="289.2" y="851.0" width="634.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.2" y="862.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,943 samples, 53.59%)</title><rect x="291.8" y="835.0" width="632.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.8" y="846.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (1,881 samples, 51.88%)</title><rect x="293.1" y="819.0" width="612.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.1" y="830.0">RequestHandler3_upsert.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,360 samples, 37.51%)</title><rect x="293.1" y="803.0" width="442.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.1" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (11 samples, 0.30%)</title><rect x="299.3" y="787.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.30%)</title><rect x="299.3" y="771.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.30%)</title><rect x="299.3" y="755.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.11%)</title><rect x="301.6" y="739.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.6" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,323 samples, 36.49%)</title><rect x="302.9" y="787.0" width="430.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="305.9" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (76 samples, 2.10%)</title><rect x="302.9" y="771.0" width="24.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="305.9" y="782.0">o..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="326.0" y="755.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="329.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="327.0" y="755.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.0" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="327.0" y="739.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="330.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="327.3" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="330.3" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="327.3" y="707.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="330.3" y="718.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="327.3" y="691.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="330.3" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,247 samples, 34.39%)</title><rect x="327.6" y="771.0" width="405.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="330.6" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,245 samples, 34.34%)</title><rect x="328.3" y="755.0" width="405.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.3" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>gettimeofday (4 samples, 0.11%)</title><rect x="328.9" y="739.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="331.9" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,234 samples, 34.03%)</title><rect x="330.2" y="739.0" width="401.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="333.2" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,230 samples, 33.92%)</title><rect x="331.5" y="723.0" width="400.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.5" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (19 samples, 0.52%)</title><rect x="336.1" y="707.0" width="6.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="339.1" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="337.7" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="340.7" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="338.0" y="691.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="341.0" y="702.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.03%)</title><rect x="338.4" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="341.4" y="702.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="338.7" y="691.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="341.7" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (10 samples, 0.28%)</title><rect x="339.0" y="691.0" width="3.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="342.0" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.08%)</title><rect x="340.0" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="343.0" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (4 samples, 0.11%)</title><rect x="341.0" y="675.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="344.0" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="342.3" y="707.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="345.3" y="718.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.06%)</title><rect x="342.6" y="707.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="345.6" y="718.0"></text>
</g>
<g>
<title>__send (1,193 samples, 32.90%)</title><rect x="343.2" y="707.0" width="388.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="346.2" y="718.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,098 samples, 30.28%)</title><rect x="374.2" y="691.0" width="357.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="377.2" y="702.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (2 samples, 0.06%)</title><rect x="374.2" y="675.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="377.2" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (1,096 samples, 30.23%)</title><rect x="374.8" y="675.0" width="356.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="377.8" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__sys_sendto (1 samples, 0.03%)</title><rect x="380.0" y="659.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="383.0" y="670.0"></text>
</g>
<g>
<title>__x64_sys_sendto (1,078 samples, 29.73%)</title><rect x="380.3" y="659.0" width="350.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="383.3" y="670.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,077 samples, 29.70%)</title><rect x="380.3" y="643.0" width="350.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="383.3" y="654.0">__sys_sendto</text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="381.3" y="627.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="384.3" y="638.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="381.3" y="611.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="384.3" y="622.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="381.6" y="627.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="384.6" y="638.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.03%)</title><rect x="382.0" y="627.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="385.0" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (2 samples, 0.06%)</title><rect x="382.3" y="627.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="385.3" y="638.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.03%)</title><rect x="382.9" y="627.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="385.9" y="638.0"></text>
</g>
<g>
<title>sock_sendmsg (1,058 samples, 29.18%)</title><rect x="383.3" y="627.0" width="344.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="386.3" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.03%)</title><rect x="384.2" y="611.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="387.2" y="622.0"></text>
</g>
<g>
<title>inet6_sendmsg (1,033 samples, 28.49%)</title><rect x="384.6" y="611.0" width="336.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="387.6" y="622.0">inet6_sendmsg</text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.03%)</title><rect x="386.2" y="595.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="389.2" y="606.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="386.5" y="595.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="389.5" y="606.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.14%)</title><rect x="386.8" y="595.0" width="1.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="389.8" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg (1,021 samples, 28.16%)</title><rect x="388.5" y="595.0" width="332.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="391.5" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="389.4" y="579.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="392.4" y="590.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.03%)</title><rect x="389.8" y="579.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="392.8" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.11%)</title><rect x="390.1" y="579.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="393.1" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.06%)</title><rect x="391.4" y="579.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="394.4" y="590.0"></text>
</g>
<g>
<title>lock_sock_nested (5 samples, 0.14%)</title><rect x="392.1" y="579.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="395.1" y="590.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.06%)</title><rect x="392.1" y="563.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="395.1" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.08%)</title><rect x="392.7" y="563.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="395.7" y="574.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="393.7" y="579.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="396.7" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.03%)</title><rect x="393.7" y="563.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="396.7" y="574.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="393.7" y="547.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="396.7" y="558.0"></text>
</g>
<g>
<title>sk_page_frag_refill (2 samples, 0.06%)</title><rect x="394.0" y="579.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="397.0" y="590.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (2 samples, 0.06%)</title><rect x="394.7" y="579.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="397.7" y="590.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.03%)</title><rect x="395.3" y="579.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="398.3" y="590.0"></text>
</g>
<g>
<title>sock_zerocopy_put (2 samples, 0.06%)</title><rect x="395.6" y="579.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="398.6" y="590.0"></text>
</g>
<g>
<title>tcp_push (4 samples, 0.11%)</title><rect x="396.3" y="579.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="399.3" y="590.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.06%)</title><rect x="397.6" y="579.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="400.6" y="590.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.06%)</title><rect x="398.2" y="579.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="401.2" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (984 samples, 27.14%)</title><rect x="398.9" y="579.0" width="320.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="401.9" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.03%)</title><rect x="408.3" y="563.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="411.3" y="574.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.03%)</title><rect x="408.6" y="563.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="411.6" y="574.0"></text>
</g>
<g>
<title>__virt_addr_valid (5 samples, 0.14%)</title><rect x="409.0" y="563.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="412.0" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (11 samples, 0.30%)</title><rect x="410.6" y="563.0" width="3.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="413.6" y="574.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (7 samples, 0.19%)</title><rect x="410.9" y="547.0" width="2.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="413.9" y="558.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.03%)</title><rect x="413.2" y="547.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="416.2" y="558.0"></text>
</g>
<g>
<title>iov_iter_advance (2 samples, 0.06%)</title><rect x="413.5" y="547.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="416.5" y="558.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.03%)</title><rect x="414.2" y="563.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="417.2" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (10 samples, 0.28%)</title><rect x="414.5" y="563.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="417.5" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (9 samples, 0.25%)</title><rect x="414.8" y="547.0" width="3.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="417.8" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (62 samples, 1.71%)</title><rect x="417.8" y="563.0" width="20.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="420.8" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (55 samples, 1.52%)</title><rect x="419.7" y="547.0" width="17.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="422.7" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.56 (24 samples, 0.66%)</title><rect x="421.0" y="531.0" width="7.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="424.0" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (22 samples, 0.61%)</title><rect x="421.3" y="515.0" width="7.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="424.3" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.03%)</title><rect x="426.2" y="499.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="429.2" y="510.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="426.5" y="499.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="429.5" y="510.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="426.5" y="483.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="429.5" y="494.0"></text>
</g>
<g>
<title>kmalloc_slab (5 samples, 0.14%)</title><rect x="426.9" y="499.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="429.9" y="510.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="428.5" y="515.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="431.5" y="526.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (13 samples, 0.36%)</title><rect x="428.8" y="531.0" width="4.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="431.8" y="542.0"></text>
</g>
<g>
<title>ksize (12 samples, 0.33%)</title><rect x="433.1" y="531.0" width="3.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="436.1" y="542.0"></text>
</g>
<g>
<title>__ksize (12 samples, 0.33%)</title><rect x="433.1" y="515.0" width="3.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="436.1" y="526.0"></text>
</g>
<g>
<title>should_failslab (2 samples, 0.06%)</title><rect x="437.0" y="531.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="440.0" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.03%)</title><rect x="437.6" y="547.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="440.6" y="558.0"></text>
</g>
<g>
<title>skb_entail (9 samples, 0.25%)</title><rect x="437.9" y="563.0" width="3.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="440.9" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.03%)</title><rect x="440.9" y="563.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="443.9" y="574.0"></text>
</g>
<g>
<title>tcp_push (835 samples, 23.03%)</title><rect x="441.2" y="563.0" width="271.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="444.2" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (824 samples, 22.72%)</title><rect x="442.5" y="547.0" width="268.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="445.5" y="558.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>ktime_get (2 samples, 0.06%)</title><rect x="443.8" y="531.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="446.8" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.03%)</title><rect x="444.4" y="531.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="447.4" y="542.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.34 (3 samples, 0.08%)</title><rect x="444.8" y="531.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="447.8" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (814 samples, 22.45%)</title><rect x="445.7" y="531.0" width="264.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="448.7" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="450.3" y="515.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="453.3" y="526.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (743 samples, 20.49%)</title><rect x="450.6" y="515.0" width="241.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="453.6" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__skb_clone (4 samples, 0.11%)</title><rect x="461.4" y="499.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="464.4" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.03%)</title><rect x="462.7" y="499.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="465.7" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.03%)</title><rect x="463.0" y="499.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="466.0" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (688 samples, 18.97%)</title><rect x="463.3" y="499.0" width="223.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="466.3" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (683 samples, 18.84%)</title><rect x="463.6" y="483.0" width="222.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="466.6" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="465.9" y="467.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="468.9" y="478.0"></text>
</g>
<g>
<title>ip_local_out (666 samples, 18.37%)</title><rect x="466.2" y="467.0" width="216.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="469.2" y="478.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (12 samples, 0.33%)</title><rect x="466.9" y="451.0" width="3.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="469.9" y="462.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.06%)</title><rect x="467.6" y="435.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="470.6" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (7 samples, 0.19%)</title><rect x="468.2" y="435.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="471.2" y="446.0"></text>
</g>
<g>
<title>netlbl_enabled (5 samples, 0.14%)</title><rect x="468.5" y="419.0" width="1.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="471.5" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_output (1 samples, 0.03%)</title><rect x="470.2" y="419.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="473.2" y="430.0"></text>
</g>
<g>
<title>netlbl_enabled (1 samples, 0.03%)</title><rect x="470.2" y="403.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="473.2" y="414.0"></text>
</g>
<g>
<title>selinux_ipv4_output (1 samples, 0.03%)</title><rect x="470.5" y="435.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="473.5" y="446.0"></text>
</g>
<g>
<title>ip_output (647 samples, 17.84%)</title><rect x="470.8" y="451.0" width="210.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="473.8" y="462.0">ip_output</text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.03%)</title><rect x="472.1" y="435.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="475.1" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (603 samples, 16.63%)</title><rect x="472.4" y="435.0" width="196.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="475.4" y="446.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (7 samples, 0.19%)</title><rect x="472.8" y="419.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="475.8" y="430.0"></text>
</g>
<g>
<title>__ip_finish_output (593 samples, 16.35%)</title><rect x="475.0" y="419.0" width="193.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="478.0" y="430.0">__ip_finish_output</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="477.3" y="403.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="480.3" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (584 samples, 16.11%)</title><rect x="477.6" y="403.0" width="190.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="480.6" y="414.0">ip_finish_output2</text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.03%)</title><rect x="485.4" y="387.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="488.4" y="398.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (487 samples, 13.43%)</title><rect x="485.8" y="387.0" width="158.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="488.8" y="398.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.20 (486 samples, 13.40%)</title><rect x="486.1" y="371.0" width="158.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="489.1" y="382.0">do_softirq.part.20</text>
</g>
<g>
<title>do_softirq_own_stack (482 samples, 13.29%)</title><rect x="487.4" y="355.0" width="156.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="490.4" y="366.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (477 samples, 13.15%)</title><rect x="487.4" y="339.0" width="155.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="490.4" y="350.0">__softirqentry_text_..</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.06%)</title><rect x="492.3" y="323.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="495.3" y="334.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (4 samples, 0.11%)</title><rect x="492.9" y="323.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="495.9" y="334.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="494.2" y="323.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="497.2" y="334.0"></text>
</g>
<g>
<title>net_rx_action (450 samples, 12.41%)</title><rect x="494.6" y="323.0" width="146.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="497.6" y="334.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.03%)</title><rect x="496.5" y="307.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="499.5" y="318.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.03%)</title><rect x="496.8" y="307.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="499.8" y="318.0"></text>
</g>
<g>
<title>process_backlog (442 samples, 12.19%)</title><rect x="497.2" y="307.0" width="143.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="500.2" y="318.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (431 samples, 11.89%)</title><rect x="500.7" y="291.0" width="140.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="503.7" y="302.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.03%)</title><rect x="500.7" y="275.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="503.7" y="286.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (428 samples, 11.80%)</title><rect x="501.1" y="275.0" width="139.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="504.1" y="286.0">__netif_receive_s..</text>
</g>
<g>
<title>__netif_receive_skb_core (19 samples, 0.52%)</title><rect x="501.4" y="259.0" width="6.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="504.4" y="270.0"></text>
</g>
<g>
<title>ip_rcv (406 samples, 11.20%)</title><rect x="507.6" y="259.0" width="132.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="510.6" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (3 samples, 0.08%)</title><rect x="508.2" y="243.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="511.2" y="254.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.20 (5 samples, 0.14%)</title><rect x="509.2" y="243.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="512.2" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (393 samples, 10.84%)</title><rect x="510.8" y="243.0" width="127.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="513.8" y="254.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (380 samples, 10.48%)</title><rect x="512.5" y="227.0" width="123.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="515.5" y="238.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (373 samples, 10.29%)</title><rect x="513.8" y="211.0" width="121.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="516.8" y="222.0">ip_local_delive..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (371 samples, 10.23%)</title><rect x="514.1" y="195.0" width="120.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="517.1" y="206.0">ip_protocol_del..</text>
</g>
<g>
<title>__inet_lookup_established (3 samples, 0.08%)</title><rect x="517.0" y="179.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="520.0" y="190.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="518.0" y="179.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="521.0" y="190.0"></text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.06%)</title><rect x="518.3" y="179.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="521.3" y="190.0"></text>
</g>
<g>
<title>sock_put (1 samples, 0.03%)</title><rect x="519.0" y="179.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="522.0" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.03%)</title><rect x="519.3" y="179.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="522.3" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (354 samples, 9.76%)</title><rect x="519.6" y="179.0" width="115.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="522.6" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.03%)</title><rect x="522.5" y="163.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="525.5" y="174.0"></text>
</g>
<g>
<title>__inet_lookup_established (19 samples, 0.52%)</title><rect x="522.9" y="163.0" width="6.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="525.9" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (3 samples, 0.08%)</title><rect x="528.1" y="147.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="531.1" y="158.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="529.1" y="163.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="532.1" y="174.0"></text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.44 (1 samples, 0.03%)</title><rect x="529.4" y="163.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="532.4" y="174.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="529.7" y="163.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="532.7" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.06%)</title><rect x="530.0" y="163.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="533.0" y="174.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.03%)</title><rect x="530.7" y="163.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="533.7" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (31 samples, 0.85%)</title><rect x="531.0" y="163.0" width="10.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="534.0" y="174.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (9 samples, 0.25%)</title><rect x="531.3" y="147.0" width="3.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="534.3" y="158.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (4 samples, 0.11%)</title><rect x="534.3" y="147.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="537.3" y="158.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (16 samples, 0.44%)</title><rect x="535.6" y="147.0" width="5.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="538.6" y="158.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (13 samples, 0.36%)</title><rect x="536.5" y="131.0" width="4.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="539.5" y="142.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (1 samples, 0.03%)</title><rect x="537.5" y="115.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="540.5" y="126.0"></text>
</g>
<g>
<title>selinux_sock_rcv_skb_compat (8 samples, 0.22%)</title><rect x="537.8" y="115.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="540.8" y="126.0"></text>
</g>
<g>
<title>avc_has_perm (1 samples, 0.03%)</title><rect x="538.2" y="99.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="541.2" y="110.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (1 samples, 0.03%)</title><rect x="538.5" y="99.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="541.5" y="110.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.64 (3 samples, 0.08%)</title><rect x="538.8" y="99.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="541.8" y="110.0"></text>
</g>
<g>
<title>selinux_xfrm_sock_rcv_skb (2 samples, 0.06%)</title><rect x="539.8" y="99.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="542.8" y="110.0"></text>
</g>
<g>
<title>avc_has_perm (2 samples, 0.06%)</title><rect x="539.8" y="83.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="542.8" y="94.0"></text>
</g>
<g>
<title>selinux_xfrm_sock_rcv_skb (1 samples, 0.03%)</title><rect x="540.4" y="115.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="543.4" y="126.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (1 samples, 0.03%)</title><rect x="540.8" y="147.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="543.8" y="158.0"></text>
</g>
<g>
<title>sock_put (1 samples, 0.03%)</title><rect x="541.1" y="163.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="544.1" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (285 samples, 7.86%)</title><rect x="541.4" y="163.0" width="92.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="544.4" y="174.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.03%)</title><rect x="542.4" y="147.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="545.4" y="158.0"></text>
</g>
<g>
<title>tcp_ack (2 samples, 0.06%)</title><rect x="542.7" y="147.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="545.7" y="158.0"></text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.03%)</title><rect x="543.4" y="147.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="546.4" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (278 samples, 7.67%)</title><rect x="543.7" y="147.0" width="90.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="546.7" y="158.0">tcp_rcv_es..</text>
</g>
<g>
<title>__tcp_ack_snd_check (9 samples, 0.25%)</title><rect x="547.6" y="131.0" width="2.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="550.6" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (5 samples, 0.14%)</title><rect x="548.9" y="115.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="551.9" y="126.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.11%)</title><rect x="549.2" y="99.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="552.2" y="110.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.03%)</title><rect x="549.2" y="83.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="552.2" y="94.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.08%)</title><rect x="549.6" y="83.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="552.6" y="94.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.08%)</title><rect x="549.6" y="67.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="552.6" y="78.0"></text>
</g>
<g>
<title>__wake_up_sync_key (2 samples, 0.06%)</title><rect x="550.5" y="131.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="553.5" y="142.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="551.2" y="131.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="554.2" y="142.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.06%)</title><rect x="551.5" y="131.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="554.5" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (4 samples, 0.11%)</title><rect x="552.2" y="131.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="555.2" y="142.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.03%)</title><rect x="553.5" y="131.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="556.5" y="142.0"></text>
</g>
<g>
<title>rb_next (2 samples, 0.06%)</title><rect x="553.8" y="131.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="556.8" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (80 samples, 2.21%)</title><rect x="554.4" y="131.0" width="26.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="557.4" y="142.0">s..</text>
</g>
<g>
<title>__wake_up_sync_key (79 samples, 2.18%)</title><rect x="554.8" y="115.0" width="25.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="557.8" y="126.0">_..</text>
</g>
<g>
<title>__wake_up_common_lock (78 samples, 2.15%)</title><rect x="554.8" y="99.0" width="25.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="557.8" y="110.0">_..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (76 samples, 2.10%)</title><rect x="555.4" y="83.0" width="24.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="558.4" y="94.0">_..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="580.1" y="99.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="583.1" y="110.0"></text>
</g>
<g>
<title>tcp_ack (120 samples, 3.31%)</title><rect x="580.5" y="131.0" width="39.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="583.5" y="142.0">tcp..</text>
</g>
<g>
<title>__kfree_skb (44 samples, 1.21%)</title><rect x="596.4" y="115.0" width="14.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="599.4" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (13 samples, 0.36%)</title><rect x="596.4" y="99.0" width="4.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="599.4" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (13 samples, 0.36%)</title><rect x="596.4" y="83.0" width="4.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="599.4" y="94.0"></text>
</g>
<g>
<title>__slab_free (5 samples, 0.14%)</title><rect x="599.0" y="67.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="602.0" y="78.0"></text>
</g>
<g>
<title>skb_release_all (30 samples, 0.83%)</title><rect x="600.7" y="99.0" width="9.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="603.7" y="110.0"></text>
</g>
<g>
<title>skb_release_data (23 samples, 0.63%)</title><rect x="601.3" y="83.0" width="7.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="604.3" y="94.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.03%)</title><rect x="605.5" y="67.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="608.5" y="78.0"></text>
</g>
<g>
<title>skb_free_head (9 samples, 0.25%)</title><rect x="605.9" y="67.0" width="2.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="608.9" y="78.0"></text>
</g>
<g>
<title>kfree (9 samples, 0.25%)</title><rect x="605.9" y="51.0" width="2.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="608.9" y="62.0"></text>
</g>
<g>
<title>__slab_free (5 samples, 0.14%)</title><rect x="607.2" y="35.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="610.2" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (5 samples, 0.14%)</title><rect x="608.8" y="83.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="611.8" y="94.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.03%)</title><rect x="610.4" y="99.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="613.4" y="110.0"></text>
</g>
<g>
<title>bictcp_acked (4 samples, 0.11%)</title><rect x="610.7" y="115.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="613.7" y="126.0"></text>
</g>
<g>
<title>rb_erase (2 samples, 0.06%)</title><rect x="612.0" y="115.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="615.0" y="126.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.06%)</title><rect x="612.7" y="115.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="615.7" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.46 (9 samples, 0.25%)</title><rect x="613.3" y="115.0" width="3.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="616.3" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.03%)</title><rect x="616.3" y="115.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="619.3" y="126.0"></text>
</g>
<g>
<title>tcp_rack_advance (1 samples, 0.03%)</title><rect x="616.6" y="115.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="619.6" y="126.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.03%)</title><rect x="616.9" y="115.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="619.9" y="126.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.03%)</title><rect x="617.2" y="115.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="620.2" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (6 samples, 0.17%)</title><rect x="617.6" y="115.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="620.6" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.46 (2 samples, 0.06%)</title><rect x="619.5" y="131.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="622.5" y="142.0"></text>
</g>
<g>
<title>tcp_check_space (4 samples, 0.11%)</title><rect x="620.2" y="131.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="623.2" y="142.0"></text>
</g>
<g>
<title>tcp_event_data_recv (6 samples, 0.17%)</title><rect x="621.5" y="131.0" width="1.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="624.5" y="142.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (6 samples, 0.17%)</title><rect x="623.4" y="131.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="626.4" y="142.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.06%)</title><rect x="623.4" y="115.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="626.4" y="126.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.06%)</title><rect x="623.4" y="99.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="626.4" y="110.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.11%)</title><rect x="624.1" y="115.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="627.1" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.03%)</title><rect x="625.4" y="131.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="628.4" y="142.0"></text>
</g>
<g>
<title>tcp_queue_rcv (8 samples, 0.22%)</title><rect x="625.7" y="131.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="628.7" y="142.0"></text>
</g>
<g>
<title>tcp_rack_advance (3 samples, 0.08%)</title><rect x="628.3" y="131.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="631.3" y="142.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.03%)</title><rect x="629.3" y="131.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="632.3" y="142.0"></text>
</g>
<g>
<title>tcp_rate_gen (2 samples, 0.06%)</title><rect x="629.6" y="131.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="632.6" y="142.0"></text>
</g>
<g>
<title>tcp_rearm_rto (5 samples, 0.14%)</title><rect x="630.3" y="131.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="633.3" y="142.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.08%)</title><rect x="631.9" y="131.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="634.9" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (2 samples, 0.06%)</title><rect x="632.9" y="131.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="635.9" y="142.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.06%)</title><rect x="633.5" y="131.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="636.5" y="142.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.03%)</title><rect x="634.2" y="163.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="637.2" y="174.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.03%)</title><rect x="634.5" y="163.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="637.5" y="174.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (1 samples, 0.03%)</title><rect x="634.5" y="147.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="637.5" y="158.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.03%)</title><rect x="634.8" y="195.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="637.8" y="206.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (3 samples, 0.08%)</title><rect x="635.1" y="211.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="638.1" y="222.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (8 samples, 0.22%)</title><rect x="636.1" y="227.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="639.1" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (3 samples, 0.08%)</title><rect x="638.7" y="243.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="641.7" y="254.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.20 (1 samples, 0.03%)</title><rect x="639.7" y="259.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="642.7" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.03%)</title><rect x="640.0" y="259.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="643.0" y="270.0"></text>
</g>
<g>
<title>ip_rcv (2 samples, 0.06%)</title><rect x="640.4" y="275.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="643.4" y="286.0"></text>
</g>
<g>
<title>process_backlog (5 samples, 0.14%)</title><rect x="641.0" y="323.0" width="1.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="644.0" y="334.0"></text>
</g>
<g>
<title>net_rx_action (5 samples, 0.14%)</title><rect x="642.6" y="339.0" width="1.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="645.6" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (70 samples, 1.93%)</title><rect x="644.3" y="387.0" width="22.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="647.3" y="398.0">d..</text>
</g>
<g>
<title>__dev_queue_xmit (70 samples, 1.93%)</title><rect x="644.3" y="371.0" width="22.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="647.3" y="382.0">_..</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="646.5" y="355.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="649.5" y="366.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (41 samples, 1.13%)</title><rect x="646.9" y="355.0" width="13.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="649.9" y="366.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="648.2" y="339.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="651.2" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (28 samples, 0.77%)</title><rect x="648.5" y="339.0" width="9.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="651.5" y="350.0"></text>
</g>
<g>
<title>eth_type_trans (8 samples, 0.22%)</title><rect x="649.5" y="323.0" width="2.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="652.5" y="334.0"></text>
</g>
<g>
<title>netif_rx (8 samples, 0.22%)</title><rect x="652.1" y="323.0" width="2.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="655.1" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (8 samples, 0.22%)</title><rect x="652.1" y="307.0" width="2.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="655.1" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (7 samples, 0.19%)</title><rect x="652.4" y="291.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="655.4" y="302.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.06%)</title><rect x="654.7" y="323.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="657.7" y="334.0"></text>
</g>
<g>
<title>tcp_wfree (7 samples, 0.19%)</title><rect x="655.3" y="323.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="658.3" y="334.0"></text>
</g>
<g>
<title>sk_free (4 samples, 0.11%)</title><rect x="656.3" y="307.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="659.3" y="318.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (4 samples, 0.11%)</title><rect x="657.6" y="339.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="660.6" y="350.0"></text>
</g>
<g>
<title>tcp_wfree (4 samples, 0.11%)</title><rect x="658.9" y="339.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="661.9" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.11%)</title><rect x="660.2" y="355.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="663.2" y="366.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (1 samples, 0.03%)</title><rect x="661.5" y="355.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="664.5" y="366.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (3 samples, 0.08%)</title><rect x="661.8" y="355.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="664.8" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (12 samples, 0.33%)</title><rect x="662.8" y="355.0" width="3.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="665.8" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (10 samples, 0.28%)</title><rect x="663.1" y="339.0" width="3.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="666.1" y="350.0"></text>
</g>
<g>
<title>skb_network_protocol (2 samples, 0.06%)</title><rect x="665.7" y="323.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="668.7" y="334.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.03%)</title><rect x="666.4" y="339.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="669.4" y="350.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.03%)</title><rect x="666.7" y="355.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="669.7" y="366.0"></text>
</g>
<g>
<title>do_softirq.part.20 (2 samples, 0.06%)</title><rect x="667.0" y="387.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="670.0" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.03%)</title><rect x="667.7" y="403.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="670.7" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.03%)</title><rect x="668.0" y="419.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="671.0" y="430.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.03%)</title><rect x="668.3" y="419.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="671.3" y="430.0"></text>
</g>
<g>
<title>nf_hook_slow (36 samples, 0.99%)</title><rect x="668.7" y="435.0" width="11.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="671.7" y="446.0"></text>
</g>
<g>
<title>selinux_ip_postroute (2 samples, 0.06%)</title><rect x="669.0" y="419.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="672.0" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (33 samples, 0.91%)</title><rect x="669.6" y="419.0" width="10.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="672.6" y="430.0"></text>
</g>
<g>
<title>selinux_ip_postroute (32 samples, 0.88%)</title><rect x="669.6" y="403.0" width="10.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="672.6" y="414.0"></text>
</g>
<g>
<title>selinux_ip_postroute_compat (22 samples, 0.61%)</title><rect x="671.6" y="387.0" width="7.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="674.6" y="398.0"></text>
</g>
<g>
<title>avc_has_perm (2 samples, 0.06%)</title><rect x="673.5" y="371.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="676.5" y="382.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.64 (8 samples, 0.22%)</title><rect x="674.2" y="371.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="677.2" y="382.0"></text>
</g>
<g>
<title>selinux_xfrm_postroute_last (6 samples, 0.17%)</title><rect x="676.8" y="371.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="679.8" y="382.0"></text>
</g>
<g>
<title>avc_has_perm (6 samples, 0.17%)</title><rect x="676.8" y="355.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="679.8" y="366.0"></text>
</g>
<g>
<title>selinux_xfrm_postroute_last (4 samples, 0.11%)</title><rect x="678.8" y="387.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="681.8" y="398.0"></text>
</g>
<g>
<title>selinux_ip_postroute_compat (1 samples, 0.03%)</title><rect x="680.1" y="403.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="683.1" y="414.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (3 samples, 0.08%)</title><rect x="680.4" y="435.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="683.4" y="446.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.03%)</title><rect x="681.4" y="451.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="684.4" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (4 samples, 0.11%)</title><rect x="681.7" y="451.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="684.7" y="462.0"></text>
</g>
<g>
<title>ip_output (4 samples, 0.11%)</title><rect x="683.0" y="467.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="686.0" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (5 samples, 0.14%)</title><rect x="684.3" y="467.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="687.3" y="478.0"></text>
</g>
<g>
<title>__sk_dst_check (4 samples, 0.11%)</title><rect x="685.9" y="483.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="688.9" y="494.0"></text>
</g>
<g>
<title>skb_clone (12 samples, 0.33%)</title><rect x="687.2" y="499.0" width="3.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="690.2" y="510.0"></text>
</g>
<g>
<title>__skb_clone (11 samples, 0.30%)</title><rect x="687.5" y="483.0" width="3.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="690.5" y="494.0"></text>
</g>
<g>
<title>__copy_skb_header (4 samples, 0.11%)</title><rect x="689.8" y="467.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="692.8" y="478.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="691.1" y="499.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="694.1" y="510.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (3 samples, 0.08%)</title><rect x="691.4" y="499.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="694.4" y="510.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="692.4" y="515.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="695.4" y="526.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3 samples, 0.08%)</title><rect x="692.7" y="515.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="695.7" y="526.0"></text>
</g>
<g>
<title>ktime_get (7 samples, 0.19%)</title><rect x="693.7" y="515.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="696.7" y="526.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.08%)</title><rect x="695.0" y="499.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="698.0" y="510.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.06%)</title><rect x="696.0" y="515.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="699.0" y="526.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.08%)</title><rect x="696.7" y="515.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="699.7" y="526.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.03%)</title><rect x="697.6" y="515.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="700.6" y="526.0"></text>
</g>
<g>
<title>skb_push (2 samples, 0.06%)</title><rect x="698.0" y="515.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="701.0" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (14 samples, 0.39%)</title><rect x="698.6" y="515.0" width="4.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="701.6" y="526.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (2 samples, 0.06%)</title><rect x="699.3" y="499.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="702.3" y="510.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.03%)</title><rect x="699.6" y="483.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="702.6" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto (10 samples, 0.28%)</title><rect x="699.9" y="499.0" width="3.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="702.9" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (7 samples, 0.19%)</title><rect x="700.9" y="483.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="703.9" y="494.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.03%)</title><rect x="700.9" y="467.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="703.9" y="478.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.17%)</title><rect x="701.2" y="467.0" width="2.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="704.2" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.06%)</title><rect x="702.5" y="451.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="705.5" y="462.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.03%)</title><rect x="703.2" y="515.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="706.2" y="526.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (1 samples, 0.03%)</title><rect x="703.5" y="515.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="706.5" y="526.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.03%)</title><rect x="703.8" y="515.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="706.8" y="526.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (10 samples, 0.28%)</title><rect x="704.1" y="515.0" width="3.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="707.1" y="526.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.06%)</title><rect x="706.1" y="499.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="709.1" y="510.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="706.7" y="499.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="709.7" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="707.1" y="499.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="710.1" y="510.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.34 (3 samples, 0.08%)</title><rect x="707.4" y="515.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="710.4" y="526.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.06%)</title><rect x="708.4" y="515.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="711.4" y="526.0"></text>
</g>
<g>
<title>tcp_v4_send_check (5 samples, 0.14%)</title><rect x="709.0" y="515.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="712.0" y="526.0"></text>
</g>
<g>
<title>tcp_write_xmit (7 samples, 0.19%)</title><rect x="710.6" y="547.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="713.6" y="558.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.03%)</title><rect x="712.9" y="563.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="715.9" y="574.0"></text>
</g>
<g>
<title>tcp_send_mss (14 samples, 0.39%)</title><rect x="713.2" y="563.0" width="4.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="716.2" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.03%)</title><rect x="713.2" y="547.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="716.2" y="558.0"></text>
</g>
<g>
<title>tcp_current_mss (12 samples, 0.33%)</title><rect x="713.6" y="547.0" width="3.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="716.6" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.03%)</title><rect x="717.2" y="531.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="720.2" y="542.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="717.5" y="547.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="720.5" y="558.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.08%)</title><rect x="717.8" y="563.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="720.8" y="574.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.03%)</title><rect x="718.8" y="563.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="721.8" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.08%)</title><rect x="719.1" y="579.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="722.1" y="590.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (2 samples, 0.06%)</title><rect x="720.1" y="579.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="723.1" y="590.0"></text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.03%)</title><rect x="720.7" y="611.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="723.7" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (14 samples, 0.39%)</title><rect x="721.1" y="611.0" width="4.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="724.1" y="622.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (4 samples, 0.11%)</title><rect x="721.7" y="595.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="724.7" y="606.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (4 samples, 0.11%)</title><rect x="721.7" y="579.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="724.7" y="590.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.06%)</title><rect x="722.4" y="563.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="725.4" y="574.0"></text>
</g>
<g>
<title>selinux_socket_sendmsg (4 samples, 0.11%)</title><rect x="723.0" y="595.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="726.0" y="606.0"></text>
</g>
<g>
<title>sock_has_perm (4 samples, 0.11%)</title><rect x="723.0" y="579.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="726.0" y="590.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg (4 samples, 0.11%)</title><rect x="724.3" y="595.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="727.3" y="606.0"></text>
</g>
<g>
<title>tomoyo_sock_family.part.1 (3 samples, 0.08%)</title><rect x="724.3" y="579.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="727.3" y="590.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg_permission (1 samples, 0.03%)</title><rect x="725.3" y="579.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="728.3" y="590.0"></text>
</g>
<g>
<title>selinux_socket_sendmsg (3 samples, 0.08%)</title><rect x="725.6" y="611.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="728.6" y="622.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg (3 samples, 0.08%)</title><rect x="726.6" y="611.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="729.6" y="622.0"></text>
</g>
<g>
<title>sockfd_lookup_light (10 samples, 0.28%)</title><rect x="727.6" y="627.0" width="3.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="730.6" y="638.0"></text>
</g>
<g>
<title>__fdget (10 samples, 0.28%)</title><rect x="727.6" y="611.0" width="3.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="730.6" y="622.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.28%)</title><rect x="727.6" y="595.0" width="3.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="730.6" y="606.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.25%)</title><rect x="727.9" y="579.0" width="2.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="730.9" y="590.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.03%)</title><rect x="730.8" y="643.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="733.8" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="731.1" y="659.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="734.1" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="731.5" y="707.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="734.5" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.14%)</title><rect x="731.8" y="739.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.8" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="731.8" y="723.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="734.8" y="734.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.11%)</title><rect x="732.1" y="723.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="735.1" y="734.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.11%)</title><rect x="732.1" y="707.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="735.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.19%)</title><rect x="733.4" y="787.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="736.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.08%)</title><rect x="734.7" y="771.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="737.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.08%)</title><rect x="734.7" y="755.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.7" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (40 samples, 1.10%)</title><rect x="735.7" y="803.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="738.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (40 samples, 1.10%)</title><rect x="735.7" y="787.0" width="13.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="738.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.14%)</title><rect x="736.0" y="771.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="739.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.14%)</title><rect x="737.7" y="771.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="740.7" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.upsert (2 samples, 0.06%)</title><rect x="738.6" y="755.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="741.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (4 samples, 0.11%)</title><rect x="739.3" y="771.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="742.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.08%)</title><rect x="739.6" y="755.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="742.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (18 samples, 0.50%)</title><rect x="740.6" y="771.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="743.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (7 samples, 0.19%)</title><rect x="740.6" y="755.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="743.6" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="741.9" y="739.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="744.9" y="750.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.03%)</title><rect x="742.5" y="723.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="745.5" y="734.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="742.5" y="707.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="745.5" y="718.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="742.5" y="691.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="745.5" y="702.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="742.5" y="675.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="745.5" y="686.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="742.5" y="659.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="745.5" y="670.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.03%)</title><rect x="742.5" y="643.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="745.5" y="654.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="742.5" y="627.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="745.5" y="638.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="742.5" y="611.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="745.5" y="622.0"></text>
</g>
<g>
<title>clear_page_erms (1 samples, 0.03%)</title><rect x="742.5" y="595.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="745.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (11 samples, 0.30%)</title><rect x="742.9" y="755.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="745.9" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.08%)</title><rect x="742.9" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="745.9" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.08%)</title><rect x="742.9" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="745.9" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.08%)</title><rect x="742.9" y="707.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="745.9" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.08%)</title><rect x="742.9" y="691.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="745.9" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="742.9" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="745.9" y="686.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (2 samples, 0.06%)</title><rect x="742.9" y="659.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="745.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.06%)</title><rect x="742.9" y="643.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="745.9" y="654.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.06%)</title><rect x="742.9" y="627.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="745.9" y="638.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.03%)</title><rect x="743.5" y="675.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="746.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.19%)</title><rect x="743.8" y="739.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="746.8" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.08%)</title><rect x="744.5" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.5" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="745.5" y="723.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="748.5" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="746.1" y="739.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="749.1" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="746.1" y="723.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="749.1" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="746.1" y="707.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="749.1" y="718.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (7 samples, 0.19%)</title><rect x="746.4" y="771.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="749.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.11%)</title><rect x="747.4" y="755.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="750.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.11%)</title><rect x="747.4" y="739.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="750.4" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.11%)</title><rect x="747.4" y="723.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="750.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="748.7" y="803.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="751.7" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.upsert (480 samples, 13.24%)</title><rect x="749.0" y="803.0" width="156.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="752.0" y="814.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="751.0" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="754.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (33 samples, 0.91%)</title><rect x="751.3" y="787.0" width="10.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="754.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (33 samples, 0.91%)</title><rect x="751.3" y="771.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="754.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (33 samples, 0.91%)</title><rect x="751.3" y="755.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="754.3" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (30 samples, 0.83%)</title><rect x="752.3" y="739.0" width="9.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (27 samples, 0.74%)</title><rect x="752.3" y="723.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="755.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.11%)</title><rect x="752.6" y="707.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="755.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (7 samples, 0.19%)</title><rect x="753.9" y="707.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="756.9" y="718.0"></text>
</g>
<g>
<title>vtable stub (15 samples, 0.41%)</title><rect x="756.2" y="707.0" width="4.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="759.2" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.08%)</title><rect x="761.1" y="723.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="764.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="761.4" y="707.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="764.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="761.4" y="691.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="764.4" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="761.4" y="675.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="764.4" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="761.4" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="764.4" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="761.7" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="764.7" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="762.1" y="787.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="765.1" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="762.1" y="771.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="765.1" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="762.1" y="755.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="765.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="762.1" y="739.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="765.1" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="762.1" y="723.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="765.1" y="734.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.03%)</title><rect x="762.1" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="765.1" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.upsert (410 samples, 11.31%)</title><rect x="762.4" y="787.0" width="133.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="765.4" y="798.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="762.4" y="771.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="765.4" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="762.4" y="755.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="765.4" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$86/1928596100.get$Lambda (1 samples, 0.03%)</title><rect x="762.4" y="739.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="765.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.execute (409 samples, 11.28%)</title><rect x="762.7" y="771.0" width="133.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="765.7" y="782.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (26 samples, 0.72%)</title><rect x="763.0" y="755.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="766.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (26 samples, 0.72%)</title><rect x="763.0" y="739.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="766.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (25 samples, 0.69%)</title><rect x="763.4" y="723.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="766.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.11%)</title><rect x="766.3" y="707.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="769.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.03%)</title><rect x="766.3" y="691.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="769.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (1 samples, 0.03%)</title><rect x="766.3" y="675.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="769.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (1 samples, 0.03%)</title><rect x="766.3" y="659.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (1 samples, 0.03%)</title><rect x="766.6" y="691.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="769.6" y="702.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.06%)</title><rect x="766.9" y="691.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="769.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.17%)</title><rect x="767.6" y="707.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="770.6" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (6 samples, 0.17%)</title><rect x="767.6" y="691.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="770.6" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (6 samples, 0.17%)</title><rect x="767.6" y="675.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="770.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (3 samples, 0.08%)</title><rect x="769.5" y="707.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (3 samples, 0.08%)</title><rect x="769.5" y="691.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="772.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (3 samples, 0.08%)</title><rect x="770.5" y="707.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.5" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.06%)</title><rect x="770.8" y="691.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="773.8" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.03%)</title><rect x="770.8" y="675.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (1 samples, 0.03%)</title><rect x="771.2" y="675.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="774.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (10 samples, 0.28%)</title><rect x="771.5" y="755.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="774.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (10 samples, 0.28%)</title><rect x="771.5" y="739.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="774.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (10 samples, 0.28%)</title><rect x="771.5" y="723.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="774.5" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$86/1928596100.run (372 samples, 10.26%)</title><rect x="774.8" y="755.0" width="121.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="777.8" y="766.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$upsert$5 (369 samples, 10.18%)</title><rect x="775.7" y="739.0" width="120.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="778.7" y="750.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.upsert (368 samples, 10.15%)</title><rect x="776.1" y="723.0" width="119.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="779.1" y="734.0">ru/mail/polis/d..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="776.1" y="707.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="779.1" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="776.1" y="691.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="779.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="776.1" y="675.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="779.1" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="776.1" y="659.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="779.1" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="776.1" y="643.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="779.1" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="776.1" y="627.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="779.1" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="776.1" y="611.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="779.1" y="622.0"></text>
</g>
<g>
<title>HSpaceCounters::update_used(unsigned long) (1 samples, 0.03%)</title><rect x="776.1" y="595.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="779.1" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (9 samples, 0.25%)</title><rect x="776.4" y="707.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="779.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.03%)</title><rect x="779.0" y="691.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (358 samples, 9.87%)</title><rect x="779.3" y="707.0" width="116.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="782.3" y="718.0">java/util/conc..</text>
</g>
<g>
<title>gettimeofday (7 samples, 0.19%)</title><rect x="783.9" y="691.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="786.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (327 samples, 9.02%)</title><rect x="786.1" y="691.0" width="106.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="789.1" y="702.0">java/util/con..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="799.5" y="675.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="802.5" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="799.5" y="659.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="802.5" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="799.5" y="643.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="802.5" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="799.5" y="627.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="802.5" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="799.5" y="611.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="802.5" y="622.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.03%)</title><rect x="799.5" y="595.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="802.5" y="606.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="799.5" y="579.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="802.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (129 samples, 3.56%)</title><rect x="799.8" y="675.0" width="42.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.8" y="686.0">jav..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (129 samples, 3.56%)</title><rect x="799.8" y="659.0" width="42.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="802.8" y="670.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="841.5" y="643.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="844.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (3 samples, 0.08%)</title><rect x="841.8" y="675.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="844.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (11 samples, 0.30%)</title><rect x="842.8" y="675.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (5 samples, 0.14%)</title><rect x="842.8" y="659.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="845.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="842.8" y="643.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="842.8" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="845.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="842.8" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="845.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="842.8" y="595.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="845.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.11%)</title><rect x="843.1" y="643.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="846.1" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.06%)</title><rect x="843.7" y="627.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="846.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.06%)</title><rect x="843.7" y="611.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="846.7" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.06%)</title><rect x="843.7" y="595.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="846.7" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="843.7" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="846.7" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="843.7" y="563.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="846.7" y="574.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.03%)</title><rect x="844.1" y="579.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="847.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (6 samples, 0.17%)</title><rect x="844.4" y="659.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="847.4" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.14%)</title><rect x="844.7" y="643.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="847.7" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.14%)</title><rect x="844.7" y="627.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="847.7" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.14%)</title><rect x="844.7" y="611.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="847.7" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="845.0" y="595.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="848.0" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="845.0" y="579.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="848.0" y="590.0"></text>
</g>
<g>
<title>vectorizedMismatch (3 samples, 0.08%)</title><rect x="845.4" y="595.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="848.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (137 samples, 3.78%)</title><rect x="846.3" y="675.0" width="44.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="849.3" y="686.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (134 samples, 3.70%)</title><rect x="847.3" y="659.0" width="43.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="850.3" y="670.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (127 samples, 3.50%)</title><rect x="849.6" y="643.0" width="41.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="852.6" y="654.0">jav..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (127 samples, 3.50%)</title><rect x="849.6" y="627.0" width="41.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.6" y="638.0">jav..</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="875.0" y="611.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="878.0" y="622.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="875.0" y="595.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="878.0" y="606.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="875.0" y="579.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="878.0" y="590.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="875.0" y="563.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="878.0" y="574.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="875.0" y="547.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="878.0" y="558.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="875.0" y="531.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="878.0" y="542.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="875.0" y="515.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="878.0" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (15 samples, 0.41%)</title><rect x="875.3" y="611.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="878.3" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (15 samples, 0.41%)</title><rect x="875.3" y="595.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="878.3" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="880.2" y="611.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="883.2" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="880.2" y="595.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="883.2" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="880.2" y="579.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="883.2" y="590.0"></text>
</g>
<g>
<title>vectorizedMismatch (32 samples, 0.88%)</title><rect x="880.5" y="611.0" width="10.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="883.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSecondarySeed (5 samples, 0.14%)</title><rect x="890.9" y="675.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="893.9" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.28%)</title><rect x="892.6" y="691.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="895.6" y="702.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.19%)</title><rect x="893.5" y="675.0" width="2.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="896.5" y="686.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.14%)</title><rect x="894.2" y="659.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="897.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.wrapArray (14 samples, 0.39%)</title><rect x="895.8" y="787.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="898.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (14 samples, 0.39%)</title><rect x="895.8" y="771.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="898.8" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (14 samples, 0.39%)</title><rect x="895.8" y="755.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="898.8" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.33%)</title><rect x="896.5" y="739.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="899.5" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.19%)</title><rect x="897.4" y="723.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="900.4" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="898.7" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="901.7" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="899.4" y="691.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="902.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="899.4" y="675.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="902.4" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="899.7" y="723.0" width="0.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="902.7" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.wrapString (15 samples, 0.41%)</title><rect x="900.4" y="787.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="903.4" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.36%)</title><rect x="900.4" y="771.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="903.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.36%)</title><rect x="900.4" y="755.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="903.4" y="766.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="900.4" y="739.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.4" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.33%)</title><rect x="900.7" y="739.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="903.7" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.33%)</title><rect x="900.7" y="723.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="903.7" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.33%)</title><rect x="900.7" y="707.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="903.7" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.11%)</title><rect x="901.0" y="691.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="904.0" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.11%)</title><rect x="901.0" y="675.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="904.0" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.11%)</title><rect x="901.0" y="659.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="904.0" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.19%)</title><rect x="902.3" y="691.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="905.3" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.19%)</title><rect x="902.3" y="675.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="905.3" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.14%)</title><rect x="903.0" y="659.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="906.0" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/BasicService.toBytes (2 samples, 0.06%)</title><rect x="904.6" y="771.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="907.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (2 samples, 0.06%)</title><rect x="904.6" y="755.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="907.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.06%)</title><rect x="904.6" y="739.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="907.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.06%)</title><rect x="904.6" y="723.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="907.6" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (6 samples, 0.17%)</title><rect x="905.3" y="819.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="908.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.08%)</title><rect x="906.2" y="803.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="909.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (41 samples, 1.13%)</title><rect x="907.2" y="819.0" width="13.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="910.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (36 samples, 0.99%)</title><rect x="908.8" y="803.0" width="11.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="911.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (18 samples, 0.50%)</title><rect x="909.5" y="787.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="912.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.equals (15 samples, 0.41%)</title><rect x="910.5" y="771.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="913.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.11%)</title><rect x="914.0" y="755.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="917.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.22%)</title><rect x="915.3" y="787.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="918.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.22%)</title><rect x="915.3" y="771.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="918.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="915.3" y="755.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="918.3" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.11%)</title><rect x="915.7" y="755.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="918.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (2 samples, 0.06%)</title><rect x="916.3" y="739.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="919.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (3 samples, 0.08%)</title><rect x="917.0" y="755.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="920.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (8 samples, 0.22%)</title><rect x="917.9" y="787.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="920.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (11 samples, 0.30%)</title><rect x="920.5" y="819.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (11 samples, 0.30%)</title><rect x="920.5" y="803.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="923.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (11 samples, 0.30%)</title><rect x="920.5" y="787.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.14%)</title><rect x="921.2" y="771.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="924.2" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.11%)</title><rect x="922.8" y="771.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="925.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (104 samples, 2.87%)</title><rect x="924.1" y="851.0" width="33.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="927.1" y="862.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.11%)</title><rect x="931.9" y="835.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="934.9" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="931.9" y="819.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="934.9" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.06%)</title><rect x="931.9" y="803.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="934.9" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="931.9" y="787.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.9" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="931.9" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="934.9" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="931.9" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.9" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="931.9" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.9" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="932.3" y="771.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="935.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="932.6" y="819.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="935.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="932.6" y="803.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="935.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.06%)</title><rect x="932.6" y="787.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="935.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (49 samples, 1.35%)</title><rect x="933.2" y="835.0" width="16.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="936.2" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (48 samples, 1.32%)</title><rect x="933.6" y="819.0" width="15.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="936.6" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="947.9" y="803.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="950.9" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="948.2" y="803.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="951.2" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="948.2" y="787.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="951.2" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="948.2" y="771.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="951.2" y="782.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (1 samples, 0.03%)</title><rect x="948.2" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="951.2" y="766.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.03%)</title><rect x="948.5" y="755.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="951.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="948.9" y="803.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="951.9" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="948.9" y="787.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="951.9" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="948.9" y="771.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="951.9" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="948.9" y="755.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="951.9" y="766.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::thread() (1 samples, 0.03%)</title><rect x="948.9" y="739.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="951.9" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (27 samples, 0.74%)</title><rect x="949.2" y="835.0" width="8.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="952.2" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.14%)</title><rect x="956.3" y="819.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="959.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 0.17%)</title><rect x="958.0" y="851.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="961.0" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.11%)</title><rect x="958.3" y="835.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="961.3" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.11%)</title><rect x="958.3" y="819.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="961.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.03%)</title><rect x="958.3" y="803.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="961.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.03%)</title><rect x="958.3" y="787.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="961.3" y="798.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.03%)</title><rect x="958.3" y="771.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="961.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.08%)</title><rect x="958.6" y="803.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="961.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.08%)</title><rect x="958.6" y="787.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="961.6" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="959.6" y="835.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="962.6" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="959.9" y="851.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="962.9" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (33 samples, 0.91%)</title><rect x="960.2" y="851.0" width="10.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="963.2" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (22 samples, 0.61%)</title><rect x="962.9" y="835.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="965.9" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (22 samples, 0.61%)</title><rect x="962.9" y="819.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="965.9" y="830.0"></text>
</g>
<g>
<title>jbyte_arraycopy (5 samples, 0.14%)</title><rect x="966.4" y="803.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="969.4" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.17%)</title><rect x="968.1" y="803.0" width="1.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="971.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.08%)</title><rect x="970.0" y="835.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="973.0" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.08%)</title><rect x="970.0" y="819.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="973.0" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (49 samples, 1.35%)</title><rect x="971.0" y="851.0" width="15.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="974.0" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (43 samples, 1.19%)</title><rect x="972.9" y="835.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="975.9" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="983.7" y="819.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="986.7" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="983.7" y="803.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.7" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="983.7" y="787.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.7" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="983.7" y="771.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="986.7" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.03%)</title><rect x="983.7" y="755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.7" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="984.0" y="787.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="987.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.08%)</title><rect x="984.3" y="819.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.3" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.08%)</title><rect x="984.3" y="803.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.3" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.08%)</title><rect x="984.3" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.3" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.08%)</title><rect x="984.3" y="771.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.3" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.08%)</title><rect x="984.3" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.3" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.06%)</title><rect x="984.3" y="739.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.3" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="984.7" y="723.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.7" y="734.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.03%)</title><rect x="984.7" y="707.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.03%)</title><rect x="984.7" y="691.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="987.7" y="702.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="984.7" y="675.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.7" y="686.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.03%)</title><rect x="984.7" y="659.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.7" y="670.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.03%)</title><rect x="984.7" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.7" y="654.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.03%)</title><rect x="985.0" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.0" y="750.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="985.0" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="988.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.08%)</title><rect x="985.3" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="988.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.08%)</title><rect x="985.3" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="988.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.08%)</title><rect x="985.3" y="787.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="988.3" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.08%)</title><rect x="985.3" y="771.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.08%)</title><rect x="985.3" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.3" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.08%)</title><rect x="985.3" y="739.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.3" y="750.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.06%)</title><rect x="985.3" y="723.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.3" y="734.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.03%)</title><rect x="985.6" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.6" y="718.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="986.0" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="989.0" y="734.0"></text>
</g>
<g>
<title>page_fault (2 samples, 0.06%)</title><rect x="986.3" y="819.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="989.3" y="830.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.06%)</title><rect x="986.3" y="803.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="989.3" y="814.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.06%)</title><rect x="986.3" y="787.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="989.3" y="798.0"></text>
</g>
<g>
<title>handle_mm_fault (2 samples, 0.06%)</title><rect x="986.3" y="771.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="989.3" y="782.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="986.3" y="755.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="989.3" y="766.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge_delay (1 samples, 0.03%)</title><rect x="986.3" y="739.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="989.3" y="750.0"></text>
</g>
<g>
<title>get_mem_cgroup_from_mm (1 samples, 0.03%)</title><rect x="986.3" y="723.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="989.3" y="734.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.03%)</title><rect x="986.6" y="755.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="989.6" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (484 samples, 13.35%)</title><rect x="986.9" y="867.0" width="157.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="989.9" y="878.0">one/nio/net/Session...</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (484 samples, 13.35%)</title><rect x="986.9" y="851.0" width="157.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="989.9" y="862.0">one/nio/net/NativeSo..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (74 samples, 2.04%)</title><rect x="990.5" y="835.0" width="24.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="993.5" y="846.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (16 samples, 0.44%)</title><rect x="991.2" y="819.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.2" y="830.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.11%)</title><rect x="996.4" y="819.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="999.4" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (3 samples, 0.08%)</title><rect x="997.7" y="819.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1000.7" y="830.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (17 samples, 0.47%)</title><rect x="998.6" y="819.0" width="5.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1001.6" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (27 samples, 0.74%)</title><rect x="1004.2" y="819.0" width="8.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1007.2" y="830.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (11 samples, 0.30%)</title><rect x="1007.1" y="803.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1010.1" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (7 samples, 0.19%)</title><rect x="1010.7" y="803.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1013.7" y="814.0"></text>
</g>
<g>
<title>memmove@plt (2 samples, 0.06%)</title><rect x="1013.0" y="819.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1016.0" y="830.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.08%)</title><rect x="1013.6" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1016.6" y="830.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.11%)</title><rect x="1014.6" y="835.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1017.6" y="846.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.11%)</title><rect x="1015.9" y="835.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1018.9" y="846.0"></text>
</g>
<g>
<title>__recv (384 samples, 10.59%)</title><rect x="1017.2" y="835.0" width="125.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1020.2" y="846.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (264 samples, 7.28%)</title><rect x="1056.2" y="819.0" width="86.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1059.2" y="830.0">entry_SYSC..</text>
</g>
<g>
<title>__x64_sys_recvfrom (4 samples, 0.11%)</title><rect x="1056.2" y="803.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1059.2" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (260 samples, 7.17%)</title><rect x="1057.6" y="803.0" width="84.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1060.6" y="814.0">do_syscall..</text>
</g>
<g>
<title>__sys_recvfrom (2 samples, 0.06%)</title><rect x="1069.3" y="787.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1072.3" y="798.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (222 samples, 6.12%)</title><rect x="1069.9" y="787.0" width="72.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1072.9" y="798.0">__x64_sy..</text>
</g>
<g>
<title>__sys_recvfrom (216 samples, 5.96%)</title><rect x="1069.9" y="771.0" width="70.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1072.9" y="782.0">__sys_re..</text>
</g>
<g>
<title>__fdget (1 samples, 0.03%)</title><rect x="1072.2" y="755.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1075.2" y="766.0"></text>
</g>
<g>
<title>fput (5 samples, 0.14%)</title><rect x="1072.5" y="755.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1075.5" y="766.0"></text>
</g>
<g>
<title>fput_many (5 samples, 0.14%)</title><rect x="1072.5" y="739.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1075.5" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (180 samples, 4.96%)</title><rect x="1074.1" y="755.0" width="58.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1077.1" y="766.0">sock_r..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.03%)</title><rect x="1075.4" y="739.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1078.4" y="750.0"></text>
</g>
<g>
<title>inet6_recvmsg (152 samples, 4.19%)</title><rect x="1075.8" y="739.0" width="49.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1078.8" y="750.0">inet6..</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="1075.8" y="723.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1078.8" y="734.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="1076.1" y="723.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1079.1" y="734.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.06%)</title><rect x="1076.4" y="723.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1079.4" y="734.0"></text>
</g>
<g>
<title>tcp_recvmsg (148 samples, 4.08%)</title><rect x="1077.1" y="723.0" width="48.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1080.1" y="734.0">tcp_..</text>
</g>
<g>
<title>__kfree_skb (26 samples, 0.72%)</title><rect x="1086.8" y="707.0" width="8.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1089.8" y="718.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.06%)</title><rect x="1086.8" y="691.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1089.8" y="702.0"></text>
</g>
<g>
<title>skb_release_all (24 samples, 0.66%)</title><rect x="1087.5" y="691.0" width="7.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1090.5" y="702.0"></text>
</g>
<g>
<title>dst_release (2 samples, 0.06%)</title><rect x="1087.8" y="675.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1090.8" y="686.0"></text>
</g>
<g>
<title>skb_release_data (5 samples, 0.14%)</title><rect x="1088.5" y="675.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1091.5" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (14 samples, 0.39%)</title><rect x="1090.1" y="675.0" width="4.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1093.1" y="686.0"></text>
</g>
<g>
<title>dst_release (10 samples, 0.28%)</title><rect x="1090.7" y="659.0" width="3.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1093.7" y="670.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.06%)</title><rect x="1094.0" y="659.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1097.0" y="670.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.06%)</title><rect x="1094.6" y="675.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1097.6" y="686.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="1095.3" y="707.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1098.3" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.03%)</title><rect x="1095.6" y="707.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1098.6" y="718.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="1096.0" y="707.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1099.0" y="718.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.03%)</title><rect x="1096.3" y="707.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1099.3" y="718.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.03%)</title><rect x="1096.6" y="707.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1099.6" y="718.0"></text>
</g>
<g>
<title>lock_sock_nested (9 samples, 0.25%)</title><rect x="1096.9" y="707.0" width="3.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1099.9" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.06%)</title><rect x="1096.9" y="691.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1099.9" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (7 samples, 0.19%)</title><rect x="1097.6" y="691.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1100.6" y="702.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.08%)</title><rect x="1099.9" y="707.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1102.9" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="1099.9" y="691.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1102.9" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="1100.2" y="691.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1103.2" y="702.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="1100.5" y="691.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1103.5" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (54 samples, 1.49%)</title><rect x="1100.8" y="707.0" width="17.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1103.8" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (54 samples, 1.49%)</title><rect x="1100.8" y="691.0" width="17.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1103.8" y="702.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="1108.0" y="675.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1111.0" y="686.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="1108.0" y="659.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1111.0" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.03%)</title><rect x="1108.3" y="675.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1111.3" y="686.0"></text>
</g>
<g>
<title>simple_copy_to_iter (30 samples, 0.83%)</title><rect x="1108.6" y="675.0" width="9.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1111.6" y="686.0"></text>
</g>
<g>
<title>__check_object_size (8 samples, 0.22%)</title><rect x="1108.6" y="659.0" width="2.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1111.6" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (6 samples, 0.17%)</title><rect x="1111.2" y="659.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1114.2" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (14 samples, 0.39%)</title><rect x="1113.2" y="659.0" width="4.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1116.2" y="670.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (12 samples, 0.33%)</title><rect x="1113.8" y="643.0" width="4.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1116.8" y="654.0"></text>
</g>
<g>
<title>check_stack_object (2 samples, 0.06%)</title><rect x="1117.8" y="659.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1120.8" y="670.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (9 samples, 0.25%)</title><rect x="1118.4" y="707.0" width="2.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1121.4" y="718.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="1121.0" y="691.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1124.0" y="702.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (11 samples, 0.30%)</title><rect x="1121.3" y="707.0" width="3.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1124.3" y="718.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (10 samples, 0.28%)</title><rect x="1121.7" y="691.0" width="3.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1124.7" y="702.0"></text>
</g>
<g>
<title>ktime_get (5 samples, 0.14%)</title><rect x="1122.3" y="675.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1125.3" y="686.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.06%)</title><rect x="1123.3" y="659.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1126.3" y="670.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.08%)</title><rect x="1123.9" y="675.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1126.9" y="686.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="1124.9" y="707.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1127.9" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (20 samples, 0.55%)</title><rect x="1125.2" y="739.0" width="6.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1128.2" y="750.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.03%)</title><rect x="1125.9" y="723.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1128.9" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (14 samples, 0.39%)</title><rect x="1126.2" y="723.0" width="4.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1129.2" y="734.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (14 samples, 0.39%)</title><rect x="1126.2" y="707.0" width="4.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1129.2" y="718.0"></text>
</g>
<g>
<title>aa_sk_perm (12 samples, 0.33%)</title><rect x="1126.9" y="691.0" width="3.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1129.9" y="702.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (2 samples, 0.06%)</title><rect x="1130.8" y="723.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1133.8" y="734.0"></text>
</g>
<g>
<title>sock_has_perm (2 samples, 0.06%)</title><rect x="1130.8" y="707.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1133.8" y="718.0"></text>
</g>
<g>
<title>sock_has_perm (1 samples, 0.03%)</title><rect x="1131.4" y="723.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1134.4" y="734.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (2 samples, 0.06%)</title><rect x="1131.7" y="739.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1134.7" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.03%)</title><rect x="1132.4" y="739.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1135.4" y="750.0"></text>
</g>
<g>
<title>sockfd_lookup_light (23 samples, 0.63%)</title><rect x="1132.7" y="755.0" width="7.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1135.7" y="766.0"></text>
</g>
<g>
<title>__fdget (22 samples, 0.61%)</title><rect x="1132.7" y="739.0" width="7.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1135.7" y="750.0"></text>
</g>
<g>
<title>__fget_light (22 samples, 0.61%)</title><rect x="1132.7" y="723.0" width="7.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1135.7" y="734.0"></text>
</g>
<g>
<title>__fget (18 samples, 0.50%)</title><rect x="1134.0" y="707.0" width="5.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1137.0" y="718.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="1139.9" y="739.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1142.9" y="750.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="1140.2" y="771.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1143.2" y="782.0"></text>
</g>
<g>
<title>import_single_range (5 samples, 0.14%)</title><rect x="1140.5" y="771.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1143.5" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.17%)</title><rect x="1142.2" y="835.0" width="1.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1145.2" y="846.0"></text>
</g>
<g>
<title>recv@plt (1 samples, 0.03%)</title><rect x="1144.1" y="835.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1147.1" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.14%)</title><rect x="1144.4" y="883.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.4" y="894.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.14%)</title><rect x="1144.4" y="867.0" width="1.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1147.4" y="878.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.14%)</title><rect x="1144.4" y="851.0" width="1.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1147.4" y="862.0"></text>
</g>
<g>
<title>start_thread (135 samples, 3.72%)</title><rect x="1146.1" y="915.0" width="43.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1149.1" y="926.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (135 samples, 3.72%)</title><rect x="1146.1" y="899.0" width="43.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1149.1" y="910.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (135 samples, 3.72%)</title><rect x="1146.1" y="883.0" width="43.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.1" y="894.0">Thre..</text>
</g>
<g>
<title>GangWorker::loop() (131 samples, 3.61%)</title><rect x="1146.1" y="867.0" width="42.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.1" y="878.0">Gang..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (14 samples, 0.39%)</title><rect x="1146.4" y="851.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.4" y="862.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (14 samples, 0.39%)</title><rect x="1146.4" y="835.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.4" y="846.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (2 samples, 0.06%)</title><rect x="1146.4" y="819.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.4" y="830.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.406] (1 samples, 0.03%)</title><rect x="1146.4" y="803.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.4" y="814.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.149] (1 samples, 0.03%)</title><rect x="1146.7" y="803.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.7" y="814.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.03%)</title><rect x="1146.7" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.7" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1146.7" y="771.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.7" y="782.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.03%)</title><rect x="1146.7" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.7" y="766.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.149] (12 samples, 0.33%)</title><rect x="1147.0" y="819.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.0" y="830.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (8 samples, 0.22%)</title><rect x="1148.3" y="803.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.3" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (7 samples, 0.19%)</title><rect x="1148.7" y="787.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.7" y="798.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (5 samples, 0.14%)</title><rect x="1149.0" y="771.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.0" y="782.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1150.3" y="755.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.3" y="766.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.03%)</title><rect x="1150.6" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.6" y="782.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (109 samples, 3.01%)</title><rect x="1150.9" y="851.0" width="35.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.9" y="862.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (51 samples, 1.41%)</title><rect x="1151.3" y="835.0" width="16.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (41 samples, 1.13%)</title><rect x="1153.6" y="819.0" width="13.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.6" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (21 samples, 0.58%)</title><rect x="1159.4" y="803.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.4" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.11%)</title><rect x="1164.9" y="787.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.9" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1166.2" y="803.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.2" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1166.6" y="803.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.6" y="814.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.08%)</title><rect x="1166.9" y="819.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.9" y="830.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.08%)</title><rect x="1166.9" y="803.0" width="1.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1169.9" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (54 samples, 1.49%)</title><rect x="1167.9" y="835.0" width="17.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="846.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (54 samples, 1.49%)</title><rect x="1167.9" y="819.0" width="17.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (53 samples, 1.46%)</title><rect x="1167.9" y="803.0" width="17.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="814.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (53 samples, 1.46%)</title><rect x="1167.9" y="787.0" width="17.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.9" y="798.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (53 samples, 1.46%)</title><rect x="1167.9" y="771.0" width="17.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (44 samples, 1.21%)</title><rect x="1167.9" y="755.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (29 samples, 0.80%)</title><rect x="1172.4" y="739.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.4" y="750.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (2 samples, 0.06%)</title><rect x="1178.9" y="723.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (7 samples, 0.19%)</title><rect x="1179.6" y="723.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="734.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.03%)</title><rect x="1181.5" y="707.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1181.9" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.9" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (9 samples, 0.25%)</title><rect x="1182.2" y="755.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="766.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (9 samples, 0.25%)</title><rect x="1182.2" y="739.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="750.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.03%)</title><rect x="1182.8" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.03%)</title><rect x="1182.8" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.03%)</title><rect x="1182.8" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.03%)</title><rect x="1183.2" y="723.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="734.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.577] (1 samples, 0.03%)</title><rect x="1183.5" y="723.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBoundedDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate_bounded&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*, MemRegion) (2 samples, 0.06%)</title><rect x="1183.8" y="723.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="734.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.06%)</title><rect x="1183.8" y="707.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (2 samples, 0.06%)</title><rect x="1184.5" y="723.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="734.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="1184.8" y="707.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="718.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(CardTableEntryClosure*, unsigned int) (1 samples, 0.03%)</title><rect x="1185.1" y="803.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="814.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1185.4" y="835.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.4" y="846.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::record_time_secs(G1GCPhaseTimes::GCParPhases, unsigned int, double) (1 samples, 0.03%)</title><rect x="1185.4" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.4" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.06%)</title><rect x="1185.8" y="835.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1185.8" y="819.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1185.8" y="803.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="814.0"></text>
</g>
<g>
<title>frame::entry_frame_is_first() const (1 samples, 0.03%)</title><rect x="1185.8" y="787.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.03%)</title><rect x="1186.1" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.1" y="830.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="1186.1" y="803.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (4 samples, 0.11%)</title><rect x="1186.4" y="851.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.4" y="862.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (4 samples, 0.11%)</title><rect x="1186.4" y="835.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.4" y="846.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (4 samples, 0.11%)</title><rect x="1186.4" y="819.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.4" y="830.0"></text>
</g>
<g>
<title>MarkBitMap::get_next_marked_addr(HeapWord const*, HeapWord const*) const (2 samples, 0.06%)</title><rect x="1186.7" y="803.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.7" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1187.4" y="803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.4" y="814.0"></text>
</g>
<g>
<title>ParallelCleaningTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1187.7" y="851.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.7" y="862.0"></text>
</g>
<g>
<title>KlassCleaningTask::work() (1 samples, 0.03%)</title><rect x="1187.7" y="835.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.7" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::clean_weak_instanceklass_links() (1 samples, 0.03%)</title><rect x="1187.7" y="819.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="830.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="1188.0" y="851.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.0" y="862.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.06%)</title><rect x="1188.0" y="835.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="846.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.66] (1 samples, 0.03%)</title><rect x="1188.0" y="819.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.0" y="830.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1188.0" y="803.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="814.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.03%)</title><rect x="1188.0" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.0" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="1188.0" y="771.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.0" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="1188.0" y="755.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.0" y="766.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.03%)</title><rect x="1188.4" y="819.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.11%)</title><rect x="1188.7" y="867.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.7" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.11%)</title><rect x="1188.7" y="851.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.7" y="862.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.63] (4 samples, 0.11%)</title><rect x="1188.7" y="835.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.7" y="846.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (4 samples, 0.11%)</title><rect x="1188.7" y="819.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.7" y="830.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (4 samples, 0.11%)</title><rect x="1188.7" y="803.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (4 samples, 0.11%)</title><rect x="1188.7" y="787.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.7" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::print_heap_after_gc() (1 samples, 0.03%)</title><rect x="1188.7" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.7" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::print_on(outputStream*) const (1 samples, 0.03%)</title><rect x="1188.7" y="755.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.7" y="766.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.03%)</title><rect x="1188.7" y="739.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.7" y="750.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool) (1 samples, 0.03%)</title><rect x="1188.7" y="723.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.7" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*) (1 samples, 0.03%)</title><rect x="1189.0" y="771.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="782.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (1 samples, 0.03%)</title><rect x="1189.0" y="755.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.03%)</title><rect x="1189.0" y="739.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>__new_sem_post (1 samples, 0.03%)</title><rect x="1189.0" y="723.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1189.0" y="707.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1192.0" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1189.0" y="691.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1192.0" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1189.0" y="675.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1192.0" y="686.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1189.0" y="659.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1192.0" y="670.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1189.0" y="643.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1192.0" y="654.0"></text>
</g>
<g>
<title>G1Policy::record_collection_pause_end(double, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1189.3" y="771.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.3" y="782.0"></text>
</g>
<g>
<title>TraceMemoryManagerStats::~TraceMemoryManagerStats() (1 samples, 0.03%)</title><rect x="1189.7" y="771.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.7" y="782.0"></text>
</g>
<g>
<title>__strlen_avx2 (1 samples, 0.03%)</title><rect x="1189.7" y="755.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1192.7" y="766.0"></text>
</g>
</g>
</svg>
