<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (4,078 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="10.0" y="995.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="10.0" y="979.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="10.0" y="963.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="10.0" y="947.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="10.0" y="931.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="10.0" y="915.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="10.0" y="899.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>Monitor::lock() (1 samples, 0.02%)</title><rect x="10.0" y="883.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="10.0" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.10%)</title><rect x="10.3" y="995.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.3" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.10%)</title><rect x="10.3" y="979.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.3" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.10%)</title><rect x="10.3" y="963.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.3" y="974.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.07%)</title><rect x="10.3" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.3" y="958.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.02%)</title><rect x="10.3" y="931.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.3" y="942.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="10.6" y="931.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.6" y="942.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="10.9" y="931.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.9" y="942.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="11.2" y="947.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.2" y="958.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.02%)</title><rect x="11.2" y="931.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="11.4" y="995.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="14.4" y="1006.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="11.4" y="979.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="14.4" y="990.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.05%)</title><rect x="11.7" y="995.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.7" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.05%)</title><rect x="11.7" y="979.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.7" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.02%)</title><rect x="12.3" y="995.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="15.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,724 samples, 66.80%)</title><rect x="12.6" y="995.0" width="788.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.6" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,724 samples, 66.80%)</title><rect x="12.6" y="979.0" width="788.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.6" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,724 samples, 66.80%)</title><rect x="12.6" y="963.0" width="788.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.6" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1 samples, 0.02%)</title><rect x="14.6" y="947.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.10%)</title><rect x="14.9" y="947.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.10%)</title><rect x="14.9" y="931.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.10%)</title><rect x="14.9" y="915.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.10%)</title><rect x="14.9" y="899.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (492 samples, 12.06%)</title><rect x="16.1" y="947.0" width="142.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.1" y="958.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (490 samples, 12.02%)</title><rect x="16.7" y="931.0" width="141.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.7" y="942.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (327 samples, 8.02%)</title><rect x="16.7" y="915.0" width="94.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.7" y="926.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (9 samples, 0.22%)</title><rect x="17.2" y="899.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.02%)</title><rect x="19.8" y="899.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.8" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="19.8" y="883.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (16 samples, 0.39%)</title><rect x="20.1" y="899.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.07%)</title><rect x="23.9" y="883.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.07%)</title><rect x="23.9" y="867.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.9" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="24.2" y="851.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.2" y="862.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="24.2" y="835.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="27.2" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="24.2" y="819.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="27.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="24.5" y="835.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="27.5" y="846.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="24.5" y="819.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="27.5" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="24.5" y="803.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="27.5" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="24.5" y="787.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="27.5" y="798.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="24.5" y="771.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="27.5" y="782.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="24.5" y="755.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="27.5" y="766.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.02%)</title><rect x="24.5" y="739.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="27.5" y="750.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.02%)</title><rect x="24.5" y="723.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="27.5" y="734.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.02%)</title><rect x="24.5" y="707.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="27.5" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.02%)</title><rect x="24.5" y="691.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="27.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (55 samples, 1.35%)</title><rect x="24.8" y="899.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (55 samples, 1.35%)</title><rect x="24.8" y="883.0" width="15.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.02%)</title><rect x="24.8" y="867.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (54 samples, 1.32%)</title><rect x="25.0" y="867.0" width="15.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (54 samples, 1.32%)</title><rect x="25.0" y="851.0" width="15.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.0" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (50 samples, 1.23%)</title><rect x="26.2" y="835.0" width="14.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.2" y="846.0"></text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 0.25%)</title><rect x="26.2" y="819.0" width="2.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="29.2" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="26.5" y="803.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="29.5" y="814.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="26.8" y="803.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="29.8" y="814.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.10%)</title><rect x="27.1" y="803.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="30.1" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="28.2" y="803.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="31.2" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title><rect x="28.5" y="803.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="31.5" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="28.8" y="803.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="31.8" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 0.96%)</title><rect x="29.1" y="819.0" width="11.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="32.1" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (28 samples, 0.69%)</title><rect x="32.3" y="803.0" width="8.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="35.3" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (28 samples, 0.69%)</title><rect x="32.3" y="787.0" width="8.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="35.3" y="798.0"></text>
</g>
<g>
<title>__x64_sys_futex (25 samples, 0.61%)</title><rect x="33.1" y="771.0" width="7.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="36.1" y="782.0"></text>
</g>
<g>
<title>do_futex (24 samples, 0.59%)</title><rect x="33.4" y="755.0" width="7.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="36.4" y="766.0"></text>
</g>
<g>
<title>futex_wake (24 samples, 0.59%)</title><rect x="33.4" y="739.0" width="7.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="36.4" y="750.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.02%)</title><rect x="34.0" y="723.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="37.0" y="734.0"></text>
</g>
<g>
<title>__unqueue_futex (1 samples, 0.02%)</title><rect x="34.0" y="707.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="37.0" y="718.0"></text>
</g>
<g>
<title>wake_up_q (21 samples, 0.51%)</title><rect x="34.3" y="723.0" width="6.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="37.3" y="734.0"></text>
</g>
<g>
<title>try_to_wake_up (19 samples, 0.47%)</title><rect x="34.9" y="707.0" width="5.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="37.9" y="718.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (19 samples, 0.47%)</title><rect x="34.9" y="691.0" width="5.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="37.9" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="40.4" y="819.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="43.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (3 samples, 0.07%)</title><rect x="40.7" y="899.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (240 samples, 5.89%)</title><rect x="41.5" y="899.0" width="69.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.5" y="910.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (239 samples, 5.86%)</title><rect x="41.8" y="883.0" width="69.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.8" y="894.0">jdk/int..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="42.4" y="867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="45.4" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.07%)</title><rect x="42.7" y="867.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="45.7" y="878.0"></text>
</g>
<g>
<title>Unsafe_Park (88 samples, 2.16%)</title><rect x="43.6" y="867.0" width="25.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="46.6" y="878.0">U..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="46.7" y="851.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="49.7" y="862.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.07%)</title><rect x="47.0" y="851.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="50.0" y="862.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 0.44%)</title><rect x="47.9" y="851.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="50.9" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.15%)</title><rect x="49.9" y="835.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="52.9" y="846.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.02%)</title><rect x="51.4" y="819.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="54.4" y="830.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.05%)</title><rect x="51.7" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="54.7" y="846.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.05%)</title><rect x="52.2" y="835.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="55.2" y="846.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.02%)</title><rect x="52.8" y="835.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="55.8" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (50 samples, 1.23%)</title><rect x="53.1" y="851.0" width="14.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="56.1" y="862.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (23 samples, 0.56%)</title><rect x="60.9" y="835.0" width="6.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="63.9" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (23 samples, 0.56%)</title><rect x="60.9" y="819.0" width="6.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="63.9" y="830.0"></text>
</g>
<g>
<title>__x64_sys_futex (13 samples, 0.32%)</title><rect x="63.8" y="803.0" width="3.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="66.8" y="814.0"></text>
</g>
<g>
<title>do_futex (12 samples, 0.29%)</title><rect x="63.8" y="787.0" width="3.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="66.8" y="798.0"></text>
</g>
<g>
<title>futex_wake (10 samples, 0.25%)</title><rect x="63.8" y="771.0" width="2.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="66.8" y="782.0"></text>
</g>
<g>
<title>get_futex_key (6 samples, 0.15%)</title><rect x="65.0" y="755.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="68.0" y="766.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.14 (4 samples, 0.10%)</title><rect x="65.6" y="739.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="68.6" y="750.0"></text>
</g>
<g>
<title>hash_futex (2 samples, 0.05%)</title><rect x="66.7" y="771.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="69.7" y="782.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="67.3" y="787.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="70.3" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="67.6" y="851.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="70.6" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title><rect x="67.9" y="851.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="70.9" y="862.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="68.2" y="851.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="71.2" y="862.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.05%)</title><rect x="68.5" y="851.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="71.5" y="862.0"></text>
</g>
<g>
<title>[unknown] (143 samples, 3.51%)</title><rect x="69.0" y="867.0" width="41.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="72.0" y="878.0">[un..</text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.07%)</title><rect x="69.0" y="851.0" width="0.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="72.0" y="862.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.02%)</title><rect x="69.9" y="851.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="72.9" y="862.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.02%)</title><rect x="70.2" y="851.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="73.2" y="862.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.10%)</title><rect x="70.5" y="851.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="73.5" y="862.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="71.6" y="851.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="74.6" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.05%)</title><rect x="71.9" y="851.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="74.9" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.05%)</title><rect x="72.5" y="851.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="75.5" y="862.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (129 samples, 3.16%)</title><rect x="73.1" y="851.0" width="37.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="76.1" y="862.0">pth..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (33 samples, 0.81%)</title><rect x="100.9" y="835.0" width="9.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="103.9" y="846.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.05%)</title><rect x="100.9" y="819.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="103.9" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (31 samples, 0.76%)</title><rect x="101.4" y="819.0" width="9.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="104.4" y="830.0"></text>
</g>
<g>
<title>__x64_sys_futex (21 samples, 0.51%)</title><rect x="104.3" y="803.0" width="6.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="107.3" y="814.0"></text>
</g>
<g>
<title>do_futex (20 samples, 0.49%)</title><rect x="104.6" y="787.0" width="5.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="107.6" y="798.0"></text>
</g>
<g>
<title>futex_wait (19 samples, 0.47%)</title><rect x="104.9" y="771.0" width="5.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="107.9" y="782.0"></text>
</g>
<g>
<title>drop_futex_key_refs.isra.15 (1 samples, 0.02%)</title><rect x="105.2" y="755.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="108.2" y="766.0"></text>
</g>
<g>
<title>futex_wait_queue_me (6 samples, 0.15%)</title><rect x="105.5" y="755.0" width="1.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="108.5" y="766.0"></text>
</g>
<g>
<title>plist_add (2 samples, 0.05%)</title><rect x="105.5" y="739.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="108.5" y="750.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.10%)</title><rect x="106.1" y="739.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="109.1" y="750.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.02%)</title><rect x="106.9" y="723.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="109.9" y="734.0"></text>
</g>
<g>
<title>futex_wait_setup (10 samples, 0.25%)</title><rect x="107.2" y="755.0" width="2.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="110.2" y="766.0"></text>
</g>
<g>
<title>get_futex_key (5 samples, 0.12%)</title><rect x="107.5" y="739.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="110.5" y="750.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.14 (1 samples, 0.02%)</title><rect x="108.7" y="723.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="111.7" y="734.0"></text>
</g>
<g>
<title>get_futex_value_locked (4 samples, 0.10%)</title><rect x="109.0" y="739.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="112.0" y="750.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.02%)</title><rect x="110.1" y="755.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="113.1" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.05%)</title><rect x="110.4" y="867.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="113.4" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="111.0" y="899.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (32 samples, 0.78%)</title><rect x="111.3" y="915.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (32 samples, 0.78%)</title><rect x="111.3" y="899.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="114.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (32 samples, 0.78%)</title><rect x="111.3" y="883.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="114.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.05%)</title><rect x="111.3" y="867.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (28 samples, 0.69%)</title><rect x="111.9" y="867.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (28 samples, 0.69%)</title><rect x="111.9" y="851.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.9" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (28 samples, 0.69%)</title><rect x="111.9" y="835.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="114.9" y="846.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="112.1" y="819.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="115.1" y="830.0"></text>
</g>
<g>
<title>Unsafe_Park (13 samples, 0.32%)</title><rect x="112.4" y="819.0" width="3.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="115.4" y="830.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="113.0" y="803.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="116.0" y="814.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.02%)</title><rect x="113.0" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="116.0" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.15%)</title><rect x="113.3" y="803.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="116.3" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.07%)</title><rect x="114.2" y="787.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="117.2" y="798.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="114.2" y="771.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="117.2" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.05%)</title><rect x="114.5" y="771.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="117.5" y="782.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.05%)</title><rect x="114.5" y="755.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="117.5" y="766.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="114.7" y="739.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="117.7" y="750.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.02%)</title><rect x="114.7" y="723.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="117.7" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (3 samples, 0.07%)</title><rect x="115.0" y="803.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="118.0" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="115.9" y="803.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="118.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.32%)</title><rect x="116.2" y="819.0" width="3.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="119.2" y="830.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="116.2" y="803.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="119.2" y="814.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (12 samples, 0.29%)</title><rect x="116.5" y="803.0" width="3.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="119.5" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.10%)</title><rect x="118.8" y="787.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="121.8" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.10%)</title><rect x="118.8" y="771.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="121.8" y="782.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.10%)</title><rect x="118.8" y="755.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="121.8" y="766.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.10%)</title><rect x="118.8" y="739.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="121.8" y="750.0"></text>
</g>
<g>
<title>futex_wait (4 samples, 0.10%)</title><rect x="118.8" y="723.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="121.8" y="734.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.07%)</title><rect x="118.8" y="707.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="121.8" y="718.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.07%)</title><rect x="118.8" y="691.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="121.8" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.07%)</title><rect x="118.8" y="675.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="121.8" y="686.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.02%)</title><rect x="119.7" y="707.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="122.7" y="718.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.02%)</title><rect x="119.7" y="691.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="122.7" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.05%)</title><rect x="120.0" y="867.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (131 samples, 3.21%)</title><rect x="120.5" y="915.0" width="37.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.5" y="926.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (131 samples, 3.21%)</title><rect x="120.5" y="899.0" width="37.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="123.5" y="910.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (131 samples, 3.21%)</title><rect x="120.5" y="883.0" width="37.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="123.5" y="894.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (106 samples, 2.60%)</title><rect x="127.8" y="867.0" width="30.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="130.8" y="878.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (106 samples, 2.60%)</title><rect x="127.8" y="851.0" width="30.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="130.8" y="862.0">jd..</text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="128.1" y="835.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="131.1" y="846.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="128.3" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="131.3" y="846.0"></text>
</g>
<g>
<title>Unsafe_Unpark (17 samples, 0.42%)</title><rect x="128.6" y="835.0" width="5.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="131.6" y="846.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="129.8" y="819.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="132.8" y="830.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.05%)</title><rect x="130.1" y="819.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="133.1" y="830.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.12%)</title><rect x="130.7" y="819.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="133.7" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.12%)</title><rect x="132.1" y="819.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="135.1" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_signal (85 samples, 2.08%)</title><rect x="133.6" y="835.0" width="24.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="136.6" y="846.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (63 samples, 1.54%)</title><rect x="139.9" y="819.0" width="18.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="142.9" y="830.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="139.9" y="803.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="142.9" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (62 samples, 1.52%)</title><rect x="140.2" y="803.0" width="18.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="143.2" y="814.0"></text>
</g>
<g>
<title>__x64_sys_futex (53 samples, 1.30%)</title><rect x="142.8" y="787.0" width="15.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="145.8" y="798.0"></text>
</g>
<g>
<title>do_futex (52 samples, 1.28%)</title><rect x="143.1" y="771.0" width="15.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="146.1" y="782.0"></text>
</g>
<g>
<title>futex_wake (51 samples, 1.25%)</title><rect x="143.1" y="755.0" width="14.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="146.1" y="766.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="143.4" y="739.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="146.4" y="750.0"></text>
</g>
<g>
<title>mark_wake_futex (7 samples, 0.17%)</title><rect x="143.7" y="739.0" width="2.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="146.7" y="750.0"></text>
</g>
<g>
<title>plist_del (1 samples, 0.02%)</title><rect x="145.1" y="723.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="148.1" y="734.0"></text>
</g>
<g>
<title>wake_q_add_safe (1 samples, 0.02%)</title><rect x="145.4" y="723.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="148.4" y="734.0"></text>
</g>
<g>
<title>wake_up_q (42 samples, 1.03%)</title><rect x="145.7" y="739.0" width="12.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="148.7" y="750.0"></text>
</g>
<g>
<title>try_to_wake_up (42 samples, 1.03%)</title><rect x="145.7" y="723.0" width="12.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="148.7" y="734.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (42 samples, 1.03%)</title><rect x="145.7" y="707.0" width="12.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="148.7" y="718.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.02%)</title><rect x="157.9" y="755.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="160.9" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="158.2" y="835.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="161.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$121/128391001.run (477 samples, 11.70%)</title><rect x="158.4" y="947.0" width="138.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.4" y="958.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$flush$10 (477 samples, 11.70%)</title><rect x="158.4" y="931.0" width="138.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.4" y="942.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.serialize (476 samples, 11.67%)</title><rect x="158.4" y="915.0" width="137.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.4" y="926.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.serialize (476 samples, 11.67%)</title><rect x="158.4" y="899.0" width="137.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="161.4" y="910.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1 samples, 0.02%)</title><rect x="159.6" y="883.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="162.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (1 samples, 0.02%)</title><rect x="159.6" y="867.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1 samples, 0.02%)</title><rect x="159.6" y="851.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="162.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.02%)</title><rect x="159.6" y="835.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="162.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$127/1084054259.getAsBoolean (1 samples, 0.02%)</title><rect x="159.6" y="819.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (1 samples, 0.02%)</title><rect x="159.6" y="803.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="162.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (1 samples, 0.02%)</title><rect x="159.6" y="787.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="162.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.02%)</title><rect x="159.6" y="771.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="162.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable$$Lambda$123/1582414916.apply (1 samples, 0.02%)</title><rect x="159.6" y="755.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="162.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.lambda$iterator$0 (1 samples, 0.02%)</title><rect x="159.6" y="739.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="162.6" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (471 samples, 11.55%)</title><rect x="159.9" y="883.0" width="136.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.9" y="894.0">sun/nio/ch/FileCh..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (8 samples, 0.20%)</title><rect x="160.2" y="867.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="163.2" y="878.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (8 samples, 0.20%)</title><rect x="160.2" y="851.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="163.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (8 samples, 0.20%)</title><rect x="160.2" y="835.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.2" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (456 samples, 11.18%)</title><rect x="162.5" y="867.0" width="131.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="165.5" y="878.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (6 samples, 0.15%)</title><rect x="163.1" y="851.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.1" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.12%)</title><rect x="163.1" y="835.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.1" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.12%)</title><rect x="163.1" y="819.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.1" y="830.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="163.9" y="803.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="166.9" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="164.2" y="803.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="167.2" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.02%)</title><rect x="164.5" y="835.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.5" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.02%)</title><rect x="164.5" y="819.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.5" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.02%)</title><rect x="164.5" y="803.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.5" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (1 samples, 0.02%)</title><rect x="164.5" y="787.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.5" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (432 samples, 10.59%)</title><rect x="164.8" y="851.0" width="125.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.8" y="862.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (432 samples, 10.59%)</title><rect x="164.8" y="835.0" width="125.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="167.8" y="846.0">sun/nio/ch/File..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (429 samples, 10.52%)</title><rect x="165.7" y="819.0" width="124.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="168.7" y="830.0">sun/nio/ch/File..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.02%)</title><rect x="166.5" y="803.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="169.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (420 samples, 10.30%)</title><rect x="166.8" y="803.0" width="121.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="169.8" y="814.0">[unknown]</text>
</g>
<g>
<title>__libc_write (413 samples, 10.13%)</title><rect x="166.8" y="787.0" width="119.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="169.8" y="798.0">__libc_write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (336 samples, 8.24%)</title><rect x="189.1" y="771.0" width="97.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="192.1" y="782.0">entry_SYSCA..</text>
</g>
<g>
<title>__x64_sys_write (3 samples, 0.07%)</title><rect x="189.1" y="755.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="192.1" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (333 samples, 8.17%)</title><rect x="190.0" y="755.0" width="96.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="193.0" y="766.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (299 samples, 7.33%)</title><rect x="199.5" y="739.0" width="86.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="202.5" y="750.0">__x64_sys_..</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.02%)</title><rect x="199.5" y="723.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="202.5" y="734.0"></text>
</g>
<g>
<title>ksys_write (298 samples, 7.31%)</title><rect x="199.8" y="723.0" width="86.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="202.8" y="734.0">ksys_write</text>
</g>
<g>
<title>__f_unlock_pos (2 samples, 0.05%)</title><rect x="200.4" y="707.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="203.4" y="718.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.05%)</title><rect x="200.4" y="691.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="203.4" y="702.0"></text>
</g>
<g>
<title>__fdget_pos (11 samples, 0.27%)</title><rect x="201.0" y="707.0" width="3.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="204.0" y="718.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.10%)</title><rect x="201.8" y="691.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="204.8" y="702.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.10%)</title><rect x="201.8" y="675.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="204.8" y="686.0"></text>
</g>
<g>
<title>mutex_lock (4 samples, 0.10%)</title><rect x="203.0" y="691.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="206.0" y="702.0"></text>
</g>
<g>
<title>__fsnotify_parent (2 samples, 0.05%)</title><rect x="204.2" y="707.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="207.2" y="718.0"></text>
</g>
<g>
<title>fput (5 samples, 0.12%)</title><rect x="204.7" y="707.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="207.7" y="718.0"></text>
</g>
<g>
<title>fput_many (5 samples, 0.12%)</title><rect x="204.7" y="691.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="207.7" y="702.0"></text>
</g>
<g>
<title>vfs_write (276 samples, 6.77%)</title><rect x="206.2" y="707.0" width="79.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="209.2" y="718.0">vfs_write</text>
</g>
<g>
<title>__fsnotify_parent (1 samples, 0.02%)</title><rect x="207.1" y="691.0" width="0.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="210.1" y="702.0"></text>
</g>
<g>
<title>__sb_start_write (4 samples, 0.10%)</title><rect x="207.3" y="691.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="210.3" y="702.0"></text>
</g>
<g>
<title>__vfs_write (246 samples, 6.03%)</title><rect x="208.5" y="691.0" width="71.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="211.5" y="702.0">__vfs_wr..</text>
</g>
<g>
<title>ext4_file_write_iter (1 samples, 0.02%)</title><rect x="208.5" y="675.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="211.5" y="686.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.02%)</title><rect x="208.8" y="675.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="211.8" y="686.0"></text>
</g>
<g>
<title>new_sync_write (244 samples, 5.98%)</title><rect x="209.1" y="675.0" width="70.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="212.1" y="686.0">new_sync..</text>
</g>
<g>
<title>ext4_file_write_iter (240 samples, 5.89%)</title><rect x="209.9" y="659.0" width="69.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="212.9" y="670.0">ext4_fi..</text>
</g>
<g>
<title>__generic_file_write_iter (232 samples, 5.69%)</title><rect x="210.2" y="643.0" width="67.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="213.2" y="654.0">__gener..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.02%)</title><rect x="212.0" y="627.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="215.0" y="638.0"></text>
</g>
<g>
<title>ext4_da_write_begin (6 samples, 0.15%)</title><rect x="212.3" y="627.0" width="1.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="215.3" y="638.0"></text>
</g>
<g>
<title>ext4_da_write_end (1 samples, 0.02%)</title><rect x="214.0" y="627.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="217.0" y="638.0"></text>
</g>
<g>
<title>file_update_time (5 samples, 0.12%)</title><rect x="214.3" y="627.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="217.3" y="638.0"></text>
</g>
<g>
<title>current_time (2 samples, 0.05%)</title><rect x="214.9" y="611.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="217.9" y="622.0"></text>
</g>
<g>
<title>timespec64_trunc (1 samples, 0.02%)</title><rect x="215.2" y="595.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="218.2" y="606.0"></text>
</g>
<g>
<title>generic_update_time (1 samples, 0.02%)</title><rect x="215.4" y="611.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="218.4" y="622.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.02%)</title><rect x="215.4" y="595.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="218.4" y="606.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.02%)</title><rect x="215.4" y="579.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="218.4" y="590.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.02%)</title><rect x="215.4" y="563.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="218.4" y="574.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (1 samples, 0.02%)</title><rect x="215.4" y="547.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="218.4" y="558.0"></text>
</g>
<g>
<title>generic_perform_write (211 samples, 5.17%)</title><rect x="215.7" y="627.0" width="61.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="218.7" y="638.0">generi..</text>
</g>
<g>
<title>_cond_resched (1 samples, 0.02%)</title><rect x="216.9" y="611.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="219.9" y="622.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.02%)</title><rect x="217.2" y="611.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="220.2" y="622.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.02%)</title><rect x="217.5" y="611.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="220.5" y="622.0"></text>
</g>
<g>
<title>ext4_da_write_begin (44 samples, 1.08%)</title><rect x="217.8" y="611.0" width="12.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="220.8" y="622.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (19 samples, 0.47%)</title><rect x="218.3" y="595.0" width="5.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="221.3" y="606.0"></text>
</g>
<g>
<title>ext4_journal_check_start (2 samples, 0.05%)</title><rect x="218.3" y="579.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="221.3" y="590.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.02%)</title><rect x="218.6" y="563.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="221.6" y="574.0"></text>
</g>
<g>
<title>jbd2__journal_start (16 samples, 0.39%)</title><rect x="218.9" y="579.0" width="4.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="221.9" y="590.0"></text>
</g>
<g>
<title>start_this_handle (13 samples, 0.32%)</title><rect x="219.8" y="563.0" width="3.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="222.8" y="574.0"></text>
</g>
<g>
<title>_raw_read_lock (3 samples, 0.07%)</title><rect x="221.8" y="547.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="224.8" y="558.0"></text>
</g>
<g>
<title>add_transaction_credits (3 samples, 0.07%)</title><rect x="222.7" y="547.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="225.7" y="558.0"></text>
</g>
<g>
<title>start_this_handle (1 samples, 0.02%)</title><rect x="223.5" y="579.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="226.5" y="590.0"></text>
</g>
<g>
<title>ext4_block_write_begin (4 samples, 0.10%)</title><rect x="223.8" y="595.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="226.8" y="606.0"></text>
</g>
<g>
<title>ext4_nonda_switch (2 samples, 0.05%)</title><rect x="225.0" y="595.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="228.0" y="606.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (16 samples, 0.39%)</title><rect x="225.6" y="595.0" width="4.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="228.6" y="606.0"></text>
</g>
<g>
<title>pagecache_get_page (15 samples, 0.37%)</title><rect x="225.6" y="579.0" width="4.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="228.6" y="590.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.02%)</title><rect x="226.2" y="563.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="229.2" y="574.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.02%)</title><rect x="226.2" y="547.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="229.2" y="558.0"></text>
</g>
<g>
<title>find_get_entry (11 samples, 0.27%)</title><rect x="226.4" y="563.0" width="3.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="229.4" y="574.0"></text>
</g>
<g>
<title>xas_load (6 samples, 0.15%)</title><rect x="227.9" y="547.0" width="1.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="230.9" y="558.0"></text>
</g>
<g>
<title>xas_start (1 samples, 0.02%)</title><rect x="229.3" y="531.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="232.3" y="542.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.02%)</title><rect x="229.6" y="563.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="232.6" y="574.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.02%)</title><rect x="229.9" y="579.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="232.9" y="590.0"></text>
</g>
<g>
<title>unlock_page (1 samples, 0.02%)</title><rect x="230.2" y="595.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="233.2" y="606.0"></text>
</g>
<g>
<title>ext4_da_write_end (143 samples, 3.51%)</title><rect x="230.5" y="611.0" width="41.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="233.5" y="622.0">ext..</text>
</g>
<g>
<title>__ext4_journal_stop (16 samples, 0.39%)</title><rect x="231.6" y="595.0" width="4.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="234.6" y="606.0"></text>
</g>
<g>
<title>jbd2_journal_stop (14 samples, 0.34%)</title><rect x="232.2" y="579.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="235.2" y="590.0"></text>
</g>
<g>
<title>__wake_up (7 samples, 0.17%)</title><rect x="233.7" y="563.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="236.7" y="574.0"></text>
</g>
<g>
<title>__wake_up_common_lock (7 samples, 0.17%)</title><rect x="233.7" y="547.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="236.7" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.05%)</title><rect x="234.5" y="531.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="237.5" y="542.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.05%)</title><rect x="235.1" y="531.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="238.1" y="542.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.05%)</title><rect x="235.7" y="563.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="238.7" y="574.0"></text>
</g>
<g>
<title>generic_write_end (123 samples, 3.02%)</title><rect x="236.3" y="595.0" width="35.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="239.3" y="606.0">gen..</text>
</g>
<g>
<title>__mark_inode_dirty (108 samples, 2.65%)</title><rect x="236.9" y="579.0" width="31.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="239.9" y="590.0">__..</text>
</g>
<g>
<title>ext4_dirty_inode (103 samples, 2.53%)</title><rect x="238.0" y="563.0" width="29.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="241.0" y="574.0">ex..</text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.02%)</title><rect x="238.3" y="547.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="241.3" y="558.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.02%)</title><rect x="238.3" y="531.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="241.3" y="542.0"></text>
</g>
<g>
<title>__ext4_journal_stop (2 samples, 0.05%)</title><rect x="238.6" y="547.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="241.6" y="558.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (98 samples, 2.40%)</title><rect x="239.2" y="547.0" width="28.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="242.2" y="558.0">ex..</text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.02%)</title><rect x="239.2" y="531.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="242.2" y="542.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (1 samples, 0.02%)</title><rect x="239.5" y="531.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="242.5" y="542.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (73 samples, 1.79%)</title><rect x="239.7" y="531.0" width="21.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="242.7" y="542.0">e..</text>
</g>
<g>
<title>__brelse (2 samples, 0.05%)</title><rect x="245.5" y="515.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="248.5" y="526.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (1 samples, 0.02%)</title><rect x="246.1" y="515.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="249.1" y="526.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.02%)</title><rect x="246.1" y="499.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="249.1" y="510.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (45 samples, 1.10%)</title><rect x="246.4" y="515.0" width="13.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="249.4" y="526.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.02%)</title><rect x="246.7" y="499.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="249.7" y="510.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.63 (43 samples, 1.05%)</title><rect x="247.0" y="499.0" width="12.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="250.0" y="510.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.05%)</title><rect x="249.3" y="483.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="252.3" y="494.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (14 samples, 0.34%)</title><rect x="249.9" y="483.0" width="4.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="252.9" y="494.0"></text>
</g>
<g>
<title>crypto_shash_update (19 samples, 0.47%)</title><rect x="253.9" y="483.0" width="5.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="256.9" y="494.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (16 samples, 0.39%)</title><rect x="254.8" y="467.0" width="4.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="257.8" y="478.0"></text>
</g>
<g>
<title>from_kgid (1 samples, 0.02%)</title><rect x="259.4" y="515.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="262.4" y="526.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.02%)</title><rect x="259.4" y="499.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="262.4" y="510.0"></text>
</g>
<g>
<title>from_kprojid (4 samples, 0.10%)</title><rect x="259.7" y="515.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="262.7" y="526.0"></text>
</g>
<g>
<title>map_id_up (4 samples, 0.10%)</title><rect x="259.7" y="499.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="262.7" y="510.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (23 samples, 0.56%)</title><rect x="260.9" y="531.0" width="6.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="263.9" y="542.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (13 samples, 0.32%)</title><rect x="261.2" y="515.0" width="3.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="264.2" y="526.0"></text>
</g>
<g>
<title>__getblk_gfp (5 samples, 0.12%)</title><rect x="262.3" y="499.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="265.3" y="510.0"></text>
</g>
<g>
<title>__find_get_block (4 samples, 0.10%)</title><rect x="262.6" y="483.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="265.6" y="494.0"></text>
</g>
<g>
<title>mark_page_accessed (1 samples, 0.02%)</title><rect x="263.5" y="467.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="266.5" y="478.0"></text>
</g>
<g>
<title>ext4_get_group_desc (4 samples, 0.10%)</title><rect x="263.8" y="499.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="266.8" y="510.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (8 samples, 0.20%)</title><rect x="264.9" y="515.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="267.9" y="526.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (7 samples, 0.17%)</title><rect x="265.2" y="499.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="268.2" y="510.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (6 samples, 0.15%)</title><rect x="265.5" y="483.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="268.5" y="494.0"></text>
</g>
<g>
<title>ext4_inode_table (1 samples, 0.02%)</title><rect x="267.2" y="515.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="270.2" y="526.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.02%)</title><rect x="267.5" y="547.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="270.5" y="558.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.02%)</title><rect x="267.8" y="563.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="270.8" y="574.0"></text>
</g>
<g>
<title>block_write_end (9 samples, 0.22%)</title><rect x="268.1" y="579.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="271.1" y="590.0"></text>
</g>
<g>
<title>__block_commit_write.isra.41 (6 samples, 0.15%)</title><rect x="268.7" y="563.0" width="1.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="271.7" y="574.0"></text>
</g>
<g>
<title>mark_buffer_dirty (1 samples, 0.02%)</title><rect x="270.1" y="547.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="273.1" y="558.0"></text>
</g>
<g>
<title>mark_buffer_dirty (1 samples, 0.02%)</title><rect x="270.4" y="563.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="273.4" y="574.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.02%)</title><rect x="270.7" y="579.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="273.7" y="590.0"></text>
</g>
<g>
<title>unlock_page (3 samples, 0.07%)</title><rect x="271.0" y="579.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="274.0" y="590.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.07%)</title><rect x="271.9" y="611.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="274.9" y="622.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (8 samples, 0.20%)</title><rect x="272.7" y="611.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="275.7" y="622.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.02%)</title><rect x="273.9" y="595.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="276.9" y="606.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (3 samples, 0.07%)</title><rect x="274.2" y="595.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="277.2" y="606.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (5 samples, 0.12%)</title><rect x="275.1" y="611.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="278.1" y="622.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.02%)</title><rect x="276.5" y="611.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="279.5" y="622.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.02%)</title><rect x="276.8" y="627.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="279.8" y="638.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.02%)</title><rect x="277.1" y="627.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="280.1" y="638.0"></text>
</g>
<g>
<title>down_write_trylock (1 samples, 0.02%)</title><rect x="277.4" y="643.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="280.4" y="654.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.02%)</title><rect x="277.7" y="643.0" width="0.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="280.7" y="654.0"></text>
</g>
<g>
<title>generic_write_checks (1 samples, 0.02%)</title><rect x="277.7" y="627.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="280.7" y="638.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.54 (1 samples, 0.02%)</title><rect x="277.7" y="611.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="280.7" y="622.0"></text>
</g>
<g>
<title>up_write (5 samples, 0.12%)</title><rect x="277.9" y="643.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="280.9" y="654.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.02%)</title><rect x="279.4" y="659.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="282.4" y="670.0"></text>
</g>
<g>
<title>fsnotify (3 samples, 0.07%)</title><rect x="279.7" y="691.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="282.7" y="702.0"></text>
</g>
<g>
<title>rw_verify_area (19 samples, 0.47%)</title><rect x="280.5" y="691.0" width="5.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="283.5" y="702.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.02%)</title><rect x="280.8" y="675.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="283.8" y="686.0"></text>
</g>
<g>
<title>security_file_permission (16 samples, 0.39%)</title><rect x="281.1" y="675.0" width="4.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="284.1" y="686.0"></text>
</g>
<g>
<title>__inode_security_revalidate (1 samples, 0.02%)</title><rect x="281.4" y="659.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="284.4" y="670.0"></text>
</g>
<g>
<title>apparmor_file_permission (5 samples, 0.12%)</title><rect x="281.7" y="659.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="284.7" y="670.0"></text>
</g>
<g>
<title>common_file_perm (5 samples, 0.12%)</title><rect x="281.7" y="643.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="284.7" y="654.0"></text>
</g>
<g>
<title>common_file_perm (4 samples, 0.10%)</title><rect x="283.2" y="659.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="286.2" y="670.0"></text>
</g>
<g>
<title>selinux_file_permission (5 samples, 0.12%)</title><rect x="284.3" y="659.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="287.3" y="670.0"></text>
</g>
<g>
<title>__inode_security_revalidate (2 samples, 0.05%)</title><rect x="285.2" y="643.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="288.2" y="654.0"></text>
</g>
<g>
<title>selinux_file_permission (1 samples, 0.02%)</title><rect x="285.8" y="675.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="288.8" y="686.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.02%)</title><rect x="286.0" y="739.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="289.0" y="750.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.10%)</title><rect x="286.3" y="787.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="289.3" y="798.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.07%)</title><rect x="287.5" y="787.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="290.5" y="798.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.10%)</title><rect x="288.4" y="803.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="291.4" y="814.0"></text>
</g>
<g>
<title>write@plt (1 samples, 0.02%)</title><rect x="289.5" y="803.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="292.5" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (11 samples, 0.27%)</title><rect x="289.8" y="851.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.8" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.07%)</title><rect x="291.8" y="835.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="294.8" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.07%)</title><rect x="291.8" y="819.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.8" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.07%)</title><rect x="291.8" y="803.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.02%)</title><rect x="292.4" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.4" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.02%)</title><rect x="292.7" y="835.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (5 samples, 0.12%)</title><rect x="293.0" y="851.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.0" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.10%)</title><rect x="293.3" y="835.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.10%)</title><rect x="293.3" y="819.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.10%)</title><rect x="293.3" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.02%)</title><rect x="294.1" y="787.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (6 samples, 0.15%)</title><rect x="294.4" y="867.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.4" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.05%)</title><rect x="295.6" y="851.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.6" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/TableSet.finishFlushingOnDisk (1 samples, 0.02%)</title><rect x="296.2" y="915.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.2" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.&lt;init&gt; (1 samples, 0.02%)</title><rect x="296.2" y="899.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.2" y="910.0"></text>
</g>
<g>
<title>java/nio/channels/FileChannel.open (1 samples, 0.02%)</title><rect x="296.2" y="883.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.2" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/FileChannel.open (1 samples, 0.02%)</title><rect x="296.2" y="867.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="299.2" y="878.0"></text>
</g>
<g>
<title>sun/nio/fs/UnixFileSystemProvider.newFileChannel (1 samples, 0.02%)</title><rect x="296.2" y="851.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.2" y="862.0"></text>
</g>
<g>
<title>sun/nio/fs/UnixChannelFactory.newFileChannel (1 samples, 0.02%)</title><rect x="296.2" y="835.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.2" y="846.0"></text>
</g>
<g>
<title>sun/nio/fs/UnixChannelFactory.newFileChannel (1 samples, 0.02%)</title><rect x="296.2" y="819.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.2" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.open (1 samples, 0.02%)</title><rect x="296.2" y="803.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.&lt;init&gt; (1 samples, 0.02%)</title><rect x="296.2" y="787.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$102/1149186326.run (1,743 samples, 42.74%)</title><rect x="296.5" y="947.0" width="504.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="299.5" y="958.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$102/1149186326.run</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$4 (1,743 samples, 42.74%)</title><rect x="296.5" y="931.0" width="504.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="299.5" y="942.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$4</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.process (1,743 samples, 42.74%)</title><rect x="296.5" y="915.0" width="504.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="299.5" y="926.0">ru/mail/polis/service/zvladn7/AsyncService.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1285672771.process (1,743 samples, 42.74%)</title><rect x="296.5" y="899.0" width="504.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.5" y="910.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1285672771.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$upsert$3 (1,743 samples, 42.74%)</title><rect x="296.5" y="883.0" width="504.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.5" y="894.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$upsert$3</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.handleUpsert (1,743 samples, 42.74%)</title><rect x="296.5" y="867.0" width="504.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="299.5" y="878.0">ru/mail/polis/service/zvladn7/ServiceHelper.handleUpsert</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.handleOrProxy (1,644 samples, 40.31%)</title><rect x="296.5" y="851.0" width="475.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.5" y="862.0">ru/mail/polis/service/zvladn7/ServiceHelper.handleOrProxy</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$110/1670436682.process (1,575 samples, 38.62%)</title><rect x="296.5" y="835.0" width="455.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.5" y="846.0">ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$110/1670436..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.lambda$handleUpsert$2 (1,575 samples, 38.62%)</title><rect x="296.5" y="819.0" width="455.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="299.5" y="830.0">ru/mail/polis/service/zvladn7/ServiceHelper.lambda$handleUpsert$2</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="297.6" y="803.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="300.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,217 samples, 29.84%)</title><rect x="298.5" y="803.0" width="352.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.5" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="301.7" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="304.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (19 samples, 0.47%)</title><rect x="302.0" y="787.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="305.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (19 samples, 0.47%)</title><rect x="302.0" y="771.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (19 samples, 0.47%)</title><rect x="302.0" y="755.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="304.6" y="739.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="307.6" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.07%)</title><rect x="304.6" y="723.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="307.6" y="734.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.07%)</title><rect x="305.4" y="739.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="308.4" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.10%)</title><rect x="306.3" y="739.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="309.3" y="750.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.07%)</title><rect x="306.6" y="723.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="309.6" y="734.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="306.9" y="707.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="309.9" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,175 samples, 28.81%)</title><rect x="307.5" y="787.0" width="340.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.5" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (58 samples, 1.42%)</title><rect x="309.2" y="771.0" width="16.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="312.2" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="324.5" y="755.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="327.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.02%)</title><rect x="325.4" y="755.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.4" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="325.4" y="739.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="328.4" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="325.4" y="723.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="328.4" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="325.4" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="328.4" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.02%)</title><rect x="325.4" y="691.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="328.4" y="702.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.02%)</title><rect x="325.7" y="755.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.02%)</title><rect x="325.7" y="739.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.02%)</title><rect x="325.7" y="723.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.7" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.02%)</title><rect x="325.7" y="707.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="325.7" y="691.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="328.7" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,111 samples, 27.24%)</title><rect x="326.0" y="771.0" width="321.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.0" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,111 samples, 27.24%)</title><rect x="326.0" y="755.0" width="321.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="329.0" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.05%)</title><rect x="328.6" y="739.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.6" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2 samples, 0.05%)</title><rect x="329.2" y="739.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.2" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,098 samples, 26.92%)</title><rect x="329.7" y="739.0" width="317.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.7" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,097 samples, 26.90%)</title><rect x="330.0" y="723.0" width="317.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.0" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (25 samples, 0.61%)</title><rect x="332.1" y="707.0" width="7.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="335.1" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="334.4" y="691.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="337.4" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (1 samples, 0.02%)</title><rect x="334.7" y="691.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="337.7" y="702.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="334.9" y="691.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="337.9" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (14 samples, 0.34%)</title><rect x="335.2" y="691.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="338.2" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.10%)</title><rect x="337.0" y="675.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="340.0" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (4 samples, 0.10%)</title><rect x="338.1" y="675.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="341.1" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.07%)</title><rect x="339.3" y="707.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="342.3" y="718.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (7 samples, 0.17%)</title><rect x="340.2" y="707.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="343.2" y="718.0"></text>
</g>
<g>
<title>__send (1,054 samples, 25.85%)</title><rect x="342.2" y="707.0" width="305.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="345.2" y="718.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (975 samples, 23.91%)</title><rect x="365.0" y="691.0" width="282.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="368.0" y="702.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (2 samples, 0.05%)</title><rect x="365.0" y="675.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="368.0" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (973 samples, 23.86%)</title><rect x="365.6" y="675.0" width="281.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="368.6" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (944 samples, 23.15%)</title><rect x="374.0" y="659.0" width="273.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="377.0" y="670.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (943 samples, 23.12%)</title><rect x="374.0" y="643.0" width="272.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="377.0" y="654.0">__sys_sendto</text>
</g>
<g>
<title>fput (8 samples, 0.20%)</title><rect x="375.5" y="627.0" width="2.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="378.5" y="638.0"></text>
</g>
<g>
<title>fput_many (8 samples, 0.20%)</title><rect x="375.5" y="611.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="378.5" y="622.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.02%)</title><rect x="377.8" y="627.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="380.8" y="638.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.02%)</title><rect x="378.1" y="627.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="381.1" y="638.0"></text>
</g>
<g>
<title>sock_sendmsg (904 samples, 22.17%)</title><rect x="378.4" y="627.0" width="261.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="381.4" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (880 samples, 21.58%)</title><rect x="378.9" y="611.0" width="254.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="381.9" y="622.0">inet6_sendmsg</text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.02%)</title><rect x="380.4" y="595.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="383.4" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg (874 samples, 21.43%)</title><rect x="380.7" y="595.0" width="252.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="383.7" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.05%)</title><rect x="380.7" y="579.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="383.7" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.12%)</title><rect x="381.2" y="579.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="384.2" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.05%)</title><rect x="382.7" y="579.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="385.7" y="590.0"></text>
</g>
<g>
<title>lock_sock_nested (7 samples, 0.17%)</title><rect x="383.3" y="579.0" width="2.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="386.3" y="590.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.05%)</title><rect x="383.3" y="563.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="386.3" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.12%)</title><rect x="383.8" y="563.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="386.8" y="574.0"></text>
</g>
<g>
<title>release_sock (7 samples, 0.17%)</title><rect x="385.3" y="579.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="388.3" y="590.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.02%)</title><rect x="385.6" y="563.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="388.6" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.02%)</title><rect x="385.9" y="563.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="388.9" y="574.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (3 samples, 0.07%)</title><rect x="386.2" y="563.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="389.2" y="574.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.05%)</title><rect x="386.5" y="547.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="389.5" y="558.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.02%)</title><rect x="387.0" y="563.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="390.0" y="574.0"></text>
</g>
<g>
<title>sock_zerocopy_put (1 samples, 0.02%)</title><rect x="387.3" y="579.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="390.3" y="590.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (6 samples, 0.15%)</title><rect x="387.6" y="579.0" width="1.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="390.6" y="590.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.02%)</title><rect x="389.3" y="579.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="392.3" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (838 samples, 20.55%)</title><rect x="389.6" y="579.0" width="242.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="392.6" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (4 samples, 0.10%)</title><rect x="394.6" y="563.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="397.6" y="574.0"></text>
</g>
<g>
<title>__virt_addr_valid (6 samples, 0.15%)</title><rect x="395.7" y="563.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="398.7" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (8 samples, 0.20%)</title><rect x="397.4" y="563.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="400.4" y="574.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (4 samples, 0.10%)</title><rect x="397.7" y="547.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="400.7" y="558.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.05%)</title><rect x="398.9" y="547.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="401.9" y="558.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.02%)</title><rect x="399.5" y="547.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="402.5" y="558.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.02%)</title><rect x="399.8" y="563.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="402.8" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (4 samples, 0.10%)</title><rect x="400.1" y="563.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="403.1" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (4 samples, 0.10%)</title><rect x="400.1" y="547.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="403.1" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (52 samples, 1.28%)</title><rect x="401.2" y="563.0" width="15.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="404.2" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (47 samples, 1.15%)</title><rect x="402.4" y="547.0" width="13.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="405.4" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.56 (15 samples, 0.37%)</title><rect x="404.1" y="531.0" width="4.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="407.1" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (14 samples, 0.34%)</title><rect x="404.1" y="515.0" width="4.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="407.1" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (6 samples, 0.15%)</title><rect x="406.1" y="499.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="409.1" y="510.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.02%)</title><rect x="407.9" y="499.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="410.9" y="510.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.02%)</title><rect x="408.2" y="515.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="411.2" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.02%)</title><rect x="408.4" y="531.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="411.4" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (14 samples, 0.34%)</title><rect x="408.7" y="531.0" width="4.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="411.7" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.02%)</title><rect x="412.5" y="515.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="415.5" y="526.0"></text>
</g>
<g>
<title>ksize (8 samples, 0.20%)</title><rect x="412.8" y="531.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="415.8" y="542.0"></text>
</g>
<g>
<title>__ksize (8 samples, 0.20%)</title><rect x="412.8" y="515.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="415.8" y="526.0"></text>
</g>
<g>
<title>should_failslab (3 samples, 0.07%)</title><rect x="415.1" y="531.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="418.1" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.02%)</title><rect x="416.0" y="547.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="419.0" y="558.0"></text>
</g>
<g>
<title>skb_entail (5 samples, 0.12%)</title><rect x="416.3" y="563.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="419.3" y="574.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.02%)</title><rect x="417.4" y="547.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="420.4" y="558.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.02%)</title><rect x="417.7" y="563.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="420.7" y="574.0"></text>
</g>
<g>
<title>tcp_push (723 samples, 17.73%)</title><rect x="418.0" y="563.0" width="209.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="421.0" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (719 samples, 17.63%)</title><rect x="418.6" y="547.0" width="208.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="421.6" y="558.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>ktime_get (3 samples, 0.07%)</title><rect x="418.6" y="531.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="421.6" y="542.0"></text>
</g>
<g>
<title>tcp_chrono_stop (3 samples, 0.07%)</title><rect x="419.4" y="531.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="422.4" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.02%)</title><rect x="420.3" y="531.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="423.3" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (712 samples, 17.46%)</title><rect x="420.6" y="531.0" width="206.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="423.6" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.05%)</title><rect x="424.9" y="515.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="427.9" y="526.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (651 samples, 15.96%)</title><rect x="425.5" y="515.0" width="188.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="428.5" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (1 samples, 0.02%)</title><rect x="433.9" y="499.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="436.9" y="510.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.05%)</title><rect x="434.2" y="499.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="437.2" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.02%)</title><rect x="434.8" y="499.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="437.8" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.02%)</title><rect x="435.1" y="499.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="438.1" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (600 samples, 14.71%)</title><rect x="435.4" y="499.0" width="173.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="438.4" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (596 samples, 14.62%)</title><rect x="435.6" y="483.0" width="172.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="438.6" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.02%)</title><rect x="440.0" y="467.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="443.0" y="478.0"></text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.02%)</title><rect x="440.3" y="467.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="443.3" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.02%)</title><rect x="440.3" y="451.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="443.3" y="462.0"></text>
</g>
<g>
<title>ip_local_out (570 samples, 13.98%)</title><rect x="440.6" y="467.0" width="164.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="443.6" y="478.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (18 samples, 0.44%)</title><rect x="440.9" y="451.0" width="5.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="443.9" y="462.0"></text>
</g>
<g>
<title>ip_send_check (8 samples, 0.20%)</title><rect x="441.1" y="435.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="444.1" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (5 samples, 0.12%)</title><rect x="443.5" y="435.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="446.5" y="446.0"></text>
</g>
<g>
<title>netlbl_enabled (1 samples, 0.02%)</title><rect x="443.5" y="419.0" width="0.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="446.5" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_output (4 samples, 0.10%)</title><rect x="443.7" y="419.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="446.7" y="430.0"></text>
</g>
<g>
<title>netlbl_enabled (2 samples, 0.05%)</title><rect x="444.3" y="403.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="447.3" y="414.0"></text>
</g>
<g>
<title>selinux_ipv4_output (4 samples, 0.10%)</title><rect x="444.9" y="435.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="447.9" y="446.0"></text>
</g>
<g>
<title>ip_output (548 samples, 13.44%)</title><rect x="446.1" y="451.0" width="158.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="449.1" y="462.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (513 samples, 12.58%)</title><rect x="448.4" y="435.0" width="148.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="451.4" y="446.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (5 samples, 0.12%)</title><rect x="448.4" y="419.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="451.4" y="430.0"></text>
</g>
<g>
<title>__ip_finish_output (506 samples, 12.41%)</title><rect x="449.8" y="419.0" width="146.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="452.8" y="430.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (501 samples, 12.29%)</title><rect x="451.0" y="403.0" width="144.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="454.0" y="414.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (430 samples, 10.54%)</title><rect x="454.2" y="387.0" width="124.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="457.2" y="398.0">__local_bh_enab..</text>
</g>
<g>
<title>do_softirq.part.20 (428 samples, 10.50%)</title><rect x="454.7" y="371.0" width="123.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="457.7" y="382.0">do_softirq.part..</text>
</g>
<g>
<title>do_softirq_own_stack (426 samples, 10.45%)</title><rect x="455.3" y="355.0" width="123.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="458.3" y="366.0">do_softirq_own_..</text>
</g>
<g>
<title>__softirqentry_text_start (419 samples, 10.27%)</title><rect x="455.3" y="339.0" width="121.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="458.3" y="350.0">__softirqentry_..</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.02%)</title><rect x="459.4" y="323.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="462.4" y="334.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.02%)</title><rect x="459.7" y="323.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="462.7" y="334.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.05%)</title><rect x="460.0" y="323.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="463.0" y="334.0"></text>
</g>
<g>
<title>net_rx_action (398 samples, 9.76%)</title><rect x="460.5" y="323.0" width="115.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="463.5" y="334.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (4 samples, 0.10%)</title><rect x="462.0" y="307.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="465.0" y="318.0"></text>
</g>
<g>
<title>process_backlog (389 samples, 9.54%)</title><rect x="463.1" y="307.0" width="112.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="466.1" y="318.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (381 samples, 9.34%)</title><rect x="465.4" y="291.0" width="110.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="468.4" y="302.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (381 samples, 9.34%)</title><rect x="465.4" y="275.0" width="110.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="468.4" y="286.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_core (11 samples, 0.27%)</title><rect x="465.4" y="259.0" width="3.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="468.4" y="270.0"></text>
</g>
<g>
<title>ip_rcv (368 samples, 9.02%)</title><rect x="468.6" y="259.0" width="106.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="471.6" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (4 samples, 0.10%)</title><rect x="468.9" y="243.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="471.9" y="254.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.20 (5 samples, 0.12%)</title><rect x="470.1" y="243.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="473.1" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (358 samples, 8.78%)</title><rect x="471.5" y="243.0" width="103.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="474.5" y="254.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (355 samples, 8.71%)</title><rect x="471.8" y="227.0" width="102.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="474.8" y="238.0">ip_local_del..</text>
</g>
<g>
<title>ip_local_deliver_finish (354 samples, 8.68%)</title><rect x="472.1" y="211.0" width="102.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="475.1" y="222.0">ip_local_del..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (348 samples, 8.53%)</title><rect x="472.1" y="195.0" width="100.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="475.1" y="206.0">ip_protocol_..</text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.07%)</title><rect x="473.6" y="179.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="476.6" y="190.0"></text>
</g>
<g>
<title>sock_put (1 samples, 0.02%)</title><rect x="474.4" y="179.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="477.4" y="190.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (3 samples, 0.07%)</title><rect x="474.7" y="179.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="477.7" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (336 samples, 8.24%)</title><rect x="475.6" y="179.0" width="97.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="478.6" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (28 samples, 0.69%)</title><rect x="478.5" y="163.0" width="8.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="481.5" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (3 samples, 0.07%)</title><rect x="485.7" y="147.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="488.7" y="158.0"></text>
</g>
<g>
<title>_raw_spin_lock (4 samples, 0.10%)</title><rect x="486.6" y="163.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="489.6" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.05%)</title><rect x="487.7" y="163.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="490.7" y="174.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.02%)</title><rect x="488.3" y="163.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="491.3" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (26 samples, 0.64%)</title><rect x="488.6" y="163.0" width="7.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="491.6" y="174.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.07%)</title><rect x="488.9" y="147.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="491.9" y="158.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.02%)</title><rect x="489.8" y="147.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="492.8" y="158.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (19 samples, 0.47%)</title><rect x="490.0" y="147.0" width="5.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="493.0" y="158.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (19 samples, 0.47%)</title><rect x="490.0" y="131.0" width="5.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="493.0" y="142.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (1 samples, 0.02%)</title><rect x="492.1" y="115.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="495.1" y="126.0"></text>
</g>
<g>
<title>selinux_sock_rcv_skb_compat (11 samples, 0.27%)</title><rect x="492.4" y="115.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="495.4" y="126.0"></text>
</g>
<g>
<title>avc_has_perm (1 samples, 0.02%)</title><rect x="493.5" y="99.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="496.5" y="110.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (2 samples, 0.05%)</title><rect x="493.8" y="99.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="496.8" y="110.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.64 (3 samples, 0.07%)</title><rect x="494.4" y="99.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="497.4" y="110.0"></text>
</g>
<g>
<title>selinux_xfrm_sock_rcv_skb (1 samples, 0.02%)</title><rect x="495.3" y="99.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="498.3" y="110.0"></text>
</g>
<g>
<title>avc_has_perm (1 samples, 0.02%)</title><rect x="495.3" y="83.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="498.3" y="94.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (2 samples, 0.05%)</title><rect x="495.5" y="147.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="498.5" y="158.0"></text>
</g>
<g>
<title>sock_put (1 samples, 0.02%)</title><rect x="496.1" y="163.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="499.1" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (261 samples, 6.40%)</title><rect x="496.4" y="163.0" width="75.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="499.4" y="174.0">tcp_v4_d..</text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.10%)</title><rect x="496.4" y="147.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="499.4" y="158.0"></text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.02%)</title><rect x="497.6" y="147.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="500.6" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (256 samples, 6.28%)</title><rect x="497.9" y="147.0" width="74.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="500.9" y="158.0">tcp_rcv_..</text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.02%)</title><rect x="500.2" y="131.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="503.2" y="142.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (10 samples, 0.25%)</title><rect x="500.5" y="131.0" width="2.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="503.5" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.02%)</title><rect x="500.5" y="115.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="503.5" y="126.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (9 samples, 0.22%)</title><rect x="500.8" y="115.0" width="2.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="503.8" y="126.0"></text>
</g>
<g>
<title>sk_reset_timer (9 samples, 0.22%)</title><rect x="500.8" y="99.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="503.8" y="110.0"></text>
</g>
<g>
<title>mod_timer (8 samples, 0.20%)</title><rect x="501.0" y="83.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="504.0" y="94.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4 samples, 0.10%)</title><rect x="501.9" y="67.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="504.9" y="78.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.02%)</title><rect x="503.1" y="67.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="506.1" y="78.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.05%)</title><rect x="503.4" y="131.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="506.4" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (4 samples, 0.10%)</title><rect x="503.9" y="131.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="506.9" y="142.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.02%)</title><rect x="505.1" y="131.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="508.1" y="142.0"></text>
</g>
<g>
<title>rb_first (4 samples, 0.10%)</title><rect x="505.4" y="131.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="508.4" y="142.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.02%)</title><rect x="506.5" y="131.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="509.5" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (95 samples, 2.33%)</title><rect x="506.8" y="131.0" width="27.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="509.8" y="142.0">s..</text>
</g>
<g>
<title>__wake_up_common_lock (2 samples, 0.05%)</title><rect x="508.0" y="115.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="511.0" y="126.0"></text>
</g>
<g>
<title>__wake_up_sync_key (89 samples, 2.18%)</title><rect x="508.6" y="115.0" width="25.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="511.6" y="126.0">_..</text>
</g>
<g>
<title>__wake_up_common_lock (88 samples, 2.16%)</title><rect x="508.6" y="99.0" width="25.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="511.6" y="110.0">_..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (87 samples, 2.13%)</title><rect x="508.9" y="83.0" width="25.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="511.9" y="94.0">_..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="534.0" y="99.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="537.0" y="110.0"></text>
</g>
<g>
<title>tcp_ack (93 samples, 2.28%)</title><rect x="534.3" y="131.0" width="26.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="537.3" y="142.0">t..</text>
</g>
<g>
<title>__kfree_skb (33 samples, 0.81%)</title><rect x="543.6" y="115.0" width="9.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="546.6" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (9 samples, 0.22%)</title><rect x="543.6" y="99.0" width="2.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="546.6" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (9 samples, 0.22%)</title><rect x="543.6" y="83.0" width="2.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="546.6" y="94.0"></text>
</g>
<g>
<title>__slab_free (6 samples, 0.15%)</title><rect x="544.4" y="67.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="547.4" y="78.0"></text>
</g>
<g>
<title>skb_release_all (24 samples, 0.59%)</title><rect x="546.2" y="99.0" width="6.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="549.2" y="110.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.02%)</title><rect x="546.2" y="83.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="549.2" y="94.0"></text>
</g>
<g>
<title>skb_release_data (20 samples, 0.49%)</title><rect x="546.5" y="83.0" width="5.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="549.5" y="94.0"></text>
</g>
<g>
<title>skb_free_head (3 samples, 0.07%)</title><rect x="551.4" y="67.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="554.4" y="78.0"></text>
</g>
<g>
<title>kfree (3 samples, 0.07%)</title><rect x="551.4" y="51.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="554.4" y="62.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.07%)</title><rect x="551.4" y="35.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="554.4" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.07%)</title><rect x="552.3" y="83.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="555.3" y="94.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.02%)</title><rect x="553.1" y="115.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="556.1" y="126.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.05%)</title><rect x="553.4" y="115.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="556.4" y="126.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.05%)</title><rect x="554.0" y="115.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="557.0" y="126.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.02%)</title><rect x="554.6" y="115.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="557.6" y="126.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.02%)</title><rect x="554.9" y="115.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="557.9" y="126.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.02%)</title><rect x="555.1" y="115.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="558.1" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.46 (7 samples, 0.17%)</title><rect x="555.4" y="115.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="558.4" y="126.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.02%)</title><rect x="557.2" y="99.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="560.2" y="110.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.02%)</title><rect x="557.5" y="115.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="560.5" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (3 samples, 0.07%)</title><rect x="557.8" y="115.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="560.8" y="126.0"></text>
</g>
<g>
<title>tcp_rack_advance (2 samples, 0.05%)</title><rect x="558.6" y="115.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="561.6" y="126.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (2 samples, 0.05%)</title><rect x="559.2" y="115.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="562.2" y="126.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.05%)</title><rect x="559.8" y="115.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="562.8" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.07%)</title><rect x="560.4" y="115.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="563.4" y="126.0"></text>
</g>
<g>
<title>tcp_check_space (5 samples, 0.12%)</title><rect x="561.2" y="131.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="564.2" y="142.0"></text>
</g>
<g>
<title>tcp_data_queue (3 samples, 0.07%)</title><rect x="562.7" y="131.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="565.7" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.07%)</title><rect x="562.7" y="115.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="565.7" y="126.0"></text>
</g>
<g>
<title>__wake_up_sync_key (3 samples, 0.07%)</title><rect x="562.7" y="99.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="565.7" y="110.0"></text>
</g>
<g>
<title>__wake_up_common_lock (3 samples, 0.07%)</title><rect x="562.7" y="83.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="565.7" y="94.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.07%)</title><rect x="562.7" y="67.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="565.7" y="78.0"></text>
</g>
<g>
<title>tcp_event_data_recv (8 samples, 0.20%)</title><rect x="563.5" y="131.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="566.5" y="142.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.12%)</title><rect x="565.9" y="131.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="568.9" y="142.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.10%)</title><rect x="565.9" y="115.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="568.9" y="126.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.02%)</title><rect x="566.7" y="99.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="569.7" y="110.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.02%)</title><rect x="567.0" y="115.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="570.0" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.02%)</title><rect x="567.3" y="131.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="570.3" y="142.0"></text>
</g>
<g>
<title>tcp_queue_rcv (6 samples, 0.15%)</title><rect x="567.6" y="131.0" width="1.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="570.6" y="142.0"></text>
</g>
<g>
<title>tcp_rack_advance (1 samples, 0.02%)</title><rect x="569.3" y="131.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="572.3" y="142.0"></text>
</g>
<g>
<title>tcp_rearm_rto (6 samples, 0.15%)</title><rect x="569.6" y="131.0" width="1.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="572.6" y="142.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.05%)</title><rect x="571.4" y="131.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="574.4" y="142.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (3 samples, 0.07%)</title><rect x="571.9" y="163.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="574.9" y="174.0"></text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.07%)</title><rect x="572.8" y="195.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="575.8" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (3 samples, 0.07%)</title><rect x="573.7" y="195.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="576.7" y="206.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (2 samples, 0.05%)</title><rect x="574.5" y="227.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="577.5" y="238.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.20 (1 samples, 0.02%)</title><rect x="575.1" y="259.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="578.1" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.02%)</title><rect x="575.4" y="259.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="578.4" y="270.0"></text>
</g>
<g>
<title>process_backlog (3 samples, 0.07%)</title><rect x="575.7" y="323.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="578.7" y="334.0"></text>
</g>
<g>
<title>net_rx_action (7 samples, 0.17%)</title><rect x="576.6" y="339.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="579.6" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (60 samples, 1.47%)</title><rect x="578.6" y="387.0" width="17.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="581.6" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (60 samples, 1.47%)</title><rect x="578.6" y="371.0" width="17.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="581.6" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (34 samples, 0.83%)</title><rect x="582.3" y="355.0" width="9.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="585.3" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (22 samples, 0.54%)</title><rect x="583.5" y="339.0" width="6.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="586.5" y="350.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.05%)</title><rect x="584.7" y="323.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="587.7" y="334.0"></text>
</g>
<g>
<title>netif_rx (9 samples, 0.22%)</title><rect x="585.2" y="323.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="588.2" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (7 samples, 0.17%)</title><rect x="585.8" y="307.0" width="2.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="588.8" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (6 samples, 0.15%)</title><rect x="586.1" y="291.0" width="1.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="589.1" y="302.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.02%)</title><rect x="587.8" y="323.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="590.8" y="334.0"></text>
</g>
<g>
<title>tcp_wfree (6 samples, 0.15%)</title><rect x="588.1" y="323.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="591.1" y="334.0"></text>
</g>
<g>
<title>sk_free (3 samples, 0.07%)</title><rect x="589.0" y="307.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="592.0" y="318.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.02%)</title><rect x="589.9" y="339.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="592.9" y="350.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (3 samples, 0.07%)</title><rect x="590.2" y="339.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="593.2" y="350.0"></text>
</g>
<g>
<title>tcp_wfree (4 samples, 0.10%)</title><rect x="591.0" y="339.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="594.0" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.07%)</title><rect x="592.2" y="355.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="595.2" y="366.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (1 samples, 0.02%)</title><rect x="593.1" y="355.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="596.1" y="366.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.02%)</title><rect x="593.3" y="355.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="596.3" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (6 samples, 0.15%)</title><rect x="593.6" y="355.0" width="1.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="596.6" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (3 samples, 0.07%)</title><rect x="593.9" y="339.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="596.9" y="350.0"></text>
</g>
<g>
<title>skb_network_protocol (2 samples, 0.05%)</title><rect x="594.8" y="339.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="597.8" y="350.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (2 samples, 0.05%)</title><rect x="595.4" y="355.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="598.4" y="366.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.02%)</title><rect x="595.9" y="403.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="598.9" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.05%)</title><rect x="596.2" y="419.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="599.2" y="430.0"></text>
</g>
<g>
<title>nf_hook_slow (22 samples, 0.54%)</title><rect x="596.8" y="435.0" width="6.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="599.8" y="446.0"></text>
</g>
<g>
<title>selinux_ip_postroute (6 samples, 0.15%)</title><rect x="597.1" y="419.0" width="1.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="600.1" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (15 samples, 0.37%)</title><rect x="598.8" y="419.0" width="4.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="601.8" y="430.0"></text>
</g>
<g>
<title>selinux_ip_postroute (14 samples, 0.34%)</title><rect x="598.8" y="403.0" width="4.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="601.8" y="414.0"></text>
</g>
<g>
<title>selinux_ip_postroute_compat (12 samples, 0.29%)</title><rect x="599.4" y="387.0" width="3.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="602.4" y="398.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.64 (1 samples, 0.02%)</title><rect x="601.2" y="371.0" width="0.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="604.2" y="382.0"></text>
</g>
<g>
<title>selinux_xfrm_postroute_last (5 samples, 0.12%)</title><rect x="601.4" y="371.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="604.4" y="382.0"></text>
</g>
<g>
<title>avc_has_perm (5 samples, 0.12%)</title><rect x="601.4" y="355.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="604.4" y="366.0"></text>
</g>
<g>
<title>selinux_ip_postroute_compat (1 samples, 0.02%)</title><rect x="602.9" y="403.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="605.9" y="414.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (5 samples, 0.12%)</title><rect x="603.2" y="435.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="606.2" y="446.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.05%)</title><rect x="604.6" y="451.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="607.6" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.02%)</title><rect x="605.2" y="451.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="608.2" y="462.0"></text>
</g>
<g>
<title>ip_output (6 samples, 0.15%)</title><rect x="605.5" y="467.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="608.5" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.07%)</title><rect x="607.2" y="467.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="610.2" y="478.0"></text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.05%)</title><rect x="608.1" y="483.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="611.1" y="494.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.02%)</title><rect x="608.7" y="483.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="611.7" y="494.0"></text>
</g>
<g>
<title>skb_clone (11 samples, 0.27%)</title><rect x="609.0" y="499.0" width="3.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="612.0" y="510.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.02%)</title><rect x="609.3" y="483.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="612.3" y="494.0"></text>
</g>
<g>
<title>__skb_clone (9 samples, 0.22%)</title><rect x="609.5" y="483.0" width="2.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="612.5" y="494.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.02%)</title><rect x="612.2" y="499.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="615.2" y="510.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.05%)</title><rect x="612.4" y="499.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="615.4" y="510.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (1 samples, 0.02%)</title><rect x="613.0" y="499.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="616.0" y="510.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (1 samples, 0.02%)</title><rect x="613.3" y="499.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="616.3" y="510.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.02%)</title><rect x="613.6" y="499.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="616.6" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.02%)</title><rect x="613.6" y="483.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="616.6" y="494.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.02%)</title><rect x="613.9" y="515.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="616.9" y="526.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3 samples, 0.07%)</title><rect x="614.2" y="515.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="617.2" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.05%)</title><rect x="615.0" y="515.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="618.0" y="526.0"></text>
</g>
<g>
<title>jiffies_to_usecs (1 samples, 0.02%)</title><rect x="615.6" y="515.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="618.6" y="526.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.07%)</title><rect x="615.9" y="515.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="618.9" y="526.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.02%)</title><rect x="616.5" y="499.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="619.5" y="510.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.02%)</title><rect x="616.8" y="515.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="619.8" y="526.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.05%)</title><rect x="617.1" y="515.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="620.1" y="526.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.02%)</title><rect x="617.7" y="515.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="620.7" y="526.0"></text>
</g>
<g>
<title>skb_push (3 samples, 0.07%)</title><rect x="617.9" y="515.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="620.9" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (10 samples, 0.25%)</title><rect x="618.8" y="515.0" width="2.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="621.8" y="526.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.02%)</title><rect x="619.7" y="499.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="622.7" y="510.0"></text>
</g>
<g>
<title>tcp_rearm_rto (6 samples, 0.15%)</title><rect x="620.0" y="499.0" width="1.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="623.0" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.10%)</title><rect x="620.5" y="483.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="623.5" y="494.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.10%)</title><rect x="620.5" y="467.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="623.5" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.05%)</title><rect x="621.1" y="451.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="624.1" y="462.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.05%)</title><rect x="621.7" y="515.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="624.7" y="526.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (1 samples, 0.02%)</title><rect x="622.3" y="515.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="625.3" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.02%)</title><rect x="622.6" y="515.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="625.6" y="526.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (9 samples, 0.22%)</title><rect x="622.9" y="515.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="625.9" y="526.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.02%)</title><rect x="625.2" y="499.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="628.2" y="510.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (1 samples, 0.02%)</title><rect x="625.5" y="515.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="628.5" y="526.0"></text>
</g>
<g>
<title>tcp_v4_send_check (3 samples, 0.07%)</title><rect x="625.8" y="515.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="628.8" y="526.0"></text>
</g>
<g>
<title>tcp_write_xmit (2 samples, 0.05%)</title><rect x="626.6" y="547.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="629.6" y="558.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.05%)</title><rect x="627.2" y="563.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="630.2" y="574.0"></text>
</g>
<g>
<title>tcp_send_mss (10 samples, 0.25%)</title><rect x="627.8" y="563.0" width="2.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="630.8" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (4 samples, 0.10%)</title><rect x="628.1" y="547.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="631.1" y="558.0"></text>
</g>
<g>
<title>tcp_current_mss (5 samples, 0.12%)</title><rect x="629.2" y="547.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="632.2" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.05%)</title><rect x="629.8" y="531.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="632.8" y="542.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.02%)</title><rect x="630.4" y="531.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="633.4" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.05%)</title><rect x="630.7" y="563.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="633.7" y="574.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (3 samples, 0.07%)</title><rect x="631.3" y="563.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="634.3" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.10%)</title><rect x="632.1" y="579.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="635.1" y="590.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.02%)</title><rect x="633.3" y="579.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="636.3" y="590.0"></text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.02%)</title><rect x="633.6" y="611.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="636.6" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (21 samples, 0.51%)</title><rect x="633.9" y="611.0" width="6.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="636.9" y="622.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (10 samples, 0.25%)</title><rect x="633.9" y="595.0" width="2.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="636.9" y="606.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (10 samples, 0.25%)</title><rect x="633.9" y="579.0" width="2.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="636.9" y="590.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.02%)</title><rect x="635.6" y="563.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="638.6" y="574.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.07%)</title><rect x="635.9" y="563.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="638.9" y="574.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.05%)</title><rect x="636.2" y="547.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="639.2" y="558.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.02%)</title><rect x="636.5" y="531.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="639.5" y="542.0"></text>
</g>
<g>
<title>selinux_socket_sendmsg (4 samples, 0.10%)</title><rect x="636.7" y="595.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="639.7" y="606.0"></text>
</g>
<g>
<title>sock_has_perm (4 samples, 0.10%)</title><rect x="636.7" y="579.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="639.7" y="590.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg (6 samples, 0.15%)</title><rect x="637.9" y="595.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="640.9" y="606.0"></text>
</g>
<g>
<title>tomoyo_sock_family.part.1 (2 samples, 0.05%)</title><rect x="638.2" y="579.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="641.2" y="590.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg_permission (3 samples, 0.07%)</title><rect x="638.8" y="579.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="641.8" y="590.0"></text>
</g>
<g>
<title>tomoyo_sock_family.part.1 (1 samples, 0.02%)</title><rect x="639.4" y="563.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="642.4" y="574.0"></text>
</g>
<g>
<title>tomoyo_socket_sendmsg_permission (1 samples, 0.02%)</title><rect x="639.6" y="595.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="642.6" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (24 samples, 0.59%)</title><rect x="639.9" y="627.0" width="7.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="642.9" y="638.0"></text>
</g>
<g>
<title>__fdget (22 samples, 0.54%)</title><rect x="639.9" y="611.0" width="6.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="642.9" y="622.0"></text>
</g>
<g>
<title>__fget_light (22 samples, 0.54%)</title><rect x="639.9" y="595.0" width="6.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="642.9" y="606.0"></text>
</g>
<g>
<title>__fget (19 samples, 0.47%)</title><rect x="640.8" y="579.0" width="5.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="643.8" y="590.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.05%)</title><rect x="646.3" y="611.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="649.3" y="622.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.02%)</title><rect x="646.9" y="643.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="649.9" y="654.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.02%)</title><rect x="647.2" y="707.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="650.2" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.27%)</title><rect x="647.5" y="787.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="650.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="650.1" y="771.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="653.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title><rect x="650.1" y="755.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="653.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.07%)</title><rect x="650.6" y="803.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="653.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="650.6" y="787.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="653.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title><rect x="650.6" y="771.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="653.6" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="650.6" y="755.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="653.6" y="766.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title><rect x="650.6" y="739.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="653.6" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="650.9" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="653.9" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.02%)</title><rect x="650.9" y="723.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="653.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="651.2" y="787.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="654.2" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="651.2" y="771.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="654.2" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="651.2" y="755.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="654.2" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="651.2" y="739.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="654.2" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="651.2" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="654.2" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.02%)</title><rect x="651.2" y="707.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="654.2" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="651.2" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="654.2" y="702.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="651.2" y="675.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="654.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.upsert (344 samples, 8.44%)</title><rect x="651.5" y="803.0" width="99.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="654.5" y="814.0">ru/mail/poli..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.07%)</title><rect x="651.5" y="787.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="654.5" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.07%)</title><rect x="651.5" y="771.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="654.5" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$115/1616646336.get$Lambda (3 samples, 0.07%)</title><rect x="651.5" y="755.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="654.5" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$115/1616646336.&lt;init&gt; (3 samples, 0.07%)</title><rect x="651.5" y="739.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="654.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.execute (341 samples, 8.36%)</title><rect x="652.4" y="787.0" width="98.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="655.4" y="798.0">ru/mail/poli..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (19 samples, 0.47%)</title><rect x="653.0" y="771.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="656.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (14 samples, 0.34%)</title><rect x="654.4" y="755.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (14 samples, 0.34%)</title><rect x="654.4" y="739.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.12%)</title><rect x="655.3" y="723.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="658.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.10%)</title><rect x="655.3" y="707.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="658.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.10%)</title><rect x="655.3" y="691.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="658.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.05%)</title><rect x="655.3" y="675.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="658.3" y="686.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.05%)</title><rect x="655.8" y="675.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="658.8" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.02%)</title><rect x="656.4" y="707.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (6 samples, 0.15%)</title><rect x="656.7" y="723.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.15%)</title><rect x="656.7" y="707.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.15%)</title><rect x="656.7" y="691.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="659.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (3 samples, 0.07%)</title><rect x="658.5" y="771.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="661.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (3 samples, 0.07%)</title><rect x="658.5" y="755.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="661.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (2 samples, 0.05%)</title><rect x="658.5" y="739.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="661.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.02%)</title><rect x="659.0" y="739.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="662.0" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.02%)</title><rect x="659.3" y="771.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="662.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$115/1616646336.run (316 samples, 7.75%)</title><rect x="659.6" y="771.0" width="91.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="662.6" y="782.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$upsert$5 (312 samples, 7.65%)</title><rect x="660.8" y="755.0" width="90.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="663.8" y="766.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.upsert (312 samples, 7.65%)</title><rect x="660.8" y="739.0" width="90.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.8" y="750.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (10 samples, 0.25%)</title><rect x="660.8" y="723.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.8" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.07%)</title><rect x="662.8" y="707.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="665.8" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.07%)</title><rect x="662.8" y="691.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="665.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.07%)</title><rect x="662.8" y="675.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="665.8" y="686.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="662.8" y="659.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="665.8" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="663.1" y="659.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="666.1" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="663.1" y="643.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="666.1" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::tlab_alloc_reserve() const (1 samples, 0.02%)</title><rect x="663.1" y="627.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="666.1" y="638.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.02%)</title><rect x="663.4" y="627.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="666.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (296 samples, 7.26%)</title><rect x="663.7" y="723.0" width="85.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="666.7" y="734.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (279 samples, 6.84%)</title><rect x="666.8" y="707.0" width="80.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="669.8" y="718.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (4 samples, 0.10%)</title><rect x="699.5" y="691.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="702.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (4 samples, 0.10%)</title><rect x="699.5" y="675.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (11 samples, 0.27%)</title><rect x="700.7" y="691.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="703.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.02%)</title><rect x="701.6" y="675.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="704.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.02%)</title><rect x="701.6" y="659.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="704.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (7 samples, 0.17%)</title><rect x="701.9" y="675.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.9" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.15%)</title><rect x="702.1" y="659.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="705.1" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.15%)</title><rect x="702.1" y="643.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.1" y="654.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.15%)</title><rect x="702.1" y="627.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="705.1" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="702.4" y="611.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="705.4" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.02%)</title><rect x="702.4" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="705.4" y="606.0"></text>
</g>
<g>
<title>vectorizedMismatch (4 samples, 0.10%)</title><rect x="702.7" y="611.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="705.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (151 samples, 3.70%)</title><rect x="703.9" y="691.0" width="43.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="706.9" y="702.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (147 samples, 3.60%)</title><rect x="705.0" y="675.0" width="42.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="708.0" y="686.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (147 samples, 3.60%)</title><rect x="705.0" y="659.0" width="42.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="708.0" y="670.0">java..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (147 samples, 3.60%)</title><rect x="705.0" y="643.0" width="42.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.0" y="654.0">java..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (15 samples, 0.37%)</title><rect x="733.4" y="627.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="736.4" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (15 samples, 0.37%)</title><rect x="733.4" y="611.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="736.4" y="622.0"></text>
</g>
<g>
<title>vectorizedMismatch (34 samples, 0.83%)</title><rect x="737.7" y="627.0" width="9.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="740.7" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.15%)</title><rect x="747.6" y="707.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="750.6" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="748.4" y="691.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="751.4" y="702.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="748.7" y="691.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="751.7" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="749.0" y="675.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="752.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (6 samples, 0.15%)</title><rect x="749.3" y="723.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="752.3" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.15%)</title><rect x="749.3" y="707.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="752.3" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="749.3" y="691.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="752.3" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="749.3" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="752.3" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="749.3" y="659.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="752.3" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="749.3" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="752.3" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (5 samples, 0.12%)</title><rect x="749.6" y="691.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.6" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.12%)</title><rect x="749.6" y="675.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="752.6" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.12%)</title><rect x="749.6" y="659.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.6" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.12%)</title><rect x="749.6" y="643.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="752.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.12%)</title><rect x="749.6" y="627.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.6" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.12%)</title><rect x="749.6" y="611.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="752.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (4 samples, 0.10%)</title><rect x="749.9" y="595.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="752.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.wrapArray (4 samples, 0.10%)</title><rect x="751.0" y="803.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="754.0" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.10%)</title><rect x="751.0" y="787.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="754.0" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="751.9" y="771.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="754.9" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="751.9" y="755.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="754.9" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="751.9" y="739.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="754.9" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="751.9" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="754.9" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="751.9" y="707.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="754.9" y="718.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="751.9" y="691.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="754.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceTopology.nodeFor (69 samples, 1.69%)</title><rect x="752.2" y="835.0" width="20.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="755.2" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (1 samples, 0.02%)</title><rect x="755.4" y="819.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.4" y="830.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (1 samples, 0.02%)</title><rect x="755.7" y="819.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.7" y="830.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.02%)</title><rect x="755.7" y="803.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="758.7" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="756.0" y="819.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.0" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceTopology.nodeFor (55 samples, 1.35%)</title><rect x="756.3" y="819.0" width="15.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="759.3" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (6 samples, 0.15%)</title><rect x="756.3" y="803.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="759.3" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.firstKey (6 samples, 0.15%)</title><rect x="758.0" y="803.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="761.0" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.subLowest (6 samples, 0.15%)</title><rect x="758.0" y="787.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="761.0" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (6 samples, 0.15%)</title><rect x="758.0" y="771.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="761.0" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (5 samples, 0.12%)</title><rect x="758.3" y="755.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="761.3" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (5 samples, 0.12%)</title><rect x="758.3" y="739.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="761.3" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.isEmpty (13 samples, 0.32%)</title><rect x="759.7" y="803.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="762.7" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.isEmpty (13 samples, 0.32%)</title><rect x="759.7" y="787.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.7" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (13 samples, 0.32%)</title><rect x="759.7" y="771.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="762.7" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (3 samples, 0.07%)</title><rect x="762.3" y="755.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="765.3" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (3 samples, 0.07%)</title><rect x="762.3" y="739.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="765.3" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="763.2" y="755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="766.2" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (17 samples, 0.42%)</title><rect x="763.5" y="803.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="766.5" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (13 samples, 0.32%)</title><rect x="764.6" y="787.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="767.6" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap.firstKey (4 samples, 0.10%)</title><rect x="768.4" y="803.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="771.4" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (4 samples, 0.10%)</title><rect x="768.4" y="787.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="771.4" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="769.3" y="771.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="772.3" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (7 samples, 0.17%)</title><rect x="769.6" y="803.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="772.6" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (4 samples, 0.10%)</title><rect x="770.4" y="787.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="773.4" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.05%)</title><rect x="771.6" y="803.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="774.6" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.05%)</title><rect x="771.6" y="787.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="774.6" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="771.6" y="771.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="774.6" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="771.6" y="755.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="774.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="771.6" y="739.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="774.6" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="771.6" y="723.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="774.6" y="734.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (1 samples, 0.02%)</title><rect x="771.9" y="707.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="774.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.wrapString (99 samples, 2.43%)</title><rect x="772.2" y="851.0" width="28.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="775.2" y="862.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (37 samples, 0.91%)</title><rect x="772.2" y="835.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="775.2" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (37 samples, 0.91%)</title><rect x="772.2" y="819.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="775.2" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="772.2" y="803.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="775.2" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="772.2" y="787.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="775.2" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="772.2" y="771.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="775.2" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="772.2" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="775.2" y="766.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::thread() (1 samples, 0.02%)</title><rect x="772.2" y="739.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="775.2" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (36 samples, 0.88%)</title><rect x="772.5" y="803.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="775.5" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (36 samples, 0.88%)</title><rect x="772.5" y="787.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="775.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.20%)</title><rect x="776.8" y="771.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.8" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.29%)</title><rect x="779.1" y="771.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.10%)</title><rect x="780.0" y="755.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.0" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="781.1" y="755.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="784.1" y="766.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.07%)</title><rect x="781.7" y="755.0" width="0.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="784.7" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="782.6" y="771.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="785.6" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="782.6" y="755.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="785.6" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="782.6" y="739.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="785.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.toBytes (62 samples, 1.52%)</title><rect x="782.9" y="835.0" width="17.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="785.9" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (62 samples, 1.52%)</title><rect x="782.9" y="819.0" width="17.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="785.9" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="782.9" y="803.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="785.9" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title><rect x="782.9" y="787.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="785.9" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="782.9" y="771.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="785.9" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="782.9" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="785.9" y="766.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.02%)</title><rect x="782.9" y="739.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="785.9" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="782.9" y="723.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="785.9" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::thread() (1 samples, 0.02%)</title><rect x="783.2" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="786.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (34 samples, 0.83%)</title><rect x="783.5" y="803.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="786.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.charAt (31 samples, 0.76%)</title><rect x="783.5" y="787.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="786.5" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="789.2" y="771.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="792.2" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="789.2" y="755.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="792.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="789.5" y="771.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="792.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (7 samples, 0.17%)</title><rect x="789.8" y="771.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="792.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.05%)</title><rect x="791.8" y="771.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="794.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.07%)</title><rect x="792.4" y="787.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.4" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (26 samples, 0.64%)</title><rect x="793.3" y="803.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (20 samples, 0.49%)</title><rect x="793.3" y="787.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="796.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (5 samples, 0.12%)</title><rect x="797.6" y="771.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="800.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.15%)</title><rect x="799.1" y="787.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="802.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.07%)</title><rect x="799.9" y="771.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="802.9" y="782.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,210 samples, 29.67%)</title><rect x="800.8" y="995.0" width="350.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="803.8" y="1006.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (3 samples, 0.07%)</title><rect x="802.8" y="979.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="805.8" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (7 samples, 0.17%)</title><rect x="803.7" y="979.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="806.7" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (7 samples, 0.17%)</title><rect x="803.7" y="963.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.7" y="974.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.02%)</title><rect x="805.4" y="947.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="808.4" y="958.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (413 samples, 10.13%)</title><rect x="805.7" y="979.0" width="119.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="808.7" y="990.0">one/nio/net/Nat..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (10 samples, 0.25%)</title><rect x="806.3" y="963.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="809.3" y="974.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (6 samples, 0.15%)</title><rect x="807.2" y="947.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="810.2" y="958.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (1 samples, 0.02%)</title><rect x="808.9" y="947.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="811.9" y="958.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (401 samples, 9.83%)</title><rect x="809.2" y="963.0" width="116.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="812.2" y="974.0">one/nio/net/Na..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.02%)</title><rect x="811.2" y="947.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="814.2" y="958.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.02%)</title><rect x="811.2" y="931.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="814.2" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.02%)</title><rect x="811.2" y="915.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="814.2" y="926.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.02%)</title><rect x="811.2" y="899.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="814.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (385 samples, 9.44%)</title><rect x="811.5" y="947.0" width="111.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="814.5" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (11 samples, 0.27%)</title><rect x="811.5" y="931.0" width="3.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="814.5" y="942.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.10%)</title><rect x="811.5" y="915.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="814.5" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="812.1" y="899.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="815.1" y="910.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="812.4" y="899.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="815.4" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="812.4" y="883.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="815.4" y="894.0"></text>
</g>
<g>
<title>epoll_wait (7 samples, 0.17%)</title><rect x="812.7" y="915.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="815.7" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.12%)</title><rect x="813.3" y="899.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="816.3" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.12%)</title><rect x="813.3" y="883.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="816.3" y="894.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (5 samples, 0.12%)</title><rect x="813.3" y="867.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="816.3" y="878.0"></text>
</g>
<g>
<title>do_epoll_wait (5 samples, 0.12%)</title><rect x="813.3" y="851.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="816.3" y="862.0"></text>
</g>
<g>
<title>ep_poll (5 samples, 0.12%)</title><rect x="813.3" y="835.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="816.3" y="846.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (5 samples, 0.12%)</title><rect x="813.3" y="819.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="816.3" y="830.0"></text>
</g>
<g>
<title>ep_send_events_proc (4 samples, 0.10%)</title><rect x="813.5" y="803.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="816.5" y="814.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (4 samples, 0.10%)</title><rect x="813.5" y="787.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="816.5" y="798.0"></text>
</g>
<g>
<title>sock_poll (3 samples, 0.07%)</title><rect x="813.8" y="771.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="816.8" y="782.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.02%)</title><rect x="814.1" y="755.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="817.1" y="766.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.02%)</title><rect x="814.4" y="755.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="817.4" y="766.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (7 samples, 0.17%)</title><rect x="814.7" y="931.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="817.7" y="942.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.05%)</title><rect x="816.7" y="931.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="819.7" y="942.0"></text>
</g>
<g>
<title>epoll_wait (365 samples, 8.95%)</title><rect x="817.3" y="931.0" width="105.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="820.3" y="942.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (272 samples, 6.67%)</title><rect x="844.2" y="915.0" width="78.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="847.2" y="926.0">entry_SYS..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (1 samples, 0.02%)</title><rect x="844.2" y="899.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="847.2" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (271 samples, 6.65%)</title><rect x="844.5" y="899.0" width="78.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="847.5" y="910.0">do_syscal..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (249 samples, 6.11%)</title><rect x="850.0" y="883.0" width="72.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="853.0" y="894.0">__x64_sy..</text>
</g>
<g>
<title>do_epoll_wait (248 samples, 6.08%)</title><rect x="850.3" y="867.0" width="71.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="853.3" y="878.0">do_epoll..</text>
</g>
<g>
<title>__fdget (8 samples, 0.20%)</title><rect x="850.6" y="851.0" width="2.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="853.6" y="862.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.20%)</title><rect x="850.6" y="835.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="853.6" y="846.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.17%)</title><rect x="850.9" y="819.0" width="2.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="853.9" y="830.0"></text>
</g>
<g>
<title>_raw_spin_lock_irq (1 samples, 0.02%)</title><rect x="852.9" y="851.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="855.9" y="862.0"></text>
</g>
<g>
<title>ep_poll (228 samples, 5.59%)</title><rect x="853.2" y="851.0" width="66.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="856.2" y="862.0">ep_poll</text>
</g>
<g>
<title>__x86_indirect_thunk_r14 (1 samples, 0.02%)</title><rect x="859.3" y="835.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="862.3" y="846.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (190 samples, 4.66%)</title><rect x="859.6" y="835.0" width="54.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="862.6" y="846.0">ep_sc..</text>
</g>
<g>
<title>_cond_resched (1 samples, 0.02%)</title><rect x="871.7" y="819.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="874.7" y="830.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.02%)</title><rect x="872.0" y="819.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="875.0" y="830.0"></text>
</g>
<g>
<title>ep_send_events_proc (139 samples, 3.41%)</title><rect x="872.3" y="819.0" width="40.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="875.3" y="830.0">ep_..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.02%)</title><rect x="881.3" y="803.0" width="0.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="884.3" y="814.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (97 samples, 2.38%)</title><rect x="881.5" y="803.0" width="28.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="884.5" y="814.0">ep..</text>
</g>
<g>
<title>sock_poll (79 samples, 1.94%)</title><rect x="885.9" y="787.0" width="22.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="888.9" y="798.0">s..</text>
</g>
<g>
<title>tcp_poll (28 samples, 0.69%)</title><rect x="897.5" y="771.0" width="8.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="900.5" y="782.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.02%)</title><rect x="905.3" y="755.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="908.3" y="766.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (11 samples, 0.27%)</title><rect x="905.6" y="771.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="908.6" y="782.0"></text>
</g>
<g>
<title>tcp_poll (3 samples, 0.07%)</title><rect x="908.7" y="787.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="911.7" y="798.0"></text>
</g>
<g>
<title>sock_poll (10 samples, 0.25%)</title><rect x="909.6" y="803.0" width="2.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="912.6" y="814.0"></text>
</g>
<g>
<title>mutex_lock (4 samples, 0.10%)</title><rect x="912.5" y="819.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="915.5" y="830.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.07%)</title><rect x="913.7" y="819.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="916.7" y="830.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (14 samples, 0.34%)</title><rect x="914.5" y="835.0" width="4.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="917.5" y="846.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (14 samples, 0.34%)</title><rect x="914.5" y="819.0" width="4.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="917.5" y="830.0"></text>
</g>
<g>
<title>schedule (11 samples, 0.27%)</title><rect x="915.4" y="803.0" width="3.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="918.4" y="814.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.12%)</title><rect x="917.1" y="787.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="920.1" y="798.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (2 samples, 0.05%)</title><rect x="918.6" y="835.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="921.6" y="846.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (1 samples, 0.02%)</title><rect x="919.2" y="851.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="922.2" y="862.0"></text>
</g>
<g>
<title>fput (8 samples, 0.20%)</title><rect x="919.5" y="851.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="922.5" y="862.0"></text>
</g>
<g>
<title>fput_many (8 samples, 0.20%)</title><rect x="919.5" y="835.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="922.5" y="846.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.02%)</title><rect x="921.8" y="851.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="924.8" y="862.0"></text>
</g>
<g>
<title>do_epoll_wait (3 samples, 0.07%)</title><rect x="922.1" y="883.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="925.1" y="894.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.07%)</title><rect x="922.9" y="947.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="925.9" y="958.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.02%)</title><rect x="923.8" y="947.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="926.8" y="958.0"></text>
</g>
<g>
<title>epoll_wait (2 samples, 0.05%)</title><rect x="924.1" y="947.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="927.1" y="958.0"></text>
</g>
<g>
<title>epoll_wait@plt (2 samples, 0.05%)</title><rect x="924.7" y="947.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="927.7" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (780 samples, 19.13%)</title><rect x="925.2" y="979.0" width="225.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="928.2" y="990.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.07%)</title><rect x="927.3" y="963.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="930.3" y="974.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (761 samples, 18.66%)</title><rect x="928.1" y="963.0" width="220.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="931.1" y="974.0">one/nio/http/HttpSession.proc..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (439 samples, 10.77%)</title><rect x="929.0" y="947.0" width="127.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="932.0" y="958.0">one/nio/http/Htt..</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (3 samples, 0.07%)</title><rect x="935.1" y="931.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="938.1" y="942.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.05%)</title><rect x="935.9" y="931.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="938.9" y="942.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (10 samples, 0.25%)</title><rect x="936.5" y="931.0" width="2.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="939.5" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="939.4" y="931.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="942.4" y="942.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (214 samples, 5.25%)</title><rect x="940.3" y="931.0" width="61.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="943.3" y="942.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (214 samples, 5.25%)</title><rect x="940.3" y="915.0" width="61.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="943.3" y="926.0">one/ni..</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (192 samples, 4.71%)</title><rect x="943.2" y="899.0" width="55.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="946.2" y="910.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (25 samples, 0.61%)</title><rect x="943.2" y="883.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="946.2" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (25 samples, 0.61%)</title><rect x="943.2" y="867.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="946.2" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.10%)</title><rect x="945.2" y="851.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="948.2" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.10%)</title><rect x="945.2" y="835.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="948.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.10%)</title><rect x="946.4" y="851.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="949.4" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.10%)</title><rect x="946.4" y="835.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="949.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="946.4" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="949.4" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="946.4" y="803.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="949.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="946.4" y="787.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="949.4" y="798.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="946.4" y="771.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="949.4" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="946.7" y="771.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="949.7" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.05%)</title><rect x="946.9" y="819.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="949.9" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="946.9" y="803.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="949.9" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title><rect x="946.9" y="787.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="949.9" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="946.9" y="771.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="949.9" y="782.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title><rect x="946.9" y="755.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="949.9" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="947.2" y="755.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="950.2" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="947.5" y="851.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="950.5" y="862.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (9 samples, 0.22%)</title><rect x="947.8" y="851.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="950.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.20%)</title><rect x="948.1" y="835.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="951.1" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.20%)</title><rect x="948.1" y="819.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="951.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.20%)</title><rect x="948.1" y="803.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="951.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.upsert (167 samples, 4.10%)</title><rect x="950.4" y="883.0" width="48.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="953.4" y="894.0">ru/m..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.05%)</title><rect x="950.4" y="867.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="953.4" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.05%)</title><rect x="950.4" y="851.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="953.4" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1285672771.get$Lambda (2 samples, 0.05%)</title><rect x="950.4" y="835.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="953.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="950.4" y="819.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="953.4" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="950.4" y="803.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="953.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="950.4" y="787.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="953.4" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="950.4" y="771.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="953.4" y="782.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="950.4" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="953.4" y="766.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.02%)</title><rect x="950.4" y="739.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="953.4" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="950.7" y="755.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="953.7" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.processRequest (165 samples, 4.05%)</title><rect x="951.0" y="867.0" width="47.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="954.0" y="878.0">ru/m..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="951.0" y="851.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="954.0" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="951.0" y="835.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="954.0" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$102/1149186326.get$Lambda (1 samples, 0.02%)</title><rect x="951.0" y="819.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="954.0" y="830.0"></text>
</g>
<g>
<title>ClassLoaderData::holder_phantom() const (1 samples, 0.02%)</title><rect x="951.0" y="803.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (164 samples, 4.02%)</title><rect x="951.3" y="851.0" width="47.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="954.3" y="862.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (164 samples, 4.02%)</title><rect x="951.3" y="835.0" width="47.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="954.3" y="846.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (5 samples, 0.12%)</title><rect x="951.3" y="819.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="954.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.12%)</title><rect x="951.3" y="803.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="954.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.12%)</title><rect x="951.3" y="787.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="954.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.12%)</title><rect x="951.3" y="771.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="954.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (1 samples, 0.02%)</title><rect x="951.9" y="755.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="954.9" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="951.9" y="739.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="954.9" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="951.9" y="723.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="954.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.05%)</title><rect x="952.1" y="755.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="955.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.05%)</title><rect x="952.1" y="739.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="955.1" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.05%)</title><rect x="952.1" y="723.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="955.1" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.05%)</title><rect x="952.1" y="707.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="955.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (32 samples, 0.78%)</title><rect x="952.7" y="819.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="955.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (32 samples, 0.78%)</title><rect x="952.7" y="803.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="955.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (30 samples, 0.74%)</title><rect x="952.7" y="787.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="955.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (26 samples, 0.64%)</title><rect x="953.0" y="771.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="956.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="953.0" y="755.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="956.0" y="766.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.02%)</title><rect x="953.0" y="739.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="956.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (25 samples, 0.61%)</title><rect x="953.3" y="755.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.3" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (25 samples, 0.61%)</title><rect x="953.3" y="739.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.3" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (9 samples, 0.22%)</title><rect x="953.6" y="723.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="956.6" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="953.6" y="707.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.6" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="953.9" y="691.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="956.9" y="702.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="954.2" y="707.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="957.2" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.15%)</title><rect x="954.5" y="707.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="957.5" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="955.9" y="691.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="958.9" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="955.9" y="675.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="958.9" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="955.9" y="659.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="958.9" y="670.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="955.9" y="643.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="958.9" y="654.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="955.9" y="627.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="958.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.37%)</title><rect x="956.2" y="723.0" width="4.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="959.2" y="734.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (15 samples, 0.37%)</title><rect x="956.2" y="707.0" width="4.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="959.2" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.15%)</title><rect x="958.8" y="691.0" width="1.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="961.8" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.15%)</title><rect x="958.8" y="675.0" width="1.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="961.8" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.10%)</title><rect x="959.4" y="659.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="962.4" y="670.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.10%)</title><rect x="959.4" y="643.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="962.4" y="654.0"></text>
</g>
<g>
<title>futex_wait (4 samples, 0.10%)</title><rect x="959.4" y="627.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="962.4" y="638.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.05%)</title><rect x="959.4" y="611.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="962.4" y="622.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.02%)</title><rect x="959.7" y="595.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="962.7" y="606.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.05%)</title><rect x="960.0" y="611.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="963.0" y="622.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.02%)</title><rect x="960.3" y="595.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="963.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.07%)</title><rect x="960.5" y="771.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="963.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.07%)</title><rect x="960.5" y="755.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="963.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.07%)</title><rect x="960.5" y="739.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="963.5" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.07%)</title><rect x="960.5" y="723.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="963.5" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.07%)</title><rect x="960.5" y="707.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="963.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.05%)</title><rect x="961.4" y="787.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="964.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (127 samples, 3.11%)</title><rect x="962.0" y="819.0" width="36.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="965.0" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (127 samples, 3.11%)</title><rect x="962.0" y="803.0" width="36.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="965.0" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (127 samples, 3.11%)</title><rect x="962.0" y="787.0" width="36.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="965.0" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (93 samples, 2.28%)</title><rect x="971.0" y="771.0" width="26.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="974.0" y="782.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (93 samples, 2.28%)</title><rect x="971.0" y="755.0" width="26.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="974.0" y="766.0">j..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="971.0" y="739.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.0" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="971.2" y="739.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.2" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark (12 samples, 0.29%)</title><rect x="971.5" y="739.0" width="3.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="974.5" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="972.1" y="723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="975.1" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="972.4" y="723.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.4" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="972.7" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="975.7" y="734.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.05%)</title><rect x="973.0" y="723.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.0" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.05%)</title><rect x="973.6" y="723.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="976.6" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.05%)</title><rect x="974.1" y="723.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="977.1" y="734.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.02%)</title><rect x="974.7" y="723.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="977.7" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (77 samples, 1.89%)</title><rect x="975.0" y="739.0" width="22.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="978.0" y="750.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (64 samples, 1.57%)</title><rect x="978.8" y="723.0" width="18.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="981.8" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (64 samples, 1.57%)</title><rect x="978.8" y="707.0" width="18.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="981.8" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (60 samples, 1.47%)</title><rect x="979.9" y="691.0" width="17.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="982.9" y="702.0"></text>
</g>
<g>
<title>do_futex (59 samples, 1.45%)</title><rect x="979.9" y="675.0" width="17.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="982.9" y="686.0"></text>
</g>
<g>
<title>futex_wake (59 samples, 1.45%)</title><rect x="979.9" y="659.0" width="17.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="982.9" y="670.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="980.5" y="643.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="983.5" y="654.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.02%)</title><rect x="980.8" y="643.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="983.8" y="654.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.14 (1 samples, 0.02%)</title><rect x="980.8" y="627.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="983.8" y="638.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.02%)</title><rect x="981.1" y="643.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="984.1" y="654.0"></text>
</g>
<g>
<title>__unqueue_futex (1 samples, 0.02%)</title><rect x="981.1" y="627.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="984.1" y="638.0"></text>
</g>
<g>
<title>wake_up_q (54 samples, 1.32%)</title><rect x="981.4" y="643.0" width="15.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="984.4" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (54 samples, 1.32%)</title><rect x="981.4" y="627.0" width="15.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="984.4" y="638.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (54 samples, 1.32%)</title><rect x="981.4" y="611.0" width="15.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="984.4" y="622.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="997.0" y="675.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1000.0" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="997.3" y="739.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1000.3" y="750.0"></text>
</g>
<g>
<title>pthread_cond_signal@plt (1 samples, 0.02%)</title><rect x="997.6" y="739.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1000.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.07%)</title><rect x="997.9" y="771.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1000.9" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="998.7" y="899.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1001.7" y="910.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (10 samples, 0.25%)</title><rect x="999.0" y="899.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1002.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.25%)</title><rect x="999.0" y="883.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1002.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.25%)</title><rect x="999.0" y="867.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1002.0" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (10 samples, 0.25%)</title><rect x="999.0" y="851.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1002.0" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (10 samples, 0.25%)</title><rect x="999.0" y="835.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1002.0" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.02%)</title><rect x="1001.9" y="899.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1004.9" y="910.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="1001.9" y="883.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1004.9" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="1001.9" y="867.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1004.9" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="1001.9" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1004.9" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="1001.9" y="835.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1004.9" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="1001.9" y="819.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1004.9" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="1001.9" y="803.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1004.9" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="1001.9" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1004.9" y="798.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.02%)</title><rect x="1001.9" y="771.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1004.9" y="782.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.02%)</title><rect x="1001.9" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.9" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (44 samples, 1.08%)</title><rect x="1002.2" y="931.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1005.2" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (8 samples, 0.20%)</title><rect x="1002.8" y="915.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1005.8" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.20%)</title><rect x="1002.8" y="899.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1005.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.20%)</title><rect x="1002.8" y="883.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1005.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.20%)</title><rect x="1002.8" y="867.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1005.8" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.07%)</title><rect x="1004.2" y="851.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1007.2" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (26 samples, 0.64%)</title><rect x="1005.1" y="915.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1008.1" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (21 samples, 0.51%)</title><rect x="1006.5" y="899.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1009.5" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="1011.8" y="883.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.8" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title><rect x="1011.8" y="867.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1014.8" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="1011.8" y="851.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.8" y="862.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="1011.8" y="835.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.8" y="846.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::end_reserve() (1 samples, 0.02%)</title><rect x="1012.0" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1015.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="1012.3" y="883.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1015.3" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="1012.3" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1015.3" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="1012.3" y="851.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1015.3" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="1012.3" y="835.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1015.3" y="846.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title><rect x="1012.3" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1015.3" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (8 samples, 0.20%)</title><rect x="1012.6" y="915.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1015.6" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.22%)</title><rect x="1014.9" y="931.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1017.9" y="942.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.12%)</title><rect x="1016.1" y="915.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1019.1" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.12%)</title><rect x="1016.1" y="899.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1019.1" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (133 samples, 3.26%)</title><rect x="1017.5" y="931.0" width="38.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1020.5" y="942.0">one..</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1047.6" y="915.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1050.6" y="926.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1047.6" y="899.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1050.6" y="910.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.02%)</title><rect x="1047.6" y="883.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1050.6" y="894.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="1047.6" y="867.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1050.6" y="878.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.02%)</title><rect x="1047.6" y="851.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1050.6" y="862.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.02%)</title><rect x="1047.6" y="835.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1050.6" y="846.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="1047.6" y="819.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1050.6" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (28 samples, 0.69%)</title><rect x="1047.9" y="915.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1050.9" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="1055.2" y="899.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1058.2" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="1055.2" y="883.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.2" y="894.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1055.4" y="899.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1058.4" y="910.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1055.4" y="883.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1058.4" y="894.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.05%)</title><rect x="1055.4" y="867.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1058.4" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="1055.4" y="851.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1058.4" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title><rect x="1055.4" y="835.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.4" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="1055.4" y="819.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1058.4" y="830.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="1055.4" y="803.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.4" y="814.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.02%)</title><rect x="1055.4" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.4" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="1055.7" y="803.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.7" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.02%)</title><rect x="1055.7" y="787.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1058.7" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::tlab_alloc_reserve() const (1 samples, 0.02%)</title><rect x="1055.7" y="771.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1058.7" y="782.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.07%)</title><rect x="1056.0" y="947.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1059.0" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.07%)</title><rect x="1056.0" y="931.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1059.0" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (316 samples, 7.75%)</title><rect x="1056.9" y="947.0" width="91.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1059.9" y="958.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (316 samples, 7.75%)</title><rect x="1056.9" y="931.0" width="91.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1059.9" y="942.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (39 samples, 0.96%)</title><rect x="1058.3" y="915.0" width="11.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1061.3" y="926.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.07%)</title><rect x="1058.9" y="899.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.9" y="910.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (5 samples, 0.12%)</title><rect x="1059.8" y="899.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.8" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (1 samples, 0.02%)</title><rect x="1061.2" y="899.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1064.2" y="910.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (6 samples, 0.15%)</title><rect x="1061.5" y="899.0" width="1.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1064.5" y="910.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (17 samples, 0.42%)</title><rect x="1063.3" y="899.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1066.3" y="910.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.10%)</title><rect x="1064.7" y="883.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1067.7" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (8 samples, 0.20%)</title><rect x="1065.9" y="883.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.9" y="894.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (5 samples, 0.12%)</title><rect x="1068.2" y="899.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.2" y="910.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.07%)</title><rect x="1069.6" y="915.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1072.6" y="926.0"></text>
</g>
<g>
<title>__recv (265 samples, 6.50%)</title><rect x="1070.5" y="915.0" width="76.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1073.5" y="926.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (188 samples, 4.61%)</title><rect x="1092.8" y="899.0" width="54.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1095.8" y="910.0">entry..</text>
</g>
<g>
<title>__x64_sys_recvfrom (2 samples, 0.05%)</title><rect x="1092.8" y="883.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1095.8" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (186 samples, 4.56%)</title><rect x="1093.4" y="883.0" width="53.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1096.4" y="894.0">do_sy..</text>
</g>
<g>
<title>__sys_recvfrom (2 samples, 0.05%)</title><rect x="1099.7" y="867.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1102.7" y="878.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (162 samples, 3.97%)</title><rect x="1100.3" y="867.0" width="46.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1103.3" y="878.0">__x6..</text>
</g>
<g>
<title>__sys_recvfrom (152 samples, 3.73%)</title><rect x="1100.3" y="851.0" width="44.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1103.3" y="862.0">__sy..</text>
</g>
<g>
<title>__fdget (1 samples, 0.02%)</title><rect x="1101.2" y="835.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1104.2" y="846.0"></text>
</g>
<g>
<title>fput (1 samples, 0.02%)</title><rect x="1101.5" y="835.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1104.5" y="846.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.02%)</title><rect x="1101.5" y="819.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1104.5" y="830.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.02%)</title><rect x="1101.7" y="835.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1104.7" y="846.0"></text>
</g>
<g>
<title>sock_recvmsg (131 samples, 3.21%)</title><rect x="1102.0" y="835.0" width="37.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1105.0" y="846.0">soc..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.02%)</title><rect x="1102.3" y="819.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1105.3" y="830.0"></text>
</g>
<g>
<title>inet6_recvmsg (112 samples, 2.75%)</title><rect x="1102.6" y="819.0" width="32.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1105.6" y="830.0">in..</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.02%)</title><rect x="1102.6" y="803.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1105.6" y="814.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.02%)</title><rect x="1102.9" y="803.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1105.9" y="814.0"></text>
</g>
<g>
<title>tcp_recvmsg (110 samples, 2.70%)</title><rect x="1103.2" y="803.0" width="31.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1106.2" y="814.0">tc..</text>
</g>
<g>
<title>__kfree_skb (19 samples, 0.47%)</title><rect x="1107.5" y="787.0" width="5.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1110.5" y="798.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.05%)</title><rect x="1107.5" y="771.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1110.5" y="782.0"></text>
</g>
<g>
<title>skb_release_all (16 samples, 0.39%)</title><rect x="1108.1" y="771.0" width="4.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1111.1" y="782.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.02%)</title><rect x="1108.1" y="755.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1111.1" y="766.0"></text>
</g>
<g>
<title>skb_release_data (5 samples, 0.12%)</title><rect x="1108.4" y="755.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1111.4" y="766.0"></text>
</g>
<g>
<title>skb_release_head_state (10 samples, 0.25%)</title><rect x="1109.8" y="755.0" width="2.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1112.8" y="766.0"></text>
</g>
<g>
<title>dst_release (7 samples, 0.17%)</title><rect x="1110.1" y="739.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1113.1" y="750.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.05%)</title><rect x="1112.2" y="739.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1115.2" y="750.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.02%)</title><rect x="1112.7" y="771.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1115.7" y="782.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.02%)</title><rect x="1113.0" y="787.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1116.0" y="798.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (3 samples, 0.07%)</title><rect x="1113.3" y="787.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1116.3" y="798.0"></text>
</g>
<g>
<title>lock_sock_nested (13 samples, 0.32%)</title><rect x="1114.2" y="787.0" width="3.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1117.2" y="798.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.02%)</title><rect x="1114.2" y="771.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1117.2" y="782.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (12 samples, 0.29%)</title><rect x="1114.5" y="771.0" width="3.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1117.5" y="782.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.10%)</title><rect x="1117.9" y="787.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1120.9" y="798.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.02%)</title><rect x="1118.2" y="771.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1121.2" y="782.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.02%)</title><rect x="1118.5" y="771.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1121.5" y="782.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.02%)</title><rect x="1118.5" y="755.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1121.5" y="766.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.02%)</title><rect x="1118.8" y="771.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1121.8" y="782.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (43 samples, 1.05%)</title><rect x="1119.1" y="787.0" width="12.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1122.1" y="798.0"></text>
</g>
<g>
<title>__skb_datagram_iter (41 samples, 1.01%)</title><rect x="1119.4" y="771.0" width="11.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1122.4" y="782.0"></text>
</g>
<g>
<title>simple_copy_to_iter (27 samples, 0.66%)</title><rect x="1123.4" y="755.0" width="7.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1126.4" y="766.0"></text>
</g>
<g>
<title>__check_object_size (3 samples, 0.07%)</title><rect x="1123.4" y="739.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1126.4" y="750.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.02%)</title><rect x="1124.3" y="739.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1127.3" y="750.0"></text>
</g>
<g>
<title>_copy_to_iter (22 samples, 0.54%)</title><rect x="1124.6" y="739.0" width="6.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1127.6" y="750.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (20 samples, 0.49%)</title><rect x="1125.2" y="723.0" width="5.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1128.2" y="734.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.02%)</title><rect x="1131.0" y="739.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1134.0" y="750.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.02%)</title><rect x="1131.3" y="771.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1134.3" y="782.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.07%)</title><rect x="1131.5" y="787.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1134.5" y="798.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (7 samples, 0.17%)</title><rect x="1132.4" y="787.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1135.4" y="798.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.02%)</title><rect x="1132.7" y="771.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1135.7" y="782.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.12%)</title><rect x="1133.0" y="771.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1136.0" y="782.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.10%)</title><rect x="1133.0" y="755.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1136.0" y="766.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.07%)</title><rect x="1133.3" y="739.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1136.3" y="750.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.02%)</title><rect x="1134.2" y="755.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1137.2" y="766.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.05%)</title><rect x="1134.4" y="787.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1137.4" y="798.0"></text>
</g>
<g>
<title>security_socket_recvmsg (17 samples, 0.42%)</title><rect x="1135.0" y="819.0" width="4.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1138.0" y="830.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (8 samples, 0.20%)</title><rect x="1135.0" y="803.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1138.0" y="814.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (8 samples, 0.20%)</title><rect x="1135.0" y="787.0" width="2.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1138.0" y="798.0"></text>
</g>
<g>
<title>aa_sk_perm (8 samples, 0.20%)</title><rect x="1135.0" y="771.0" width="2.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1138.0" y="782.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.05%)</title><rect x="1136.8" y="755.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1139.8" y="766.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.05%)</title><rect x="1136.8" y="739.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1139.8" y="750.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (9 samples, 0.22%)</title><rect x="1137.3" y="803.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1140.3" y="814.0"></text>
</g>
<g>
<title>sock_has_perm (9 samples, 0.22%)</title><rect x="1137.3" y="787.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1140.3" y="798.0"></text>
</g>
<g>
<title>sockfd_lookup_light (15 samples, 0.37%)</title><rect x="1139.9" y="835.0" width="4.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1142.9" y="846.0"></text>
</g>
<g>
<title>__fdget (12 samples, 0.29%)</title><rect x="1140.2" y="819.0" width="3.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1143.2" y="830.0"></text>
</g>
<g>
<title>__fget_light (12 samples, 0.29%)</title><rect x="1140.2" y="803.0" width="3.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1143.2" y="814.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.22%)</title><rect x="1141.1" y="787.0" width="2.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1144.1" y="798.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.05%)</title><rect x="1143.7" y="819.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1146.7" y="830.0"></text>
</g>
<g>
<title>fput (2 samples, 0.05%)</title><rect x="1144.3" y="851.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1147.3" y="862.0"></text>
</g>
<g>
<title>import_single_range (4 samples, 0.10%)</title><rect x="1144.9" y="851.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1147.9" y="862.0"></text>
</g>
<g>
<title>sockfd_lookup_light (4 samples, 0.10%)</title><rect x="1146.0" y="851.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1149.0" y="862.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.10%)</title><rect x="1147.2" y="915.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1150.2" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.22%)</title><rect x="1148.3" y="963.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.3" y="974.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.07%)</title><rect x="1150.1" y="947.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1153.1" y="958.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.07%)</title><rect x="1150.1" y="931.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1153.1" y="942.0"></text>
</g>
<g>
<title>start_thread (135 samples, 3.31%)</title><rect x="1150.9" y="995.0" width="39.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1153.9" y="1006.0">sta..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (135 samples, 3.31%)</title><rect x="1150.9" y="979.0" width="39.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1153.9" y="990.0">thr..</text>
</g>
<g>
<title>Thread::call_run() (135 samples, 3.31%)</title><rect x="1150.9" y="963.0" width="39.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.9" y="974.0">Thr..</text>
</g>
<g>
<title>GangWorker::loop() (130 samples, 3.19%)</title><rect x="1150.9" y="947.0" width="37.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.9" y="958.0">Gan..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (8 samples, 0.20%)</title><rect x="1150.9" y="931.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.9" y="942.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (8 samples, 0.20%)</title><rect x="1150.9" y="915.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.9" y="926.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (5 samples, 0.12%)</title><rect x="1150.9" y="899.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.9" y="910.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.149] (3 samples, 0.07%)</title><rect x="1150.9" y="883.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.9" y="894.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (2 samples, 0.05%)</title><rect x="1151.2" y="867.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.2" y="878.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1151.5" y="851.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.5" y="862.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.02%)</title><rect x="1151.5" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.5" y="846.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (2 samples, 0.05%)</title><rect x="1151.8" y="883.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.8" y="894.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.05%)</title><rect x="1151.8" y="867.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.8" y="878.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (2 samples, 0.05%)</title><rect x="1151.8" y="851.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.8" y="862.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.02%)</title><rect x="1152.1" y="835.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.1" y="846.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.149] (3 samples, 0.07%)</title><rect x="1152.4" y="899.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.4" y="910.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (3 samples, 0.07%)</title><rect x="1152.4" y="883.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.4" y="894.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.07%)</title><rect x="1152.4" y="867.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.4" y="878.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (3 samples, 0.07%)</title><rect x="1152.4" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.4" y="862.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.02%)</title><rect x="1153.3" y="931.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.3" y="942.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (113 samples, 2.77%)</title><rect x="1153.5" y="931.0" width="32.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.5" y="942.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (51 samples, 1.25%)</title><rect x="1153.5" y="915.0" width="14.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.5" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.07%)</title><rect x="1154.4" y="899.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.4" y="910.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1155.0" y="883.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.0" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (42 samples, 1.03%)</title><rect x="1155.3" y="899.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.3" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (23 samples, 0.56%)</title><rect x="1160.8" y="883.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.8" y="894.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (1 samples, 0.02%)</title><rect x="1165.1" y="867.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.1" y="878.0"></text>
</g>
<g>
<title>PLAB::retire() (1 samples, 0.02%)</title><rect x="1165.1" y="851.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.1" y="862.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.02%)</title><rect x="1165.1" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.1" y="846.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.02%)</title><rect x="1165.4" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.4" y="878.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (6 samples, 0.15%)</title><rect x="1165.7" y="867.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.7" y="878.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.07%)</title><rect x="1167.4" y="899.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.4" y="910.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.02%)</title><rect x="1167.4" y="883.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.4" y="894.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.05%)</title><rect x="1167.7" y="883.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1170.7" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (59 samples, 1.45%)</title><rect x="1168.3" y="915.0" width="17.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="926.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(CardTableEntryClosure*, unsigned int) (1 samples, 0.02%)</title><rect x="1168.3" y="899.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.3" y="910.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (58 samples, 1.42%)</title><rect x="1168.6" y="899.0" width="16.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.6" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (58 samples, 1.42%)</title><rect x="1168.6" y="883.0" width="16.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.6" y="894.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (58 samples, 1.42%)</title><rect x="1168.6" y="867.0" width="16.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.6" y="878.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (56 samples, 1.37%)</title><rect x="1169.2" y="851.0" width="16.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.2" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (43 samples, 1.05%)</title><rect x="1169.2" y="835.0" width="12.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.2" y="846.0"></text>
</g>
<g>
<title>G1CardTable::mark_card_deferred(unsigned long) (1 samples, 0.02%)</title><rect x="1173.8" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (25 samples, 0.61%)</title><rect x="1174.1" y="819.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.1" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (10 samples, 0.25%)</title><rect x="1178.4" y="803.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1181.3" y="819.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (13 samples, 0.32%)</title><rect x="1181.6" y="835.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.6" y="846.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (13 samples, 0.32%)</title><rect x="1181.6" y="819.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="830.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (4 samples, 0.10%)</title><rect x="1182.8" y="803.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.02%)</title><rect x="1183.3" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.3" y="798.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.02%)</title><rect x="1183.3" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="782.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.02%)</title><rect x="1183.6" y="787.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.6" y="798.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.02%)</title><rect x="1183.9" y="803.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.9" y="814.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.577] (1 samples, 0.02%)</title><rect x="1184.2" y="803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.2" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateBoundedDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate_bounded&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*, MemRegion) (2 samples, 0.05%)</title><rect x="1184.5" y="803.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="814.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="1184.8" y="787.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.8" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1185.1" y="803.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="814.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="1185.1" y="787.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.1" y="798.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1185.4" y="915.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.4" y="926.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.02%)</title><rect x="1185.4" y="899.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="910.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1185.4" y="883.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.4" y="894.0"></text>
</g>
<g>
<title>OtherRegionsTable::is_empty() const (1 samples, 0.02%)</title><rect x="1185.4" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.4" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.05%)</title><rect x="1185.7" y="915.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.05%)</title><rect x="1185.7" y="899.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.7" y="910.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.05%)</title><rect x="1185.7" y="883.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="894.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="1185.9" y="867.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.9" y="878.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.02%)</title><rect x="1185.9" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.9" y="862.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.02%)</title><rect x="1185.9" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.9" y="846.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (4 samples, 0.10%)</title><rect x="1186.2" y="931.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.2" y="942.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (4 samples, 0.10%)</title><rect x="1186.2" y="915.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="926.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (4 samples, 0.10%)</title><rect x="1186.2" y="899.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="910.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_reference(void*, unsigned int) [clone .part.54] (1 samples, 0.02%)</title><rect x="1186.2" y="883.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="894.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (3 samples, 0.07%)</title><rect x="1186.5" y="883.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.5" y="894.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_reference(void*, unsigned int) [clone .part.54] (1 samples, 0.02%)</title><rect x="1187.1" y="867.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="878.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.02%)</title><rect x="1187.4" y="931.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.4" y="942.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.05%)</title><rect x="1187.7" y="931.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="942.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.05%)</title><rect x="1187.7" y="915.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="926.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.66] (1 samples, 0.02%)</title><rect x="1188.0" y="899.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="910.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title><rect x="1188.0" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.0" y="894.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.02%)</title><rect x="1188.0" y="867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.0" y="878.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="1188.0" y="851.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.0" y="862.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.02%)</title><rect x="1188.3" y="931.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.3" y="942.0"></text>
</g>
<g>
<title>VMThread::run() (5 samples, 0.12%)</title><rect x="1188.6" y="947.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.6" y="958.0"></text>
</g>
<g>
<title>VMThread::loop() (5 samples, 0.12%)</title><rect x="1188.6" y="931.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.6" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.02%)</title><rect x="1188.6" y="915.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.6" y="926.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.63] (3 samples, 0.07%)</title><rect x="1188.8" y="915.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.8" y="926.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.07%)</title><rect x="1188.8" y="899.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.8" y="910.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (3 samples, 0.07%)</title><rect x="1188.8" y="883.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.07%)</title><rect x="1188.8" y="867.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.02%)</title><rect x="1188.8" y="851.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.8" y="862.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (1 samples, 0.02%)</title><rect x="1188.8" y="835.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.8" y="846.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.02%)</title><rect x="1188.8" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="830.0"></text>
</g>
<g>
<title>__new_sem_post (1 samples, 0.02%)</title><rect x="1188.8" y="803.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1191.8" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1188.8" y="787.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1191.8" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1188.8" y="771.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1191.8" y="782.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1188.8" y="755.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1191.8" y="766.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1188.8" y="739.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1191.8" y="750.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="1188.8" y="723.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.02%)</title><rect x="1188.8" y="707.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.02%)</title><rect x="1188.8" y="691.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1191.8" y="702.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="1188.8" y="675.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1191.8" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::trace_heap(GCWhen::Type, GCTracer const*) (1 samples, 0.02%)</title><rect x="1189.1" y="851.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.1" y="862.0"></text>
</g>
<g>
<title>G1HeapSummary::accept(GCHeapSummaryVisitor*) const (1 samples, 0.02%)</title><rect x="1189.1" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="846.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::note_gc_start() (1 samples, 0.02%)</title><rect x="1189.4" y="851.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.4" y="862.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.02%)</title><rect x="1189.7" y="915.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1192.7" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1189.7" y="899.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1192.7" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1189.7" y="883.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1192.7" y="894.0"></text>
</g>
</g>
</svg>
