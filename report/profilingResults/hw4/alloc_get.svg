<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (41,066 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (28,660 samples, 69.79%)</title><rect x="10.0" y="547.0" width="823.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="558.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (28,660 samples, 69.79%)</title><rect x="10.0" y="531.0" width="823.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="542.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (28,660 samples, 69.79%)</title><rect x="10.0" y="515.0" width="823.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="526.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 0.03%)</title><rect x="10.0" y="499.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (11 samples, 0.03%)</title><rect x="10.0" y="483.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 0.03%)</title><rect x="10.0" y="467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (11 samples, 0.03%)</title><rect x="10.0" y="451.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (11 samples, 0.03%)</title><rect x="10.0" y="435.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$97/1616607307.run (28,649 samples, 69.76%)</title><rect x="10.3" y="499.0" width="823.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.3" y="510.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$97/1616607307.run</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$4 (28,649 samples, 69.76%)</title><rect x="10.3" y="483.0" width="823.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.3" y="494.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$4</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.process (28,649 samples, 69.76%)</title><rect x="10.3" y="467.0" width="823.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.3" y="478.0">ru/mail/polis/service/zvladn7/AsyncService.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$119/1426096574.process (28,649 samples, 69.76%)</title><rect x="10.3" y="451.0" width="823.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.3" y="462.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$119/1426096574.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$get$1 (28,649 samples, 69.76%)</title><rect x="10.3" y="435.0" width="823.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.3" y="446.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$get$1</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.handleGet (28,649 samples, 69.76%)</title><rect x="10.3" y="419.0" width="823.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.3" y="430.0">ru/mail/polis/service/zvladn7/ServiceHelper.handleGet</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.handleOrProxy (28,472 samples, 69.33%)</title><rect x="10.3" y="403.0" width="818.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.3" y="414.0">ru/mail/polis/service/zvladn7/ServiceHelper.handleOrProxy</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$123/189511548.process (28,436 samples, 69.24%)</title><rect x="10.3" y="387.0" width="817.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.3" y="398.0">ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$123/189511548.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.lambda$handleGet$0 (28,436 samples, 69.24%)</title><rect x="10.3" y="371.0" width="817.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.3" y="382.0">ru/mail/polis/service/zvladn7/ServiceHelper.lambda$handleGet$0</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (44 samples, 0.11%)</title><rect x="10.3" y="355.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (44 samples, 0.11%)</title><rect x="10.3" y="339.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (26 samples, 0.06%)</title><rect x="10.3" y="323.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (26 samples, 0.06%)</title><rect x="10.3" y="307.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.3" y="318.0"></text>
</g>
<g>
<title>byte[] (26 samples, 0.06%)</title><rect x="10.3" y="291.0" width="0.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="13.3" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 0.04%)</title><rect x="11.1" y="323.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="14.1" y="334.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (18 samples, 0.04%)</title><rect x="11.1" y="307.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="14.1" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (34 samples, 0.08%)</title><rect x="11.6" y="355.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (26 samples, 0.06%)</title><rect x="11.8" y="339.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.8" y="350.0"></text>
</g>
<g>
<title>java.lang.String[] (13 samples, 0.03%)</title><rect x="12.0" y="323.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="15.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (28,352 samples, 69.04%)</title><rect x="12.6" y="355.0" width="814.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.6" y="366.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (446 samples, 1.09%)</title><rect x="12.6" y="339.0" width="12.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.6" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (446 samples, 1.09%)</title><rect x="12.6" y="323.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.6" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (446 samples, 1.09%)</title><rect x="12.6" y="307.0" width="12.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="15.6" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (446 samples, 1.09%)</title><rect x="12.6" y="291.0" width="12.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (446 samples, 1.09%)</title><rect x="12.6" y="275.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.6" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (421 samples, 1.03%)</title><rect x="12.6" y="259.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="15.6" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (180 samples, 0.44%)</title><rect x="12.6" y="243.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.6" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (180 samples, 0.44%)</title><rect x="12.6" y="227.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.6" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (180 samples, 0.44%)</title><rect x="12.6" y="211.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.6" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (180 samples, 0.44%)</title><rect x="12.6" y="195.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="15.6" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (180 samples, 0.44%)</title><rect x="12.6" y="179.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.6" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$117/1640556523.compare (180 samples, 0.44%)</title><rect x="12.6" y="163.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.6" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (180 samples, 0.44%)</title><rect x="12.6" y="147.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.6" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/377478451.compare (180 samples, 0.44%)</title><rect x="12.6" y="131.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.6" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (180 samples, 0.44%)</title><rect x="12.6" y="115.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$114/1372659476.apply (180 samples, 0.44%)</title><rect x="12.6" y="99.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (180 samples, 0.44%)</title><rect x="12.6" y="83.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.6" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (180 samples, 0.44%)</title><rect x="12.6" y="67.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.6" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (180 samples, 0.44%)</title><rect x="12.6" y="51.0" width="5.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="15.6" y="62.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (241 samples, 0.59%)</title><rect x="17.7" y="243.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.7" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (241 samples, 0.59%)</title><rect x="17.7" y="227.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.7" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (241 samples, 0.59%)</title><rect x="17.7" y="211.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.7" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (241 samples, 0.59%)</title><rect x="17.7" y="195.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.7" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (241 samples, 0.59%)</title><rect x="17.7" y="179.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.7" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (241 samples, 0.59%)</title><rect x="17.7" y="163.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.7" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (143 samples, 0.35%)</title><rect x="17.7" y="147.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (143 samples, 0.35%)</title><rect x="17.7" y="131.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (143 samples, 0.35%)</title><rect x="17.7" y="115.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (143 samples, 0.35%)</title><rect x="17.7" y="99.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.7" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (61 samples, 0.15%)</title><rect x="17.7" y="83.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.7" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (39 samples, 0.09%)</title><rect x="17.7" y="67.0" width="1.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="20.7" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (22 samples, 0.05%)</title><rect x="18.9" y="67.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.9" y="78.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.05%)</title><rect x="18.9" y="51.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="21.9" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (56 samples, 0.14%)</title><rect x="19.7" y="83.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="22.7" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (41 samples, 0.10%)</title><rect x="19.7" y="67.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="22.7" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (26 samples, 0.06%)</title><rect x="19.7" y="51.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="22.7" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (15 samples, 0.04%)</title><rect x="20.4" y="51.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.4" y="62.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.04%)</title><rect x="20.4" y="35.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="23.4" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (15 samples, 0.04%)</title><rect x="20.9" y="67.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.9" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (15 samples, 0.04%)</title><rect x="20.9" y="51.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.9" y="62.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (14 samples, 0.03%)</title><rect x="20.9" y="35.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="23.9" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (19 samples, 0.05%)</title><rect x="21.3" y="83.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.3" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (19 samples, 0.05%)</title><rect x="21.3" y="67.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.3" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (12 samples, 0.03%)</title><rect x="21.3" y="51.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="24.3" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$117/1640556523.compare (98 samples, 0.24%)</title><rect x="21.8" y="147.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.8" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (98 samples, 0.24%)</title><rect x="21.8" y="131.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.8" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/377478451.compare (98 samples, 0.24%)</title><rect x="21.8" y="115.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.8" y="126.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (98 samples, 0.24%)</title><rect x="21.8" y="99.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$114/1372659476.apply (98 samples, 0.24%)</title><rect x="21.8" y="83.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.8" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (98 samples, 0.24%)</title><rect x="21.8" y="67.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.8" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (98 samples, 0.24%)</title><rect x="21.8" y="51.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.8" y="62.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (98 samples, 0.24%)</title><rect x="21.8" y="35.0" width="2.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="24.8" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$142/789568008.apply (25 samples, 0.06%)</title><rect x="24.7" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (25 samples, 0.06%)</title><rect x="24.7" y="243.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.7" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (25 samples, 0.06%)</title><rect x="24.7" y="227.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.7" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (25 samples, 0.06%)</title><rect x="24.7" y="211.0" width="0.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="27.7" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (26 samples, 0.06%)</title><rect x="25.4" y="339.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.4" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (26 samples, 0.06%)</title><rect x="25.4" y="323.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$151/156825611.apply (26 samples, 0.06%)</title><rect x="25.4" y="307.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$iterator$4 (26 samples, 0.06%)</title><rect x="25.4" y="291.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="28.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (17 samples, 0.04%)</title><rect x="25.6" y="275.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.6" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (17 samples, 0.04%)</title><rect x="25.6" y="259.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.6" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (17 samples, 0.04%)</title><rect x="25.6" y="243.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="28.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (21 samples, 0.05%)</title><rect x="26.1" y="339.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (21 samples, 0.05%)</title><rect x="26.1" y="323.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.1" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (21 samples, 0.05%)</title><rect x="26.1" y="307.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.1" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (21 samples, 0.05%)</title><rect x="26.1" y="291.0" width="0.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="29.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (10 samples, 0.02%)</title><rect x="26.7" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.7" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (10 samples, 0.02%)</title><rect x="26.7" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.7" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (10 samples, 0.02%)</title><rect x="26.7" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.7" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (10 samples, 0.02%)</title><rect x="26.7" y="291.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="29.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator (27,849 samples, 67.82%)</title><rect x="27.0" y="339.0" width="800.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.0" y="350.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (14 samples, 0.03%)</title><rect x="27.0" y="323.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.0" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (14 samples, 0.03%)</title><rect x="27.0" y="307.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="30.0" y="318.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (10 samples, 0.02%)</title><rect x="27.8" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (10 samples, 0.02%)</title><rect x="27.8" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (10 samples, 0.02%)</title><rect x="27.8" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.8" y="302.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (10 samples, 0.02%)</title><rect x="27.8" y="275.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="30.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (14 samples, 0.03%)</title><rect x="28.1" y="323.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.1" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (14 samples, 0.03%)</title><rect x="28.1" y="307.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="31.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$130/649083797.get$Lambda (14 samples, 0.03%)</title><rect x="28.1" y="291.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.1" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$130 (14 samples, 0.03%)</title><rect x="28.1" y="275.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="31.1" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (44 samples, 0.11%)</title><rect x="28.5" y="323.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.5" y="334.0"></text>
</g>
<g>
<title>java.lang.Object[] (44 samples, 0.11%)</title><rect x="28.5" y="307.0" width="1.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="31.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator (27,693 samples, 67.44%)</title><rect x="29.7" y="323.0" width="795.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.7" y="334.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (7,675 samples, 18.69%)</title><rect x="29.7" y="307.0" width="220.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.7" y="318.0">com/google/common/collect/Ite..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (7,672 samples, 18.68%)</title><rect x="29.8" y="291.0" width="220.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.8" y="302.0">com/google/common/collect/Ite..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (207 samples, 0.50%)</title><rect x="29.9" y="275.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.9" y="286.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (207 samples, 0.50%)</title><rect x="29.9" y="259.0" width="6.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="32.9" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (7,404 samples, 18.03%)</title><rect x="36.2" y="275.0" width="212.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.2" y="286.0">java/util/PriorityQueue.add</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (7,404 samples, 18.03%)</title><rect x="36.2" y="259.0" width="212.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.2" y="270.0">java/util/PriorityQueue.offer</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (114 samples, 0.28%)</title><rect x="36.2" y="243.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.2" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (114 samples, 0.28%)</title><rect x="36.2" y="227.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.2" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (114 samples, 0.28%)</title><rect x="36.2" y="211.0" width="3.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="39.2" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (7,290 samples, 17.75%)</title><rect x="39.5" y="243.0" width="209.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.5" y="254.0">java/util/PriorityQueue.sif..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (7,290 samples, 17.75%)</title><rect x="39.5" y="227.0" width="209.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.5" y="238.0">java/util/PriorityQueue.sif..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7,290 samples, 17.75%)</title><rect x="39.5" y="211.0" width="209.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.5" y="222.0">com/google/common/collect/I..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7,290 samples, 17.75%)</title><rect x="39.5" y="195.0" width="209.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="42.5" y="206.0">com/google/common/collect/I..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (5,002 samples, 12.18%)</title><rect x="39.5" y="179.0" width="143.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.5" y="190.0">com/google/common/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (5,002 samples, 12.18%)</title><rect x="39.5" y="163.0" width="143.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.5" y="174.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (5,002 samples, 12.18%)</title><rect x="39.5" y="147.0" width="143.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="42.5" y="158.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (5,002 samples, 12.18%)</title><rect x="39.5" y="131.0" width="143.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.5" y="142.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,053 samples, 5.00%)</title><rect x="39.5" y="115.0" width="59.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.5" y="126.0">java/n..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,103 samples, 2.69%)</title><rect x="39.5" y="99.0" width="31.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="42.5" y="110.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (950 samples, 2.31%)</title><rect x="71.2" y="99.0" width="27.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.2" y="110.0">j..</text>
</g>
<g>
<title>byte[] (950 samples, 2.31%)</title><rect x="71.2" y="83.0" width="27.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="74.2" y="94.0">b..</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (186 samples, 0.45%)</title><rect x="98.5" y="115.0" width="5.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="101.5" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (177 samples, 0.43%)</title><rect x="103.8" y="115.0" width="5.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="106.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (2,034 samples, 4.95%)</title><rect x="108.9" y="115.0" width="58.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.9" y="126.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,469 samples, 3.58%)</title><rect x="108.9" y="99.0" width="42.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.9" y="110.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (755 samples, 1.84%)</title><rect x="108.9" y="83.0" width="21.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="111.9" y="94.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (714 samples, 1.74%)</title><rect x="130.6" y="83.0" width="20.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.6" y="94.0"></text>
</g>
<g>
<title>byte[] (714 samples, 1.74%)</title><rect x="130.6" y="67.0" width="20.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="133.6" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (565 samples, 1.38%)</title><rect x="151.1" y="99.0" width="16.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.1" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (565 samples, 1.38%)</title><rect x="151.1" y="83.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.1" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (397 samples, 0.97%)</title><rect x="151.1" y="67.0" width="11.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="154.1" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (168 samples, 0.41%)</title><rect x="162.5" y="67.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.5" y="78.0"></text>
</g>
<g>
<title>byte[] (168 samples, 0.41%)</title><rect x="162.5" y="51.0" width="4.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="165.5" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (552 samples, 1.34%)</title><rect x="167.3" y="115.0" width="15.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.3" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (552 samples, 1.34%)</title><rect x="167.3" y="99.0" width="15.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="170.3" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (374 samples, 0.91%)</title><rect x="167.3" y="83.0" width="10.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="170.3" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (178 samples, 0.43%)</title><rect x="178.1" y="83.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="181.1" y="94.0"></text>
</g>
<g>
<title>byte[] (178 samples, 0.43%)</title><rect x="178.1" y="67.0" width="5.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="181.1" y="78.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$117/1640556523.compare (2,288 samples, 5.57%)</title><rect x="183.2" y="179.0" width="65.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.2" y="190.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,288 samples, 5.57%)</title><rect x="183.2" y="163.0" width="65.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.2" y="174.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/377478451.compare (2,288 samples, 5.57%)</title><rect x="183.2" y="147.0" width="65.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="186.2" y="158.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2,288 samples, 5.57%)</title><rect x="183.2" y="131.0" width="65.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="186.2" y="142.0">java/ut..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$114/1372659476.apply (2,288 samples, 5.57%)</title><rect x="183.2" y="115.0" width="65.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="186.2" y="126.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (2,288 samples, 5.57%)</title><rect x="183.2" y="99.0" width="65.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="186.2" y="110.0">ru/mail..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2,288 samples, 5.57%)</title><rect x="183.2" y="83.0" width="65.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.2" y="94.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2,288 samples, 5.57%)</title><rect x="183.2" y="67.0" width="65.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="186.2" y="78.0">java.ni..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (46 samples, 0.11%)</title><rect x="249.0" y="275.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.0" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (46 samples, 0.11%)</title><rect x="249.0" y="259.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="252.0" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (46 samples, 0.11%)</title><rect x="249.0" y="243.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.0" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (43 samples, 0.10%)</title><rect x="249.0" y="227.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.0" y="238.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (12 samples, 0.03%)</title><rect x="249.0" y="211.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="252.0" y="222.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (17 samples, 0.04%)</title><rect x="249.8" y="211.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.8" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (17 samples, 0.04%)</title><rect x="249.8" y="195.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="252.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (413 samples, 1.01%)</title><rect x="250.3" y="307.0" width="11.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.3" y="318.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (9 samples, 0.02%)</title><rect x="250.3" y="291.0" width="0.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="253.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (404 samples, 0.98%)</title><rect x="250.5" y="291.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.5" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (404 samples, 0.98%)</title><rect x="250.5" y="275.0" width="11.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.5" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (165 samples, 0.40%)</title><rect x="250.5" y="259.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.5" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (165 samples, 0.40%)</title><rect x="250.5" y="243.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="253.5" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (165 samples, 0.40%)</title><rect x="250.5" y="227.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (165 samples, 0.40%)</title><rect x="250.5" y="211.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.5" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (165 samples, 0.40%)</title><rect x="250.5" y="195.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.5" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$117/1640556523.compare (165 samples, 0.40%)</title><rect x="250.5" y="179.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.5" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (165 samples, 0.40%)</title><rect x="250.5" y="163.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.5" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/377478451.compare (165 samples, 0.40%)</title><rect x="250.5" y="147.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.5" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (165 samples, 0.40%)</title><rect x="250.5" y="131.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$114/1372659476.apply (165 samples, 0.40%)</title><rect x="250.5" y="115.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (165 samples, 0.40%)</title><rect x="250.5" y="99.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.5" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (165 samples, 0.40%)</title><rect x="250.5" y="83.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.5" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (165 samples, 0.40%)</title><rect x="250.5" y="67.0" width="4.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="253.5" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (239 samples, 0.58%)</title><rect x="255.3" y="259.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.3" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (239 samples, 0.58%)</title><rect x="255.3" y="243.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.3" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (239 samples, 0.58%)</title><rect x="255.3" y="227.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.3" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (239 samples, 0.58%)</title><rect x="255.3" y="211.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.3" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (239 samples, 0.58%)</title><rect x="255.3" y="195.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.3" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (239 samples, 0.58%)</title><rect x="255.3" y="179.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.3" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (160 samples, 0.39%)</title><rect x="255.3" y="163.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (160 samples, 0.39%)</title><rect x="255.3" y="147.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (160 samples, 0.39%)</title><rect x="255.3" y="131.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (160 samples, 0.39%)</title><rect x="255.3" y="115.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="258.3" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (60 samples, 0.15%)</title><rect x="255.3" y="99.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="258.3" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (31 samples, 0.08%)</title><rect x="255.3" y="83.0" width="0.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="258.3" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (29 samples, 0.07%)</title><rect x="256.2" y="83.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.2" y="94.0"></text>
</g>
<g>
<title>byte[] (29 samples, 0.07%)</title><rect x="256.2" y="67.0" width="0.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="259.2" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (67 samples, 0.16%)</title><rect x="257.3" y="99.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.3" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (49 samples, 0.12%)</title><rect x="257.3" y="83.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.3" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (35 samples, 0.09%)</title><rect x="257.3" y="67.0" width="1.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="260.3" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.03%)</title><rect x="258.3" y="67.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.3" y="78.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.03%)</title><rect x="258.3" y="51.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="261.3" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (18 samples, 0.04%)</title><rect x="258.7" y="83.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.7" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (18 samples, 0.04%)</title><rect x="258.7" y="67.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="261.7" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11 samples, 0.03%)</title><rect x="258.7" y="51.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="261.7" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (23 samples, 0.06%)</title><rect x="259.2" y="99.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.2" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (23 samples, 0.06%)</title><rect x="259.2" y="83.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (13 samples, 0.03%)</title><rect x="259.2" y="67.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="262.2" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.02%)</title><rect x="259.6" y="67.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.6" y="78.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.02%)</title><rect x="259.6" y="51.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="262.6" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$117/1640556523.compare (79 samples, 0.19%)</title><rect x="259.9" y="163.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.9" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (79 samples, 0.19%)</title><rect x="259.9" y="147.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.9" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/377478451.compare (79 samples, 0.19%)</title><rect x="259.9" y="131.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.9" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (79 samples, 0.19%)</title><rect x="259.9" y="115.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="262.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$114/1372659476.apply (79 samples, 0.19%)</title><rect x="259.9" y="99.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (79 samples, 0.19%)</title><rect x="259.9" y="83.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="262.9" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (79 samples, 0.19%)</title><rect x="259.9" y="67.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.9" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (79 samples, 0.19%)</title><rect x="259.9" y="51.0" width="2.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="262.9" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList (19,605 samples, 47.74%)</title><rect x="262.1" y="307.0" width="563.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="265.1" y="318.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList</text>
</g>
<g>
<title>java/lang/Iterable.forEach (19,596 samples, 47.72%)</title><rect x="262.1" y="291.0" width="563.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.1" y="302.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (16 samples, 0.04%)</title><rect x="262.1" y="275.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.1" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (12 samples, 0.03%)</title><rect x="262.3" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.3" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (12 samples, 0.03%)</title><rect x="262.3" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.3" y="254.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (12 samples, 0.03%)</title><rect x="262.3" y="227.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="265.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$136/1539353607.accept (19,580 samples, 47.68%)</title><rect x="262.6" y="275.0" width="562.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.6" y="286.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$136/1539353607.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$9 (19,580 samples, 47.68%)</title><rect x="262.6" y="259.0" width="562.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.6" y="270.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$9</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.iterator (19,580 samples, 47.68%)</title><rect x="262.6" y="243.0" width="562.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.6" y="254.0">ru/mail/polis/dao/zvladn7/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.SSTable$SSTableIter (183 samples, 0.45%)</title><rect x="262.6" y="227.0" width="5.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="265.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt; (19,397 samples, 47.23%)</title><rect x="267.9" y="227.0" width="557.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.9" y="238.0">ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getElementPosition (19,397 samples, 47.23%)</title><rect x="267.9" y="211.0" width="557.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.9" y="222.0">ru/mail/polis/dao/zvladn7/SSTable.getElementPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (19,397 samples, 47.23%)</title><rect x="267.9" y="195.0" width="557.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.9" y="206.0">ru/mail/polis/dao/zvladn7/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (16,577 samples, 40.37%)</title><rect x="267.9" y="179.0" width="476.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.9" y="190.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5,603 samples, 13.64%)</title><rect x="267.9" y="163.0" width="161.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="270.9" y="174.0">java.nio.HeapByteBuf..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10,974 samples, 26.72%)</title><rect x="428.9" y="163.0" width="315.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="431.9" y="174.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (10,974 samples, 26.72%)</title><rect x="428.9" y="147.0" width="315.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="431.9" y="158.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (2,820 samples, 6.87%)</title><rect x="744.2" y="179.0" width="81.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="747.2" y="190.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,820 samples, 6.87%)</title><rect x="744.2" y="163.0" width="81.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.2" y="174.0">java/nio/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,820 samples, 6.87%)</title><rect x="744.2" y="147.0" width="81.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="747.2" y="158.0">java/nio/..</text>
</g>
<g>
<title>byte[] (2,820 samples, 6.87%)</title><rect x="744.2" y="131.0" width="81.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="747.2" y="142.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (9 samples, 0.02%)</title><rect x="825.2" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="828.2" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (9 samples, 0.02%)</title><rect x="825.2" y="275.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="828.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$136/1539353607.get$Lambda (9 samples, 0.02%)</title><rect x="825.2" y="259.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="828.2" y="270.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$136 (9 samples, 0.02%)</title><rect x="825.2" y="243.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="828.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.iterator (61 samples, 0.15%)</title><rect x="825.5" y="323.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="828.5" y="334.0"></text>
</g>
<g>
<title>java/util/Collection.stream (16 samples, 0.04%)</title><rect x="825.5" y="307.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="828.5" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (13 samples, 0.03%)</title><rect x="825.6" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="828.6" y="302.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (13 samples, 0.03%)</title><rect x="825.6" y="275.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="828.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (13 samples, 0.03%)</title><rect x="825.9" y="307.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="828.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (13 samples, 0.03%)</title><rect x="825.9" y="291.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="828.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (13 samples, 0.03%)</title><rect x="825.9" y="275.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="828.9" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (13 samples, 0.03%)</title><rect x="825.9" y="259.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="828.9" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (22 samples, 0.05%)</title><rect x="826.3" y="307.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="829.3" y="318.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (15 samples, 0.04%)</title><rect x="826.5" y="291.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="829.5" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (13 samples, 0.03%)</title><rect x="826.6" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="829.6" y="286.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (13 samples, 0.03%)</title><rect x="826.6" y="259.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="829.6" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (10 samples, 0.02%)</title><rect x="826.9" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="829.9" y="318.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (10 samples, 0.02%)</title><rect x="826.9" y="291.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="829.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceTopology.nodeFor (36 samples, 0.09%)</title><rect x="827.4" y="387.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="830.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceTopology.nodeFor (36 samples, 0.09%)</title><rect x="827.4" y="371.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="830.4" y="382.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (14 samples, 0.03%)</title><rect x="827.4" y="355.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="830.4" y="366.0"></text>
</g>
<g>
<title>java.lang.Integer (14 samples, 0.03%)</title><rect x="827.4" y="339.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="830.4" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.isEmpty (9 samples, 0.02%)</title><rect x="827.8" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="830.8" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (9 samples, 0.02%)</title><rect x="827.8" y="339.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="830.8" y="350.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (9 samples, 0.02%)</title><rect x="827.8" y="323.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="830.8" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (13 samples, 0.03%)</title><rect x="828.1" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="831.1" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (13 samples, 0.03%)</title><rect x="828.1" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="831.1" y="350.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (13 samples, 0.03%)</title><rect x="828.1" y="323.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="831.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.wrapString (177 samples, 0.43%)</title><rect x="828.4" y="403.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="831.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.02%)</title><rect x="828.4" y="387.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="831.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.02%)</title><rect x="828.4" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="831.4" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (10 samples, 0.02%)</title><rect x="828.4" y="355.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="831.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.toBytes (167 samples, 0.41%)</title><rect x="828.7" y="387.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="831.7" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (167 samples, 0.41%)</title><rect x="828.7" y="371.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="831.7" y="382.0"></text>
</g>
<g>
<title>byte[] (167 samples, 0.41%)</title><rect x="828.7" y="355.0" width="4.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="831.7" y="366.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (12,406 samples, 30.21%)</title><rect x="833.5" y="547.0" width="356.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="836.5" y="558.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (384 samples, 0.94%)</title><rect x="833.5" y="531.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="836.5" y="542.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (384 samples, 0.94%)</title><rect x="833.5" y="515.0" width="11.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="836.5" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (12,022 samples, 29.27%)</title><rect x="844.6" y="531.0" width="345.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="847.6" y="542.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (12,022 samples, 29.27%)</title><rect x="844.6" y="515.0" width="345.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="847.6" y="526.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (12,022 samples, 29.27%)</title><rect x="844.6" y="499.0" width="345.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="847.6" y="510.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,605 samples, 6.34%)</title><rect x="844.6" y="483.0" width="74.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.6" y="494.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,605 samples, 6.34%)</title><rect x="844.6" y="467.0" width="74.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="847.6" y="478.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (1,784 samples, 4.34%)</title><rect x="844.6" y="451.0" width="51.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="847.6" y="462.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1,311 samples, 3.19%)</title><rect x="844.6" y="435.0" width="37.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="847.6" y="446.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,311 samples, 3.19%)</title><rect x="844.6" y="419.0" width="37.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="847.6" y="430.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (1,311 samples, 3.19%)</title><rect x="844.6" y="403.0" width="37.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="847.6" y="414.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,311 samples, 3.19%)</title><rect x="844.6" y="387.0" width="37.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="847.6" y="398.0">jav..</text>
</g>
<g>
<title>java.lang.String (638 samples, 1.55%)</title><rect x="844.6" y="371.0" width="18.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="847.6" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (673 samples, 1.64%)</title><rect x="862.9" y="371.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="865.9" y="382.0"></text>
</g>
<g>
<title>byte[] (673 samples, 1.64%)</title><rect x="862.9" y="355.0" width="19.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="865.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.get (473 samples, 1.15%)</title><rect x="882.2" y="435.0" width="13.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="885.2" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (182 samples, 0.44%)</title><rect x="882.2" y="419.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="885.2" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (182 samples, 0.44%)</title><rect x="882.2" y="403.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="885.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$119/1426096574.get$Lambda (182 samples, 0.44%)</title><rect x="882.2" y="387.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="885.2" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$119 (182 samples, 0.44%)</title><rect x="882.2" y="371.0" width="5.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="885.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.processRequest (291 samples, 0.71%)</title><rect x="887.5" y="419.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="890.5" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (290 samples, 0.71%)</title><rect x="887.5" y="403.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="890.5" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (290 samples, 0.71%)</title><rect x="887.5" y="387.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="890.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$97/1616607307.get$Lambda (290 samples, 0.71%)</title><rect x="887.5" y="371.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="890.5" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$97 (290 samples, 0.71%)</title><rect x="887.5" y="355.0" width="8.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="890.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (821 samples, 2.00%)</title><rect x="895.8" y="451.0" width="23.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="898.8" y="462.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (821 samples, 2.00%)</title><rect x="895.8" y="435.0" width="23.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="898.8" y="446.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (821 samples, 2.00%)</title><rect x="895.8" y="419.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="898.8" y="430.0">j..</text>
</g>
<g>
<title>java.lang.String (112 samples, 0.27%)</title><rect x="895.8" y="403.0" width="3.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="898.8" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (709 samples, 1.73%)</title><rect x="899.0" y="403.0" width="20.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="902.0" y="414.0"></text>
</g>
<g>
<title>byte[] (709 samples, 1.73%)</title><rect x="899.0" y="387.0" width="20.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="902.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5,933 samples, 14.45%)</title><rect x="919.4" y="483.0" width="170.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.4" y="494.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one.nio.http.Request (509 samples, 1.24%)</title><rect x="919.4" y="467.0" width="14.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="922.4" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,822 samples, 4.44%)</title><rect x="934.0" y="467.0" width="52.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="937.0" y="478.0">one/n..</text>
</g>
<g>
<title>java.lang.String[] (706 samples, 1.72%)</title><rect x="934.0" y="451.0" width="20.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="937.0" y="462.0"></text>
</g>
<g>
<title>java.lang.String[] (1,116 samples, 2.72%)</title><rect x="954.3" y="451.0" width="32.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="957.3" y="462.0">ja..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,602 samples, 8.77%)</title><rect x="986.4" y="467.0" width="103.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="989.4" y="478.0">one/nio/util..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,602 samples, 8.77%)</title><rect x="986.4" y="451.0" width="103.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="989.4" y="462.0">one/nio/util..</text>
</g>
<g>
<title>char[] (1,940 samples, 4.72%)</title><rect x="986.4" y="435.0" width="55.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="989.4" y="446.0">char[]</text>
</g>
<g>
<title>char[] (88 samples, 0.21%)</title><rect x="1042.1" y="435.0" width="2.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1045.1" y="446.0"></text>
</g>
<g>
<title>java.lang.String (697 samples, 1.70%)</title><rect x="1044.7" y="435.0" width="20.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1047.7" y="446.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (877 samples, 2.14%)</title><rect x="1064.7" y="435.0" width="25.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1067.7" y="446.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (877 samples, 2.14%)</title><rect x="1064.7" y="419.0" width="25.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1067.7" y="430.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (877 samples, 2.14%)</title><rect x="1064.7" y="403.0" width="25.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.7" y="414.0">j..</text>
</g>
<g>
<title>byte[] (877 samples, 2.14%)</title><rect x="1064.7" y="387.0" width="25.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1067.7" y="398.0">b..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,484 samples, 8.48%)</title><rect x="1089.9" y="483.0" width="100.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1092.9" y="494.0">one/nio/util..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,484 samples, 8.48%)</title><rect x="1089.9" y="467.0" width="100.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1092.9" y="478.0">one/nio/util..</text>
</g>
<g>
<title>char[] (1,366 samples, 3.33%)</title><rect x="1089.9" y="451.0" width="39.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1092.9" y="462.0">cha..</text>
</g>
<g>
<title>char[] (45 samples, 0.11%)</title><rect x="1129.1" y="451.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1132.1" y="462.0"></text>
</g>
<g>
<title>java.lang.String (1,498 samples, 3.65%)</title><rect x="1130.4" y="451.0" width="43.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1133.4" y="462.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (575 samples, 1.40%)</title><rect x="1173.5" y="451.0" width="16.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1176.5" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (575 samples, 1.40%)</title><rect x="1173.5" y="435.0" width="16.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1176.5" y="446.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (575 samples, 1.40%)</title><rect x="1173.5" y="419.0" width="16.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1176.5" y="430.0"></text>
</g>
<g>
<title>byte[] (575 samples, 1.40%)</title><rect x="1173.5" y="403.0" width="16.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1176.5" y="414.0"></text>
</g>
</g>
</svg>
