<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="421"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="421"> </text>
<g id="frames">
<g>
<title>all (105,349 samples, 100.00%)</title><rect x="10.0" y="387.0" width="1180.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="13.0" y="398.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (54,858 samples, 52.07%)</title><rect x="10.0" y="371.0" width="614.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="382.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (54,858 samples, 52.07%)</title><rect x="10.0" y="355.0" width="614.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="366.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (54,858 samples, 52.07%)</title><rect x="10.0" y="339.0" width="614.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="350.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (808 samples, 0.77%)</title><rect x="10.0" y="323.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (808 samples, 0.77%)</title><rect x="10.0" y="307.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (722 samples, 0.69%)</title><rect x="10.0" y="291.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (722 samples, 0.69%)</title><rect x="10.0" y="275.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (722 samples, 0.69%)</title><rect x="10.0" y="259.0" width="8.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (86 samples, 0.08%)</title><rect x="18.1" y="291.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (86 samples, 0.08%)</title><rect x="18.1" y="275.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (86 samples, 0.08%)</title><rect x="18.1" y="259.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (86 samples, 0.08%)</title><rect x="18.1" y="243.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.1" y="254.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (86 samples, 0.08%)</title><rect x="18.1" y="227.0" width="1.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="21.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$121/128391001.run (3,209 samples, 3.05%)</title><rect x="19.1" y="323.0" width="35.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.1" y="334.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$flush$10 (3,209 samples, 3.05%)</title><rect x="19.1" y="307.0" width="35.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.1" y="318.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.serialize (3,206 samples, 3.04%)</title><rect x="19.1" y="291.0" width="35.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.1" y="302.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.serialize (3,206 samples, 3.04%)</title><rect x="19.1" y="275.0" width="35.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.1" y="286.0">ru/..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (76 samples, 0.07%)</title><rect x="19.1" y="259.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.1" y="270.0"></text>
</g>
<g>
<title>java.lang.Integer (76 samples, 0.07%)</title><rect x="19.1" y="243.0" width="0.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="22.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,205 samples, 2.09%)</title><rect x="19.9" y="259.0" width="24.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.9" y="270.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,585 samples, 1.50%)</title><rect x="19.9" y="243.0" width="17.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="22.9" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (620 samples, 0.59%)</title><rect x="37.7" y="243.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.7" y="254.0"></text>
</g>
<g>
<title>byte[] (620 samples, 0.59%)</title><rect x="37.7" y="227.0" width="6.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="40.7" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (23 samples, 0.02%)</title><rect x="44.6" y="259.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.6" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (23 samples, 0.02%)</title><rect x="44.6" y="243.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="47.6" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (23 samples, 0.02%)</title><rect x="44.6" y="227.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.6" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (23 samples, 0.02%)</title><rect x="44.6" y="211.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.6" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 0.02%)</title><rect x="44.6" y="195.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.6" y="206.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (170 samples, 0.16%)</title><rect x="44.9" y="259.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.9" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (170 samples, 0.16%)</title><rect x="44.9" y="243.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.9" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (170 samples, 0.16%)</title><rect x="44.9" y="227.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.9" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (170 samples, 0.16%)</title><rect x="44.9" y="211.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.9" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$127/1084054259.getAsBoolean (170 samples, 0.16%)</title><rect x="44.9" y="195.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.9" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (170 samples, 0.16%)</title><rect x="44.9" y="179.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (170 samples, 0.16%)</title><rect x="44.9" y="163.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.9" y="174.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (170 samples, 0.16%)</title><rect x="44.9" y="147.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable$$Lambda$123/1582414916.apply (170 samples, 0.16%)</title><rect x="44.9" y="131.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.lambda$iterator$0 (170 samples, 0.16%)</title><rect x="44.9" y="115.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.9" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (170 samples, 0.16%)</title><rect x="44.9" y="99.0" width="1.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="47.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (313 samples, 0.30%)</title><rect x="46.8" y="259.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.8" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (313 samples, 0.30%)</title><rect x="46.8" y="243.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="49.8" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (313 samples, 0.30%)</title><rect x="46.8" y="227.0" width="3.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="49.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (418 samples, 0.40%)</title><rect x="50.3" y="259.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (418 samples, 0.40%)</title><rect x="50.3" y="243.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.3" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (418 samples, 0.40%)</title><rect x="50.3" y="227.0" width="4.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="53.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$102/1149186326.run (50,841 samples, 48.26%)</title><rect x="55.0" y="323.0" width="569.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.0" y="334.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$102/1149186326.run</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$4 (50,841 samples, 48.26%)</title><rect x="55.0" y="307.0" width="569.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.0" y="318.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$4</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.process (50,841 samples, 48.26%)</title><rect x="55.0" y="291.0" width="569.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.0" y="302.0">ru/mail/polis/service/zvladn7/AsyncService.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1285672771.process (50,841 samples, 48.26%)</title><rect x="55.0" y="275.0" width="569.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.0" y="286.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1285672771.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$upsert$3 (50,841 samples, 48.26%)</title><rect x="55.0" y="259.0" width="569.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="58.0" y="270.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$upsert$3</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.handleUpsert (50,841 samples, 48.26%)</title><rect x="55.0" y="243.0" width="569.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="58.0" y="254.0">ru/mail/polis/service/zvladn7/ServiceHelper.handleUpsert</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.handleOrProxy (42,816 samples, 40.64%)</title><rect x="55.0" y="227.0" width="479.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.0" y="238.0">ru/mail/polis/service/zvladn7/ServiceHelper.handleOrProxy</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$110/1670436682.process (33,884 samples, 32.16%)</title><rect x="55.0" y="211.0" width="379.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="58.0" y="222.0">ru/mail/polis/service/zvladn7/ServiceHelper$$Lambda$..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.lambda$handleUpsert$2 (33,884 samples, 32.16%)</title><rect x="55.0" y="195.0" width="379.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.0" y="206.0">ru/mail/polis/service/zvladn7/ServiceHelper.lambda$h..</text>
</g>
<g>
<title>one.nio.http.Response (1,632 samples, 1.55%)</title><rect x="55.0" y="179.0" width="18.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="58.0" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9,010 samples, 8.55%)</title><rect x="73.3" y="179.0" width="100.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.3" y="190.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9,010 samples, 8.55%)</title><rect x="73.3" y="163.0" width="100.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="76.3" y="174.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6,222 samples, 5.91%)</title><rect x="73.3" y="147.0" width="69.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="76.3" y="158.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (6,222 samples, 5.91%)</title><rect x="73.3" y="131.0" width="69.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.3" y="142.0">one/nio..</text>
</g>
<g>
<title>byte[] (5,759 samples, 5.47%)</title><rect x="73.3" y="115.0" width="64.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="76.3" y="126.0">byte[]</text>
</g>
<g>
<title>byte[] (463 samples, 0.44%)</title><rect x="137.8" y="115.0" width="5.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="140.8" y="126.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2,788 samples, 2.65%)</title><rect x="143.0" y="147.0" width="31.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.0" y="158.0">on..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (2,788 samples, 2.65%)</title><rect x="143.0" y="131.0" width="31.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="146.0" y="142.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6,715 samples, 6.37%)</title><rect x="174.2" y="179.0" width="75.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.2" y="190.0">one/nio/..</text>
</g>
<g>
<title>byte[] (2,798 samples, 2.66%)</title><rect x="174.2" y="163.0" width="31.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="177.2" y="174.0">by..</text>
</g>
<g>
<title>java.lang.String[] (2,283 samples, 2.17%)</title><rect x="205.5" y="163.0" width="25.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="208.5" y="174.0">j..</text>
</g>
<g>
<title>java.lang.String (1,634 samples, 1.55%)</title><rect x="231.1" y="163.0" width="18.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="234.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.upsert (13,175 samples, 12.51%)</title><rect x="249.4" y="179.0" width="147.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.4" y="190.0">ru/mail/polis/dao/z..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,727 samples, 1.64%)</title><rect x="249.4" y="163.0" width="19.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.4" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,727 samples, 1.64%)</title><rect x="249.4" y="147.0" width="19.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$115/1616646336.get$Lambda (1,727 samples, 1.64%)</title><rect x="249.4" y="131.0" width="19.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.4" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$115 (1,727 samples, 1.64%)</title><rect x="249.4" y="115.0" width="19.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="252.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.execute (11,448 samples, 10.87%)</title><rect x="268.8" y="163.0" width="128.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.8" y="174.0">ru/mail/polis/da..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (395 samples, 0.37%)</title><rect x="268.8" y="147.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (395 samples, 0.37%)</title><rect x="268.8" y="131.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="271.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (395 samples, 0.37%)</title><rect x="268.8" y="115.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.8" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (305 samples, 0.29%)</title><rect x="268.8" y="99.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.8" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (305 samples, 0.29%)</title><rect x="268.8" y="83.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.8" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (177 samples, 0.17%)</title><rect x="268.8" y="67.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.8" y="78.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (177 samples, 0.17%)</title><rect x="268.8" y="51.0" width="1.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="271.8" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (128 samples, 0.12%)</title><rect x="270.7" y="67.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="273.7" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (128 samples, 0.12%)</title><rect x="270.7" y="51.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.7" y="62.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (128 samples, 0.12%)</title><rect x="270.7" y="35.0" width="1.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="273.7" y="46.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (77 samples, 0.07%)</title><rect x="272.2" y="99.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="275.2" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (77 samples, 0.07%)</title><rect x="272.2" y="83.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.2" y="94.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (77 samples, 0.07%)</title><rect x="272.2" y="67.0" width="0.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="275.2" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$115/1616646336.run (11,053 samples, 10.49%)</title><rect x="273.2" y="147.0" width="123.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.2" y="158.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$upsert$5 (11,053 samples, 10.49%)</title><rect x="273.2" y="131.0" width="123.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="276.2" y="142.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.upsert (11,053 samples, 10.49%)</title><rect x="273.2" y="115.0" width="123.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.2" y="126.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6,363 samples, 6.04%)</title><rect x="273.2" y="99.0" width="71.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.2" y="110.0">java/nio..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,363 samples, 6.04%)</title><rect x="273.2" y="83.0" width="71.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="276.2" y="94.0">java.nio..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (587 samples, 0.56%)</title><rect x="344.4" y="99.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="347.4" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (587 samples, 0.56%)</title><rect x="344.4" y="83.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.4" y="94.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Index (209 samples, 0.20%)</title><rect x="344.4" y="67.0" width="2.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="347.4" y="78.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Node (378 samples, 0.36%)</title><rect x="346.8" y="67.0" width="4.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="349.8" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (1,636 samples, 1.55%)</title><rect x="351.0" y="99.0" width="18.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="354.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (2,467 samples, 2.34%)</title><rect x="369.3" y="99.0" width="27.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.3" y="110.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2,467 samples, 2.34%)</title><rect x="369.3" y="83.0" width="27.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.3" y="94.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2,467 samples, 2.34%)</title><rect x="369.3" y="67.0" width="27.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="372.3" y="78.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.wrapArray (3,352 samples, 3.18%)</title><rect x="397.0" y="179.0" width="37.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="400.0" y="190.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,352 samples, 3.18%)</title><rect x="397.0" y="163.0" width="37.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="400.0" y="174.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,352 samples, 3.18%)</title><rect x="397.0" y="147.0" width="37.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.0" y="158.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,352 samples, 3.18%)</title><rect x="397.0" y="131.0" width="37.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="400.0" y="142.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceTopology.nodeFor (8,932 samples, 8.48%)</title><rect x="434.5" y="211.0" width="100.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.5" y="222.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceTopology.nodeFor (8,932 samples, 8.48%)</title><rect x="434.5" y="195.0" width="100.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="437.5" y="206.0">ru/mail/poli..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (3,350 samples, 3.18%)</title><rect x="434.5" y="179.0" width="37.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="437.5" y="190.0">jav..</text>
</g>
<g>
<title>java.lang.Integer (3,350 samples, 3.18%)</title><rect x="434.5" y="163.0" width="37.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="437.5" y="174.0">jav..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.isEmpty (2,270 samples, 2.15%)</title><rect x="472.0" y="179.0" width="25.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="475.0" y="190.0">j..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (2,270 samples, 2.15%)</title><rect x="472.0" y="163.0" width="25.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.0" y="174.0">j..</text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (2,270 samples, 2.15%)</title><rect x="472.0" y="147.0" width="25.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="475.0" y="158.0">j..</text>
</g>
<g>
<title>java/util/TreeMap.tailMap (3,312 samples, 3.14%)</title><rect x="497.5" y="179.0" width="37.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="500.5" y="190.0">jav..</text>
</g>
<g>
<title>java/util/TreeMap.tailMap (3,312 samples, 3.14%)</title><rect x="497.5" y="163.0" width="37.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="500.5" y="174.0">jav..</text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (3,312 samples, 3.14%)</title><rect x="497.5" y="147.0" width="37.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="500.5" y="158.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.wrapString (8,025 samples, 7.62%)</title><rect x="534.6" y="227.0" width="89.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.6" y="238.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,211 samples, 3.05%)</title><rect x="534.6" y="211.0" width="35.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="537.6" y="222.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,211 samples, 3.05%)</title><rect x="534.6" y="195.0" width="35.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.6" y="206.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,211 samples, 3.05%)</title><rect x="534.6" y="179.0" width="35.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="537.6" y="190.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/ServiceHelper.toBytes (4,814 samples, 4.57%)</title><rect x="570.5" y="211.0" width="54.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="573.5" y="222.0">ru/ma..</text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (4,814 samples, 4.57%)</title><rect x="570.5" y="195.0" width="54.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="573.5" y="206.0">one/n..</text>
</g>
<g>
<title>byte[] (4,810 samples, 4.57%)</title><rect x="570.5" y="179.0" width="53.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="573.5" y="190.0">byte[]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (50,491 samples, 47.93%)</title><rect x="624.5" y="371.0" width="565.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="627.5" y="382.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,234 samples, 1.17%)</title><rect x="624.5" y="355.0" width="13.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="627.5" y="366.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,234 samples, 1.17%)</title><rect x="624.5" y="339.0" width="13.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="627.5" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (49,257 samples, 46.76%)</title><rect x="638.3" y="355.0" width="551.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.3" y="366.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (49,257 samples, 46.76%)</title><rect x="638.3" y="339.0" width="551.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="641.3" y="350.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (49,257 samples, 46.76%)</title><rect x="638.3" y="323.0" width="551.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="641.3" y="334.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (10,085 samples, 9.57%)</title><rect x="638.3" y="307.0" width="112.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="641.3" y="318.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (10,085 samples, 9.57%)</title><rect x="638.3" y="291.0" width="112.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="641.3" y="302.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (7,139 samples, 6.78%)</title><rect x="638.3" y="275.0" width="79.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.3" y="286.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (4,364 samples, 4.14%)</title><rect x="638.3" y="259.0" width="48.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.3" y="270.0">one/..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4,364 samples, 4.14%)</title><rect x="638.3" y="243.0" width="48.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.3" y="254.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (4,364 samples, 4.14%)</title><rect x="638.3" y="227.0" width="48.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="641.3" y="238.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,364 samples, 4.14%)</title><rect x="638.3" y="211.0" width="48.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="641.3" y="222.0">java..</text>
</g>
<g>
<title>java.lang.String (1,316 samples, 1.25%)</title><rect x="638.3" y="195.0" width="14.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="641.3" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,048 samples, 2.89%)</title><rect x="653.0" y="195.0" width="34.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="656.0" y="206.0">ja..</text>
</g>
<g>
<title>byte[] (3,048 samples, 2.89%)</title><rect x="653.0" y="179.0" width="34.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="656.0" y="190.0">by..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.upsert (2,775 samples, 2.63%)</title><rect x="687.2" y="259.0" width="31.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="690.2" y="270.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,853 samples, 1.76%)</title><rect x="687.2" y="243.0" width="20.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.2" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,853 samples, 1.76%)</title><rect x="687.2" y="227.0" width="20.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="690.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$94/1285672771.get$Lambda (1,853 samples, 1.76%)</title><rect x="687.2" y="211.0" width="20.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.2" y="222.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$94 (1,853 samples, 1.76%)</title><rect x="687.2" y="195.0" width="20.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="690.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.processRequest (922 samples, 0.88%)</title><rect x="707.9" y="243.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.9" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (875 samples, 0.83%)</title><rect x="707.9" y="227.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.9" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (875 samples, 0.83%)</title><rect x="707.9" y="211.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="710.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$102/1149186326.get$Lambda (875 samples, 0.83%)</title><rect x="707.9" y="195.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="710.9" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$102 (875 samples, 0.83%)</title><rect x="707.9" y="179.0" width="9.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="710.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (47 samples, 0.04%)</title><rect x="717.7" y="227.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="720.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (47 samples, 0.04%)</title><rect x="717.7" y="211.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="720.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (47 samples, 0.04%)</title><rect x="717.7" y="195.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="720.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (47 samples, 0.04%)</title><rect x="717.7" y="179.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="720.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (47 samples, 0.04%)</title><rect x="717.7" y="163.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="720.7" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (47 samples, 0.04%)</title><rect x="717.7" y="147.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="720.7" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2,946 samples, 2.80%)</title><rect x="718.2" y="275.0" width="33.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="721.2" y="286.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (2,946 samples, 2.80%)</title><rect x="718.2" y="259.0" width="33.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="721.2" y="270.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,946 samples, 2.80%)</title><rect x="718.2" y="243.0" width="33.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="721.2" y="254.0">ja..</text>
</g>
<g>
<title>java.lang.String (1,264 samples, 1.20%)</title><rect x="718.2" y="227.0" width="14.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="721.2" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,682 samples, 1.60%)</title><rect x="732.4" y="227.0" width="18.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="735.4" y="238.0"></text>
</g>
<g>
<title>byte[] (1,682 samples, 1.60%)</title><rect x="732.4" y="211.0" width="18.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="735.4" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (20,162 samples, 19.14%)</title><rect x="751.2" y="307.0" width="225.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="754.2" y="318.0">one/nio/http/HttpSession.parse..</text>
</g>
<g>
<title>one.nio.http.Request (2,709 samples, 2.57%)</title><rect x="751.2" y="291.0" width="30.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="754.2" y="302.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4,273 samples, 4.06%)</title><rect x="781.6" y="291.0" width="47.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="784.6" y="302.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (4,215 samples, 4.00%)</title><rect x="781.6" y="275.0" width="47.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="784.6" y="286.0">java..</text>
</g>
<g>
<title>java.lang.String[] (58 samples, 0.06%)</title><rect x="828.8" y="275.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="831.8" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13,180 samples, 12.51%)</title><rect x="829.4" y="291.0" width="147.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="832.4" y="302.0">one/nio/util/Utf8.r..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (13,180 samples, 12.51%)</title><rect x="829.4" y="275.0" width="147.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="832.4" y="286.0">one/nio/util/Utf8.r..</text>
</g>
<g>
<title>char[] (7,651 samples, 7.26%)</title><rect x="829.4" y="259.0" width="85.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="832.4" y="270.0">char[]</text>
</g>
<g>
<title>char[] (511 samples, 0.49%)</title><rect x="915.1" y="259.0" width="5.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="918.1" y="270.0"></text>
</g>
<g>
<title>java.lang.String (1,176 samples, 1.12%)</title><rect x="920.9" y="259.0" width="13.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="923.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,842 samples, 3.65%)</title><rect x="934.0" y="259.0" width="43.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="937.0" y="270.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,842 samples, 3.65%)</title><rect x="934.0" y="243.0" width="43.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="937.0" y="254.0">java..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3,842 samples, 3.65%)</title><rect x="934.0" y="227.0" width="43.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="937.0" y="238.0">java..</text>
</g>
<g>
<title>byte[] (3,842 samples, 3.65%)</title><rect x="934.0" y="211.0" width="43.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="937.0" y="222.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3,272 samples, 3.11%)</title><rect x="977.1" y="307.0" width="36.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="980.1" y="318.0">one..</text>
</g>
<g>
<title>byte[] (3,272 samples, 3.11%)</title><rect x="977.1" y="291.0" width="36.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="980.1" y="302.0">byt..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2,649 samples, 2.51%)</title><rect x="1013.7" y="307.0" width="29.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1016.7" y="318.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (2,649 samples, 2.51%)</title><rect x="1013.7" y="291.0" width="29.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1016.7" y="302.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,649 samples, 2.51%)</title><rect x="1013.7" y="275.0" width="29.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1016.7" y="286.0">ja..</text>
</g>
<g>
<title>java.lang.String (1,259 samples, 1.20%)</title><rect x="1013.7" y="259.0" width="14.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1016.7" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,390 samples, 1.32%)</title><rect x="1027.8" y="259.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1030.8" y="270.0"></text>
</g>
<g>
<title>byte[] (1,390 samples, 1.32%)</title><rect x="1027.8" y="243.0" width="15.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1030.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13,089 samples, 12.42%)</title><rect x="1043.4" y="307.0" width="146.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1046.4" y="318.0">one/nio/util/Utf8...</text>
</g>
<g>
<title>one/nio/util/Utf8.read (13,089 samples, 12.42%)</title><rect x="1043.4" y="291.0" width="146.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1046.4" y="302.0">one/nio/util/Utf8...</text>
</g>
<g>
<title>char[] (6,084 samples, 5.78%)</title><rect x="1043.4" y="275.0" width="68.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1046.4" y="286.0">char[]</text>
</g>
<g>
<title>java.lang.String (2,743 samples, 2.60%)</title><rect x="1111.5" y="275.0" width="30.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1114.5" y="286.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,262 samples, 4.05%)</title><rect x="1142.3" y="275.0" width="47.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1145.3" y="286.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,262 samples, 4.05%)</title><rect x="1142.3" y="259.0" width="47.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1145.3" y="270.0">java..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4,262 samples, 4.05%)</title><rect x="1142.3" y="243.0" width="47.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1145.3" y="254.0">java..</text>
</g>
<g>
<title>byte[] (4,262 samples, 4.05%)</title><rect x="1142.3" y="227.0" width="47.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1145.3" y="238.0">byte[]</text>
</g>
</g>
</svg>
