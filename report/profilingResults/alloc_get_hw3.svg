<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="565"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="565"> </text>
<g id="frames">
<g>
<title>all (40,707 samples, 100.00%)</title><rect x="10.0" y="531.0" width="1180.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.0" y="542.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (25,792 samples, 63.36%)</title><rect x="10.0" y="515.0" width="747.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="526.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (25,792 samples, 63.36%)</title><rect x="10.0" y="499.0" width="747.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="510.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (25,792 samples, 63.36%)</title><rect x="10.0" y="483.0" width="747.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="494.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (23 samples, 0.06%)</title><rect x="10.0" y="467.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (23 samples, 0.06%)</title><rect x="10.0" y="451.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (23 samples, 0.06%)</title><rect x="10.0" y="435.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (23 samples, 0.06%)</title><rect x="10.0" y="419.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (23 samples, 0.06%)</title><rect x="10.0" y="403.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$98/1964456450.run (25,769 samples, 63.30%)</title><rect x="10.7" y="467.0" width="746.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.7" y="478.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$98/1964456450.run</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$7 (25,769 samples, 63.30%)</title><rect x="10.7" y="451.0" width="746.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.7" y="462.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$7</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.process (25,769 samples, 63.30%)</title><rect x="10.7" y="435.0" width="746.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.7" y="446.0">ru/mail/polis/service/zvladn7/AsyncService.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$117/903716948.process (25,769 samples, 63.30%)</title><rect x="10.7" y="419.0" width="746.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.7" y="430.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$117/903716948.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$get$3 (25,769 samples, 63.30%)</title><rect x="10.7" y="403.0" width="746.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.7" y="414.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$get$3</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.handleGet (25,769 samples, 63.30%)</title><rect x="10.7" y="387.0" width="746.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.7" y="398.0">ru/mail/polis/service/zvladn7/AsyncService.handleGet</text>
</g>
<g>
<title>com/google/common/cache/LocalCache$LocalManualCache.getIfPresent (30 samples, 0.07%)</title><rect x="10.7" y="371.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.7" y="382.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache.getIfPresent (30 samples, 0.07%)</title><rect x="10.7" y="355.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.7" y="366.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.get (30 samples, 0.07%)</title><rect x="10.7" y="339.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.7" y="350.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.recordRead (30 samples, 0.07%)</title><rect x="10.7" y="323.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (30 samples, 0.07%)</title><rect x="10.7" y="307.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (30 samples, 0.07%)</title><rect x="10.7" y="291.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.7" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentLinkedQueue$Node (30 samples, 0.07%)</title><rect x="10.7" y="275.0" width="0.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="13.7" y="286.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$LocalManualCache.put (37 samples, 0.09%)</title><rect x="11.5" y="371.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.5" y="382.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache.put (37 samples, 0.09%)</title><rect x="11.5" y="355.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.5" y="366.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.put (37 samples, 0.09%)</title><rect x="11.5" y="339.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.5" y="350.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.evictEntries (9 samples, 0.02%)</title><rect x="11.7" y="323.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="14.7" y="334.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.removeEntry (9 samples, 0.02%)</title><rect x="11.7" y="307.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.7" y="318.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.removeValueFromChain (9 samples, 0.02%)</title><rect x="11.7" y="291.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.7" y="302.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.postWriteCleanup (19 samples, 0.05%)</title><rect x="12.0" y="323.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.0" y="334.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache$Segment.runUnlockedCleanup (19 samples, 0.05%)</title><rect x="12.0" y="307.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.0" y="318.0"></text>
</g>
<g>
<title>com/google/common/cache/LocalCache.processPendingNotifications (19 samples, 0.05%)</title><rect x="12.0" y="291.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$82/1325124186.onRemoval (19 samples, 0.05%)</title><rect x="12.0" y="275.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$new$0 (19 samples, 0.05%)</title><rect x="12.0" y="259.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.0" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (19 samples, 0.05%)</title><rect x="12.0" y="243.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.0" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1632492873.invoke (19 samples, 0.05%)</title><rect x="12.0" y="227.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.0" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (19 samples, 0.05%)</title><rect x="12.0" y="211.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.0" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (19 samples, 0.05%)</title><rect x="12.0" y="195.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.0" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (19 samples, 0.05%)</title><rect x="12.0" y="179.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="15.0" y="190.0"></text>
</g>
<g>
<title>byte[] (19 samples, 0.05%)</title><rect x="12.0" y="163.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="15.0" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (56 samples, 0.14%)</title><rect x="12.6" y="371.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (56 samples, 0.14%)</title><rect x="12.6" y="355.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (41 samples, 0.10%)</title><rect x="12.6" y="339.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.6" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (41 samples, 0.10%)</title><rect x="12.6" y="323.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.6" y="334.0"></text>
</g>
<g>
<title>byte[] (41 samples, 0.10%)</title><rect x="12.6" y="307.0" width="1.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="15.6" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 0.04%)</title><rect x="13.8" y="339.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.8" y="350.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (15 samples, 0.04%)</title><rect x="13.8" y="323.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="16.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (40 samples, 0.10%)</title><rect x="14.2" y="371.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.2" y="382.0"></text>
</g>
<g>
<title>one.nio.http.Response (10 samples, 0.02%)</title><rect x="14.2" y="355.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="17.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (30 samples, 0.07%)</title><rect x="14.5" y="355.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.5" y="366.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.03%)</title><rect x="14.5" y="339.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="17.5" y="350.0"></text>
</g>
<g>
<title>java.lang.String (12 samples, 0.03%)</title><rect x="15.0" y="339.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="18.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (25,479 samples, 62.59%)</title><rect x="15.4" y="371.0" width="738.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.4" y="382.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (827 samples, 2.03%)</title><rect x="15.4" y="355.0" width="24.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.4" y="366.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (827 samples, 2.03%)</title><rect x="15.4" y="339.0" width="24.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.4" y="350.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (827 samples, 2.03%)</title><rect x="15.4" y="323.0" width="24.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.4" y="334.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (827 samples, 2.03%)</title><rect x="15.4" y="307.0" width="24.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.4" y="318.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (827 samples, 2.03%)</title><rect x="15.4" y="291.0" width="24.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.4" y="302.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (783 samples, 1.92%)</title><rect x="15.4" y="275.0" width="22.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.4" y="286.0">c..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (293 samples, 0.72%)</title><rect x="15.4" y="259.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.4" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (293 samples, 0.72%)</title><rect x="15.4" y="243.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.4" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (293 samples, 0.72%)</title><rect x="15.4" y="227.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (293 samples, 0.72%)</title><rect x="15.4" y="211.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.4" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (293 samples, 0.72%)</title><rect x="15.4" y="195.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.4" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$116/526397265.compare (293 samples, 0.72%)</title><rect x="15.4" y="179.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.4" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (293 samples, 0.72%)</title><rect x="15.4" y="163.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.4" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (293 samples, 0.72%)</title><rect x="15.4" y="147.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (293 samples, 0.72%)</title><rect x="15.4" y="131.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$114/2068568520.apply (293 samples, 0.72%)</title><rect x="15.4" y="115.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (293 samples, 0.72%)</title><rect x="15.4" y="99.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="18.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (293 samples, 0.72%)</title><rect x="15.4" y="83.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (293 samples, 0.72%)</title><rect x="15.4" y="67.0" width="8.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="18.4" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (490 samples, 1.20%)</title><rect x="23.9" y="259.0" width="14.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.9" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (490 samples, 1.20%)</title><rect x="23.9" y="243.0" width="14.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.9" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (490 samples, 1.20%)</title><rect x="23.9" y="227.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.9" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (490 samples, 1.20%)</title><rect x="23.9" y="211.0" width="14.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.9" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (490 samples, 1.20%)</title><rect x="23.9" y="195.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.9" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (490 samples, 1.20%)</title><rect x="23.9" y="179.0" width="14.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.9" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (295 samples, 0.72%)</title><rect x="23.9" y="163.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (295 samples, 0.72%)</title><rect x="23.9" y="147.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (295 samples, 0.72%)</title><rect x="23.9" y="131.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (295 samples, 0.72%)</title><rect x="23.9" y="115.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.9" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (120 samples, 0.29%)</title><rect x="23.9" y="99.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.9" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (78 samples, 0.19%)</title><rect x="23.9" y="83.0" width="2.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="26.9" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (42 samples, 0.10%)</title><rect x="26.1" y="83.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.1" y="94.0"></text>
</g>
<g>
<title>byte[] (42 samples, 0.10%)</title><rect x="26.1" y="67.0" width="1.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="29.1" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (16 samples, 0.04%)</title><rect x="27.4" y="99.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="30.4" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (12 samples, 0.03%)</title><rect x="27.8" y="99.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="30.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (114 samples, 0.28%)</title><rect x="28.2" y="99.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.2" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (73 samples, 0.18%)</title><rect x="28.2" y="83.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (51 samples, 0.13%)</title><rect x="28.2" y="67.0" width="1.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="31.2" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (22 samples, 0.05%)</title><rect x="29.7" y="67.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.7" y="78.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.05%)</title><rect x="29.7" y="51.0" width="0.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="32.7" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (41 samples, 0.10%)</title><rect x="30.3" y="83.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.3" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (41 samples, 0.10%)</title><rect x="30.3" y="67.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.3" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (31 samples, 0.08%)</title><rect x="30.3" y="51.0" width="0.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="33.3" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.02%)</title><rect x="31.2" y="51.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.2" y="62.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.02%)</title><rect x="31.2" y="35.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="34.2" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (33 samples, 0.08%)</title><rect x="31.5" y="99.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.5" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (33 samples, 0.08%)</title><rect x="31.5" y="83.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="34.5" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (23 samples, 0.06%)</title><rect x="31.5" y="67.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="34.5" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.02%)</title><rect x="32.1" y="67.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.1" y="78.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.02%)</title><rect x="32.1" y="51.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="35.1" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$116/526397265.compare (195 samples, 0.48%)</title><rect x="32.4" y="163.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.4" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (195 samples, 0.48%)</title><rect x="32.4" y="147.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (195 samples, 0.48%)</title><rect x="32.4" y="131.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.4" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (195 samples, 0.48%)</title><rect x="32.4" y="115.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="35.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$114/2068568520.apply (195 samples, 0.48%)</title><rect x="32.4" y="99.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="35.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (195 samples, 0.48%)</title><rect x="32.4" y="83.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.4" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (195 samples, 0.48%)</title><rect x="32.4" y="67.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.4" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (195 samples, 0.48%)</title><rect x="32.4" y="51.0" width="5.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="35.4" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$127/1828436960.apply (44 samples, 0.11%)</title><rect x="38.1" y="275.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="41.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (44 samples, 0.11%)</title><rect x="38.1" y="259.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="41.1" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (44 samples, 0.11%)</title><rect x="38.1" y="243.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.1" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (44 samples, 0.11%)</title><rect x="38.1" y="227.0" width="1.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="41.1" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (18 samples, 0.04%)</title><rect x="39.4" y="355.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.4" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (18 samples, 0.04%)</title><rect x="39.4" y="339.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$133/1045325465.apply (18 samples, 0.04%)</title><rect x="39.4" y="323.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$iterator$4 (18 samples, 0.04%)</title><rect x="39.4" y="307.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (13 samples, 0.03%)</title><rect x="39.5" y="291.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.5" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (13 samples, 0.03%)</title><rect x="39.5" y="275.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.5" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (13 samples, 0.03%)</title><rect x="39.5" y="259.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="42.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (9 samples, 0.02%)</title><rect x="39.9" y="355.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (9 samples, 0.02%)</title><rect x="39.9" y="339.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (9 samples, 0.02%)</title><rect x="39.9" y="323.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.9" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (9 samples, 0.02%)</title><rect x="39.9" y="307.0" width="0.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="42.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (12 samples, 0.03%)</title><rect x="40.1" y="355.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="43.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (12 samples, 0.03%)</title><rect x="40.1" y="339.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (12 samples, 0.03%)</title><rect x="40.1" y="323.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="43.1" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (12 samples, 0.03%)</title><rect x="40.1" y="307.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="43.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator (24,613 samples, 60.46%)</title><rect x="40.5" y="355.0" width="713.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.5" y="366.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (10 samples, 0.02%)</title><rect x="40.5" y="339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.5" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (10 samples, 0.02%)</title><rect x="40.5" y="323.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="43.5" y="334.0"></text>
</g>
<g>
<title>java.util.ArrayList (9 samples, 0.02%)</title><rect x="41.0" y="339.0" width="0.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="44.0" y="350.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (12 samples, 0.03%)</title><rect x="41.2" y="339.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (12 samples, 0.03%)</title><rect x="41.2" y="323.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.2" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (12 samples, 0.03%)</title><rect x="41.2" y="307.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="44.2" y="318.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (12 samples, 0.03%)</title><rect x="41.2" y="291.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="44.2" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (28 samples, 0.07%)</title><rect x="41.7" y="339.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.7" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (28 samples, 0.07%)</title><rect x="41.7" y="323.0" width="0.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="44.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator (24,486 samples, 60.15%)</title><rect x="42.5" y="339.0" width="709.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.5" y="350.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (5,023 samples, 12.34%)</title><rect x="42.5" y="323.0" width="145.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.5" y="334.0">com/google/common/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (5,020 samples, 12.33%)</title><rect x="42.6" y="307.0" width="145.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.6" y="318.0">com/google/common/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (134 samples, 0.33%)</title><rect x="42.8" y="291.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.8" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (134 samples, 0.33%)</title><rect x="42.8" y="275.0" width="3.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="45.8" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (4,816 samples, 11.83%)</title><rect x="47.0" y="291.0" width="139.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.0" y="302.0">java/util/Priorit..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (4,816 samples, 11.83%)</title><rect x="47.0" y="275.0" width="139.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.0" y="286.0">java/util/Priorit..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (62 samples, 0.15%)</title><rect x="47.0" y="259.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.0" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (62 samples, 0.15%)</title><rect x="47.0" y="243.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.0" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (62 samples, 0.15%)</title><rect x="47.0" y="227.0" width="1.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="50.0" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (4,754 samples, 11.68%)</title><rect x="48.8" y="259.0" width="137.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="51.8" y="270.0">java/util/Priorit..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (4,754 samples, 11.68%)</title><rect x="48.8" y="243.0" width="137.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.8" y="254.0">java/util/Priorit..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4,754 samples, 11.68%)</title><rect x="48.8" y="227.0" width="137.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.8" y="238.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4,754 samples, 11.68%)</title><rect x="48.8" y="211.0" width="137.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.8" y="222.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3,254 samples, 7.99%)</title><rect x="48.8" y="195.0" width="94.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.8" y="206.0">com/google/..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (3,254 samples, 7.99%)</title><rect x="48.8" y="179.0" width="94.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.8" y="190.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (3,254 samples, 7.99%)</title><rect x="48.8" y="163.0" width="94.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.8" y="174.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (3,254 samples, 7.99%)</title><rect x="48.8" y="147.0" width="94.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.8" y="158.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,329 samples, 3.26%)</title><rect x="48.8" y="131.0" width="38.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.8" y="142.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (750 samples, 1.84%)</title><rect x="48.8" y="115.0" width="21.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="51.8" y="126.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (579 samples, 1.42%)</title><rect x="70.5" y="115.0" width="16.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="73.5" y="126.0"></text>
</g>
<g>
<title>byte[] (579 samples, 1.42%)</title><rect x="70.5" y="99.0" width="16.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="73.5" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (127 samples, 0.31%)</title><rect x="87.3" y="131.0" width="3.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="90.3" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (117 samples, 0.29%)</title><rect x="91.0" y="131.0" width="3.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="94.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (1,312 samples, 3.22%)</title><rect x="94.4" y="131.0" width="38.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.4" y="142.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (936 samples, 2.30%)</title><rect x="94.4" y="115.0" width="27.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.4" y="126.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (477 samples, 1.17%)</title><rect x="94.4" y="99.0" width="13.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="97.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (459 samples, 1.13%)</title><rect x="108.2" y="99.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.2" y="110.0"></text>
</g>
<g>
<title>byte[] (459 samples, 1.13%)</title><rect x="108.2" y="83.0" width="13.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="111.2" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (376 samples, 0.92%)</title><rect x="121.5" y="115.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.5" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (376 samples, 0.92%)</title><rect x="121.5" y="99.0" width="10.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.5" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (242 samples, 0.59%)</title><rect x="121.5" y="83.0" width="7.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="124.5" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (134 samples, 0.33%)</title><rect x="128.5" y="83.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="131.5" y="94.0"></text>
</g>
<g>
<title>byte[] (134 samples, 0.33%)</title><rect x="128.5" y="67.0" width="3.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="131.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (369 samples, 0.91%)</title><rect x="132.4" y="131.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="135.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (369 samples, 0.91%)</title><rect x="132.4" y="115.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.4" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (246 samples, 0.60%)</title><rect x="132.4" y="99.0" width="7.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="135.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (123 samples, 0.30%)</title><rect x="139.5" y="99.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.5" y="110.0"></text>
</g>
<g>
<title>byte[] (123 samples, 0.30%)</title><rect x="139.5" y="83.0" width="3.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="142.5" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$116/526397265.compare (1,500 samples, 3.68%)</title><rect x="143.1" y="195.0" width="43.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.1" y="206.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,500 samples, 3.68%)</title><rect x="143.1" y="179.0" width="43.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.1" y="190.0">java..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (1,500 samples, 3.68%)</title><rect x="143.1" y="163.0" width="43.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="146.1" y="174.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,500 samples, 3.68%)</title><rect x="143.1" y="147.0" width="43.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="146.1" y="158.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$114/2068568520.apply (1,500 samples, 3.68%)</title><rect x="143.1" y="131.0" width="43.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.1" y="142.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (1,500 samples, 3.68%)</title><rect x="143.1" y="115.0" width="43.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.1" y="126.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,500 samples, 3.68%)</title><rect x="143.1" y="99.0" width="43.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.1" y="110.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,500 samples, 3.68%)</title><rect x="143.1" y="83.0" width="43.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="146.1" y="94.0">java..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (53 samples, 0.13%)</title><rect x="186.6" y="291.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.6" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (53 samples, 0.13%)</title><rect x="186.6" y="275.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.6" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (53 samples, 0.13%)</title><rect x="186.6" y="259.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.6" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (11 samples, 0.03%)</title><rect x="186.6" y="243.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.6" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$112/834509371.getAsBoolean (11 samples, 0.03%)</title><rect x="186.6" y="227.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.6" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (11 samples, 0.03%)</title><rect x="186.6" y="211.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="189.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (11 samples, 0.03%)</title><rect x="186.6" y="195.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.6" y="206.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (11 samples, 0.03%)</title><rect x="186.6" y="179.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable$$Lambda$108/1961318894.apply (11 samples, 0.03%)</title><rect x="186.6" y="163.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="189.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.lambda$iterator$0 (11 samples, 0.03%)</title><rect x="186.6" y="147.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.6" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (11 samples, 0.03%)</title><rect x="186.6" y="131.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="189.6" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (42 samples, 0.10%)</title><rect x="186.9" y="243.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="189.9" y="254.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (14 samples, 0.03%)</title><rect x="186.9" y="227.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="189.9" y="238.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (16 samples, 0.04%)</title><rect x="187.6" y="227.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.6" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (16 samples, 0.04%)</title><rect x="187.6" y="211.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="190.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (383 samples, 0.94%)</title><rect x="188.1" y="323.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (381 samples, 0.94%)</title><rect x="188.2" y="307.0" width="11.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.2" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (381 samples, 0.94%)</title><rect x="188.2" y="291.0" width="11.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.2" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (150 samples, 0.37%)</title><rect x="188.2" y="275.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="191.2" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (150 samples, 0.37%)</title><rect x="188.2" y="259.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.2" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (150 samples, 0.37%)</title><rect x="188.2" y="243.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="191.2" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (150 samples, 0.37%)</title><rect x="188.2" y="227.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.2" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (150 samples, 0.37%)</title><rect x="188.2" y="211.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.2" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$116/526397265.compare (150 samples, 0.37%)</title><rect x="188.2" y="195.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="191.2" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (150 samples, 0.37%)</title><rect x="188.2" y="179.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="191.2" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (150 samples, 0.37%)</title><rect x="188.2" y="163.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="191.2" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (150 samples, 0.37%)</title><rect x="188.2" y="147.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="191.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$114/2068568520.apply (150 samples, 0.37%)</title><rect x="188.2" y="131.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (150 samples, 0.37%)</title><rect x="188.2" y="115.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.2" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (150 samples, 0.37%)</title><rect x="188.2" y="99.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.2" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (150 samples, 0.37%)</title><rect x="188.2" y="83.0" width="4.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="191.2" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (231 samples, 0.57%)</title><rect x="192.5" y="275.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="195.5" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (231 samples, 0.57%)</title><rect x="192.5" y="259.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.5" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (231 samples, 0.57%)</title><rect x="192.5" y="243.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.5" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (231 samples, 0.57%)</title><rect x="192.5" y="227.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (231 samples, 0.57%)</title><rect x="192.5" y="211.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.5" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (231 samples, 0.57%)</title><rect x="192.5" y="195.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.5" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (137 samples, 0.34%)</title><rect x="192.5" y="179.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (137 samples, 0.34%)</title><rect x="192.5" y="163.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (137 samples, 0.34%)</title><rect x="192.5" y="147.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (137 samples, 0.34%)</title><rect x="192.5" y="131.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.5" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (52 samples, 0.13%)</title><rect x="192.5" y="115.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.5" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (29 samples, 0.07%)</title><rect x="192.5" y="99.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="195.5" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (23 samples, 0.06%)</title><rect x="193.3" y="99.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="196.3" y="110.0"></text>
</g>
<g>
<title>byte[] (23 samples, 0.06%)</title><rect x="193.3" y="83.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="196.3" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (60 samples, 0.15%)</title><rect x="194.3" y="115.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.3" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (42 samples, 0.10%)</title><rect x="194.3" y="99.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.3" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (24 samples, 0.06%)</title><rect x="194.3" y="83.0" width="0.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="197.3" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (18 samples, 0.04%)</title><rect x="195.0" y="83.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.0" y="94.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.04%)</title><rect x="195.0" y="67.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="198.0" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (18 samples, 0.04%)</title><rect x="195.5" y="99.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.5" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (18 samples, 0.04%)</title><rect x="195.5" y="83.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="198.5" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (13 samples, 0.03%)</title><rect x="195.5" y="67.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="198.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (14 samples, 0.03%)</title><rect x="196.1" y="115.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="199.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (14 samples, 0.03%)</title><rect x="196.1" y="99.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.1" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (10 samples, 0.02%)</title><rect x="196.1" y="83.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="199.1" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$116/526397265.compare (94 samples, 0.23%)</title><rect x="196.5" y="179.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="199.5" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (94 samples, 0.23%)</title><rect x="196.5" y="163.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.5" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (94 samples, 0.23%)</title><rect x="196.5" y="147.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.5" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (94 samples, 0.23%)</title><rect x="196.5" y="131.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$114/2068568520.apply (94 samples, 0.23%)</title><rect x="196.5" y="115.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="199.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (94 samples, 0.23%)</title><rect x="196.5" y="99.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.5" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (94 samples, 0.23%)</title><rect x="196.5" y="83.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.5" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (94 samples, 0.23%)</title><rect x="196.5" y="67.0" width="2.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="199.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList (19,080 samples, 46.87%)</title><rect x="199.2" y="323.0" width="553.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.2" y="334.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList</text>
</g>
<g>
<title>java/lang/Iterable.forEach (19,071 samples, 46.85%)</title><rect x="199.2" y="307.0" width="552.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.2" y="318.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (12 samples, 0.03%)</title><rect x="199.2" y="291.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$123/207046367.accept (19,059 samples, 46.82%)</title><rect x="199.6" y="291.0" width="552.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.6" y="302.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$123/207046367.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$10 (19,059 samples, 46.82%)</title><rect x="199.6" y="275.0" width="552.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.6" y="286.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$10</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.iterator (19,059 samples, 46.82%)</title><rect x="199.6" y="259.0" width="552.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.6" y="270.0">ru/mail/polis/dao/zvladn7/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.SSTable$SSTableIter (131 samples, 0.32%)</title><rect x="199.6" y="243.0" width="3.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="202.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt; (18,928 samples, 46.50%)</title><rect x="203.3" y="243.0" width="548.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.3" y="254.0">ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getElementPosition (18,928 samples, 46.50%)</title><rect x="203.3" y="227.0" width="548.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.3" y="238.0">ru/mail/polis/dao/zvladn7/SSTable.getElementPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (18,928 samples, 46.50%)</title><rect x="203.3" y="211.0" width="548.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.3" y="222.0">ru/mail/polis/dao/zvladn7/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (13,431 samples, 32.99%)</title><rect x="203.3" y="195.0" width="389.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.3" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7,314 samples, 17.97%)</title><rect x="203.3" y="179.0" width="212.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="206.3" y="190.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6,117 samples, 15.03%)</title><rect x="415.4" y="179.0" width="177.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.4" y="190.0">java/nio/HeapByteBuffer..</text>
</g>
<g>
<title>byte[] (6,117 samples, 15.03%)</title><rect x="415.4" y="163.0" width="177.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="418.4" y="174.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (5,497 samples, 13.50%)</title><rect x="592.7" y="195.0" width="159.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.7" y="206.0">ru/mail/polis/dao/zv..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5,497 samples, 13.50%)</title><rect x="592.7" y="179.0" width="159.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="595.7" y="190.0">java/nio/ByteBuffer...</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,704 samples, 9.10%)</title><rect x="592.7" y="163.0" width="107.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="595.7" y="174.0">java.nio.Heap..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,793 samples, 4.40%)</title><rect x="700.1" y="163.0" width="51.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="703.1" y="174.0">java/..</text>
</g>
<g>
<title>byte[] (1,793 samples, 4.40%)</title><rect x="700.1" y="147.0" width="51.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="703.1" y="158.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (9 samples, 0.02%)</title><rect x="752.0" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="755.0" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (9 samples, 0.02%)</title><rect x="752.0" y="291.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="755.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$123/207046367.get$Lambda (9 samples, 0.02%)</title><rect x="752.0" y="275.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="755.0" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$123 (9 samples, 0.02%)</title><rect x="752.0" y="259.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="755.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.iterator (58 samples, 0.14%)</title><rect x="752.3" y="339.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="755.3" y="350.0"></text>
</g>
<g>
<title>java/util/Collection.stream (20 samples, 0.05%)</title><rect x="752.3" y="323.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="755.3" y="334.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (17 samples, 0.04%)</title><rect x="752.4" y="307.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="755.4" y="318.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (17 samples, 0.04%)</title><rect x="752.4" y="291.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="755.4" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (20 samples, 0.05%)</title><rect x="753.0" y="323.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="756.0" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (13 samples, 0.03%)</title><rect x="753.2" y="307.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="756.2" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (9 samples, 0.02%)</title><rect x="753.4" y="291.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="756.4" y="302.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (9 samples, 0.02%)</title><rect x="753.4" y="275.0" width="0.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="756.4" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (12 samples, 0.03%)</title><rect x="753.6" y="323.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.6" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (12 samples, 0.03%)</title><rect x="753.6" y="307.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="756.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.wrapString (122 samples, 0.30%)</title><rect x="754.1" y="371.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="757.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.02%)</title><rect x="754.1" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="757.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.02%)</title><rect x="754.1" y="339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="757.1" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (10 samples, 0.02%)</title><rect x="754.1" y="323.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="757.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.toBytes (112 samples, 0.28%)</title><rect x="754.4" y="355.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="757.4" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (112 samples, 0.28%)</title><rect x="754.4" y="339.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="757.4" y="350.0"></text>
</g>
<g>
<title>byte[] (112 samples, 0.28%)</title><rect x="754.4" y="323.0" width="3.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="757.4" y="334.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (14,915 samples, 36.64%)</title><rect x="757.6" y="515.0" width="432.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="760.6" y="526.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,083 samples, 2.66%)</title><rect x="757.6" y="499.0" width="31.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="760.6" y="510.0">on..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,083 samples, 2.66%)</title><rect x="757.6" y="483.0" width="31.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="760.6" y="494.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.process (13,832 samples, 33.98%)</title><rect x="789.0" y="499.0" width="401.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="792.0" y="510.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (13,832 samples, 33.98%)</title><rect x="789.0" y="483.0" width="401.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="792.0" y="494.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (13,832 samples, 33.98%)</title><rect x="789.0" y="467.0" width="401.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="792.0" y="478.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3,395 samples, 8.34%)</title><rect x="789.0" y="451.0" width="98.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="792.0" y="462.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3,395 samples, 8.34%)</title><rect x="789.0" y="435.0" width="98.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="792.0" y="446.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (1,718 samples, 4.22%)</title><rect x="789.0" y="419.0" width="49.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="792.0" y="430.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (532 samples, 1.31%)</title><rect x="789.0" y="403.0" width="15.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="792.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (532 samples, 1.31%)</title><rect x="789.0" y="387.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="792.0" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (532 samples, 1.31%)</title><rect x="789.0" y="371.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="792.0" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (532 samples, 1.31%)</title><rect x="789.0" y="355.0" width="15.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="792.0" y="366.0"></text>
</g>
<g>
<title>java.lang.String (343 samples, 0.84%)</title><rect x="789.0" y="339.0" width="10.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="792.0" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (189 samples, 0.46%)</title><rect x="799.0" y="339.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.0" y="350.0"></text>
</g>
<g>
<title>byte[] (189 samples, 0.46%)</title><rect x="799.0" y="323.0" width="5.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="802.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.get (1,186 samples, 2.91%)</title><rect x="804.5" y="403.0" width="34.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="807.5" y="414.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,095 samples, 2.69%)</title><rect x="804.5" y="387.0" width="31.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="807.5" y="398.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,095 samples, 2.69%)</title><rect x="804.5" y="371.0" width="31.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="807.5" y="382.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$117/903716948.get$Lambda (1,095 samples, 2.69%)</title><rect x="804.5" y="355.0" width="31.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="807.5" y="366.0">ru..</text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$117 (1,095 samples, 2.69%)</title><rect x="804.5" y="339.0" width="31.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="807.5" y="350.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.processRequest (91 samples, 0.22%)</title><rect x="836.2" y="387.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="839.2" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (72 samples, 0.18%)</title><rect x="836.2" y="371.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="839.2" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (72 samples, 0.18%)</title><rect x="836.2" y="355.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="839.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$98/1964456450.get$Lambda (72 samples, 0.18%)</title><rect x="836.2" y="339.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="839.2" y="350.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$98 (72 samples, 0.18%)</title><rect x="836.2" y="323.0" width="2.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="839.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (19 samples, 0.05%)</title><rect x="838.3" y="371.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="841.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (19 samples, 0.05%)</title><rect x="838.3" y="355.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="841.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (19 samples, 0.05%)</title><rect x="838.3" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (19 samples, 0.05%)</title><rect x="838.3" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="841.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (19 samples, 0.05%)</title><rect x="838.3" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.3" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (19 samples, 0.05%)</title><rect x="838.3" y="291.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="841.3" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,677 samples, 4.12%)</title><rect x="838.8" y="419.0" width="48.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="841.8" y="430.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (1,677 samples, 4.12%)</title><rect x="838.8" y="403.0" width="48.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="841.8" y="414.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,677 samples, 4.12%)</title><rect x="838.8" y="387.0" width="48.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="841.8" y="398.0">java..</text>
</g>
<g>
<title>java.lang.String (861 samples, 2.12%)</title><rect x="838.8" y="371.0" width="25.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="841.8" y="382.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (816 samples, 2.00%)</title><rect x="863.8" y="371.0" width="23.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="866.8" y="382.0">j..</text>
</g>
<g>
<title>byte[] (816 samples, 2.00%)</title><rect x="863.8" y="355.0" width="23.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="866.8" y="366.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6,316 samples, 15.52%)</title><rect x="887.5" y="451.0" width="183.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="890.5" y="462.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one.nio.http.Request (997 samples, 2.45%)</title><rect x="887.5" y="435.0" width="28.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="890.5" y="446.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,373 samples, 3.37%)</title><rect x="916.4" y="435.0" width="39.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="919.4" y="446.0">one..</text>
</g>
<g>
<title>java.lang.String[] (1,046 samples, 2.57%)</title><rect x="916.4" y="419.0" width="30.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="919.4" y="430.0">ja..</text>
</g>
<g>
<title>java.lang.String[] (327 samples, 0.80%)</title><rect x="946.7" y="419.0" width="9.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="949.7" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,946 samples, 9.69%)</title><rect x="956.2" y="435.0" width="114.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="959.2" y="446.0">one/nio/util/U..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,946 samples, 9.69%)</title><rect x="956.2" y="419.0" width="114.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="959.2" y="430.0">one/nio/util/U..</text>
</g>
<g>
<title>char[] (1,767 samples, 4.34%)</title><rect x="956.2" y="403.0" width="51.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="959.2" y="414.0">char[]</text>
</g>
<g>
<title>char[] (697 samples, 1.71%)</title><rect x="1007.4" y="403.0" width="20.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1010.4" y="414.0"></text>
</g>
<g>
<title>java.lang.String (101 samples, 0.25%)</title><rect x="1027.6" y="403.0" width="2.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1030.6" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,381 samples, 3.39%)</title><rect x="1030.5" y="403.0" width="40.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1033.5" y="414.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,381 samples, 3.39%)</title><rect x="1030.5" y="387.0" width="40.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1033.5" y="398.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,381 samples, 3.39%)</title><rect x="1030.5" y="371.0" width="40.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1033.5" y="382.0">jav..</text>
</g>
<g>
<title>byte[] (1,381 samples, 3.39%)</title><rect x="1030.5" y="355.0" width="40.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1033.5" y="366.0">byt..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,121 samples, 10.12%)</title><rect x="1070.5" y="451.0" width="119.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1073.5" y="462.0">one/nio/util/Ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,121 samples, 10.12%)</title><rect x="1070.5" y="435.0" width="119.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1073.5" y="446.0">one/nio/util/Ut..</text>
</g>
<g>
<title>char[] (696 samples, 1.71%)</title><rect x="1070.5" y="419.0" width="20.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1073.5" y="430.0"></text>
</g>
<g>
<title>char[] (271 samples, 0.67%)</title><rect x="1090.7" y="419.0" width="7.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1093.7" y="430.0"></text>
</g>
<g>
<title>java.lang.String (1,357 samples, 3.33%)</title><rect x="1098.6" y="419.0" width="39.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1101.6" y="430.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,797 samples, 4.41%)</title><rect x="1137.9" y="419.0" width="52.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1140.9" y="430.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,797 samples, 4.41%)</title><rect x="1137.9" y="403.0" width="52.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1140.9" y="414.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,797 samples, 4.41%)</title><rect x="1137.9" y="387.0" width="52.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1140.9" y="398.0">java/..</text>
</g>
<g>
<title>byte[] (1,797 samples, 4.41%)</title><rect x="1137.9" y="371.0" width="52.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1140.9" y="382.0">byte[]</text>
</g>
</g>
</svg>
