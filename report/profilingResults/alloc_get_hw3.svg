<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="549"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="549"> </text>
<g id="frames">
<g>
<title>all (67,527 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.0" y="526.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (52,363 samples, 77.54%)</title><rect x="10.0" y="499.0" width="915.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="510.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (52,363 samples, 77.54%)</title><rect x="10.0" y="483.0" width="915.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="494.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (52,363 samples, 77.54%)</title><rect x="10.0" y="467.0" width="915.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="478.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (30 samples, 0.04%)</title><rect x="10.0" y="451.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (30 samples, 0.04%)</title><rect x="10.0" y="435.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (30 samples, 0.04%)</title><rect x="10.0" y="419.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (30 samples, 0.04%)</title><rect x="10.0" y="403.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (30 samples, 0.04%)</title><rect x="10.0" y="387.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$98/1861781073.run (52,333 samples, 77.50%)</title><rect x="10.5" y="451.0" width="914.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.5" y="462.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$98/1861781073.run</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$1 (52,333 samples, 77.50%)</title><rect x="10.5" y="435.0" width="914.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.5" y="446.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$processRequest$1</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.process (52,333 samples, 77.50%)</title><rect x="10.5" y="419.0" width="914.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.5" y="430.0">ru/mail/polis/service/zvladn7/AsyncService.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$119/1411889274.process (52,333 samples, 77.50%)</title><rect x="10.5" y="403.0" width="914.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.5" y="414.0">ru/mail/polis/service/zvladn7/AsyncService$$Lambda$119/1411889274.process</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.lambda$get$4 (52,333 samples, 77.50%)</title><rect x="10.5" y="387.0" width="914.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.5" y="398.0">ru/mail/polis/service/zvladn7/AsyncService.lambda$get$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (114 samples, 0.17%)</title><rect x="10.7" y="371.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (114 samples, 0.17%)</title><rect x="10.7" y="355.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (87 samples, 0.13%)</title><rect x="10.7" y="339.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (87 samples, 0.13%)</title><rect x="10.7" y="323.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.7" y="334.0"></text>
</g>
<g>
<title>byte[] (87 samples, 0.13%)</title><rect x="10.7" y="307.0" width="1.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="13.7" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (27 samples, 0.04%)</title><rect x="12.2" y="339.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.2" y="350.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (27 samples, 0.04%)</title><rect x="12.2" y="323.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="15.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (176 samples, 0.26%)</title><rect x="12.7" y="371.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.7" y="382.0"></text>
</g>
<g>
<title>one.nio.http.Response (110 samples, 0.16%)</title><rect x="12.7" y="355.0" width="1.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="15.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (66 samples, 0.10%)</title><rect x="14.6" y="355.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.6" y="366.0"></text>
</g>
<g>
<title>byte[] (28 samples, 0.04%)</title><rect x="14.6" y="339.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="17.6" y="350.0"></text>
</g>
<g>
<title>java.lang.String[] (21 samples, 0.03%)</title><rect x="15.1" y="339.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="18.1" y="350.0"></text>
</g>
<g>
<title>java.lang.String (17 samples, 0.03%)</title><rect x="15.5" y="339.0" width="0.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="18.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (51,811 samples, 76.73%)</title><rect x="15.7" y="371.0" width="905.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.7" y="382.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (2,686 samples, 3.98%)</title><rect x="15.7" y="355.0" width="47.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.7" y="366.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2,686 samples, 3.98%)</title><rect x="15.7" y="339.0" width="47.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.7" y="350.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2,686 samples, 3.98%)</title><rect x="15.7" y="323.0" width="47.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.7" y="334.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (2,686 samples, 3.98%)</title><rect x="15.7" y="307.0" width="47.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.7" y="318.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2,686 samples, 3.98%)</title><rect x="15.7" y="291.0" width="47.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.7" y="302.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,560 samples, 3.79%)</title><rect x="15.7" y="275.0" width="44.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.7" y="286.0">com/..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1,114 samples, 1.65%)</title><rect x="15.7" y="259.0" width="19.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.7" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1,114 samples, 1.65%)</title><rect x="15.7" y="243.0" width="19.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.7" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1,114 samples, 1.65%)</title><rect x="15.7" y="227.0" width="19.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.7" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,114 samples, 1.65%)</title><rect x="15.7" y="211.0" width="19.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.7" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,114 samples, 1.65%)</title><rect x="15.7" y="195.0" width="19.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.7" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$118/905690591.compare (1,114 samples, 1.65%)</title><rect x="15.7" y="179.0" width="19.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.7" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,114 samples, 1.65%)</title><rect x="15.7" y="163.0" width="19.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.7" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (1,114 samples, 1.65%)</title><rect x="15.7" y="147.0" width="19.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.7" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,114 samples, 1.65%)</title><rect x="15.7" y="131.0" width="19.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$116/492989515.apply (1,114 samples, 1.65%)</title><rect x="15.7" y="115.0" width="19.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (1,114 samples, 1.65%)</title><rect x="15.7" y="99.0" width="19.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.7" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,114 samples, 1.65%)</title><rect x="15.7" y="83.0" width="19.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.7" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,114 samples, 1.65%)</title><rect x="15.7" y="67.0" width="19.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="18.7" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,446 samples, 2.14%)</title><rect x="35.2" y="259.0" width="25.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.2" y="270.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,446 samples, 2.14%)</title><rect x="35.2" y="243.0" width="25.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.2" y="254.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,446 samples, 2.14%)</title><rect x="35.2" y="227.0" width="25.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="38.2" y="238.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,446 samples, 2.14%)</title><rect x="35.2" y="211.0" width="25.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.2" y="222.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,446 samples, 2.14%)</title><rect x="35.2" y="195.0" width="25.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.2" y="206.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,446 samples, 2.14%)</title><rect x="35.2" y="179.0" width="25.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="38.2" y="190.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (869 samples, 1.29%)</title><rect x="35.2" y="163.0" width="15.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (869 samples, 1.29%)</title><rect x="35.2" y="147.0" width="15.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="38.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (869 samples, 1.29%)</title><rect x="35.2" y="131.0" width="15.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (869 samples, 1.29%)</title><rect x="35.2" y="115.0" width="15.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.2" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (342 samples, 0.51%)</title><rect x="35.2" y="99.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.2" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (227 samples, 0.34%)</title><rect x="35.2" y="83.0" width="4.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="38.2" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (115 samples, 0.17%)</title><rect x="39.2" y="83.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.2" y="94.0"></text>
</g>
<g>
<title>byte[] (115 samples, 0.17%)</title><rect x="39.2" y="67.0" width="2.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="42.2" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (39 samples, 0.06%)</title><rect x="41.2" y="99.0" width="0.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="44.2" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (29 samples, 0.04%)</title><rect x="41.9" y="99.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="44.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (335 samples, 0.50%)</title><rect x="42.4" y="99.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.4" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (228 samples, 0.34%)</title><rect x="42.4" y="83.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (156 samples, 0.23%)</title><rect x="42.4" y="67.0" width="2.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="45.4" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (72 samples, 0.11%)</title><rect x="45.1" y="67.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.1" y="78.0"></text>
</g>
<g>
<title>byte[] (72 samples, 0.11%)</title><rect x="45.1" y="51.0" width="1.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="48.1" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (107 samples, 0.16%)</title><rect x="46.4" y="83.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.4" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (107 samples, 0.16%)</title><rect x="46.4" y="67.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="49.4" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (68 samples, 0.10%)</title><rect x="46.4" y="51.0" width="1.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="49.4" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (39 samples, 0.06%)</title><rect x="47.6" y="51.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.6" y="62.0"></text>
</g>
<g>
<title>byte[] (39 samples, 0.06%)</title><rect x="47.6" y="35.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="50.6" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (124 samples, 0.18%)</title><rect x="48.2" y="99.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.2" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (124 samples, 0.18%)</title><rect x="48.2" y="83.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (89 samples, 0.13%)</title><rect x="48.2" y="67.0" width="1.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="51.2" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (35 samples, 0.05%)</title><rect x="49.8" y="67.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="52.8" y="78.0"></text>
</g>
<g>
<title>byte[] (35 samples, 0.05%)</title><rect x="49.8" y="51.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="52.8" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$118/905690591.compare (577 samples, 0.85%)</title><rect x="50.4" y="163.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.4" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (577 samples, 0.85%)</title><rect x="50.4" y="147.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (577 samples, 0.85%)</title><rect x="50.4" y="131.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.4" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (577 samples, 0.85%)</title><rect x="50.4" y="115.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="53.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$116/492989515.apply (577 samples, 0.85%)</title><rect x="50.4" y="99.0" width="10.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (577 samples, 0.85%)</title><rect x="50.4" y="83.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.4" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (577 samples, 0.85%)</title><rect x="50.4" y="67.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.4" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (577 samples, 0.85%)</title><rect x="50.4" y="51.0" width="10.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="53.4" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$134/1133525396.apply (126 samples, 0.19%)</title><rect x="60.5" y="275.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (126 samples, 0.19%)</title><rect x="60.5" y="259.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.5" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (126 samples, 0.19%)</title><rect x="60.5" y="243.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.5" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (126 samples, 0.19%)</title><rect x="60.5" y="227.0" width="2.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="63.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (59 samples, 0.09%)</title><rect x="62.7" y="355.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.7" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (59 samples, 0.09%)</title><rect x="62.7" y="339.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$147/792220664.apply (59 samples, 0.09%)</title><rect x="62.7" y="323.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$iterator$4 (59 samples, 0.09%)</title><rect x="62.7" y="307.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (26 samples, 0.04%)</title><rect x="62.9" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="65.9" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (26 samples, 0.04%)</title><rect x="62.9" y="275.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.9" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (26 samples, 0.04%)</title><rect x="62.9" y="259.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="65.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Value.getData (21 samples, 0.03%)</title><rect x="63.3" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.3" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (21 samples, 0.03%)</title><rect x="63.3" y="275.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.3" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (21 samples, 0.03%)</title><rect x="63.3" y="259.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="66.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (24 samples, 0.04%)</title><rect x="63.7" y="355.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.7" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (24 samples, 0.04%)</title><rect x="63.7" y="339.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="66.7" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (24 samples, 0.04%)</title><rect x="63.7" y="323.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.7" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.04%)</title><rect x="63.7" y="307.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="66.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (20 samples, 0.03%)</title><rect x="64.1" y="355.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (20 samples, 0.03%)</title><rect x="64.1" y="339.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (20 samples, 0.03%)</title><rect x="64.1" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="67.1" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (20 samples, 0.03%)</title><rect x="64.1" y="307.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="67.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator (49,022 samples, 72.60%)</title><rect x="64.5" y="355.0" width="856.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="67.5" y="366.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.iterator</text>
</g>
<g>
<title>java/lang/Iterable.forEach (16 samples, 0.02%)</title><rect x="65.1" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (16 samples, 0.02%)</title><rect x="65.1" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (16 samples, 0.02%)</title><rect x="65.1" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.1" y="318.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (16 samples, 0.02%)</title><rect x="65.1" y="291.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="68.1" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (62 samples, 0.09%)</title><rect x="65.5" y="339.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.5" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (62 samples, 0.09%)</title><rect x="65.5" y="323.0" width="1.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="68.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator (48,771 samples, 72.22%)</title><rect x="66.6" y="339.0" width="852.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.6" y="350.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.freshCellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (14,275 samples, 21.14%)</title><rect x="66.6" y="323.0" width="249.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.6" y="334.0">com/google/common/collect/Iterato..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (14,265 samples, 21.12%)</title><rect x="66.8" y="307.0" width="249.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.8" y="318.0">com/google/common/collect/Iterato..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (378 samples, 0.56%)</title><rect x="67.0" y="291.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.0" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (378 samples, 0.56%)</title><rect x="67.0" y="275.0" width="6.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="70.0" y="286.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (21 samples, 0.03%)</title><rect x="73.6" y="291.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="76.6" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (13,747 samples, 20.36%)</title><rect x="74.2" y="291.0" width="240.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.2" y="302.0">java/util/PriorityQueue.add</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (13,747 samples, 20.36%)</title><rect x="74.2" y="275.0" width="240.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.2" y="286.0">java/util/PriorityQueue.offer</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (278 samples, 0.41%)</title><rect x="74.2" y="259.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="77.2" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (278 samples, 0.41%)</title><rect x="74.2" y="243.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.2" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (278 samples, 0.41%)</title><rect x="74.2" y="227.0" width="4.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="77.2" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (13,469 samples, 19.95%)</title><rect x="79.1" y="259.0" width="235.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.1" y="270.0">java/util/PriorityQueue.siftUp</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (13,469 samples, 19.95%)</title><rect x="79.1" y="243.0" width="235.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.1" y="254.0">java/util/PriorityQueue.siftUpU..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13,469 samples, 19.95%)</title><rect x="79.1" y="227.0" width="235.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.1" y="238.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13,469 samples, 19.95%)</title><rect x="79.1" y="211.0" width="235.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.1" y="222.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (9,479 samples, 14.04%)</title><rect x="79.1" y="195.0" width="165.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="82.1" y="206.0">com/google/common/col..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (9,479 samples, 14.04%)</title><rect x="79.1" y="179.0" width="165.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.1" y="190.0">ru/mail/polis/dao/zvl..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (9,479 samples, 14.04%)</title><rect x="79.1" y="163.0" width="165.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.1" y="174.0">ru/mail/polis/dao/zvl..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (9,479 samples, 14.04%)</title><rect x="79.1" y="147.0" width="165.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="82.1" y="158.0">ru/mail/polis/dao/zvl..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3,811 samples, 5.64%)</title><rect x="79.1" y="131.0" width="66.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.1" y="142.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,228 samples, 3.30%)</title><rect x="79.1" y="115.0" width="38.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="82.1" y="126.0">jav..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,583 samples, 2.34%)</title><rect x="118.0" y="115.0" width="27.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="121.0" y="126.0">j..</text>
</g>
<g>
<title>byte[] (1,583 samples, 2.34%)</title><rect x="118.0" y="99.0" width="27.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="121.0" y="110.0">b..</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Cell (355 samples, 0.53%)</title><rect x="145.7" y="131.0" width="6.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="148.7" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.Value (398 samples, 0.59%)</title><rect x="151.9" y="131.0" width="6.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="154.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (3,821 samples, 5.66%)</title><rect x="158.8" y="131.0" width="66.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="161.8" y="142.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,715 samples, 4.02%)</title><rect x="158.8" y="115.0" width="47.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.8" y="126.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,559 samples, 2.31%)</title><rect x="158.8" y="99.0" width="27.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="161.8" y="110.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,156 samples, 1.71%)</title><rect x="186.1" y="99.0" width="20.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.1" y="110.0"></text>
</g>
<g>
<title>byte[] (1,156 samples, 1.71%)</title><rect x="186.1" y="83.0" width="20.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="189.1" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (1,106 samples, 1.64%)</title><rect x="206.3" y="115.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="209.3" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,106 samples, 1.64%)</title><rect x="206.3" y="99.0" width="19.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.3" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (712 samples, 1.05%)</title><rect x="206.3" y="83.0" width="12.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="209.3" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (394 samples, 0.58%)</title><rect x="218.7" y="83.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.7" y="94.0"></text>
</g>
<g>
<title>byte[] (394 samples, 0.58%)</title><rect x="218.7" y="67.0" width="6.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="221.7" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (1,094 samples, 1.62%)</title><rect x="225.6" y="131.0" width="19.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.6" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,094 samples, 1.62%)</title><rect x="225.6" y="115.0" width="19.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.6" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (709 samples, 1.05%)</title><rect x="225.6" y="99.0" width="12.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="228.6" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (385 samples, 0.57%)</title><rect x="238.0" y="99.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.0" y="110.0"></text>
</g>
<g>
<title>byte[] (385 samples, 0.57%)</title><rect x="238.0" y="83.0" width="6.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="241.0" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$118/905690591.compare (3,990 samples, 5.91%)</title><rect x="244.7" y="195.0" width="69.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.7" y="206.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3,990 samples, 5.91%)</title><rect x="244.7" y="179.0" width="69.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.7" y="190.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (3,990 samples, 5.91%)</title><rect x="244.7" y="163.0" width="69.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.7" y="174.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3,990 samples, 5.91%)</title><rect x="244.7" y="147.0" width="69.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.7" y="158.0">java/ut..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$116/492989515.apply (3,990 samples, 5.91%)</title><rect x="244.7" y="131.0" width="69.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.7" y="142.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (3,990 samples, 5.91%)</title><rect x="244.7" y="115.0" width="69.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.7" y="126.0">ru/mail..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3,990 samples, 5.91%)</title><rect x="244.7" y="99.0" width="69.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.7" y="110.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3,990 samples, 5.91%)</title><rect x="244.7" y="83.0" width="69.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="247.7" y="94.0">java.ni..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (93 samples, 0.14%)</title><rect x="314.4" y="291.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="317.4" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (93 samples, 0.14%)</title><rect x="314.4" y="275.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="317.4" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (93 samples, 0.14%)</title><rect x="314.4" y="259.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="317.4" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (83 samples, 0.12%)</title><rect x="314.6" y="243.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.6" y="254.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (25 samples, 0.04%)</title><rect x="314.6" y="227.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="317.6" y="238.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (33 samples, 0.05%)</title><rect x="315.5" y="227.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.5" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (33 samples, 0.05%)</title><rect x="315.5" y="211.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="318.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (835 samples, 1.24%)</title><rect x="316.1" y="323.0" width="14.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (822 samples, 1.22%)</title><rect x="316.3" y="307.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.3" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (822 samples, 1.22%)</title><rect x="316.3" y="291.0" width="14.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.3" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (380 samples, 0.56%)</title><rect x="316.3" y="275.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.3" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (380 samples, 0.56%)</title><rect x="316.3" y="259.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.3" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (380 samples, 0.56%)</title><rect x="316.3" y="243.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.3" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (380 samples, 0.56%)</title><rect x="316.3" y="227.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.3" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (380 samples, 0.56%)</title><rect x="316.3" y="211.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.3" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$118/905690591.compare (380 samples, 0.56%)</title><rect x="316.3" y="195.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.3" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (380 samples, 0.56%)</title><rect x="316.3" y="179.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.3" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (380 samples, 0.56%)</title><rect x="316.3" y="163.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.3" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (380 samples, 0.56%)</title><rect x="316.3" y="147.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$116/492989515.apply (380 samples, 0.56%)</title><rect x="316.3" y="131.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (380 samples, 0.56%)</title><rect x="316.3" y="115.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.3" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (380 samples, 0.56%)</title><rect x="316.3" y="99.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.3" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (380 samples, 0.56%)</title><rect x="316.3" y="83.0" width="6.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="319.3" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (442 samples, 0.65%)</title><rect x="322.9" y="275.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.9" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (442 samples, 0.65%)</title><rect x="322.9" y="259.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.9" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (442 samples, 0.65%)</title><rect x="322.9" y="243.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.9" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (442 samples, 0.65%)</title><rect x="322.9" y="227.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.9" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (442 samples, 0.65%)</title><rect x="322.9" y="211.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.9" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (442 samples, 0.65%)</title><rect x="322.9" y="195.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.9" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (256 samples, 0.38%)</title><rect x="322.9" y="179.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (256 samples, 0.38%)</title><rect x="322.9" y="163.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.next (256 samples, 0.38%)</title><rect x="322.9" y="147.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.get (256 samples, 0.38%)</title><rect x="322.9" y="131.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.9" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (105 samples, 0.16%)</title><rect x="322.9" y="115.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.9" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (69 samples, 0.10%)</title><rect x="322.9" y="99.0" width="1.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="325.9" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (36 samples, 0.05%)</title><rect x="324.1" y="99.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.1" y="110.0"></text>
</g>
<g>
<title>byte[] (36 samples, 0.05%)</title><rect x="324.1" y="83.0" width="0.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="327.1" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (109 samples, 0.16%)</title><rect x="325.1" y="115.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (74 samples, 0.11%)</title><rect x="325.1" y="99.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="328.1" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (48 samples, 0.07%)</title><rect x="325.1" y="83.0" width="0.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="328.1" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (26 samples, 0.04%)</title><rect x="325.9" y="83.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.9" y="94.0"></text>
</g>
<g>
<title>byte[] (26 samples, 0.04%)</title><rect x="325.9" y="67.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="328.9" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (35 samples, 0.05%)</title><rect x="326.4" y="99.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="329.4" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (35 samples, 0.05%)</title><rect x="326.4" y="83.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="329.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (28 samples, 0.04%)</title><rect x="326.4" y="67.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="329.4" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (25 samples, 0.04%)</title><rect x="327.0" y="115.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="330.0" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (25 samples, 0.04%)</title><rect x="327.0" y="99.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="330.0" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (20 samples, 0.03%)</title><rect x="327.0" y="83.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="330.0" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$118/905690591.compare (186 samples, 0.28%)</title><rect x="327.4" y="179.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="330.4" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (186 samples, 0.28%)</title><rect x="327.4" y="163.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.4" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$42/1408652377.compare (186 samples, 0.28%)</title><rect x="327.4" y="147.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="330.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (186 samples, 0.28%)</title><rect x="327.4" y="131.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="330.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell$$Lambda$116/492989515.apply (186 samples, 0.28%)</title><rect x="327.4" y="115.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="330.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/Cell.getKey (186 samples, 0.28%)</title><rect x="327.4" y="99.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="330.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (186 samples, 0.28%)</title><rect x="327.4" y="83.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="330.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (186 samples, 0.28%)</title><rect x="327.4" y="67.0" width="3.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="330.4" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList (33,661 samples, 49.85%)</title><rect x="330.7" y="323.0" width="588.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.7" y="334.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.getAllCellItersList</text>
</g>
<g>
<title>java/lang/Iterable.forEach (33,646 samples, 49.83%)</title><rect x="330.7" y="307.0" width="587.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.7" y="318.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (31 samples, 0.05%)</title><rect x="330.7" y="291.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.7" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (19 samples, 0.03%)</title><rect x="330.9" y="275.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.9" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (19 samples, 0.03%)</title><rect x="330.9" y="259.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="333.9" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (19 samples, 0.03%)</title><rect x="330.9" y="243.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="333.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$128/327364468.accept (33,615 samples, 49.78%)</title><rect x="331.2" y="291.0" width="587.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.2" y="302.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$128/327364468.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$10 (33,615 samples, 49.78%)</title><rect x="331.2" y="275.0" width="587.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.2" y="286.0">ru/mail/polis/dao/zvladn7/LsmDAOImpl.lambda$getAllCellItersList$10</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.iterator (33,615 samples, 49.78%)</title><rect x="331.2" y="259.0" width="587.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="334.2" y="270.0">ru/mail/polis/dao/zvladn7/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.SSTable$SSTableIter (385 samples, 0.57%)</title><rect x="331.2" y="243.0" width="6.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="334.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt; (33,230 samples, 49.21%)</title><rect x="337.9" y="243.0" width="580.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="340.9" y="254.0">ru/mail/polis/dao/zvladn7/SSTable$SSTableIter.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getElementPosition (33,230 samples, 49.21%)</title><rect x="337.9" y="227.0" width="580.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="340.9" y="238.0">ru/mail/polis/dao/zvladn7/SSTable.getElementPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getKey (33,230 samples, 49.21%)</title><rect x="337.9" y="211.0" width="580.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.9" y="222.0">ru/mail/polis/dao/zvladn7/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (27,604 samples, 40.88%)</title><rect x="337.9" y="195.0" width="482.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.9" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11,243 samples, 16.65%)</title><rect x="337.9" y="179.0" width="196.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="340.9" y="190.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (16,361 samples, 24.23%)</title><rect x="534.4" y="179.0" width="285.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.4" y="190.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (16,361 samples, 24.23%)</title><rect x="534.4" y="163.0" width="285.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="537.4" y="174.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/SSTable.getOffset (5,626 samples, 8.33%)</title><rect x="820.3" y="195.0" width="98.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="823.3" y="206.0">ru/mail/poli..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5,626 samples, 8.33%)</title><rect x="820.3" y="179.0" width="98.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="823.3" y="190.0">java/nio/Byt..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5,626 samples, 8.33%)</title><rect x="820.3" y="163.0" width="98.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="823.3" y="174.0">java/nio/Hea..</text>
</g>
<g>
<title>byte[] (5,626 samples, 8.33%)</title><rect x="820.3" y="147.0" width="98.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="823.3" y="158.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (15 samples, 0.02%)</title><rect x="918.6" y="307.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="921.6" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (15 samples, 0.02%)</title><rect x="918.6" y="291.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="921.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/LsmDAOImpl$$Lambda$128/327364468.get$Lambda (15 samples, 0.02%)</title><rect x="918.6" y="275.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="921.6" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.zvladn7.LsmDAOImpl$$Lambda$128 (15 samples, 0.02%)</title><rect x="918.6" y="259.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="921.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/zvladn7/MemoryTable.iterator (129 samples, 0.19%)</title><rect x="918.9" y="339.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="921.9" y="350.0"></text>
</g>
<g>
<title>java/util/Collection.stream (40 samples, 0.06%)</title><rect x="918.9" y="323.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="921.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (15 samples, 0.02%)</title><rect x="918.9" y="307.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="921.9" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (15 samples, 0.02%)</title><rect x="918.9" y="291.0" width="0.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="921.9" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (25 samples, 0.04%)</title><rect x="919.1" y="307.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="922.1" y="318.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (25 samples, 0.04%)</title><rect x="919.1" y="291.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="922.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (20 samples, 0.03%)</title><rect x="919.7" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="922.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (20 samples, 0.03%)</title><rect x="919.7" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (20 samples, 0.03%)</title><rect x="919.7" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="922.7" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (20 samples, 0.03%)</title><rect x="919.7" y="275.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="922.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (40 samples, 0.06%)</title><rect x="920.0" y="323.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="923.0" y="334.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (15 samples, 0.02%)</title><rect x="920.0" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="923.0" y="318.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (15 samples, 0.02%)</title><rect x="920.0" y="291.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="923.0" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (25 samples, 0.04%)</title><rect x="920.3" y="307.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="923.3" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (17 samples, 0.03%)</title><rect x="920.4" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="923.4" y="302.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (17 samples, 0.03%)</title><rect x="920.4" y="275.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="923.4" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (23 samples, 0.03%)</title><rect x="920.7" y="323.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="923.7" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (23 samples, 0.03%)</title><rect x="920.7" y="307.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="923.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.wrapString (205 samples, 0.30%)</title><rect x="921.4" y="371.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="924.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (37 samples, 0.05%)</title><rect x="921.4" y="355.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="924.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (37 samples, 0.05%)</title><rect x="921.4" y="339.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="924.4" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (37 samples, 0.05%)</title><rect x="921.4" y="323.0" width="0.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="924.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.toBytes (168 samples, 0.25%)</title><rect x="922.1" y="355.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="925.1" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.toBytes (168 samples, 0.25%)</title><rect x="922.1" y="339.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="925.1" y="350.0"></text>
</g>
<g>
<title>byte[] (168 samples, 0.25%)</title><rect x="922.1" y="323.0" width="2.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="925.1" y="334.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (15,164 samples, 22.46%)</title><rect x="925.0" y="499.0" width="265.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="928.0" y="510.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,802 samples, 2.67%)</title><rect x="925.0" y="483.0" width="31.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="928.0" y="494.0">on..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,802 samples, 2.67%)</title><rect x="925.0" y="467.0" width="31.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="928.0" y="478.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.process (13,362 samples, 19.79%)</title><rect x="956.5" y="483.0" width="233.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="959.5" y="494.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (13,362 samples, 19.79%)</title><rect x="956.5" y="467.0" width="233.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="959.5" y="478.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (13,362 samples, 19.79%)</title><rect x="956.5" y="451.0" width="233.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="959.5" y="462.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3,667 samples, 5.43%)</title><rect x="956.5" y="435.0" width="64.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="959.5" y="446.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3,667 samples, 5.43%)</title><rect x="956.5" y="419.0" width="64.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="959.5" y="430.0">one/nio..</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (1,857 samples, 2.75%)</title><rect x="956.5" y="403.0" width="32.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="959.5" y="414.0">Re..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (498 samples, 0.74%)</title><rect x="956.5" y="387.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="959.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (498 samples, 0.74%)</title><rect x="956.5" y="371.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="959.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (498 samples, 0.74%)</title><rect x="956.5" y="355.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="959.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (498 samples, 0.74%)</title><rect x="956.5" y="339.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="959.5" y="350.0"></text>
</g>
<g>
<title>java.lang.String (236 samples, 0.35%)</title><rect x="956.5" y="323.0" width="4.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="959.5" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (262 samples, 0.39%)</title><rect x="960.6" y="323.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="963.6" y="334.0"></text>
</g>
<g>
<title>byte[] (262 samples, 0.39%)</title><rect x="960.6" y="307.0" width="4.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="963.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.get (1,359 samples, 2.01%)</title><rect x="965.2" y="387.0" width="23.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="968.2" y="398.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,264 samples, 1.87%)</title><rect x="965.2" y="371.0" width="22.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="968.2" y="382.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,264 samples, 1.87%)</title><rect x="965.2" y="355.0" width="22.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="968.2" y="366.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$119/1411889274.get$Lambda (1,264 samples, 1.87%)</title><rect x="965.2" y="339.0" width="22.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="968.2" y="350.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$119 (1,264 samples, 1.87%)</title><rect x="965.2" y="323.0" width="22.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="968.2" y="334.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService.processRequest (95 samples, 0.14%)</title><rect x="987.3" y="371.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="990.3" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (76 samples, 0.11%)</title><rect x="987.3" y="355.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="990.3" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (76 samples, 0.11%)</title><rect x="987.3" y="339.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="990.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/zvladn7/AsyncService$$Lambda$98/1861781073.get$Lambda (76 samples, 0.11%)</title><rect x="987.3" y="323.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="990.3" y="334.0"></text>
</g>
<g>
<title>ru.mail.polis.service.zvladn7.AsyncService$$Lambda$98 (76 samples, 0.11%)</title><rect x="987.3" y="307.0" width="1.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="990.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (19 samples, 0.03%)</title><rect x="988.6" y="355.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="991.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (19 samples, 0.03%)</title><rect x="988.6" y="339.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="991.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (19 samples, 0.03%)</title><rect x="988.6" y="323.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="991.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (19 samples, 0.03%)</title><rect x="988.6" y="307.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="991.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (19 samples, 0.03%)</title><rect x="988.6" y="291.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="991.6" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (19 samples, 0.03%)</title><rect x="988.6" y="275.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="991.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,810 samples, 2.68%)</title><rect x="989.0" y="403.0" width="31.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="992.0" y="414.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (1,810 samples, 2.68%)</title><rect x="989.0" y="387.0" width="31.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="992.0" y="398.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,810 samples, 2.68%)</title><rect x="989.0" y="371.0" width="31.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="992.0" y="382.0">ja..</text>
</g>
<g>
<title>java.lang.String (1,285 samples, 1.90%)</title><rect x="989.0" y="355.0" width="22.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="992.0" y="366.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (525 samples, 0.78%)</title><rect x="1011.4" y="355.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1014.4" y="366.0"></text>
</g>
<g>
<title>byte[] (525 samples, 0.78%)</title><rect x="1011.4" y="339.0" width="9.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1014.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7,325 samples, 10.85%)</title><rect x="1020.6" y="435.0" width="128.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1023.6" y="446.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one.nio.http.Request (1,178 samples, 1.74%)</title><rect x="1020.6" y="419.0" width="20.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1023.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,764 samples, 2.61%)</title><rect x="1041.2" y="419.0" width="30.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1044.2" y="430.0">on..</text>
</g>
<g>
<title>java.lang.String[] (1,530 samples, 2.27%)</title><rect x="1041.2" y="403.0" width="26.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1044.2" y="414.0">j..</text>
</g>
<g>
<title>java.lang.String[] (234 samples, 0.35%)</title><rect x="1067.9" y="403.0" width="4.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1070.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,383 samples, 6.49%)</title><rect x="1072.0" y="419.0" width="76.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1075.0" y="430.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,383 samples, 6.49%)</title><rect x="1072.0" y="403.0" width="76.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1075.0" y="414.0">one/nio/..</text>
</g>
<g>
<title>char[] (1,621 samples, 2.40%)</title><rect x="1072.0" y="387.0" width="28.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1075.0" y="398.0">ch..</text>
</g>
<g>
<title>char[] (1,011 samples, 1.50%)</title><rect x="1100.3" y="387.0" width="17.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1103.3" y="398.0"></text>
</g>
<g>
<title>java.lang.String (72 samples, 0.11%)</title><rect x="1118.0" y="387.0" width="1.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1121.0" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,679 samples, 2.49%)</title><rect x="1119.2" y="387.0" width="29.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1122.2" y="398.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,679 samples, 2.49%)</title><rect x="1119.2" y="371.0" width="29.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1122.2" y="382.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,679 samples, 2.49%)</title><rect x="1119.2" y="355.0" width="29.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1122.2" y="366.0">ja..</text>
</g>
<g>
<title>byte[] (1,679 samples, 2.49%)</title><rect x="1119.2" y="339.0" width="29.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1122.2" y="350.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,370 samples, 3.51%)</title><rect x="1148.6" y="435.0" width="41.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1151.6" y="446.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,370 samples, 3.51%)</title><rect x="1148.6" y="419.0" width="41.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1151.6" y="430.0">one..</text>
</g>
<g>
<title>char[] (609 samples, 0.90%)</title><rect x="1148.6" y="403.0" width="10.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1151.6" y="414.0"></text>
</g>
<g>
<title>char[] (36 samples, 0.05%)</title><rect x="1159.2" y="403.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1162.2" y="414.0"></text>
</g>
<g>
<title>java.lang.String (1,333 samples, 1.97%)</title><rect x="1159.9" y="403.0" width="23.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1162.9" y="414.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (392 samples, 0.58%)</title><rect x="1183.1" y="403.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1186.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (392 samples, 0.58%)</title><rect x="1183.1" y="387.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1186.1" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (392 samples, 0.58%)</title><rect x="1183.1" y="371.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1186.1" y="382.0"></text>
</g>
<g>
<title>byte[] (392 samples, 0.58%)</title><rect x="1183.1" y="355.0" width="6.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1186.1" y="366.0"></text>
</g>
</g>
</svg>
